using System;
using System.Runtime.InteropServices;
using CFNetwork;
using CoreAnimation;
using CoreData;
using CoreFoundation;
using CoreGraphics;
using CoreText;
using CoreVideo;
using Foundation;
using IOSurface;
using ImageIO;
using Metal;
using ObjCRuntime;
using OpenGLES;
using Security;
using UIKit;

namespace HCNetSDK
{
	[StructLayout (LayoutKind.Explicit)]
	public struct __darwin_mbstate_t
	{
		[FieldOffset (0)]
		public sbyte[] __mbstate8;

		[FieldOffset (0)]
		public long _mbstateL;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __darwin_pthread_handler_rec
	{
		public unsafe Action<void*>* __routine;

		public unsafe void* __arg;

		public unsafe __darwin_pthread_handler_rec* __next;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct pthread_attr_t
	{
		public nint __sig;

		public sbyte[] __opaque;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct pthread_cond_t
	{
		public nint __sig;

		public sbyte[] __opaque;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct pthread_condattr_t
	{
		public nint __sig;

		public sbyte[] __opaque;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct pthread_mutex_t
	{
		public nint __sig;

		public sbyte[] __opaque;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct pthread_mutexattr_t
	{
		public nint __sig;

		public sbyte[] __opaque;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct pthread_once_t
	{
		public nint __sig;

		public sbyte[] __opaque;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct pthread_rwlock_t
	{
		public nint __sig;

		public sbyte[] __opaque;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct pthread_rwlockattr_t
	{
		public nint __sig;

		public sbyte[] __opaque;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct _opaque_pthread_t
	{
		public nint __sig;

		public unsafe __darwin_pthread_handler_rec* __cleanup_stack;

		public sbyte[] __opaque;
	}

	static class CFunctions
	{
		// extern int renameat (int, const char *, int, const char *) __attribute__((availability(ios, introduced=8.0)));
		[iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int renameat (int, sbyte*, int, sbyte*);

		// extern int renamex_np (const char *, const char *, unsigned int) __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int renamex_np (sbyte*, sbyte*, uint);

		// extern int renameatx_np (int, const char *, int, const char *, unsigned int) __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int renameatx_np (int, sbyte*, int, sbyte*, uint);

		// extern void clearerr (FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void clearerr (FILE*);

		// extern int fclose (FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fclose (FILE*);

		// extern int feof (FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int feof (FILE*);

		// extern int ferror (FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int ferror (FILE*);

		// extern int fflush (FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fflush (FILE*);

		// extern int fgetc (FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fgetc (FILE*);

		// extern int fgetpos (FILE *__restrict, fpos_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fgetpos (FILE*, long*);

		// extern char * fgets (char *__restrict, int, FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* fgets (sbyte*, int, FILE*);

		// extern FILE * fopen (const char *, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe FILE* fopen (sbyte*, sbyte*);

		// extern FILE * fopen (const char *__restrict __filename, const char *__restrict __mode) asm("_fopen");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe FILE* fopen (sbyte* __filename, sbyte* __mode);

		// extern int fprintf (FILE *, const char *, ...) __attribute__((format(printf, 2, 3)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fprintf (FILE*, sbyte*, IntPtr varArgs);

		// extern int fprintf (FILE *__restrict, const char *__restrict, ...) __attribute__((format(printf, 2, 3)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fprintf (FILE*, sbyte*, IntPtr varArgs);

		// extern int fputc (int, FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fputc (int, FILE*);

		// extern int fputs (const char *__restrict, FILE *__restrict) asm("_fputs");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fputs (sbyte*, FILE*);

		// extern unsigned long fread (void *, unsigned long, unsigned long, FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint fread (void*, nuint, nuint, FILE*);

		// extern unsigned long fread (void *__restrict __ptr, size_t __size, size_t __nitems, FILE *__restrict __stream);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint fread (void* __ptr, nuint __size, nuint __nitems, FILE* __stream);

		// extern FILE * freopen (const char *__restrict, const char *__restrict, FILE *__restrict) asm("_freopen");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe FILE* freopen (sbyte*, sbyte*, FILE*);

		// extern int fscanf (FILE *__restrict, const char *__restrict, ...) __attribute__((format(scanf, 2, 3)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fscanf (FILE*, sbyte*, IntPtr varArgs);

		// extern int fscanf (FILE *__restrict, const char *__restrict, ...) __attribute__((format(scanf, 2, 3)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fscanf (FILE*, sbyte*, IntPtr varArgs);

		// extern int fseek (FILE *, long, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fseek (FILE*, nint, int);

		// extern int fsetpos (FILE *, const fpos_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fsetpos (FILE*, long*);

		// extern long ftell (FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint ftell (FILE*);

		// extern unsigned long fwrite (const void *, unsigned long, unsigned long, FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint fwrite (void*, nuint, nuint, FILE*);

		// extern unsigned long fwrite (const void *__restrict __ptr, size_t __size, size_t __nitems, FILE *__restrict __stream) asm("_fwrite");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint fwrite (void* __ptr, nuint __size, nuint __nitems, FILE* __stream);

		// extern int getc (FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getc (FILE*);

		// extern int getchar ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int getchar ();

		// extern char * gets (char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* gets (sbyte*);

		// extern void perror (const char *) __attribute__((cold));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void perror (sbyte*);

		// extern int printf (const char *, ...) __attribute__((format(printf, 1, 2)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int printf (sbyte*, IntPtr varArgs);

		// extern int printf (const char *__restrict, ...) __attribute__((format(printf, 1, 2)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int printf (sbyte*, IntPtr varArgs);

		// extern int putc (int, FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int putc (int, FILE*);

		// extern int putchar (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int putchar (int);

		// extern int puts (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int puts (sbyte*);

		// extern int remove (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int remove (sbyte*);

		// extern int rename (const char *__old, const char *__new);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int rename (sbyte* __old, sbyte* __new);

		// extern void rewind (FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void rewind (FILE*);

		// extern int scanf (const char *__restrict, ...) __attribute__((format(scanf, 1, 2)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int scanf (sbyte*, IntPtr varArgs);

		// extern int scanf (const char *__restrict, ...) __attribute__((format(scanf, 1, 2)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int scanf (sbyte*, IntPtr varArgs);

		// extern void setbuf (FILE *__restrict, char *__restrict);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void setbuf (FILE*, sbyte*);

		// extern int setvbuf (FILE *__restrict, char *__restrict, int, size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int setvbuf (FILE*, sbyte*, int, nuint);

		// extern int sprintf (char *, const char *, ...) __attribute__((format(printf, 2, 3)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sprintf (sbyte*, sbyte*, IntPtr varArgs);

		// extern int sprintf (char *__restrict, const char *__restrict, ...) __attribute__((format(printf, 2, 3))) __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sprintf (sbyte*, sbyte*, IntPtr varArgs);

		// extern int sscanf (const char *__restrict, const char *__restrict, ...) __attribute__((format(scanf, 2, 3)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sscanf (sbyte*, sbyte*, IntPtr varArgs);

		// extern int sscanf (const char *__restrict, const char *__restrict, ...) __attribute__((format(scanf, 2, 3)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sscanf (sbyte*, sbyte*, IntPtr varArgs);

		// extern FILE * tmpfile ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe FILE* tmpfile ();

		// extern char * tmpnam (char *) __attribute__((availability(swift, unavailable))) __attribute__((deprecated("This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of tmpnam(3), it is highly recommended that you use mkstemp(3) instead.")));
		[Unavailable (PlatformName.Swift)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* tmpnam (sbyte*);

		// extern int ungetc (int, FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int ungetc (int, FILE*);

		// extern int vfprintf (FILE *, const char *, __builtin_va_list) __attribute__((format(printf, 2, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vfprintf (FILE*, sbyte*, sbyte*);

		// extern int vfprintf (FILE *__restrict, const char *__restrict, va_list) __attribute__((format(printf, 2, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vfprintf (FILE*, sbyte*, sbyte*);

		// extern int vprintf (const char *, __builtin_va_list) __attribute__((format(printf, 1, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vprintf (sbyte*, sbyte*);

		// extern int vprintf (const char *__restrict, va_list) __attribute__((format(printf, 1, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vprintf (sbyte*, sbyte*);

		// extern int vsprintf (char *, const char *, __builtin_va_list) __attribute__((format(printf, 2, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vsprintf (sbyte*, sbyte*, sbyte*);

		// extern int vsprintf (char *__restrict, const char *__restrict, va_list) __attribute__((format(printf, 2, 0))) __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vsprintf (sbyte*, sbyte*, sbyte*);

		// extern char * ctermid (char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* ctermid (sbyte*);

		// extern FILE * fdopen (int, const char *) asm("_fdopen");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe FILE* fdopen (int, sbyte*);

		// extern int fileno (FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fileno (FILE*);

		// extern int pclose (FILE *) __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pclose (FILE*);

		// extern FILE * popen (const char *, const char *) asm("_popen") __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe FILE* popen (sbyte*, sbyte*);

		// extern int __srget (FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int __srget (FILE*);

		// extern int __svfscanf (FILE *, const char *, va_list) __attribute__((format(scanf, 2, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int __svfscanf (FILE*, sbyte*, sbyte*);

		// extern int __swbuf (int, FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int __swbuf (int, FILE*);

		// extern int __sputc (int _c, FILE *_p) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int __sputc (int _c, FILE* _p);

		// extern void flockfile (FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void flockfile (FILE*);

		// extern int ftrylockfile (FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int ftrylockfile (FILE*);

		// extern void funlockfile (FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void funlockfile (FILE*);

		// extern int getc_unlocked (FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getc_unlocked (FILE*);

		// extern int getchar_unlocked ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int getchar_unlocked ();

		// extern int putc_unlocked (int, FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int putc_unlocked (int, FILE*);

		// extern int putchar_unlocked (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int putchar_unlocked (int);

		// extern int getw (FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getw (FILE*);

		// extern int putw (int, FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int putw (int, FILE*);

		// extern char * tempnam (const char *__dir, const char *__prefix) asm("_tempnam") __attribute__((availability(swift, unavailable))) __attribute__((deprecated("This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of tempnam(3), it is highly recommended that you use mkstemp(3) instead.")));
		[Unavailable (PlatformName.Swift)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* tempnam (sbyte* __dir, sbyte* __prefix);

		// extern int fseeko (FILE *__stream, off_t __offset, int __whence);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fseeko (FILE* __stream, long __offset, int __whence);

		// extern off_t ftello (FILE *__stream);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe long ftello (FILE* __stream);

		// extern int snprintf (char *, unsigned long, const char *, ...) __attribute__((format(printf, 3, 4)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int snprintf (sbyte*, nuint, sbyte*, IntPtr varArgs);

		// extern int snprintf (char *__restrict __str, size_t __size, const char *__restrict __format, ...) __attribute__((format(printf, 3, 4)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int snprintf (sbyte* __str, nuint __size, sbyte* __format, IntPtr varArgs);

		// extern int vfscanf (FILE *__restrict, const char *__restrict, __builtin_va_list) __attribute__((format(scanf, 2, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vfscanf (FILE*, sbyte*, sbyte*);

		// extern int vfscanf (FILE *__restrict __stream, const char *__restrict __format, va_list) __attribute__((format(scanf, 2, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vfscanf (FILE* __stream, sbyte* __format, sbyte*);

		// extern int vscanf (const char *__restrict, __builtin_va_list) __attribute__((format(scanf, 1, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vscanf (sbyte*, sbyte*);

		// extern int vscanf (const char *__restrict __format, va_list) __attribute__((format(scanf, 1, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vscanf (sbyte* __format, sbyte*);

		// extern int vsnprintf (char *, unsigned long, const char *, __builtin_va_list) __attribute__((format(printf, 3, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vsnprintf (sbyte*, nuint, sbyte*, sbyte*);

		// extern int vsnprintf (char *__restrict __str, size_t __size, const char *__restrict __format, va_list) __attribute__((format(printf, 3, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vsnprintf (sbyte* __str, nuint __size, sbyte* __format, sbyte*);

		// extern int vsscanf (const char *__restrict, const char *__restrict, __builtin_va_list) __attribute__((format(scanf, 2, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vsscanf (sbyte*, sbyte*, sbyte*);

		// extern int vsscanf (const char *__restrict __str, const char *__restrict __format, va_list) __attribute__((format(scanf, 2, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vsscanf (sbyte* __str, sbyte* __format, sbyte*);

		// extern int dprintf (int, const char *__restrict, ...) __attribute__((format(printf, 2, 3))) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int dprintf (int, sbyte*, IntPtr varArgs);

		// extern int vdprintf (int, const char *__restrict, va_list) __attribute__((format(printf, 2, 0))) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vdprintf (int, sbyte*, sbyte*);

		// extern ssize_t getdelim (char **__restrict __linep, size_t *__restrict __linecapp, int __delimiter, FILE *__restrict __stream) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint getdelim (sbyte** __linep, nuint* __linecapp, int __delimiter, FILE* __stream);

		// extern ssize_t getline (char **__restrict __linep, size_t *__restrict __linecapp, FILE *__restrict __stream) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint getline (sbyte** __linep, nuint* __linecapp, FILE* __stream);

		// extern FILE * fmemopen (void *__restrict __buf, size_t __size, const char *__restrict __mode) __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe FILE* fmemopen (void* __buf, nuint __size, sbyte* __mode);

		// extern FILE * open_memstream (char **__bufp, size_t *__sizep) __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe FILE* open_memstream (sbyte** __bufp, nuint* __sizep);

		// extern int asprintf (char **__restrict, const char *__restrict, ...) __attribute__((format(printf, 2, 3)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int asprintf (sbyte**, sbyte*, IntPtr varArgs);

		// extern char * ctermid_r (char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* ctermid_r (sbyte*);

		// extern char * fgetln (FILE *, size_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* fgetln (FILE*, nuint*);

		// extern const char * fmtcheck (const char *, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* fmtcheck (sbyte*, sbyte*);

		// extern int fpurge (FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fpurge (FILE*);

		// extern void setbuffer (FILE *, char *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void setbuffer (FILE*, sbyte*, int);

		// extern int setlinebuf (FILE *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int setlinebuf (FILE*);

		// extern int vasprintf (char **__restrict, const char *__restrict, va_list) __attribute__((format(printf, 2, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int vasprintf (sbyte**, sbyte*, sbyte*);

		// extern FILE * zopen (const char *, const char *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe FILE* zopen (sbyte*, sbyte*, int);

		// extern FILE * funopen (const void *, int (* _Nullable)(void *, char *, int), int (* _Nullable)(void *, const char *, int), fpos_t (* _Nullable)(void *, fpos_t, int), int (* _Nullable)(void *));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe FILE* funopen (void*, [NullAllowed] Func<void*, sbyte*, int, int>*, [NullAllowed] Func<void*, sbyte*, int, int>*, [NullAllowed] Func<void*, long, int, long>*, [NullAllowed] Func<void*, int>*);

		// extern int __sprintf_chk (char *__restrict, int, size_t, const char *__restrict, ...);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int __sprintf_chk (sbyte*, int, nuint, sbyte*, IntPtr varArgs);

		// extern int __snprintf_chk (char *__restrict, size_t, int, size_t, const char *__restrict, ...);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int __snprintf_chk (sbyte*, nuint, int, nuint, sbyte*, IntPtr varArgs);

		// extern int __vsprintf_chk (char *__restrict, int, size_t, const char *__restrict, va_list);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int __vsprintf_chk (sbyte*, int, nuint, sbyte*, sbyte*);

		// extern int __vsnprintf_chk (char *__restrict, size_t, int, size_t, const char *__restrict, va_list);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int __vsnprintf_chk (sbyte*, nuint, int, nuint, sbyte*, sbyte*);

		// extern int sched_yield ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int sched_yield ();

		// extern int sched_get_priority_min (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int sched_get_priority_min (int);

		// extern int sched_get_priority_max (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int sched_get_priority_max (int);

		// extern char * asctime (const struct tm *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* asctime (tm*);

		// extern clock_t clock () asm("_clock");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint clock ();

		// extern char * ctime (const time_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* ctime (nint*);

		// extern double difftime (time_t, time_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double difftime (nint, nint);

		// extern struct tm * getdate (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe tm* getdate (sbyte*);

		// extern struct tm * gmtime (const time_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe tm* gmtime (nint*);

		// extern struct tm * localtime (const time_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe tm* localtime (nint*);

		// extern time_t mktime (struct tm *) asm("_mktime");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint mktime (tm*);

		// extern size_t strftime (char *__restrict, size_t, const char *__restrict, const struct tm *__restrict) asm("_strftime");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint strftime (sbyte*, nuint, sbyte*, tm*);

		// extern char * strptime (const char *__restrict, const char *__restrict, struct tm *__restrict) asm("_strptime");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strptime (sbyte*, sbyte*, tm*);

		// extern time_t time (time_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint time (nint*);

		// extern void tzset ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void tzset ();

		// extern char * asctime_r (const struct tm *__restrict, char *__restrict);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* asctime_r (tm*, sbyte*);

		// extern char * ctime_r (const time_t *, char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* ctime_r (nint*, sbyte*);

		// extern struct tm * gmtime_r (const time_t *__restrict, struct tm *__restrict);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe tm* gmtime_r (nint*, tm*);

		// extern struct tm * localtime_r (const time_t *__restrict, struct tm *__restrict);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe tm* localtime_r (nint*, tm*);

		// extern time_t posix2time (time_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint posix2time (nint);

		// extern void tzsetwall ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void tzsetwall ();

		// extern time_t time2posix (time_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint time2posix (nint);

		// extern time_t timelocal (struct tm *const);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint timelocal (tm*);

		// extern time_t timegm (struct tm *const);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint timegm (tm*);

		// extern int nanosleep (const struct timespec *__rqtp, struct timespec *__rmtp) asm("_nanosleep");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int nanosleep (timespec* __rqtp, timespec* __rmtp);

		// extern int clock_getres (clockid_t __clock_id, struct timespec *__res) __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int clock_getres (clockid_t __clock_id, timespec* __res);

		// extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int clock_gettime (clockid_t __clock_id, timespec* __tp);

		// extern __uint64_t clock_gettime_nsec_np (clockid_t __clock_id) __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ulong clock_gettime_nsec_np (clockid_t __clock_id);

		// extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp) __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10,12)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int clock_settime (clockid_t __clock_id, timespec* __tp);

		// extern int timespec_get (struct timespec *ts, int base) __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(tvos, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0)));
		[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int timespec_get (timespec* ts, int @base);

		// extern qos_class_t qos_class_self () __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0)));
		[Mac (10,10), iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern qos_class_t qos_class_self ();

		// extern qos_class_t qos_class_main () __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0)));
		[Mac (10,10), iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern qos_class_t qos_class_main ();

		// extern int pthread_attr_set_qos_class_np (pthread_attr_t * _Nonnull __attr, qos_class_t __qos_class, int __relative_priority) __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0)));
		[Mac (10,10), iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_attr_set_qos_class_np (pthread_attr_t* __attr, qos_class_t __qos_class, int __relative_priority);

		// extern int pthread_attr_get_qos_class_np (pthread_attr_t *__restrict _Nonnull __attr, qos_class_t *__restrict _Nullable __qos_class, int *__restrict _Nullable __relative_priority) __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0)));
		[Mac (10,10), iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_attr_get_qos_class_np (pthread_attr_t* __attr, [NullAllowed] qos_class_t* __qos_class, [NullAllowed] int* __relative_priority);

		// extern int pthread_set_qos_class_self_np (qos_class_t __qos_class, int __relative_priority) __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0)));
		[Mac (10,10), iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int pthread_set_qos_class_self_np (qos_class_t __qos_class, int __relative_priority);

		// extern int pthread_get_qos_class_np (pthread_t _Nonnull __pthread, qos_class_t *__restrict _Nullable __qos_class, int *__restrict _Nullable __relative_priority) __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0)));
		[Mac (10,10), iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_get_qos_class_np (pthread_t* __pthread, [NullAllowed] qos_class_t* __qos_class, [NullAllowed] int* __relative_priority);

		// extern pthread_override_t _Nonnull pthread_override_qos_class_start_np (pthread_t _Nonnull __pthread, qos_class_t __qos_class, int __relative_priority) __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0)));
		[Mac (10,10), iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe pthread_override_t* pthread_override_qos_class_start_np (pthread_t* __pthread, qos_class_t __qos_class, int __relative_priority);

		// extern int pthread_override_qos_class_end_np (pthread_override_t _Nonnull __override) __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0)));
		[Mac (10,10), iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_override_qos_class_end_np (pthread_override_t* __override);

		// extern int pthread_atfork (void (* _Nullable)(void), void (* _Nullable)(void), void (* _Nullable)(void)) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_atfork ([NullAllowed] Action*, [NullAllowed] Action*, [NullAllowed] Action*);

		// extern int pthread_attr_destroy (pthread_attr_t * _Nonnull) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_attr_destroy (pthread_attr_t*);

		// extern int pthread_attr_getdetachstate (const pthread_attr_t * _Nonnull, int * _Nonnull) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_attr_getdetachstate (pthread_attr_t*, int*);

		// extern int pthread_attr_getguardsize (const pthread_attr_t *__restrict _Nonnull, size_t *__restrict _Nonnull) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_attr_getguardsize (pthread_attr_t*, nuint*);

		// extern int pthread_attr_getinheritsched (const pthread_attr_t *__restrict _Nonnull, int *__restrict _Nonnull) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_attr_getinheritsched (pthread_attr_t*, int*);

		// extern int pthread_attr_getschedparam (const pthread_attr_t *__restrict _Nonnull, struct sched_param *__restrict _Nonnull) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_attr_getschedparam (pthread_attr_t*, sched_param*);

		// extern int pthread_attr_getschedpolicy (const pthread_attr_t *__restrict _Nonnull, int *__restrict _Nonnull) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_attr_getschedpolicy (pthread_attr_t*, int*);

		// extern int pthread_attr_getscope (const pthread_attr_t *__restrict _Nonnull, int *__restrict _Nonnull) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_attr_getscope (pthread_attr_t*, int*);

		// extern int pthread_attr_getstack (const pthread_attr_t *__restrict _Nonnull, void * _Nullable *__restrict _Nonnull, size_t *__restrict _Nonnull) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_attr_getstack (pthread_attr_t*, [NullAllowed] void**, nuint*);

		// extern int pthread_attr_getstackaddr (const pthread_attr_t *__restrict _Nonnull, void * _Nullable *__restrict _Nonnull) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_attr_getstackaddr (pthread_attr_t*, [NullAllowed] void**);

		// extern int pthread_attr_getstacksize (const pthread_attr_t *__restrict _Nonnull, size_t *__restrict _Nonnull) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_attr_getstacksize (pthread_attr_t*, nuint*);

		// extern int pthread_attr_init (pthread_attr_t * _Nonnull) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_attr_init (pthread_attr_t*);

		// extern int pthread_attr_setdetachstate (pthread_attr_t * _Nonnull, int) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_attr_setdetachstate (pthread_attr_t*, int);

		// extern int pthread_attr_setguardsize (pthread_attr_t * _Nonnull, size_t) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_attr_setguardsize (pthread_attr_t*, nuint);

		// extern int pthread_attr_setinheritsched (pthread_attr_t * _Nonnull, int) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_attr_setinheritsched (pthread_attr_t*, int);

		// extern int pthread_attr_setschedparam (pthread_attr_t *__restrict _Nonnull, const struct sched_param *__restrict _Nonnull) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_attr_setschedparam (pthread_attr_t*, sched_param*);

		// extern int pthread_attr_setschedpolicy (pthread_attr_t * _Nonnull, int) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_attr_setschedpolicy (pthread_attr_t*, int);

		// extern int pthread_attr_setscope (pthread_attr_t * _Nonnull, int) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_attr_setscope (pthread_attr_t*, int);

		// extern int pthread_attr_setstack (pthread_attr_t * _Nonnull, void * _Nonnull, size_t) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_attr_setstack (pthread_attr_t*, void*, nuint);

		// extern int pthread_attr_setstackaddr (pthread_attr_t * _Nonnull, void * _Nonnull) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_attr_setstackaddr (pthread_attr_t*, void*);

		// extern int pthread_attr_setstacksize (pthread_attr_t * _Nonnull, size_t) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_attr_setstacksize (pthread_attr_t*, nuint);

		// extern int pthread_cancel (pthread_t _Nonnull) asm("_pthread_cancel") __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_cancel (pthread_t*);

		// extern int pthread_cond_broadcast (pthread_cond_t * _Nonnull) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_cond_broadcast (pthread_cond_t*);

		// extern int pthread_cond_destroy (pthread_cond_t * _Nonnull) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_cond_destroy (pthread_cond_t*);

		// extern int pthread_cond_init (pthread_cond_t *__restrict _Nonnull, const pthread_condattr_t *__restrict _Nullable) asm("_pthread_cond_init") __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_cond_init (pthread_cond_t*, [NullAllowed] pthread_condattr_t*);

		// extern int pthread_cond_signal (pthread_cond_t * _Nonnull) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_cond_signal (pthread_cond_t*);

		// extern int pthread_cond_timedwait (pthread_cond_t *__restrict _Nonnull, pthread_mutex_t *__restrict _Nonnull, const struct timespec *__restrict _Nullable) asm("_pthread_cond_timedwait") __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_cond_timedwait (pthread_cond_t*, pthread_mutex_t*, [NullAllowed] timespec*);

		// extern int pthread_cond_wait (pthread_cond_t *__restrict _Nonnull, pthread_mutex_t *__restrict _Nonnull) asm("_pthread_cond_wait") __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_cond_wait (pthread_cond_t*, pthread_mutex_t*);

		// extern int pthread_condattr_destroy (pthread_condattr_t * _Nonnull) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_condattr_destroy (pthread_condattr_t*);

		// extern int pthread_condattr_init (pthread_condattr_t * _Nonnull) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_condattr_init (pthread_condattr_t*);

		// extern int pthread_condattr_getpshared (const pthread_condattr_t *__restrict _Nonnull, int *__restrict _Nonnull) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_condattr_getpshared (pthread_condattr_t*, int*);

		// extern int pthread_condattr_setpshared (pthread_condattr_t * _Nonnull, int) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_condattr_setpshared (pthread_condattr_t*, int);

		// extern int pthread_create (pthread_t  _Nullable *__restrict _Nonnull, const pthread_attr_t *__restrict _Nullable, void * _Nullable (* _Nonnull)(void * _Nullable), void *__restrict _Nullable) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_create ([NullAllowed] pthread_t**, [NullAllowed] pthread_attr_t*, Func<void*, void*>*, [NullAllowed] void*);

		// extern int pthread_detach (pthread_t _Nonnull) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_detach (pthread_t*);

		// extern int pthread_equal (pthread_t _Nullable, pthread_t _Nullable) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_equal ([NullAllowed] pthread_t*, [NullAllowed] pthread_t*);

		// extern void pthread_exit (void * _Nullable) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void pthread_exit ([NullAllowed] void*);

		// extern int pthread_getconcurrency () __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int pthread_getconcurrency ();

		// extern int pthread_getschedparam (pthread_t _Nonnull, int *__restrict _Nullable, struct sched_param *__restrict _Nullable) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_getschedparam (pthread_t*, [NullAllowed] int*, [NullAllowed] sched_param*);

		// extern void * _Nullable pthread_getspecific (pthread_key_t) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe void* pthread_getspecific (nuint);

		// extern int pthread_join (pthread_t _Nonnull, void * _Nullable * _Nullable) asm("_pthread_join") __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_join (pthread_t*, [NullAllowed] void**);

		// extern int pthread_key_create (pthread_key_t * _Nonnull, void (* _Nullable)(void * _Nonnull)) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_key_create (nuint*, [NullAllowed] Action<void*>*);

		// extern int pthread_key_delete (pthread_key_t) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int pthread_key_delete (nuint);

		// extern int pthread_mutex_destroy (pthread_mutex_t * _Nonnull) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_mutex_destroy (pthread_mutex_t*);

		// extern int pthread_mutex_getprioceiling (const pthread_mutex_t *__restrict _Nonnull, int *__restrict _Nonnull) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_mutex_getprioceiling (pthread_mutex_t*, int*);

		// extern int pthread_mutex_init (pthread_mutex_t *__restrict _Nonnull, const pthread_mutexattr_t *__restrict _Nullable) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_mutex_init (pthread_mutex_t*, [NullAllowed] pthread_mutexattr_t*);

		// extern int pthread_mutex_lock (pthread_mutex_t * _Nonnull) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_mutex_lock (pthread_mutex_t*);

		// extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict _Nonnull, int, int *__restrict _Nonnull) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_mutex_setprioceiling (pthread_mutex_t*, int, int*);

		// extern int pthread_mutex_trylock (pthread_mutex_t * _Nonnull) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_mutex_trylock (pthread_mutex_t*);

		// extern int pthread_mutex_unlock (pthread_mutex_t * _Nonnull) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_mutex_unlock (pthread_mutex_t*);

		// extern int pthread_mutexattr_destroy (pthread_mutexattr_t * _Nonnull) asm("_pthread_mutexattr_destroy") __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_mutexattr_destroy (pthread_mutexattr_t*);

		// extern int pthread_mutexattr_getprioceiling (const pthread_mutexattr_t *__restrict _Nonnull, int *__restrict _Nonnull) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_mutexattr_getprioceiling (pthread_mutexattr_t*, int*);

		// extern int pthread_mutexattr_getprotocol (const pthread_mutexattr_t *__restrict _Nonnull, int *__restrict _Nonnull) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_mutexattr_getprotocol (pthread_mutexattr_t*, int*);

		// extern int pthread_mutexattr_getpshared (const pthread_mutexattr_t *__restrict _Nonnull, int *__restrict _Nonnull) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_mutexattr_getpshared (pthread_mutexattr_t*, int*);

		// extern int pthread_mutexattr_gettype (const pthread_mutexattr_t *__restrict _Nonnull, int *__restrict _Nonnull) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_mutexattr_gettype (pthread_mutexattr_t*, int*);

		// extern int pthread_mutexattr_getpolicy_np (const pthread_mutexattr_t *__restrict _Nonnull, int *__restrict _Nonnull) __attribute__((availability(macos, introduced=10.13.4))) __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(watchos, introduced=4.3))) __attribute__((availability(tvos, introduced=11.3)));
		[Watch (4,3), TV (11,3), Mac (10,13,4), iOS (11,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_mutexattr_getpolicy_np (pthread_mutexattr_t*, int*);

		// extern int pthread_mutexattr_init (pthread_mutexattr_t * _Nonnull) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_mutexattr_init (pthread_mutexattr_t*);

		// extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t * _Nonnull, int) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_mutexattr_setprioceiling (pthread_mutexattr_t*, int);

		// extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t * _Nonnull, int) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_mutexattr_setprotocol (pthread_mutexattr_t*, int);

		// extern int pthread_mutexattr_setpshared (pthread_mutexattr_t * _Nonnull, int) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_mutexattr_setpshared (pthread_mutexattr_t*, int);

		// extern int pthread_mutexattr_settype (pthread_mutexattr_t * _Nonnull, int) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_mutexattr_settype (pthread_mutexattr_t*, int);

		// extern int pthread_mutexattr_setpolicy_np (pthread_mutexattr_t * _Nonnull, int) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0)));
		[Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_mutexattr_setpolicy_np (pthread_mutexattr_t*, int);

		// extern int pthread_once (pthread_once_t * _Nonnull, void (* _Nonnull)(void)) __attribute__((availability(swift, unavailable))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Unavailable (PlatformName.Swift)]
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_once (pthread_once_t*, Action*);

		// extern int pthread_rwlock_destroy (pthread_rwlock_t * _Nonnull) asm("_pthread_rwlock_destroy") __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_rwlock_destroy (pthread_rwlock_t*);

		// extern int pthread_rwlock_init (pthread_rwlock_t *__restrict _Nonnull, const pthread_rwlockattr_t *__restrict _Nullable) asm("_pthread_rwlock_init") __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_rwlock_init (pthread_rwlock_t*, [NullAllowed] pthread_rwlockattr_t*);

		// extern int pthread_rwlock_rdlock (pthread_rwlock_t * _Nonnull) asm("_pthread_rwlock_rdlock") __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_rwlock_rdlock (pthread_rwlock_t*);

		// extern int pthread_rwlock_tryrdlock (pthread_rwlock_t * _Nonnull) asm("_pthread_rwlock_tryrdlock") __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_rwlock_tryrdlock (pthread_rwlock_t*);

		// extern int pthread_rwlock_trywrlock (pthread_rwlock_t * _Nonnull) asm("_pthread_rwlock_trywrlock") __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_rwlock_trywrlock (pthread_rwlock_t*);

		// extern int pthread_rwlock_wrlock (pthread_rwlock_t * _Nonnull) asm("_pthread_rwlock_wrlock") __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_rwlock_wrlock (pthread_rwlock_t*);

		// extern int pthread_rwlock_unlock (pthread_rwlock_t * _Nonnull) asm("_pthread_rwlock_unlock") __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_rwlock_unlock (pthread_rwlock_t*);

		// extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t * _Nonnull) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_rwlockattr_destroy (pthread_rwlockattr_t*);

		// extern int pthread_rwlockattr_getpshared (const pthread_rwlockattr_t *__restrict _Nonnull, int *__restrict _Nonnull) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_rwlockattr_getpshared (pthread_rwlockattr_t*, int*);

		// extern int pthread_rwlockattr_init (pthread_rwlockattr_t * _Nonnull) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_rwlockattr_init (pthread_rwlockattr_t*);

		// extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t * _Nonnull, int) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_rwlockattr_setpshared (pthread_rwlockattr_t*, int);

		// extern pthread_t _Nonnull pthread_self () __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe pthread_t* pthread_self ();

		// extern int pthread_setcancelstate (int, int * _Nullable) asm("_pthread_setcancelstate") __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_setcancelstate (int, [NullAllowed] int*);

		// extern int pthread_setcanceltype (int, int * _Nullable) asm("_pthread_setcanceltype") __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_setcanceltype (int, [NullAllowed] int*);

		// extern int pthread_setconcurrency (int) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int pthread_setconcurrency (int);

		// extern int pthread_setschedparam (pthread_t _Nonnull, int, const struct sched_param * _Nonnull) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_setschedparam (pthread_t*, int, sched_param*);

		// extern int pthread_setspecific (pthread_key_t, const void * _Nullable) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_setspecific (nuint, [NullAllowed] void*);

		// extern void pthread_testcancel () asm("_pthread_testcancel") __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void pthread_testcancel ();

		// extern int pthread_is_threaded_np () __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int pthread_is_threaded_np ();

		// extern int pthread_threadid_np (pthread_t _Nullable, __uint64_t * _Nullable) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=3.2)));
		[Mac (10,6), iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_threadid_np ([NullAllowed] pthread_t*, [NullAllowed] ulong*);

		// extern int pthread_getname_np (pthread_t _Nonnull, char * _Nonnull, size_t) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=3.2)));
		[Mac (10,6), iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_getname_np (pthread_t*, sbyte*, nuint);

		// extern int pthread_setname_np (const char * _Nonnull) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=3.2)));
		[Mac (10,6), iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_setname_np (sbyte*);

		// extern int pthread_main_np () __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int pthread_main_np ();

		// extern mach_port_t pthread_mach_thread_np (pthread_t _Nonnull) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe uint pthread_mach_thread_np (pthread_t*);

		// extern size_t pthread_get_stacksize_np (pthread_t _Nonnull) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint pthread_get_stacksize_np (pthread_t*);

		// extern void * _Nonnull pthread_get_stackaddr_np (pthread_t _Nonnull) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* pthread_get_stackaddr_np (pthread_t*);

		// extern int pthread_cond_signal_thread_np (pthread_cond_t * _Nonnull, pthread_t _Nullable) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_cond_signal_thread_np (pthread_cond_t*, [NullAllowed] pthread_t*);

		// extern int pthread_cond_timedwait_relative_np (pthread_cond_t * _Nonnull, pthread_mutex_t * _Nonnull, const struct timespec * _Nullable) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_cond_timedwait_relative_np (pthread_cond_t*, pthread_mutex_t*, [NullAllowed] timespec*);

		// extern int pthread_create_suspended_np (pthread_t  _Nullable * _Nonnull, const pthread_attr_t * _Nullable, void * _Nullable (* _Nonnull)(void * _Nullable), void * _Nullable) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_create_suspended_np ([NullAllowed] pthread_t**, [NullAllowed] pthread_attr_t*, Func<void*, void*>*, [NullAllowed] void*);

		// extern int pthread_kill (pthread_t _Nonnull, int) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_kill (pthread_t*, int);

		// extern pthread_t _Nullable pthread_from_mach_thread_np (mach_port_t) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe pthread_t* pthread_from_mach_thread_np (uint);

		// extern int pthread_sigmask (int, const sigset_t * _Nullable, sigset_t * _Nullable) asm("_pthread_sigmask") __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_sigmask (int, [NullAllowed] uint*, [NullAllowed] uint*);

		// extern void pthread_yield_np () __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void pthread_yield_np ();

		// uint16_t _OSSwapInt16 (uint16_t data);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ushort _OSSwapInt16 (ushort data);

		// uint32_t _OSSwapInt32 (uint32_t data);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint _OSSwapInt32 (uint data);

		// extern unsigned int __builtin_bswap32 (unsigned int) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint __builtin_bswap32 (uint);

		// uint64_t _OSSwapInt64 (uint64_t data);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ulong _OSSwapInt64 (ulong data);

		// extern unsigned long long __builtin_bswap64 (unsigned long long) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ulong __builtin_bswap64 (ulong);

		// uint16_t OSReadSwapInt16 (const volatile void *base, uintptr_t offset);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe ushort OSReadSwapInt16 (void* @base, UIntPtr offset);

		// uint32_t OSReadSwapInt32 (const volatile void *base, uintptr_t offset);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe uint OSReadSwapInt32 (void* @base, UIntPtr offset);

		// uint64_t OSReadSwapInt64 (const volatile void *base, uintptr_t offset);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe ulong OSReadSwapInt64 (void* @base, UIntPtr offset);

		// void OSWriteSwapInt16 (volatile void *base, uintptr_t offset, uint16_t data);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void OSWriteSwapInt16 (void* @base, UIntPtr offset, ushort data);

		// void OSWriteSwapInt32 (volatile void *base, uintptr_t offset, uint32_t data);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void OSWriteSwapInt32 (void* @base, UIntPtr offset, uint data);

		// void OSWriteSwapInt64 (volatile void *base, uintptr_t offset, uint64_t data);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void OSWriteSwapInt64 (void* @base, UIntPtr offset, ulong data);

		// int __darwin_fd_isset (int _n, const struct fd_set *_p);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int __darwin_fd_isset (int _n, fd_set* _p);

		// extern void __assert_rtn (const char *, const char *, int, const char *) __attribute__((cold)) __attribute__((disable_tail_calls));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void __assert_rtn (sbyte*, sbyte*, int, sbyte*);

		// extern unsigned long ___runetype (__darwin_ct_rune_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint ___runetype (int);

		// extern __darwin_ct_rune_t ___tolower (__darwin_ct_rune_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int ___tolower (int);

		// extern __darwin_ct_rune_t ___toupper (__darwin_ct_rune_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int ___toupper (int);

		// extern int isascii (int _c);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isascii (int _c);

		// extern int __maskrune (__darwin_ct_rune_t, unsigned long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __maskrune (int, nuint);

		// extern int __istype (__darwin_ct_rune_t _c, unsigned long _f);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __istype (int _c, nuint _f);

		// extern __darwin_ct_rune_t __isctype (__darwin_ct_rune_t _c, unsigned long _f);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __isctype (int _c, nuint _f);

		// extern __darwin_ct_rune_t __toupper (__darwin_ct_rune_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __toupper (int);

		// extern __darwin_ct_rune_t __tolower (__darwin_ct_rune_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __tolower (int);

		// extern int __wcwidth (__darwin_ct_rune_t _c);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __wcwidth (int _c);

		// extern int isalnum (int) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isalnum (int);

		// extern int isalnum (int _c) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isalnum (int _c);

		// extern int isalpha (int) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isalpha (int);

		// extern int isalpha (int _c) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isalpha (int _c);

		// extern int isblank (int) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isblank (int);

		// extern int isblank (int _c) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isblank (int _c);

		// extern int iscntrl (int) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int iscntrl (int);

		// extern int iscntrl (int _c) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int iscntrl (int _c);

		// extern int isdigit (int) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isdigit (int);

		// extern int isdigit (int _c) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isdigit (int _c);

		// extern int isgraph (int) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isgraph (int);

		// extern int isgraph (int _c) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isgraph (int _c);

		// extern int islower (int) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int islower (int);

		// extern int islower (int _c) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int islower (int _c);

		// extern int isprint (int) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isprint (int);

		// extern int isprint (int _c) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isprint (int _c);

		// extern int ispunct (int) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int ispunct (int);

		// extern int ispunct (int _c) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int ispunct (int _c);

		// extern int isspace (int) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isspace (int);

		// extern int isspace (int _c) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isspace (int _c);

		// extern int isupper (int) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isupper (int);

		// extern int isupper (int _c) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isupper (int _c);

		// extern int isxdigit (int) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isxdigit (int);

		// extern int isxdigit (int _c) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isxdigit (int _c);

		// extern int toascii (int _c);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int toascii (int _c);

		// extern int tolower (int) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int tolower (int);

		// extern int tolower (int _c) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int tolower (int _c);

		// extern int toupper (int) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int toupper (int);

		// extern int toupper (int _c) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int toupper (int _c);

		// extern int digittoint (int _c);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int digittoint (int _c);

		// extern int ishexnumber (int _c);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int ishexnumber (int _c);

		// extern int isideogram (int _c);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isideogram (int _c);

		// extern int isnumber (int _c);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isnumber (int _c);

		// extern int isphonogram (int _c);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isphonogram (int _c);

		// extern int isrune (int _c);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isrune (int _c);

		// extern int isspecial (int _c);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isspecial (int _c);

		// extern int * __error ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int* __error ();

		// extern struct lconv * localeconv ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe lconv* localeconv ();

		// extern char * setlocale (int, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* setlocale (int, sbyte*);

		// extern int __math_errhandling ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __math_errhandling ();

		// extern int __fpclassifyf (float);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __fpclassifyf (float);

		// extern int __fpclassifyd (double);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __fpclassifyd (double);

		// extern int __fpclassifyl (long double);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __fpclassifyl ([unsupported Builtin: long double]);

		// extern int __inline_isfinitef (float) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isfinitef (float);

		// extern int __inline_isfinited (double) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isfinited (double);

		// extern int __inline_isfinitel (long double) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isfinitel ([unsupported Builtin: long double]);

		// extern int __inline_isinff (float) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isinff (float);

		// extern int __inline_isinfd (double) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isinfd (double);

		// extern int __inline_isinfl (long double) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isinfl ([unsupported Builtin: long double]);

		// extern int __inline_isnanf (float) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isnanf (float);

		// extern int __inline_isnand (double) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isnand (double);

		// extern int __inline_isnanl (long double) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isnanl ([unsupported Builtin: long double]);

		// extern int __inline_isnormalf (float) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isnormalf (float);

		// extern int __inline_isnormald (double) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isnormald (double);

		// extern int __inline_isnormall (long double) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isnormall ([unsupported Builtin: long double]);

		// extern int __inline_signbitf (float) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_signbitf (float);

		// extern int __inline_signbitd (double) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_signbitd (double);

		// extern int __inline_signbitl (long double) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_signbitl ([unsupported Builtin: long double]);

		// extern int __inline_isfinitef (float __x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isfinitef (float __x);

		// extern float __builtin_fabsf (float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __builtin_fabsf (float);

		// extern float __builtin_inff () __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __builtin_inff ();

		// extern int __inline_isfinited (double __x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isfinited (double __x);

		// extern double __builtin_fabs (double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __builtin_fabs (double);

		// extern double __builtin_inf () __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __builtin_inf ();

		// extern int __inline_isfinitel (long double __x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isfinitel ([unsupported Builtin: long double] __x);

		// extern long double __builtin_fabsl (long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __builtin_fabsl ([unsupported Builtin: long double]);

		// extern long double __builtin_infl () __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __builtin_infl ();

		// extern int __inline_isinff (float __x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isinff (float __x);

		// extern int __inline_isinfd (double __x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isinfd (double __x);

		// extern int __inline_isinfl (long double __x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isinfl ([unsupported Builtin: long double] __x);

		// extern int __inline_isnanf (float __x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isnanf (float __x);

		// extern int __inline_isnand (double __x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isnand (double __x);

		// extern int __inline_isnanl (long double __x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isnanl ([unsupported Builtin: long double] __x);

		// extern int __inline_signbitf (float __x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_signbitf (float __x);

		// extern int __inline_signbitd (double __x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_signbitd (double __x);

		// extern int __inline_signbitl (long double __x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_signbitl ([unsupported Builtin: long double] __x);

		// extern int __inline_isnormalf (float __x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isnormalf (float __x);

		// extern int __inline_isnormald (double __x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isnormald (double __x);

		// extern int __inline_isnormall (long double __x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __inline_isnormall ([unsupported Builtin: long double] __x);

		// extern float acosf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float acosf (float);

		// extern float acosf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float acosf (float);

		// extern double acos (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double acos (double);

		// extern double acos (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double acos (double);

		// extern long double acosl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] acosl ([unsupported Builtin: long double]);

		// extern long double acosl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] acosl ([unsupported Builtin: long double]);

		// extern float asinf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float asinf (float);

		// extern float asinf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float asinf (float);

		// extern double asin (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double asin (double);

		// extern double asin (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double asin (double);

		// extern long double asinl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] asinl ([unsupported Builtin: long double]);

		// extern long double asinl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] asinl ([unsupported Builtin: long double]);

		// extern float atanf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float atanf (float);

		// extern float atanf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float atanf (float);

		// extern double atan (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double atan (double);

		// extern double atan (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double atan (double);

		// extern long double atanl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] atanl ([unsupported Builtin: long double]);

		// extern long double atanl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] atanl ([unsupported Builtin: long double]);

		// extern float atan2f (float, float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float atan2f (float, float);

		// extern float atan2f (float, float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float atan2f (float, float);

		// extern double atan2 (double, double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double atan2 (double, double);

		// extern double atan2 (double, double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double atan2 (double, double);

		// extern long double atan2l (long double, long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] atan2l ([unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern long double atan2l (long double, long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] atan2l ([unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern float cosf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float cosf (float);

		// extern float cosf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float cosf (float);

		// extern double cos (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double cos (double);

		// extern double cos (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double cos (double);

		// extern long double cosl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] cosl ([unsupported Builtin: long double]);

		// extern long double cosl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] cosl ([unsupported Builtin: long double]);

		// extern float sinf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float sinf (float);

		// extern float sinf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float sinf (float);

		// extern double sin (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double sin (double);

		// extern double sin (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double sin (double);

		// extern long double sinl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] sinl ([unsupported Builtin: long double]);

		// extern long double sinl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] sinl ([unsupported Builtin: long double]);

		// extern float tanf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float tanf (float);

		// extern float tanf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float tanf (float);

		// extern double tan (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double tan (double);

		// extern double tan (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double tan (double);

		// extern long double tanl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] tanl ([unsupported Builtin: long double]);

		// extern long double tanl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] tanl ([unsupported Builtin: long double]);

		// extern float acoshf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float acoshf (float);

		// extern float acoshf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float acoshf (float);

		// extern double acosh (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double acosh (double);

		// extern double acosh (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double acosh (double);

		// extern long double acoshl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] acoshl ([unsupported Builtin: long double]);

		// extern long double acoshl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] acoshl ([unsupported Builtin: long double]);

		// extern float asinhf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float asinhf (float);

		// extern float asinhf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float asinhf (float);

		// extern double asinh (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double asinh (double);

		// extern double asinh (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double asinh (double);

		// extern long double asinhl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] asinhl ([unsupported Builtin: long double]);

		// extern long double asinhl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] asinhl ([unsupported Builtin: long double]);

		// extern float atanhf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float atanhf (float);

		// extern float atanhf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float atanhf (float);

		// extern double atanh (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double atanh (double);

		// extern double atanh (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double atanh (double);

		// extern long double atanhl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] atanhl ([unsupported Builtin: long double]);

		// extern long double atanhl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] atanhl ([unsupported Builtin: long double]);

		// extern float coshf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float coshf (float);

		// extern float coshf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float coshf (float);

		// extern double cosh (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double cosh (double);

		// extern double cosh (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double cosh (double);

		// extern long double coshl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] coshl ([unsupported Builtin: long double]);

		// extern long double coshl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] coshl ([unsupported Builtin: long double]);

		// extern float sinhf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float sinhf (float);

		// extern float sinhf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float sinhf (float);

		// extern double sinh (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double sinh (double);

		// extern double sinh (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double sinh (double);

		// extern long double sinhl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] sinhl ([unsupported Builtin: long double]);

		// extern long double sinhl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] sinhl ([unsupported Builtin: long double]);

		// extern float tanhf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float tanhf (float);

		// extern float tanhf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float tanhf (float);

		// extern double tanh (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double tanh (double);

		// extern double tanh (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double tanh (double);

		// extern long double tanhl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] tanhl ([unsupported Builtin: long double]);

		// extern long double tanhl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] tanhl ([unsupported Builtin: long double]);

		// extern float expf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float expf (float);

		// extern float expf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float expf (float);

		// extern double exp (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double exp (double);

		// extern double exp (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double exp (double);

		// extern long double expl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] expl ([unsupported Builtin: long double]);

		// extern long double expl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] expl ([unsupported Builtin: long double]);

		// extern float exp2f (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float exp2f (float);

		// extern float exp2f (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float exp2f (float);

		// extern double exp2 (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double exp2 (double);

		// extern double exp2 (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double exp2 (double);

		// extern long double exp2l (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] exp2l ([unsupported Builtin: long double]);

		// extern long double exp2l (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] exp2l ([unsupported Builtin: long double]);

		// extern float expm1f (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float expm1f (float);

		// extern float expm1f (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float expm1f (float);

		// extern double expm1 (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double expm1 (double);

		// extern double expm1 (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double expm1 (double);

		// extern long double expm1l (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] expm1l ([unsupported Builtin: long double]);

		// extern long double expm1l (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] expm1l ([unsupported Builtin: long double]);

		// extern float logf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float logf (float);

		// extern float logf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float logf (float);

		// extern double log (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double log (double);

		// extern double log (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double log (double);

		// extern long double logl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] logl ([unsupported Builtin: long double]);

		// extern long double logl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] logl ([unsupported Builtin: long double]);

		// extern float log10f (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float log10f (float);

		// extern float log10f (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float log10f (float);

		// extern double log10 (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double log10 (double);

		// extern double log10 (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double log10 (double);

		// extern long double log10l (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] log10l ([unsupported Builtin: long double]);

		// extern long double log10l (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] log10l ([unsupported Builtin: long double]);

		// extern float log2f (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float log2f (float);

		// extern float log2f (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float log2f (float);

		// extern double log2 (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double log2 (double);

		// extern double log2 (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double log2 (double);

		// extern long double log2l (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] log2l ([unsupported Builtin: long double]);

		// extern long double log2l (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] log2l ([unsupported Builtin: long double]);

		// extern float log1pf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float log1pf (float);

		// extern float log1pf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float log1pf (float);

		// extern double log1p (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double log1p (double);

		// extern double log1p (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double log1p (double);

		// extern long double log1pl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] log1pl ([unsupported Builtin: long double]);

		// extern long double log1pl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] log1pl ([unsupported Builtin: long double]);

		// extern float logbf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float logbf (float);

		// extern float logbf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float logbf (float);

		// extern double logb (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double logb (double);

		// extern double logb (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double logb (double);

		// extern long double logbl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] logbl ([unsupported Builtin: long double]);

		// extern long double logbl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] logbl ([unsupported Builtin: long double]);

		// extern float modff (float, float *) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe float modff (float, float*);

		// extern float modff (float, float *) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe float modff (float, float*);

		// extern double modf (double, double *) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe double modf (double, double*);

		// extern double modf (double, double *) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe double modf (double, double*);

		// extern long double modfl (long double, long double *) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe [unsupported Builtin: long double] modfl ([unsupported Builtin: long double], [unsupported Builtin: long double]*);

		// extern long double modfl (long double, long double *) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe [unsupported Builtin: long double] modfl ([unsupported Builtin: long double], [unsupported Builtin: long double]*);

		// extern float ldexpf (float, int) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float ldexpf (float, int);

		// extern float ldexpf (float, int) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float ldexpf (float, int);

		// extern double ldexp (double, int) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double ldexp (double, int);

		// extern double ldexp (double, int) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double ldexp (double, int);

		// extern long double ldexpl (long double, int) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] ldexpl ([unsupported Builtin: long double], int);

		// extern long double ldexpl (long double, int) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] ldexpl ([unsupported Builtin: long double], int);

		// extern float frexpf (float, int *) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe float frexpf (float, int*);

		// extern float frexpf (float, int *) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe float frexpf (float, int*);

		// extern double frexp (double, int *) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe double frexp (double, int*);

		// extern double frexp (double, int *) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe double frexp (double, int*);

		// extern long double frexpl (long double, int *) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe [unsupported Builtin: long double] frexpl ([unsupported Builtin: long double], int*);

		// extern long double frexpl (long double, int *) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe [unsupported Builtin: long double] frexpl ([unsupported Builtin: long double], int*);

		// extern int ilogbf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int ilogbf (float);

		// extern int ilogbf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int ilogbf (float);

		// extern int ilogb (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int ilogb (double);

		// extern int ilogb (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int ilogb (double);

		// extern int ilogbl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int ilogbl ([unsupported Builtin: long double]);

		// extern int ilogbl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int ilogbl ([unsupported Builtin: long double]);

		// extern float scalbnf (float, int) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float scalbnf (float, int);

		// extern float scalbnf (float, int) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float scalbnf (float, int);

		// extern double scalbn (double, int) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double scalbn (double, int);

		// extern double scalbn (double, int) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double scalbn (double, int);

		// extern long double scalbnl (long double, int) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] scalbnl ([unsupported Builtin: long double], int);

		// extern long double scalbnl (long double, int) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] scalbnl ([unsupported Builtin: long double], int);

		// extern float scalblnf (float, long) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float scalblnf (float, nint);

		// extern float scalblnf (float, long) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float scalblnf (float, nint);

		// extern double scalbln (double, long) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double scalbln (double, nint);

		// extern double scalbln (double, long) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double scalbln (double, nint);

		// extern long double scalblnl (long double, long) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] scalblnl ([unsupported Builtin: long double], nint);

		// extern long double scalblnl (long double, long) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] scalblnl ([unsupported Builtin: long double], nint);

		// extern float fabsf (float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float fabsf (float);

		// extern float fabsf (float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float fabsf (float);

		// extern double fabs (double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double fabs (double);

		// extern double fabs (double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double fabs (double);

		// extern long double fabsl (long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] fabsl ([unsupported Builtin: long double]);

		// extern long double fabsl (long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] fabsl ([unsupported Builtin: long double]);

		// extern float cbrtf (float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float cbrtf (float);

		// extern float cbrtf (float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float cbrtf (float);

		// extern double cbrt (double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double cbrt (double);

		// extern double cbrt (double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double cbrt (double);

		// extern long double cbrtl (long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] cbrtl ([unsupported Builtin: long double]);

		// extern long double cbrtl (long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] cbrtl ([unsupported Builtin: long double]);

		// extern float hypotf (float, float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float hypotf (float, float);

		// extern float hypotf (float, float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float hypotf (float, float);

		// extern double hypot (double, double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double hypot (double, double);

		// extern double hypot (double, double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double hypot (double, double);

		// extern long double hypotl (long double, long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] hypotl ([unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern long double hypotl (long double, long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] hypotl ([unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern float powf (float, float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float powf (float, float);

		// extern float powf (float, float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float powf (float, float);

		// extern double pow (double, double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double pow (double, double);

		// extern double pow (double, double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double pow (double, double);

		// extern long double powl (long double, long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] powl ([unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern long double powl (long double, long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] powl ([unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern float sqrtf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float sqrtf (float);

		// extern float sqrtf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float sqrtf (float);

		// extern double sqrt (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double sqrt (double);

		// extern double sqrt (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double sqrt (double);

		// extern long double sqrtl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] sqrtl ([unsupported Builtin: long double]);

		// extern long double sqrtl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] sqrtl ([unsupported Builtin: long double]);

		// extern float erff (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float erff (float);

		// extern float erff (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float erff (float);

		// extern double erf (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double erf (double);

		// extern double erf (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double erf (double);

		// extern long double erfl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] erfl ([unsupported Builtin: long double]);

		// extern long double erfl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] erfl ([unsupported Builtin: long double]);

		// extern float erfcf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float erfcf (float);

		// extern float erfcf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float erfcf (float);

		// extern double erfc (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double erfc (double);

		// extern double erfc (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double erfc (double);

		// extern long double erfcl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] erfcl ([unsupported Builtin: long double]);

		// extern long double erfcl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] erfcl ([unsupported Builtin: long double]);

		// extern float lgammaf (float) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float lgammaf (float);

		// extern float lgammaf (float) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float lgammaf (float);

		// extern double lgamma (double) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double lgamma (double);

		// extern double lgamma (double) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double lgamma (double);

		// extern long double lgammal (long double) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] lgammal ([unsupported Builtin: long double]);

		// extern long double lgammal (long double) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] lgammal ([unsupported Builtin: long double]);

		// extern float tgammaf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float tgammaf (float);

		// extern float tgammaf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float tgammaf (float);

		// extern double tgamma (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double tgamma (double);

		// extern double tgamma (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double tgamma (double);

		// extern long double tgammal (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] tgammal ([unsupported Builtin: long double]);

		// extern long double tgammal (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] tgammal ([unsupported Builtin: long double]);

		// extern float ceilf (float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float ceilf (float);

		// extern float ceilf (float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float ceilf (float);

		// extern double ceil (double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double ceil (double);

		// extern double ceil (double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double ceil (double);

		// extern long double ceill (long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] ceill ([unsupported Builtin: long double]);

		// extern long double ceill (long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] ceill ([unsupported Builtin: long double]);

		// extern float floorf (float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float floorf (float);

		// extern float floorf (float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float floorf (float);

		// extern double floor (double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double floor (double);

		// extern double floor (double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double floor (double);

		// extern long double floorl (long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] floorl ([unsupported Builtin: long double]);

		// extern long double floorl (long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] floorl ([unsupported Builtin: long double]);

		// extern float nearbyintf (float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float nearbyintf (float);

		// extern float nearbyintf (float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float nearbyintf (float);

		// extern double nearbyint (double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double nearbyint (double);

		// extern double nearbyint (double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double nearbyint (double);

		// extern long double nearbyintl (long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] nearbyintl ([unsupported Builtin: long double]);

		// extern long double nearbyintl (long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] nearbyintl ([unsupported Builtin: long double]);

		// extern float rintf (float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float rintf (float);

		// extern float rintf (float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float rintf (float);

		// extern double rint (double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double rint (double);

		// extern double rint (double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double rint (double);

		// extern long double rintl (long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] rintl ([unsupported Builtin: long double]);

		// extern long double rintl (long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] rintl ([unsupported Builtin: long double]);

		// extern long lrintf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint lrintf (float);

		// extern long lrintf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint lrintf (float);

		// extern long lrint (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint lrint (double);

		// extern long lrint (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint lrint (double);

		// extern long lrintl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint lrintl ([unsupported Builtin: long double]);

		// extern long lrintl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint lrintl ([unsupported Builtin: long double]);

		// extern float roundf (float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float roundf (float);

		// extern float roundf (float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float roundf (float);

		// extern double round (double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double round (double);

		// extern double round (double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double round (double);

		// extern long double roundl (long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] roundl ([unsupported Builtin: long double]);

		// extern long double roundl (long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] roundl ([unsupported Builtin: long double]);

		// extern long lroundf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint lroundf (float);

		// extern long lroundf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint lroundf (float);

		// extern long lround (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint lround (double);

		// extern long lround (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint lround (double);

		// extern long lroundl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint lroundl ([unsupported Builtin: long double]);

		// extern long lroundl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint lroundl ([unsupported Builtin: long double]);

		// extern long long llrintf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern long llrintf (float);

		// extern long long llrintf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern long llrintf (float);

		// extern long long llrint (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern long llrint (double);

		// extern long long llrint (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern long llrint (double);

		// extern long long llrintl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern long llrintl ([unsupported Builtin: long double]);

		// extern long long llrintl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern long llrintl ([unsupported Builtin: long double]);

		// extern long long llroundf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern long llroundf (float);

		// extern long long llroundf (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern long llroundf (float);

		// extern long long llround (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern long llround (double);

		// extern long long llround (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern long llround (double);

		// extern long long llroundl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern long llroundl ([unsupported Builtin: long double]);

		// extern long long llroundl (long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern long llroundl ([unsupported Builtin: long double]);

		// extern float truncf (float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float truncf (float);

		// extern float truncf (float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float truncf (float);

		// extern double trunc (double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double trunc (double);

		// extern double trunc (double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double trunc (double);

		// extern long double truncl (long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] truncl ([unsupported Builtin: long double]);

		// extern long double truncl (long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] truncl ([unsupported Builtin: long double]);

		// extern float fmodf (float, float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float fmodf (float, float);

		// extern float fmodf (float, float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float fmodf (float, float);

		// extern double fmod (double, double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double fmod (double, double);

		// extern double fmod (double, double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double fmod (double, double);

		// extern long double fmodl (long double, long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] fmodl ([unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern long double fmodl (long double, long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] fmodl ([unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern float remainderf (float, float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float remainderf (float, float);

		// extern float remainderf (float, float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float remainderf (float, float);

		// extern double remainder (double, double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double remainder (double, double);

		// extern double remainder (double, double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double remainder (double, double);

		// extern long double remainderl (long double, long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] remainderl ([unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern long double remainderl (long double, long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] remainderl ([unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern float remquof (float, float, int *) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe float remquof (float, float, int*);

		// extern float remquof (float, float, int *) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe float remquof (float, float, int*);

		// extern double remquo (double, double, int *) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe double remquo (double, double, int*);

		// extern double remquo (double, double, int *) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe double remquo (double, double, int*);

		// extern long double remquol (long double, long double, int *) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe [unsupported Builtin: long double] remquol ([unsupported Builtin: long double], [unsupported Builtin: long double], int*);

		// extern long double remquol (long double, long double, int *) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe [unsupported Builtin: long double] remquol ([unsupported Builtin: long double], [unsupported Builtin: long double], int*);

		// extern float copysignf (float, float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float copysignf (float, float);

		// extern float copysignf (float, float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float copysignf (float, float);

		// extern double copysign (double, double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double copysign (double, double);

		// extern double copysign (double, double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double copysign (double, double);

		// extern long double copysignl (long double, long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] copysignl ([unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern long double copysignl (long double, long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] copysignl ([unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern float nanf (const char *) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe float nanf (sbyte*);

		// extern float nanf (const char *) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe float nanf (sbyte*);

		// extern double nan (const char *) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe double nan (sbyte*);

		// extern double nan (const char *) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe double nan (sbyte*);

		// extern long double nanl (const char *) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe [unsupported Builtin: long double] nanl (sbyte*);

		// extern long double nanl (const char *) __attribute__((nothrow)) __attribute__((pure));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe [unsupported Builtin: long double] nanl (sbyte*);

		// extern float nextafterf (float, float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float nextafterf (float, float);

		// extern float nextafterf (float, float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float nextafterf (float, float);

		// extern double nextafter (double, double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double nextafter (double, double);

		// extern double nextafter (double, double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double nextafter (double, double);

		// extern long double nextafterl (long double, long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] nextafterl ([unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern long double nextafterl (long double, long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] nextafterl ([unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern double nexttoward (double, long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double nexttoward (double, [unsupported Builtin: long double]);

		// extern double nexttoward (double, long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double nexttoward (double, [unsupported Builtin: long double]);

		// extern float nexttowardf (float, long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float nexttowardf (float, [unsupported Builtin: long double]);

		// extern float nexttowardf (float, long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float nexttowardf (float, [unsupported Builtin: long double]);

		// extern long double nexttowardl (long double, long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] nexttowardl ([unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern long double nexttowardl (long double, long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] nexttowardl ([unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern float fdimf (float, float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float fdimf (float, float);

		// extern float fdimf (float, float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float fdimf (float, float);

		// extern double fdim (double, double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double fdim (double, double);

		// extern double fdim (double, double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double fdim (double, double);

		// extern long double fdiml (long double, long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] fdiml ([unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern long double fdiml (long double, long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] fdiml ([unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern float fmaxf (float, float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float fmaxf (float, float);

		// extern float fmaxf (float, float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float fmaxf (float, float);

		// extern double fmax (double, double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double fmax (double, double);

		// extern double fmax (double, double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double fmax (double, double);

		// extern long double fmaxl (long double, long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] fmaxl ([unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern long double fmaxl (long double, long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] fmaxl ([unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern float fminf (float, float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float fminf (float, float);

		// extern float fminf (float, float) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float fminf (float, float);

		// extern double fmin (double, double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double fmin (double, double);

		// extern double fmin (double, double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double fmin (double, double);

		// extern long double fminl (long double, long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] fminl ([unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern long double fminl (long double, long double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] fminl ([unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern float fmaf (float, float, float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float fmaf (float, float, float);

		// extern float fmaf (float, float, float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float fmaf (float, float, float);

		// extern double fma (double, double, double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double fma (double, double, double);

		// extern double fma (double, double, double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double fma (double, double, double);

		// extern long double fmal (long double, long double, long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] fmal ([unsupported Builtin: long double], [unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern long double fmal (long double, long double, long double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] fmal ([unsupported Builtin: long double], [unsupported Builtin: long double], [unsupported Builtin: long double]);

		// extern float __inff () __attribute__((availability(macos, introduced=10.0, deprecated=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "use `(float)INFINITY` instead")]
		[Deprecated (PlatformName.MacOSX, 10, 9, message: "use `(float)INFINITY` instead")]
		[NoWatch, NoTV, NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __inff ();

		// extern double __inf () __attribute__((availability(macos, introduced=10.0, deprecated=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "use `INFINITY` instead")]
		[Deprecated (PlatformName.MacOSX, 10, 9, message: "use `INFINITY` instead")]
		[NoWatch, NoTV, NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __inf ();

		// extern long double __infl () __attribute__((availability(macos, introduced=10.0, deprecated=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "use `(long double)INFINITY` instead")]
		[Deprecated (PlatformName.MacOSX, 10, 9, message: "use `(long double)INFINITY` instead")]
		[NoWatch, NoTV, NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern [unsupported Builtin: long double] __infl ();

		// extern float __nan () __attribute__((availability(macos, introduced=10.0, deprecated=10.14))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "use `NAN` instead")]
		[Deprecated (PlatformName.MacOSX, 10, 14, message: "use `NAN` instead")]
		[NoWatch, NoTV, NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __nan ();

		// extern float __exp10f (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __exp10f (float);

		// extern float __exp10f (float) __attribute__((const)) __attribute__((nothrow)) __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0)));
		[Mac (10,9), iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __exp10f (float);

		// extern double __exp10 (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __exp10 (double);

		// extern double __exp10 (double) __attribute__((const)) __attribute__((nothrow)) __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0)));
		[Mac (10,9), iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __exp10 (double);

		// extern void __sincosf (float __x, float *__sinp, float *__cosp) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void __sincosf (float __x, float* __sinp, float* __cosp);

		// extern void __sincos (double __x, double *__sinp, double *__cosp) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void __sincos (double __x, double* __sinp, double* __cosp);

		// extern float __cospif (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __cospif (float);

		// extern float __cospif (float) __attribute__((const)) __attribute__((nothrow)) __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0)));
		[Mac (10,9), iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __cospif (float);

		// extern double __cospi (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __cospi (double);

		// extern double __cospi (double) __attribute__((const)) __attribute__((nothrow)) __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0)));
		[Mac (10,9), iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __cospi (double);

		// extern float __sinpif (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __sinpif (float);

		// extern float __sinpif (float) __attribute__((const)) __attribute__((nothrow)) __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0)));
		[Mac (10,9), iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __sinpif (float);

		// extern double __sinpi (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __sinpi (double);

		// extern double __sinpi (double) __attribute__((const)) __attribute__((nothrow)) __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0)));
		[Mac (10,9), iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __sinpi (double);

		// extern float __tanpif (float) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tanpif (float);

		// extern float __tanpif (float) __attribute__((const)) __attribute__((nothrow)) __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0)));
		[Mac (10,9), iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float __tanpif (float);

		// extern double __tanpi (double) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tanpi (double);

		// extern double __tanpi (double) __attribute__((const)) __attribute__((nothrow)) __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0)));
		[Mac (10,9), iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double __tanpi (double);

		// extern void __sincospif (float __x, float *__sinp, float *__cosp) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void __sincospif (float __x, float* __sinp, float* __cosp);

		// extern void __sincospi (double __x, double *__sinp, double *__cosp) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void __sincospi (double __x, double* __sinp, double* __cosp);

		// extern struct __float2 __sincosf_stret (float);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern __float2 __sincosf_stret (float);

		// extern struct __double2 __sincos_stret (double);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern __double2 __sincos_stret (double);

		// extern struct __float2 __sincospif_stret (float);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern __float2 __sincospif_stret (float);

		// extern struct __double2 __sincospi_stret (double);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern __double2 __sincospi_stret (double);

		// extern void __sincosf (float __x, float *__sinp, float *__cosp) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void __sincosf (float __x, float* __sinp, float* __cosp);

		// extern void __sincos (double __x, double *__sinp, double *__cosp) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void __sincos (double __x, double* __sinp, double* __cosp);

		// extern void __sincospif (float __x, float *__sinp, float *__cosp) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void __sincospif (float __x, float* __sinp, float* __cosp);

		// extern void __sincospi (double __x, double *__sinp, double *__cosp) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void __sincospi (double __x, double* __sinp, double* __cosp);

		// extern double j0 (double) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=3.2)));
		[Mac (10,0), iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double j0 (double);

		// extern double j1 (double) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=3.2)));
		[Mac (10,0), iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double j1 (double);

		// extern double jn (int, double) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=3.2)));
		[Mac (10,0), iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double jn (int, double);

		// extern double y0 (double) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=3.2)));
		[Mac (10,0), iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double y0 (double);

		// extern double y1 (double) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=3.2)));
		[Mac (10,0), iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double y1 (double);

		// extern double yn (int, double) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=3.2)));
		[Mac (10,0), iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double yn (int, double);

		// extern double scalb (double, double);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double scalb (double, double);

		// extern long rinttol (double) __attribute__((availability(macos, introduced=10.0, deprecated=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[Introduced (PlatformName.MacOSX, 10, 0)]
		[Deprecated (PlatformName.MacOSX, 10, 9)]
		[NoWatch, NoTV, NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint rinttol (double);

		// extern long roundtol (double) __attribute__((availability(macos, introduced=10.0, deprecated=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[Introduced (PlatformName.MacOSX, 10, 0)]
		[Deprecated (PlatformName.MacOSX, 10, 9)]
		[NoWatch, NoTV, NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint roundtol (double);

		// extern double drem (double, double) __attribute__((availability(macos, introduced=10.0, deprecated=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[Introduced (PlatformName.MacOSX, 10, 0)]
		[Deprecated (PlatformName.MacOSX, 10, 9)]
		[NoWatch, NoTV, NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double drem (double, double);

		// extern int finite (double) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int finite (double);

		// extern int finite (double) __attribute__((nothrow)) __attribute__((const)) __attribute__((availability(macos, introduced=10.0, deprecated=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use `isfinite((double)x)` instead.")]
		[Deprecated (PlatformName.MacOSX, 10, 9, message: "Use `isfinite((double)x)` instead.")]
		[NoWatch, NoTV, NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int finite (double);

		// extern double gamma (double) __attribute__((availability(macos, introduced=10.0, deprecated=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[Introduced (PlatformName.MacOSX, 10, 0)]
		[Deprecated (PlatformName.MacOSX, 10, 9)]
		[NoWatch, NoTV, NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double gamma (double);

		// extern double significand (double) __attribute__((availability(macos, introduced=10.0, deprecated=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use `2*frexp( )` or `scalbn(x, -ilogb(x))` instead.")]
		[Deprecated (PlatformName.MacOSX, 10, 9, message: "Use `2*frexp( )` or `scalbn(x, -ilogb(x))` instead.")]
		[NoWatch, NoTV, NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double significand (double);

		// extern int setjmp (int *) __attribute__((returns_twice));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int setjmp (int*);

		// extern int setjmp (int *) __attribute__((returns_twice));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int setjmp (int[]);

		// extern void longjmp (int *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void longjmp (int*, int);

		// extern void longjmp (int *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void longjmp (int[], int);

		// extern int _setjmp (int *) __attribute__((returns_twice));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int _setjmp (int*);

		// extern int _setjmp (int *) __attribute__((returns_twice));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int _setjmp (int[]);

		// extern void _longjmp (int *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void _longjmp (int*, int);

		// extern void _longjmp (int *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void _longjmp (int[], int);

		// extern int sigsetjmp (int *, int) __attribute__((returns_twice));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sigsetjmp (int*, int);

		// extern int sigsetjmp (int *, int) __attribute__((returns_twice));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int sigsetjmp (int[], int);

		// extern void siglongjmp (int *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void siglongjmp (int*, int);

		// extern void siglongjmp (int *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void siglongjmp (int[], int);

		// extern void longjmperror ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void longjmperror ();

		// extern void (*)(int) signal (int, void (*)(int));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe Action<int>* signal (int, Action<int>*);

		// extern int raise (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int raise (int);

		// extern void (* _Nullable)(int) bsd_signal (int, void (* _Nullable)(int));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe Action<int>* bsd_signal (int, [NullAllowed] Action<int>*);

		// extern int kill (pid_t, int) asm("_kill");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int kill (int, int);

		// extern int killpg (pid_t, int) asm("_killpg");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int killpg (int, int);

		// extern int pthread_kill (pthread_t _Nonnull, int) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_kill (pthread_t*, int);

		// extern int pthread_sigmask (int, const sigset_t * _Nullable, sigset_t * _Nullable) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) asm("_pthread_sigmask");
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_sigmask (int, [NullAllowed] uint*, [NullAllowed] uint*);

		// extern int sigaction (int, const struct sigaction *__restrict, struct sigaction *__restrict);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sigaction (int, sigaction*, sigaction*);

		// extern int sigaddset (sigset_t *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sigaddset (uint*, int);

		// extern int sigaltstack (const stack_t *__restrict, stack_t *__restrict) asm("_sigaltstack") __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sigaltstack (stack_t*, stack_t*);

		// extern int sigdelset (sigset_t *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sigdelset (uint*, int);

		// extern int sigemptyset (sigset_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sigemptyset (uint*);

		// extern int sigfillset (sigset_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sigfillset (uint*);

		// extern int sighold (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int sighold (int);

		// extern int sigignore (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int sigignore (int);

		// extern int siginterrupt (int, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int siginterrupt (int, int);

		// extern int sigismember (const sigset_t *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sigismember (uint*, int);

		// extern int sigpause (int) asm("_sigpause");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int sigpause (int);

		// extern int sigpending (sigset_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sigpending (uint*);

		// extern int sigprocmask (int, const sigset_t *__restrict, sigset_t *__restrict);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sigprocmask (int, uint*, uint*);

		// extern int sigrelse (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int sigrelse (int);

		// extern void (* _Nullable)(int) sigset (int, void (* _Nullable)(int));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe Action<int>* sigset (int, [NullAllowed] Action<int>*);

		// extern int sigsuspend (const sigset_t *) asm("_sigsuspend");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sigsuspend (uint*);

		// extern int sigwait (const sigset_t *__restrict, int *__restrict) asm("_sigwait");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sigwait (uint*, int*);

		// extern void psignal (unsigned int, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void psignal (uint, sbyte*);

		// extern int sigblock (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int sigblock (int);

		// extern int sigsetmask (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int sigsetmask (int);

		// extern int sigvec (int, struct sigvec *, struct sigvec *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sigvec (int, sigvec*, sigvec*);

		// extern int getpriority (int, id_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int getpriority (int, uint);

		// extern int getiopolicy_np (int, int) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int getiopolicy_np (int, int);

		// extern int getrlimit (int, struct rlimit *) asm("_getrlimit");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getrlimit (int, rlimit*);

		// extern int getrusage (int, struct rusage *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getrusage (int, rusage*);

		// extern int setpriority (int, id_t, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int setpriority (int, uint, int);

		// extern int setiopolicy_np (int, int, int) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int setiopolicy_np (int, int, int);

		// extern int setrlimit (int, const struct rlimit *) asm("_setrlimit");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int setrlimit (int, rlimit*);

		// extern pid_t wait (int *) asm("_wait");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int wait (int*);

		// extern pid_t waitpid (pid_t, int *, int) asm("_waitpid");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int waitpid (int, int*, int);

		// extern int waitid (idtype_t, id_t, siginfo_t *, int) asm("_waitid");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int waitid (idtype_t, uint, siginfo_t*, int);

		// extern pid_t wait3 (int *, int, struct rusage *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int wait3 (int*, int, rusage*);

		// extern pid_t wait4 (pid_t, int *, int, struct rusage *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int wait4 (int, int*, int, rusage*);

		// extern void * alloca (unsigned long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* alloca (nuint);

		// extern void * alloca (size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* alloca (nuint);

		// extern void * malloc (unsigned long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* malloc (nuint);

		// extern void * malloc (size_t __size) __attribute__((warn_unused_result)) __attribute__((alloc_size(1)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* malloc (nuint __size);

		// extern void * calloc (unsigned long, unsigned long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* calloc (nuint, nuint);

		// extern void * calloc (size_t __count, size_t __size) __attribute__((warn_unused_result)) __attribute__((alloc_size(1, 2)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* calloc (nuint __count, nuint __size);

		// extern void free (void *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void free (void*);

		// extern void * realloc (void *, unsigned long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* realloc (void*, nuint);

		// extern void * realloc (void *__ptr, size_t __size) __attribute__((warn_unused_result)) __attribute__((alloc_size(2)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* realloc (void* __ptr, nuint __size);

		// extern void * valloc (size_t) __attribute__((alloc_size(1)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* valloc (nuint);

		// extern void * aligned_alloc (size_t __alignment, size_t __size) __attribute__((warn_unused_result)) __attribute__((alloc_size(2))) __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(tvos, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0)));
		[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* aligned_alloc (nuint __alignment, nuint __size);

		// extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size) __attribute__((availability(ios, introduced=3.0)));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int posix_memalign (void** __memptr, nuint __alignment, nuint __size);

		// extern void abort ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void abort ();

		// extern void abort () __attribute__((cold));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void abort ();

		// extern int abs (int) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int abs (int);

		// extern int abs (int) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int abs (int);

		// extern int atexit (void (* _Nonnull)(void));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int atexit (Action*);

		// extern double atof (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe double atof (sbyte*);

		// extern int atoi (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int atoi (sbyte*);

		// extern long atol (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint atol (sbyte*);

		// extern long long atoll (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe long atoll (sbyte*);

		// extern void * bsearch (const void *__key, const void *__base, size_t __nel, size_t __width, int (* _Nonnull)(const void *, const void *) __compar);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* bsearch (void* __key, void* __base, nuint __nel, nuint __width, Func<void*, void*, int>* __compar);

		// extern div_t div (int, int) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern div_t div (int, int);

		// extern void exit (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void exit (int);

		// extern void exit (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void exit (int);

		// extern char * getenv (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* getenv (sbyte*);

		// extern long labs (long) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint labs (nint);

		// extern long labs (long) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint labs (nint);

		// extern ldiv_t ldiv (long, long) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ldiv_t ldiv (nint, nint);

		// extern long long llabs (long long) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern long llabs (long);

		// extern long long llabs (long long) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern long llabs (long);

		// extern lldiv_t lldiv (long long, long long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern lldiv_t lldiv (long, long);

		// extern int mblen (const char *__s, size_t __n);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mblen (sbyte* __s, nuint __n);

		// extern size_t mbstowcs (wchar_t *__restrict, const char *__restrict, size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint mbstowcs (int*, sbyte*, nuint);

		// extern int mbtowc (wchar_t *__restrict, const char *__restrict, size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mbtowc (int*, sbyte*, nuint);

		// extern void qsort (void *__base, size_t __nel, size_t __width, int (* _Nonnull)(const void *, const void *) __compar);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void qsort (void* __base, nuint __nel, nuint __width, Func<void*, void*, int>* __compar);

		// extern int rand () __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int rand ();

		// extern void srand (unsigned int) __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void srand (uint);

		// extern double strtod (const char *, char **);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe double strtod (sbyte*, sbyte**);

		// extern double strtod (const char *, char **) asm("_strtod");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe double strtod (sbyte*, sbyte**);

		// extern float strtof (const char *, char **);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe float strtof (sbyte*, sbyte**);

		// extern float strtof (const char *, char **) asm("_strtof");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe float strtof (sbyte*, sbyte**);

		// extern long strtol (const char *, char **, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint strtol (sbyte*, sbyte**, int);

		// extern long strtol (const char *__str, char **__endptr, int __base);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint strtol (sbyte* __str, sbyte** __endptr, int __base);

		// extern long double strtold (const char *, char **);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe [unsupported Builtin: long double] strtold (sbyte*, sbyte**);

		// extern long double strtold (const char *, char **);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe [unsupported Builtin: long double] strtold (sbyte*, sbyte**);

		// extern long long strtoll (const char *, char **, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe long strtoll (sbyte*, sbyte**, int);

		// extern long long strtoll (const char *__str, char **__endptr, int __base);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe long strtoll (sbyte* __str, sbyte** __endptr, int __base);

		// extern unsigned long strtoul (const char *, char **, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint strtoul (sbyte*, sbyte**, int);

		// extern unsigned long strtoul (const char *__str, char **__endptr, int __base);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint strtoul (sbyte* __str, sbyte** __endptr, int __base);

		// extern unsigned long long strtoull (const char *, char **, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe ulong strtoull (sbyte*, sbyte**, int);

		// extern unsigned long long strtoull (const char *__str, char **__endptr, int __base);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe ulong strtoull (sbyte* __str, sbyte** __endptr, int __base);

		// extern int system (const char *) asm("_system") __attribute__((availability(swift, unavailable))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[NoWatch, NoTV, NoiOS, Mac (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int system (sbyte*);

		// extern size_t wcstombs (char *__restrict, const wchar_t *__restrict, size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint wcstombs (sbyte*, int*, nuint);

		// extern int wctomb (char *, wchar_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int wctomb (sbyte*, int);

		// extern void _Exit (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void _Exit (int);

		// extern void _Exit (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void _Exit (int);

		// extern long a64l (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint a64l (sbyte*);

		// extern double drand48 ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double drand48 ();

		// extern char * ecvt (double, int, int *__restrict, int *__restrict);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* ecvt (double, int, int*, int*);

		// extern double erand48 (unsigned short *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double erand48 (ushort[]);

		// extern char * fcvt (double, int, int *__restrict, int *__restrict);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* fcvt (double, int, int*, int*);

		// extern char * gcvt (double, int, char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* gcvt (double, int, sbyte*);

		// extern int getsubopt (char **, char *const *, char **);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getsubopt (sbyte**, sbyte**, sbyte**);

		// extern int grantpt (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int grantpt (int);

		// extern char * initstate (unsigned int, char *, size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* initstate (uint, sbyte*, nuint);

		// extern long jrand48 (unsigned short *) __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint jrand48 (ushort[]);

		// extern char * l64a (long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* l64a (nint);

		// extern void lcong48 (unsigned short *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void lcong48 (ushort[]);

		// extern long lrand48 () __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint lrand48 ();

		// extern char * mktemp (char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* mktemp (sbyte*);

		// extern int mkstemp (char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mkstemp (sbyte*);

		// extern long mrand48 () __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint mrand48 ();

		// extern long nrand48 (unsigned short *) __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint nrand48 (ushort[]);

		// extern int posix_openpt (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int posix_openpt (int);

		// extern char * ptsname (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* ptsname (int);

		// extern int ptsname_r (int fildes, char *buffer, size_t buflen) __attribute__((availability(macos, introduced=10.13.4))) __attribute__((availability(ios, introduced=11.3))) __attribute__((availability(tvos, introduced=11.3))) __attribute__((availability(watchos, introduced=4.3)));
		[Watch (4,3), TV (11,3), Mac (10,13,4), iOS (11,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int ptsname_r (int fildes, sbyte* buffer, nuint buflen);

		// extern int putenv (char *) asm("_putenv");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int putenv (sbyte*);

		// extern long random () __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint random ();

		// extern int rand_r (unsigned int *) __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int rand_r (uint*);

		// extern char * realpath (const char *__restrict, char *__restrict) asm("_realpath$DARWIN_EXTSN");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* realpath (sbyte*, sbyte*);

		// extern unsigned short * seed48 (unsigned short *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe ushort* seed48 (ushort[]);

		// extern int setenv (const char *__name, const char *__value, int __overwrite) asm("_setenv");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int setenv (sbyte* __name, sbyte* __value, int __overwrite);

		// extern void setkey (const char *) asm("_setkey");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void setkey (sbyte*);

		// extern char * setstate (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* setstate (sbyte*);

		// extern void srand48 (long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void srand48 (nint);

		// extern void srandom (unsigned int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void srandom (uint);

		// extern int unlockpt (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int unlockpt (int);

		// extern int unsetenv (const char *) asm("_unsetenv");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int unsetenv (sbyte*);

		// extern uint32_t arc4random ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint arc4random ();

		// extern void arc4random_addrandom (unsigned char *, int) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(macos, deprecated=10.12))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(tvos, introduced=2.0))) __attribute__((availability(tvos, deprecated=10.0))) __attribute__((availability(watchos, introduced=1.0))) __attribute__((availability(watchos, deprecated=3.0)));
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "use arc4random_stir")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "use arc4random_stir")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "use arc4random_stir")]
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "use arc4random_stir")]
		[Watch (1,0), TV (2,0), Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void arc4random_addrandom (byte*, int);

		// extern void arc4random_buf (void *__buf, size_t __nbytes) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void arc4random_buf (void* __buf, nuint __nbytes);

		// extern void arc4random_stir ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void arc4random_stir ();

		// extern uint32_t arc4random_uniform (uint32_t __upper_bound) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint arc4random_uniform (uint __upper_bound);

		// extern int atexit_b (void (^ _Nonnull)(void)) __attribute__((availability(ios, introduced=3.2)));
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int atexit_b (Action);

		// extern void * bsearch_b (const void *__key, const void *__base, size_t __nel, size_t __width, int (^ _Nonnull)(const void *, const void *) __compar) __attribute__((availability(ios, introduced=3.2)));
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* bsearch_b (void* __key, void* __base, nuint __nel, nuint __width, Func<void*, void*, int> __compar);

		// extern char * cgetcap (char *, const char *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* cgetcap (sbyte*, sbyte*, int);

		// extern int cgetclose ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int cgetclose ();

		// extern int cgetent (char **, char **, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int cgetent (sbyte**, sbyte**, sbyte*);

		// extern int cgetfirst (char **, char **);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int cgetfirst (sbyte**, sbyte**);

		// extern int cgetmatch (const char *, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int cgetmatch (sbyte*, sbyte*);

		// extern int cgetnext (char **, char **);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int cgetnext (sbyte**, sbyte**);

		// extern int cgetnum (char *, const char *, long *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int cgetnum (sbyte*, sbyte*, nint*);

		// extern int cgetset (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int cgetset (sbyte*);

		// extern int cgetstr (char *, const char *, char **);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int cgetstr (sbyte*, sbyte*, sbyte**);

		// extern int cgetustr (char *, const char *, char **);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int cgetustr (sbyte*, sbyte*, sbyte**);

		// extern int daemon (int, int) asm("_daemon") __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[Introduced (PlatformName.iOS, 2, 0, message: "Use posix_spawn APIs instead.")]
		[Deprecated (PlatformName.iOS, 2, 0, message: "Use posix_spawn APIs instead.")]
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int daemon (int, int);

		// extern char * devname (dev_t, mode_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* devname (int, ushort);

		// extern char * devname_r (dev_t, mode_t, char *buf, int len);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* devname_r (int, ushort, sbyte* buf, int len);

		// extern char * getbsize (int *, long *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* getbsize (int*, nint*);

		// extern int getloadavg (double *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int getloadavg (double[], int);

		// extern const char * getprogname ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* getprogname ();

		// extern void setprogname (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void setprogname (sbyte*);

		// extern int heapsort (void *__base, size_t __nel, size_t __width, int (* _Nonnull)(const void *, const void *) __compar);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int heapsort (void* __base, nuint __nel, nuint __width, Func<void*, void*, int>* __compar);

		// extern int heapsort_b (void *__base, size_t __nel, size_t __width, int (^ _Nonnull)(const void *, const void *) __compar) __attribute__((availability(ios, introduced=3.2)));
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int heapsort_b (void* __base, nuint __nel, nuint __width, Func<void*, void*, int> __compar);

		// extern int mergesort (void *__base, size_t __nel, size_t __width, int (* _Nonnull)(const void *, const void *) __compar);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mergesort (void* __base, nuint __nel, nuint __width, Func<void*, void*, int>* __compar);

		// extern int mergesort_b (void *__base, size_t __nel, size_t __width, int (^ _Nonnull)(const void *, const void *) __compar) __attribute__((availability(ios, introduced=3.2)));
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mergesort_b (void* __base, nuint __nel, nuint __width, Func<void*, void*, int> __compar);

		// extern void psort (void *__base, size_t __nel, size_t __width, int (* _Nonnull)(const void *, const void *) __compar) __attribute__((availability(ios, introduced=3.2)));
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void psort (void* __base, nuint __nel, nuint __width, Func<void*, void*, int>* __compar);

		// extern void psort_b (void *__base, size_t __nel, size_t __width, int (^ _Nonnull)(const void *, const void *) __compar) __attribute__((availability(ios, introduced=3.2)));
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void psort_b (void* __base, nuint __nel, nuint __width, Func<void*, void*, int> __compar);

		// extern void psort_r (void *__base, size_t __nel, size_t __width, void *, int (* _Nonnull)(void *, const void *, const void *) __compar) __attribute__((availability(ios, introduced=3.2)));
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void psort_r (void* __base, nuint __nel, nuint __width, void*, Func<void*, void*, void*, int>* __compar);

		// extern void qsort_b (void *__base, size_t __nel, size_t __width, int (^ _Nonnull)(const void *, const void *) __compar) __attribute__((availability(ios, introduced=3.2)));
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void qsort_b (void* __base, nuint __nel, nuint __width, Func<void*, void*, int> __compar);

		// extern void qsort_r (void *__base, size_t __nel, size_t __width, void *, int (* _Nonnull)(void *, const void *, const void *) __compar);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void qsort_r (void* __base, nuint __nel, nuint __width, void*, Func<void*, void*, void*, int>* __compar);

		// extern int radixsort (const unsigned char **__base, int __nel, const unsigned char *__table, unsigned int __endbyte);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int radixsort (byte** __base, int __nel, byte* __table, uint __endbyte);

		// extern int sradixsort (const unsigned char **__base, int __nel, const unsigned char *__table, unsigned int __endbyte);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sradixsort (byte** __base, int __nel, byte* __table, uint __endbyte);

		// extern void sranddev ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void sranddev ();

		// extern void srandomdev ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void srandomdev ();

		// extern void * reallocf (void *__ptr, size_t __size) __attribute__((alloc_size(2)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* reallocf (void* __ptr, nuint __size);

		// extern long long strtoq (const char *__str, char **__endptr, int __base);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe long strtoq (sbyte* __str, sbyte** __endptr, int __base);

		// extern unsigned long long strtouq (const char *__str, char **__endptr, int __base);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe ulong strtouq (sbyte* __str, sbyte** __endptr, int __base);

		// extern void * memchr (const void *, int, unsigned long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* memchr (void*, int, nuint);

		// extern void * memchr (const void *__s, int __c, size_t __n);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* memchr (void* __s, int __c, nuint __n);

		// extern int memcmp (const void *, const void *, unsigned long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int memcmp (void*, void*, nuint);

		// extern int memcmp (const void *__s1, const void *__s2, size_t __n);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int memcmp (void* __s1, void* __s2, nuint __n);

		// extern void * memcpy (void *, const void *, unsigned long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* memcpy (void*, void*, nuint);

		// extern void * memcpy (void *__dst, const void *__src, size_t __n);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* memcpy (void* __dst, void* __src, nuint __n);

		// extern void * memmove (void *, const void *, unsigned long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* memmove (void*, void*, nuint);

		// extern void * memmove (void *__dst, const void *__src, size_t __len);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* memmove (void* __dst, void* __src, nuint __len);

		// extern void * memset (void *, int, unsigned long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* memset (void*, int, nuint);

		// extern void * memset (void *__b, int __c, size_t __len);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* memset (void* __b, int __c, nuint __len);

		// extern char * strcat (char *, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strcat (sbyte*, sbyte*);

		// extern char * strcat (char *__s1, const char *__s2);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strcat (sbyte* __s1, sbyte* __s2);

		// extern char * strchr (const char *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strchr (sbyte*, int);

		// extern char * strchr (const char *__s, int __c);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strchr (sbyte* __s, int __c);

		// extern int strcmp (const char *, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int strcmp (sbyte*, sbyte*);

		// extern int strcmp (const char *__s1, const char *__s2);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int strcmp (sbyte* __s1, sbyte* __s2);

		// extern int strcoll (const char *__s1, const char *__s2);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int strcoll (sbyte* __s1, sbyte* __s2);

		// extern char * strcpy (char *, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strcpy (sbyte*, sbyte*);

		// extern char * strcpy (char *__dst, const char *__src);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strcpy (sbyte* __dst, sbyte* __src);

		// extern unsigned long strcspn (const char *, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint strcspn (sbyte*, sbyte*);

		// extern unsigned long strcspn (const char *__s, const char *__charset);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint strcspn (sbyte* __s, sbyte* __charset);

		// extern char * strerror (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strerror (int);

		// extern char * strerror (int __errnum) asm("_strerror");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strerror (int __errnum);

		// extern unsigned long strlen (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint strlen (sbyte*);

		// extern unsigned long strlen (const char *__s);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint strlen (sbyte* __s);

		// extern char * strncat (char *, const char *, unsigned long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strncat (sbyte*, sbyte*, nuint);

		// extern char * strncat (char *__s1, const char *__s2, size_t __n);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strncat (sbyte* __s1, sbyte* __s2, nuint __n);

		// extern int strncmp (const char *, const char *, unsigned long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int strncmp (sbyte*, sbyte*, nuint);

		// extern int strncmp (const char *__s1, const char *__s2, size_t __n);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int strncmp (sbyte* __s1, sbyte* __s2, nuint __n);

		// extern char * strncpy (char *, const char *, unsigned long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strncpy (sbyte*, sbyte*, nuint);

		// extern char * strncpy (char *__dst, const char *__src, size_t __n);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strncpy (sbyte* __dst, sbyte* __src, nuint __n);

		// extern char * strpbrk (const char *, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strpbrk (sbyte*, sbyte*);

		// extern char * strpbrk (const char *__s, const char *__charset);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strpbrk (sbyte* __s, sbyte* __charset);

		// extern char * strrchr (const char *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strrchr (sbyte*, int);

		// extern char * strrchr (const char *__s, int __c);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strrchr (sbyte* __s, int __c);

		// extern unsigned long strspn (const char *, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint strspn (sbyte*, sbyte*);

		// extern unsigned long strspn (const char *__s, const char *__charset);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint strspn (sbyte* __s, sbyte* __charset);

		// extern char * strstr (const char *, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strstr (sbyte*, sbyte*);

		// extern char * strstr (const char *__big, const char *__little);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strstr (sbyte* __big, sbyte* __little);

		// extern char * strtok (char *, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strtok (sbyte*, sbyte*);

		// extern char * strtok (char *__str, const char *__sep);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strtok (sbyte* __str, sbyte* __sep);

		// extern unsigned long strxfrm (char *, const char *, unsigned long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint strxfrm (sbyte*, sbyte*, nuint);

		// extern unsigned long strxfrm (char *__s1, const char *__s2, size_t __n);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint strxfrm (sbyte* __s1, sbyte* __s2, nuint __n);

		// extern char * strtok_r (char *__str, const char *__sep, char **__lasts);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strtok_r (sbyte* __str, sbyte* __sep, sbyte** __lasts);

		// extern int strerror_r (int __errnum, char *__strerrbuf, size_t __buflen);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int strerror_r (int __errnum, sbyte* __strerrbuf, nuint __buflen);

		// extern char * strdup (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strdup (sbyte*);

		// extern char * strdup (const char *__s1);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strdup (sbyte* __s1);

		// extern void * memccpy (void *__dst, const void *__src, int __c, size_t __n);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* memccpy (void* __dst, void* __src, int __c, nuint __n);

		// extern char * stpcpy (char *, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* stpcpy (sbyte*, sbyte*);

		// extern char * stpcpy (char *__dst, const char *__src);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* stpcpy (sbyte* __dst, sbyte* __src);

		// extern char * stpncpy (char *, const char *, unsigned long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* stpncpy (sbyte*, sbyte*, nuint);

		// extern char * stpncpy (char *__dst, const char *__src, size_t __n) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* stpncpy (sbyte* __dst, sbyte* __src, nuint __n);

		// extern char * strndup (const char *, unsigned long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strndup (sbyte*, nuint);

		// extern char * strndup (const char *__s1, size_t __n) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strndup (sbyte* __s1, nuint __n);

		// extern size_t strnlen (const char *__s1, size_t __n) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint strnlen (sbyte* __s1, nuint __n);

		// extern char * strsignal (int __sig);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strsignal (int __sig);

		// extern errno_t memset_s (void *__s, rsize_t __smax, int __c, rsize_t __n) __attribute__((availability(ios, introduced=7.0)));
		[iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int memset_s (void* __s, nuint __smax, int __c, nuint __n);

		// extern void * memmem (const void *__big, size_t __big_len, const void *__little, size_t __little_len) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* memmem (void* __big, nuint __big_len, void* __little, nuint __little_len);

		// extern void memset_pattern4 (void *__b, const void *__pattern4, size_t __len) __attribute__((availability(ios, introduced=3.0)));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void memset_pattern4 (void* __b, void* __pattern4, nuint __len);

		// extern void memset_pattern8 (void *__b, const void *__pattern8, size_t __len) __attribute__((availability(ios, introduced=3.0)));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void memset_pattern8 (void* __b, void* __pattern8, nuint __len);

		// extern void memset_pattern16 (void *__b, const void *__pattern16, size_t __len) __attribute__((availability(ios, introduced=3.0)));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void memset_pattern16 (void* __b, void* __pattern16, nuint __len);

		// extern char * strcasestr (const char *__big, const char *__little);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strcasestr (sbyte* __big, sbyte* __little);

		// extern char * strnstr (const char *__big, const char *__little, size_t __len);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strnstr (sbyte* __big, sbyte* __little, nuint __len);

		// extern unsigned long strlcat (char *, const char *, unsigned long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint strlcat (sbyte*, sbyte*, nuint);

		// extern unsigned long strlcat (char *__dst, const char *__source, size_t __size);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint strlcat (sbyte* __dst, sbyte* __source, nuint __size);

		// extern unsigned long strlcpy (char *, const char *, unsigned long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint strlcpy (sbyte*, sbyte*, nuint);

		// extern unsigned long strlcpy (char *__dst, const char *__source, size_t __size);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint strlcpy (sbyte* __dst, sbyte* __source, nuint __size);

		// extern void strmode (int __mode, char *__bp);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void strmode (int __mode, sbyte* __bp);

		// extern char * strsep (char **__stringp, const char *__delim);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* strsep (sbyte** __stringp, sbyte* __delim);

		// extern void swab (const void *__restrict, void *__restrict, ssize_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void swab (void*, void*, nint);

		// extern int timingsafe_bcmp (const void *__b1, const void *__b2, size_t __len) __attribute__((availability(macos, introduced=10.12.1))) __attribute__((availability(ios, introduced=10.1))) __attribute__((availability(tvos, introduced=10.0.1))) __attribute__((availability(watchos, introduced=3.1)));
		[Watch (3,1), TV (10,0,1), Mac (10,12,1), iOS (10,1)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int timingsafe_bcmp (void* __b1, void* __b2, nuint __len);

		// extern int bcmp (const void *, const void *, size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int bcmp (void*, void*, nuint);

		// extern void bcopy (const void *, void *, size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void bcopy (void*, void*, nuint);

		// extern void bzero (void *, unsigned long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void bzero (void*, nuint);

		// extern void bzero (void *, size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void bzero (void*, nuint);

		// extern char * index (const char *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* index (sbyte*, int);

		// extern char * index (const char *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* index (sbyte*, int);

		// extern char * rindex (const char *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* rindex (sbyte*, int);

		// extern char * rindex (const char *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* rindex (sbyte*, int);

		// extern int ffs (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int ffs (int);

		// extern int strcasecmp (const char *, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int strcasecmp (sbyte*, sbyte*);

		// extern int strcasecmp (const char *, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int strcasecmp (sbyte*, sbyte*);

		// extern int strncasecmp (const char *, const char *, unsigned long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int strncasecmp (sbyte*, sbyte*, nuint);

		// extern int strncasecmp (const char *, const char *, size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int strncasecmp (sbyte*, sbyte*, nuint);

		// extern int ffsl (long) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int ffsl (nint);

		// extern int ffsll (long long) __attribute__((availability(ios, introduced=7.0)));
		[iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int ffsll (long);

		// extern int fls (int) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int fls (int);

		// extern int flsl (long) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int flsl (nint);

		// extern int flsll (long long) __attribute__((availability(ios, introduced=7.0)));
		[iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int flsll (long);

		// extern intmax_t imaxabs (intmax_t j) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint imaxabs (nint j);

		// extern imaxdiv_t imaxdiv (intmax_t __numer, intmax_t __denom) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern imaxdiv_t imaxdiv (nint __numer, nint __denom);

		// extern intmax_t strtoimax (const char *__restrict __nptr, char **__restrict __endptr, int __base) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint strtoimax (sbyte* __nptr, sbyte** __endptr, int __base);

		// extern uintmax_t strtoumax (const char *__restrict __nptr, char **__restrict __endptr, int __base) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint strtoumax (sbyte* __nptr, sbyte** __endptr, int __base);

		// extern intmax_t wcstoimax (const wchar_t *__restrict __nptr, wchar_t **__restrict __endptr, int __base) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint wcstoimax (int* __nptr, int** __endptr, int __base);

		// extern uintmax_t wcstoumax (const wchar_t *__restrict __nptr, wchar_t **__restrict __endptr, int __base) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint wcstoumax (int* __nptr, int** __endptr, int __base);

		// extern void * _Block_copy (const void *aBlock) __attribute__((availability(ios, introduced=3.2)));
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* _Block_copy (void* aBlock);

		// extern void _Block_release (const void *aBlock) __attribute__((availability(ios, introduced=3.2)));
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void _Block_release (void* aBlock);

		// extern void _Block_object_assign (void *, const void *, const int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void _Block_object_assign (void*, void*, int);

		// extern void _Block_object_assign (void *, const void *, const int) __attribute__((availability(ios, introduced=3.2)));
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void _Block_object_assign (void*, void*, int);

		// extern void _Block_object_dispose (const void *, const int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void _Block_object_dispose (void*, int);

		// extern void _Block_object_dispose (const void *, const int) __attribute__((availability(ios, introduced=3.2)));
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void _Block_object_dispose (void*, int);

		// extern void Debugger () __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Debugger ();

		// extern void DebugStr (ConstStr255Param debuggerMsg) __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void DebugStr (byte* debuggerMsg);

		// extern void SysBreak () __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void SysBreak ();

		// extern void SysBreakStr (ConstStr255Param debuggerMsg) __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void SysBreakStr (byte* debuggerMsg);

		// extern void SysBreakFunc (ConstStr255Param debuggerMsg) __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void SysBreakFunc (byte* debuggerMsg);

		// CFRange CFRangeMake (CFIndex loc, CFIndex len) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CFRange CFRangeMake (nint loc, nint len);

		// extern CFRange __CFRangeMake (CFIndex loc, CFIndex len);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CFRange __CFRangeMake (nint loc, nint len);

		// extern CFTypeID CFNullGetTypeID ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFNullGetTypeID ();

		// extern CFTypeID CFAllocatorGetTypeID ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFAllocatorGetTypeID ();

		// extern void CFAllocatorSetDefault (CFAllocatorRef allocator);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFAllocatorSetDefault (CFAllocatorRef* allocator);

		// extern CFAllocatorRef CFAllocatorGetDefault ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFAllocatorRef* CFAllocatorGetDefault ();

		// extern CFAllocatorRef CFAllocatorCreate (CFAllocatorRef allocator, CFAllocatorContext *context);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFAllocatorRef* CFAllocatorCreate (CFAllocatorRef* allocator, CFAllocatorContext* context);

		// extern void * CFAllocatorAllocate (CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* CFAllocatorAllocate (CFAllocatorRef* allocator, nint size, nuint hint);

		// extern void * CFAllocatorReallocate (CFAllocatorRef allocator, void *ptr, CFIndex newsize, CFOptionFlags hint);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* CFAllocatorReallocate (CFAllocatorRef* allocator, void* ptr, nint newsize, nuint hint);

		// extern void CFAllocatorDeallocate (CFAllocatorRef allocator, void *ptr);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFAllocatorDeallocate (CFAllocatorRef* allocator, void* ptr);

		// extern CFIndex CFAllocatorGetPreferredSizeForSize (CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFAllocatorGetPreferredSizeForSize (CFAllocatorRef* allocator, nint size, nuint hint);

		// extern void CFAllocatorGetContext (CFAllocatorRef allocator, CFAllocatorContext *context);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFAllocatorGetContext (CFAllocatorRef* allocator, CFAllocatorContext* context);

		// extern CFTypeID CFGetTypeID (CFTypeRef cf) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint CFGetTypeID (void* cf);

		// extern CFStringRef CFCopyTypeIDDescription (CFTypeID type_id) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFCopyTypeIDDescription (nuint type_id);

		// extern CFTypeRef CFRetain (CFTypeRef cf) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* CFRetain (void* cf);

		// extern void CFRelease (CFTypeRef cf) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFRelease (void* cf);

		// extern CFTypeRef CFAutorelease (CFTypeRef arg) __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* CFAutorelease (void* arg);

		// extern CFIndex CFGetRetainCount (CFTypeRef cf) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFGetRetainCount (void* cf);

		// extern Boolean CFEqual (CFTypeRef cf1, CFTypeRef cf2) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFEqual (void* cf1, void* cf2);

		// extern CFHashCode CFHash (CFTypeRef cf) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint CFHash (void* cf);

		// extern CFStringRef CFCopyDescription (CFTypeRef cf) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFCopyDescription (void* cf);

		// extern CFAllocatorRef CFGetAllocator (CFTypeRef cf) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFAllocatorRef* CFGetAllocator (void* cf);

		// extern CFTypeRef CFMakeCollectable (CFTypeRef cf);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* CFMakeCollectable (void* cf);

		// extern CFTypeID CFArrayGetTypeID () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFArrayGetTypeID ();

		// extern CFArrayRef CFArrayCreate (CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFArrayRef* CFArrayCreate (CFAllocatorRef* allocator, void** values, nint numValues, CFArrayCallBacks* callBacks);

		// extern CFArrayRef CFArrayCreateCopy (CFAllocatorRef allocator, CFArrayRef theArray) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFArrayRef* CFArrayCreateCopy (CFAllocatorRef* allocator, CFArrayRef* theArray);

		// extern CFMutableArrayRef CFArrayCreateMutable (CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFMutableArrayRef* CFArrayCreateMutable (CFAllocatorRef* allocator, nint capacity, CFArrayCallBacks* callBacks);

		// extern CFMutableArrayRef CFArrayCreateMutableCopy (CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFMutableArrayRef* CFArrayCreateMutableCopy (CFAllocatorRef* allocator, nint capacity, CFArrayRef* theArray);

		// extern CFIndex CFArrayGetCount (CFArrayRef theArray) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFArrayGetCount (CFArrayRef* theArray);

		// extern CFIndex CFArrayGetCountOfValue (CFArrayRef theArray, CFRange range, const void *value) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFArrayGetCountOfValue (CFArrayRef* theArray, CFRange range, void* value);

		// extern Boolean CFArrayContainsValue (CFArrayRef theArray, CFRange range, const void *value) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFArrayContainsValue (CFArrayRef* theArray, CFRange range, void* value);

		// extern const void * CFArrayGetValueAtIndex (CFArrayRef theArray, CFIndex idx) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* CFArrayGetValueAtIndex (CFArrayRef* theArray, nint idx);

		// extern void CFArrayGetValues (CFArrayRef theArray, CFRange range, const void **values) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFArrayGetValues (CFArrayRef* theArray, CFRange range, void** values);

		// extern void CFArrayApplyFunction (CFArrayRef theArray, CFRange range, CFArrayApplierFunction applier, void *context) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFArrayApplyFunction (CFArrayRef* theArray, CFRange range, CFArrayApplierFunction* applier, void* context);

		// extern CFIndex CFArrayGetFirstIndexOfValue (CFArrayRef theArray, CFRange range, const void *value) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFArrayGetFirstIndexOfValue (CFArrayRef* theArray, CFRange range, void* value);

		// extern CFIndex CFArrayGetLastIndexOfValue (CFArrayRef theArray, CFRange range, const void *value) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFArrayGetLastIndexOfValue (CFArrayRef* theArray, CFRange range, void* value);

		// extern CFIndex CFArrayBSearchValues (CFArrayRef theArray, CFRange range, const void *value, CFComparatorFunction comparator, void *context) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFArrayBSearchValues (CFArrayRef* theArray, CFRange range, void* value, CFComparatorFunction* comparator, void* context);

		// extern void CFArrayAppendValue (CFMutableArrayRef theArray, const void *value) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFArrayAppendValue (CFMutableArrayRef* theArray, void* value);

		// extern void CFArrayInsertValueAtIndex (CFMutableArrayRef theArray, CFIndex idx, const void *value) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFArrayInsertValueAtIndex (CFMutableArrayRef* theArray, nint idx, void* value);

		// extern void CFArraySetValueAtIndex (CFMutableArrayRef theArray, CFIndex idx, const void *value) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFArraySetValueAtIndex (CFMutableArrayRef* theArray, nint idx, void* value);

		// extern void CFArrayRemoveValueAtIndex (CFMutableArrayRef theArray, CFIndex idx) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFArrayRemoveValueAtIndex (CFMutableArrayRef* theArray, nint idx);

		// extern void CFArrayRemoveAllValues (CFMutableArrayRef theArray) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFArrayRemoveAllValues (CFMutableArrayRef* theArray);

		// extern void CFArrayReplaceValues (CFMutableArrayRef theArray, CFRange range, const void **newValues, CFIndex newCount) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFArrayReplaceValues (CFMutableArrayRef* theArray, CFRange range, void** newValues, nint newCount);

		// extern void CFArrayExchangeValuesAtIndices (CFMutableArrayRef theArray, CFIndex idx1, CFIndex idx2) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFArrayExchangeValuesAtIndices (CFMutableArrayRef* theArray, nint idx1, nint idx2);

		// extern void CFArraySortValues (CFMutableArrayRef theArray, CFRange range, CFComparatorFunction comparator, void *context) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFArraySortValues (CFMutableArrayRef* theArray, CFRange range, CFComparatorFunction* comparator, void* context);

		// extern void CFArrayAppendArray (CFMutableArrayRef theArray, CFArrayRef otherArray, CFRange otherRange) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFArrayAppendArray (CFMutableArrayRef* theArray, CFArrayRef* otherArray, CFRange otherRange);

		// extern CFTypeID CFBagGetTypeID () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFBagGetTypeID ();

		// extern CFBagRef CFBagCreate (CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFBagCallBacks *callBacks) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFBagRef* CFBagCreate (CFAllocatorRef* allocator, void** values, nint numValues, CFBagCallBacks* callBacks);

		// extern CFBagRef CFBagCreateCopy (CFAllocatorRef allocator, CFBagRef theBag) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFBagRef* CFBagCreateCopy (CFAllocatorRef* allocator, CFBagRef* theBag);

		// extern CFMutableBagRef CFBagCreateMutable (CFAllocatorRef allocator, CFIndex capacity, const CFBagCallBacks *callBacks) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFMutableBagRef* CFBagCreateMutable (CFAllocatorRef* allocator, nint capacity, CFBagCallBacks* callBacks);

		// extern CFMutableBagRef CFBagCreateMutableCopy (CFAllocatorRef allocator, CFIndex capacity, CFBagRef theBag) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFMutableBagRef* CFBagCreateMutableCopy (CFAllocatorRef* allocator, nint capacity, CFBagRef* theBag);

		// extern CFIndex CFBagGetCount (CFBagRef theBag) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFBagGetCount (CFBagRef* theBag);

		// extern CFIndex CFBagGetCountOfValue (CFBagRef theBag, const void *value) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFBagGetCountOfValue (CFBagRef* theBag, void* value);

		// extern Boolean CFBagContainsValue (CFBagRef theBag, const void *value) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFBagContainsValue (CFBagRef* theBag, void* value);

		// extern const void * CFBagGetValue (CFBagRef theBag, const void *value) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* CFBagGetValue (CFBagRef* theBag, void* value);

		// extern Boolean CFBagGetValueIfPresent (CFBagRef theBag, const void *candidate, const void **value) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFBagGetValueIfPresent (CFBagRef* theBag, void* candidate, void** value);

		// extern void CFBagGetValues (CFBagRef theBag, const void **values) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFBagGetValues (CFBagRef* theBag, void** values);

		// extern void CFBagApplyFunction (CFBagRef theBag, CFBagApplierFunction applier, void *context) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFBagApplyFunction (CFBagRef* theBag, CFBagApplierFunction* applier, void* context);

		// extern void CFBagAddValue (CFMutableBagRef theBag, const void *value) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFBagAddValue (CFMutableBagRef* theBag, void* value);

		// extern void CFBagReplaceValue (CFMutableBagRef theBag, const void *value) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFBagReplaceValue (CFMutableBagRef* theBag, void* value);

		// extern void CFBagSetValue (CFMutableBagRef theBag, const void *value) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFBagSetValue (CFMutableBagRef* theBag, void* value);

		// extern void CFBagRemoveValue (CFMutableBagRef theBag, const void *value) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFBagRemoveValue (CFMutableBagRef* theBag, void* value);

		// extern void CFBagRemoveAllValues (CFMutableBagRef theBag) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFBagRemoveAllValues (CFMutableBagRef* theBag);

		// extern CFTypeID CFBinaryHeapGetTypeID () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFBinaryHeapGetTypeID ();

		// extern CFBinaryHeapRef CFBinaryHeapCreate (CFAllocatorRef allocator, CFIndex capacity, const CFBinaryHeapCallBacks *callBacks, const CFBinaryHeapCompareContext *compareContext) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFBinaryHeapRef* CFBinaryHeapCreate (CFAllocatorRef* allocator, nint capacity, CFBinaryHeapCallBacks* callBacks, CFBinaryHeapCompareContext* compareContext);

		// extern CFBinaryHeapRef CFBinaryHeapCreateCopy (CFAllocatorRef allocator, CFIndex capacity, CFBinaryHeapRef heap) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFBinaryHeapRef* CFBinaryHeapCreateCopy (CFAllocatorRef* allocator, nint capacity, CFBinaryHeapRef* heap);

		// extern CFIndex CFBinaryHeapGetCount (CFBinaryHeapRef heap) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFBinaryHeapGetCount (CFBinaryHeapRef* heap);

		// extern CFIndex CFBinaryHeapGetCountOfValue (CFBinaryHeapRef heap, const void *value) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFBinaryHeapGetCountOfValue (CFBinaryHeapRef* heap, void* value);

		// extern Boolean CFBinaryHeapContainsValue (CFBinaryHeapRef heap, const void *value) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFBinaryHeapContainsValue (CFBinaryHeapRef* heap, void* value);

		// extern const void * CFBinaryHeapGetMinimum (CFBinaryHeapRef heap) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* CFBinaryHeapGetMinimum (CFBinaryHeapRef* heap);

		// extern Boolean CFBinaryHeapGetMinimumIfPresent (CFBinaryHeapRef heap, const void **value) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFBinaryHeapGetMinimumIfPresent (CFBinaryHeapRef* heap, void** value);

		// extern void CFBinaryHeapGetValues (CFBinaryHeapRef heap, const void **values) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFBinaryHeapGetValues (CFBinaryHeapRef* heap, void** values);

		// extern void CFBinaryHeapApplyFunction (CFBinaryHeapRef heap, CFBinaryHeapApplierFunction applier, void *context) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFBinaryHeapApplyFunction (CFBinaryHeapRef* heap, CFBinaryHeapApplierFunction* applier, void* context);

		// extern void CFBinaryHeapAddValue (CFBinaryHeapRef heap, const void *value) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFBinaryHeapAddValue (CFBinaryHeapRef* heap, void* value);

		// extern void CFBinaryHeapRemoveMinimumValue (CFBinaryHeapRef heap) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFBinaryHeapRemoveMinimumValue (CFBinaryHeapRef* heap);

		// extern void CFBinaryHeapRemoveAllValues (CFBinaryHeapRef heap) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFBinaryHeapRemoveAllValues (CFBinaryHeapRef* heap);

		// extern CFTypeID CFBitVectorGetTypeID () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFBitVectorGetTypeID ();

		// extern CFBitVectorRef CFBitVectorCreate (CFAllocatorRef allocator, const UInt8 *bytes, CFIndex numBits) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFBitVectorRef* CFBitVectorCreate (CFAllocatorRef* allocator, byte* bytes, nint numBits);

		// extern CFBitVectorRef CFBitVectorCreateCopy (CFAllocatorRef allocator, CFBitVectorRef bv) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFBitVectorRef* CFBitVectorCreateCopy (CFAllocatorRef* allocator, CFBitVectorRef* bv);

		// extern CFMutableBitVectorRef CFBitVectorCreateMutable (CFAllocatorRef allocator, CFIndex capacity) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFMutableBitVectorRef* CFBitVectorCreateMutable (CFAllocatorRef* allocator, nint capacity);

		// extern CFMutableBitVectorRef CFBitVectorCreateMutableCopy (CFAllocatorRef allocator, CFIndex capacity, CFBitVectorRef bv) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFMutableBitVectorRef* CFBitVectorCreateMutableCopy (CFAllocatorRef* allocator, nint capacity, CFBitVectorRef* bv);

		// extern CFIndex CFBitVectorGetCount (CFBitVectorRef bv) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFBitVectorGetCount (CFBitVectorRef* bv);

		// extern CFIndex CFBitVectorGetCountOfBit (CFBitVectorRef bv, CFRange range, CFBit value) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFBitVectorGetCountOfBit (CFBitVectorRef* bv, CFRange range, uint value);

		// extern Boolean CFBitVectorContainsBit (CFBitVectorRef bv, CFRange range, CFBit value) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFBitVectorContainsBit (CFBitVectorRef* bv, CFRange range, uint value);

		// extern CFBit CFBitVectorGetBitAtIndex (CFBitVectorRef bv, CFIndex idx) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe uint CFBitVectorGetBitAtIndex (CFBitVectorRef* bv, nint idx);

		// extern void CFBitVectorGetBits (CFBitVectorRef bv, CFRange range, UInt8 *bytes) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFBitVectorGetBits (CFBitVectorRef* bv, CFRange range, byte* bytes);

		// extern CFIndex CFBitVectorGetFirstIndexOfBit (CFBitVectorRef bv, CFRange range, CFBit value) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFBitVectorGetFirstIndexOfBit (CFBitVectorRef* bv, CFRange range, uint value);

		// extern CFIndex CFBitVectorGetLastIndexOfBit (CFBitVectorRef bv, CFRange range, CFBit value) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFBitVectorGetLastIndexOfBit (CFBitVectorRef* bv, CFRange range, uint value);

		// extern void CFBitVectorSetCount (CFMutableBitVectorRef bv, CFIndex count) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFBitVectorSetCount (CFMutableBitVectorRef* bv, nint count);

		// extern void CFBitVectorFlipBitAtIndex (CFMutableBitVectorRef bv, CFIndex idx) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFBitVectorFlipBitAtIndex (CFMutableBitVectorRef* bv, nint idx);

		// extern void CFBitVectorFlipBits (CFMutableBitVectorRef bv, CFRange range) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFBitVectorFlipBits (CFMutableBitVectorRef* bv, CFRange range);

		// extern void CFBitVectorSetBitAtIndex (CFMutableBitVectorRef bv, CFIndex idx, CFBit value) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFBitVectorSetBitAtIndex (CFMutableBitVectorRef* bv, nint idx, uint value);

		// extern void CFBitVectorSetBits (CFMutableBitVectorRef bv, CFRange range, CFBit value) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFBitVectorSetBits (CFMutableBitVectorRef* bv, CFRange range, uint value);

		// extern void CFBitVectorSetAllBits (CFMutableBitVectorRef bv, CFBit value) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFBitVectorSetAllBits (CFMutableBitVectorRef* bv, uint value);

		// int32_t OSHostByteOrder ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int OSHostByteOrder ();

		// uint16_t _OSReadInt16 (const volatile void *base, uintptr_t byteOffset);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe ushort _OSReadInt16 (void* @base, UIntPtr byteOffset);

		// uint32_t _OSReadInt32 (const volatile void *base, uintptr_t byteOffset);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe uint _OSReadInt32 (void* @base, UIntPtr byteOffset);

		// uint64_t _OSReadInt64 (const volatile void *base, uintptr_t byteOffset);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe ulong _OSReadInt64 (void* @base, UIntPtr byteOffset);

		// void _OSWriteInt16 (volatile void *base, uintptr_t byteOffset, uint16_t data);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void _OSWriteInt16 (void* @base, UIntPtr byteOffset, ushort data);

		// void _OSWriteInt32 (volatile void *base, uintptr_t byteOffset, uint32_t data);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void _OSWriteInt32 (void* @base, UIntPtr byteOffset, uint data);

		// void _OSWriteInt64 (volatile void *base, uintptr_t byteOffset, uint64_t data);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void _OSWriteInt64 (void* @base, UIntPtr byteOffset, ulong data);

		// CFByteOrder CFByteOrderGetCurrent () __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint CFByteOrderGetCurrent ();

		// uint16_t CFSwapInt16 (uint16_t arg) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ushort CFSwapInt16 (ushort arg);

		// extern int __builtin_constant_p () __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int __builtin_constant_p ();

		// uint32_t CFSwapInt32 (uint32_t arg) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint CFSwapInt32 (uint arg);

		// uint64_t CFSwapInt64 (uint64_t arg) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ulong CFSwapInt64 (ulong arg);

		// uint16_t CFSwapInt16BigToHost (uint16_t arg) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ushort CFSwapInt16BigToHost (ushort arg);

		// uint32_t CFSwapInt32BigToHost (uint32_t arg) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint CFSwapInt32BigToHost (uint arg);

		// uint64_t CFSwapInt64BigToHost (uint64_t arg) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ulong CFSwapInt64BigToHost (ulong arg);

		// uint16_t CFSwapInt16HostToBig (uint16_t arg) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ushort CFSwapInt16HostToBig (ushort arg);

		// uint32_t CFSwapInt32HostToBig (uint32_t arg) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint CFSwapInt32HostToBig (uint arg);

		// uint64_t CFSwapInt64HostToBig (uint64_t arg) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ulong CFSwapInt64HostToBig (ulong arg);

		// uint16_t CFSwapInt16LittleToHost (uint16_t arg) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ushort CFSwapInt16LittleToHost (ushort arg);

		// uint32_t CFSwapInt32LittleToHost (uint32_t arg) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint CFSwapInt32LittleToHost (uint arg);

		// uint64_t CFSwapInt64LittleToHost (uint64_t arg) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ulong CFSwapInt64LittleToHost (ulong arg);

		// uint16_t CFSwapInt16HostToLittle (uint16_t arg) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ushort CFSwapInt16HostToLittle (ushort arg);

		// uint32_t CFSwapInt32HostToLittle (uint32_t arg) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint CFSwapInt32HostToLittle (uint arg);

		// uint64_t CFSwapInt64HostToLittle (uint64_t arg) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ulong CFSwapInt64HostToLittle (ulong arg);

		// CFSwappedFloat32 CFConvertFloat32HostToSwapped (Float32 arg) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CFSwappedFloat32 CFConvertFloat32HostToSwapped (float arg);

		// Float32 CFConvertFloat32SwappedToHost (CFSwappedFloat32 arg) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float CFConvertFloat32SwappedToHost (CFSwappedFloat32 arg);

		// CFSwappedFloat64 CFConvertFloat64HostToSwapped (Float64 arg) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CFSwappedFloat64 CFConvertFloat64HostToSwapped (double arg);

		// Float64 CFConvertFloat64SwappedToHost (CFSwappedFloat64 arg) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double CFConvertFloat64SwappedToHost (CFSwappedFloat64 arg);

		// CFSwappedFloat32 CFConvertFloatHostToSwapped (float arg) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CFSwappedFloat32 CFConvertFloatHostToSwapped (float arg);

		// float CFConvertFloatSwappedToHost (CFSwappedFloat32 arg) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float CFConvertFloatSwappedToHost (CFSwappedFloat32 arg);

		// CFSwappedFloat64 CFConvertDoubleHostToSwapped (double arg) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CFSwappedFloat64 CFConvertDoubleHostToSwapped (double arg);

		// double CFConvertDoubleSwappedToHost (CFSwappedFloat64 arg) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double CFConvertDoubleSwappedToHost (CFSwappedFloat64 arg);

		// extern CFTypeID CFDictionaryGetTypeID () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFDictionaryGetTypeID ();

		// extern CFDictionaryRef CFDictionaryCreate (CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFDictionaryRef* CFDictionaryCreate (CFAllocatorRef* allocator, void** keys, void** values, nint numValues, CFDictionaryKeyCallBacks* keyCallBacks, CFDictionaryValueCallBacks* valueCallBacks);

		// extern CFDictionaryRef CFDictionaryCreateCopy (CFAllocatorRef allocator, CFDictionaryRef theDict) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFDictionaryRef* CFDictionaryCreateCopy (CFAllocatorRef* allocator, CFDictionaryRef* theDict);

		// extern CFMutableDictionaryRef CFDictionaryCreateMutable (CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFMutableDictionaryRef* CFDictionaryCreateMutable (CFAllocatorRef* allocator, nint capacity, CFDictionaryKeyCallBacks* keyCallBacks, CFDictionaryValueCallBacks* valueCallBacks);

		// extern CFMutableDictionaryRef CFDictionaryCreateMutableCopy (CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFMutableDictionaryRef* CFDictionaryCreateMutableCopy (CFAllocatorRef* allocator, nint capacity, CFDictionaryRef* theDict);

		// extern CFIndex CFDictionaryGetCount (CFDictionaryRef theDict) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFDictionaryGetCount (CFDictionaryRef* theDict);

		// extern CFIndex CFDictionaryGetCountOfKey (CFDictionaryRef theDict, const void *key) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFDictionaryGetCountOfKey (CFDictionaryRef* theDict, void* key);

		// extern CFIndex CFDictionaryGetCountOfValue (CFDictionaryRef theDict, const void *value) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFDictionaryGetCountOfValue (CFDictionaryRef* theDict, void* value);

		// extern Boolean CFDictionaryContainsKey (CFDictionaryRef theDict, const void *key) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFDictionaryContainsKey (CFDictionaryRef* theDict, void* key);

		// extern Boolean CFDictionaryContainsValue (CFDictionaryRef theDict, const void *value) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFDictionaryContainsValue (CFDictionaryRef* theDict, void* value);

		// extern const void * CFDictionaryGetValue (CFDictionaryRef theDict, const void *key) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* CFDictionaryGetValue (CFDictionaryRef* theDict, void* key);

		// extern Boolean CFDictionaryGetValueIfPresent (CFDictionaryRef theDict, const void *key, const void **value) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFDictionaryGetValueIfPresent (CFDictionaryRef* theDict, void* key, void** value);

		// extern void CFDictionaryGetKeysAndValues (CFDictionaryRef theDict, const void **keys, const void **values) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFDictionaryGetKeysAndValues (CFDictionaryRef* theDict, void** keys, void** values);

		// extern void CFDictionaryApplyFunction (CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFDictionaryApplyFunction (CFDictionaryRef* theDict, CFDictionaryApplierFunction* applier, void* context);

		// extern void CFDictionaryAddValue (CFMutableDictionaryRef theDict, const void *key, const void *value) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFDictionaryAddValue (CFMutableDictionaryRef* theDict, void* key, void* value);

		// extern void CFDictionarySetValue (CFMutableDictionaryRef theDict, const void *key, const void *value) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFDictionarySetValue (CFMutableDictionaryRef* theDict, void* key, void* value);

		// extern void CFDictionaryReplaceValue (CFMutableDictionaryRef theDict, const void *key, const void *value) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFDictionaryReplaceValue (CFMutableDictionaryRef* theDict, void* key, void* value);

		// extern void CFDictionaryRemoveValue (CFMutableDictionaryRef theDict, const void *key) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFDictionaryRemoveValue (CFMutableDictionaryRef* theDict, void* key);

		// extern void CFDictionaryRemoveAllValues (CFMutableDictionaryRef theDict) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFDictionaryRemoveAllValues (CFMutableDictionaryRef* theDict);

		// extern CFTypeID CFNotificationCenterGetTypeID () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFNotificationCenterGetTypeID ();

		// extern CFNotificationCenterRef CFNotificationCenterGetLocalCenter () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFNotificationCenterRef* CFNotificationCenterGetLocalCenter ();

		// extern CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFNotificationCenterRef* CFNotificationCenterGetDarwinNotifyCenter ();

		// extern void CFNotificationCenterAddObserver (CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFNotificationCenterAddObserver (CFNotificationCenterRef* center, void* observer, CFNotificationCallback* callBack, CFStringRef* name, void* @object, CFNotificationSuspensionBehavior suspensionBehavior);

		// extern void CFNotificationCenterRemoveObserver (CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFNotificationCenterRemoveObserver (CFNotificationCenterRef* center, void* observer, CFNotificationName* name, void* @object);

		// extern void CFNotificationCenterRemoveEveryObserver (CFNotificationCenterRef center, const void *observer) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFNotificationCenterRemoveEveryObserver (CFNotificationCenterRef* center, void* observer);

		// extern void CFNotificationCenterPostNotification (CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFNotificationCenterPostNotification (CFNotificationCenterRef* center, CFNotificationName* name, void* @object, CFDictionaryRef* userInfo, byte deliverImmediately);

		// extern void CFNotificationCenterPostNotificationWithOptions (CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, CFOptionFlags options) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFNotificationCenterPostNotificationWithOptions (CFNotificationCenterRef* center, CFNotificationName* name, void* @object, CFDictionaryRef* userInfo, nuint options);

		// extern CFTypeID CFLocaleGetTypeID () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFLocaleGetTypeID ();

		// extern CFLocaleRef CFLocaleGetSystem () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFLocaleRef* CFLocaleGetSystem ();

		// extern CFLocaleRef CFLocaleCopyCurrent () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFLocaleRef* CFLocaleCopyCurrent ();

		// extern CFArrayRef CFLocaleCopyAvailableLocaleIdentifiers () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFArrayRef* CFLocaleCopyAvailableLocaleIdentifiers ();

		// extern CFArrayRef CFLocaleCopyISOLanguageCodes () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFArrayRef* CFLocaleCopyISOLanguageCodes ();

		// extern CFArrayRef CFLocaleCopyISOCountryCodes () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFArrayRef* CFLocaleCopyISOCountryCodes ();

		// extern CFArrayRef CFLocaleCopyISOCurrencyCodes () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFArrayRef* CFLocaleCopyISOCurrencyCodes ();

		// extern CFArrayRef CFLocaleCopyCommonISOCurrencyCodes () __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFArrayRef* CFLocaleCopyCommonISOCurrencyCodes ();

		// extern CFArrayRef CFLocaleCopyPreferredLanguages () __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFArrayRef* CFLocaleCopyPreferredLanguages ();

		// extern CFLocaleIdentifier CFLocaleCreateCanonicalLanguageIdentifierFromString (CFAllocatorRef allocator, CFStringRef localeIdentifier) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFLocaleIdentifier* CFLocaleCreateCanonicalLanguageIdentifierFromString (CFAllocatorRef* allocator, CFStringRef* localeIdentifier);

		// extern CFLocaleIdentifier CFLocaleCreateCanonicalLocaleIdentifierFromString (CFAllocatorRef allocator, CFStringRef localeIdentifier) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFLocaleIdentifier* CFLocaleCreateCanonicalLocaleIdentifierFromString (CFAllocatorRef* allocator, CFStringRef* localeIdentifier);

		// extern CFLocaleIdentifier CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes (CFAllocatorRef allocator, LangCode lcode, RegionCode rcode) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFLocaleIdentifier* CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes (CFAllocatorRef* allocator, short lcode, short rcode);

		// extern CFLocaleIdentifier CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode (CFAllocatorRef allocator, uint32_t lcid) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFLocaleIdentifier* CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode (CFAllocatorRef* allocator, uint lcid);

		// extern uint32_t CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier (CFLocaleIdentifier localeIdentifier) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe uint CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier (CFLocaleIdentifier* localeIdentifier);

		// extern CFLocaleLanguageDirection CFLocaleGetLanguageCharacterDirection (CFStringRef isoLangCode) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFLocaleLanguageDirection CFLocaleGetLanguageCharacterDirection (CFStringRef* isoLangCode);

		// extern CFLocaleLanguageDirection CFLocaleGetLanguageLineDirection (CFStringRef isoLangCode) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFLocaleLanguageDirection CFLocaleGetLanguageLineDirection (CFStringRef* isoLangCode);

		// extern CFDictionaryRef CFLocaleCreateComponentsFromLocaleIdentifier (CFAllocatorRef allocator, CFLocaleIdentifier localeID) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFDictionaryRef* CFLocaleCreateComponentsFromLocaleIdentifier (CFAllocatorRef* allocator, CFLocaleIdentifier* localeID);

		// extern CFLocaleIdentifier CFLocaleCreateLocaleIdentifierFromComponents (CFAllocatorRef allocator, CFDictionaryRef dictionary) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFLocaleIdentifier* CFLocaleCreateLocaleIdentifierFromComponents (CFAllocatorRef* allocator, CFDictionaryRef* dictionary);

		// extern CFLocaleRef CFLocaleCreate (CFAllocatorRef allocator, CFLocaleIdentifier localeIdentifier) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFLocaleRef* CFLocaleCreate (CFAllocatorRef* allocator, CFLocaleIdentifier* localeIdentifier);

		// extern CFLocaleRef CFLocaleCreateCopy (CFAllocatorRef allocator, CFLocaleRef locale) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFLocaleRef* CFLocaleCreateCopy (CFAllocatorRef* allocator, CFLocaleRef* locale);

		// extern CFLocaleIdentifier CFLocaleGetIdentifier (CFLocaleRef locale) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFLocaleIdentifier* CFLocaleGetIdentifier (CFLocaleRef* locale);

		// extern CFTypeRef CFLocaleGetValue (CFLocaleRef locale, CFLocaleKey key) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* CFLocaleGetValue (CFLocaleRef* locale, CFLocaleKey* key);

		// extern CFStringRef CFLocaleCopyDisplayNameForPropertyValue (CFLocaleRef displayLocale, CFLocaleKey key, CFStringRef value) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFLocaleCopyDisplayNameForPropertyValue (CFLocaleRef* displayLocale, CFLocaleKey* key, CFStringRef* value);

		// extern CFAbsoluteTime CFAbsoluteTimeGetCurrent () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double CFAbsoluteTimeGetCurrent ();

		// extern CFTypeID CFDateGetTypeID () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFDateGetTypeID ();

		// extern CFDateRef CFDateCreate (CFAllocatorRef allocator, CFAbsoluteTime at) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFDateRef* CFDateCreate (CFAllocatorRef* allocator, double at);

		// extern CFAbsoluteTime CFDateGetAbsoluteTime (CFDateRef theDate) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe double CFDateGetAbsoluteTime (CFDateRef* theDate);

		// extern CFTimeInterval CFDateGetTimeIntervalSinceDate (CFDateRef theDate, CFDateRef otherDate) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe double CFDateGetTimeIntervalSinceDate (CFDateRef* theDate, CFDateRef* otherDate);

		// extern CFComparisonResult CFDateCompare (CFDateRef theDate, CFDateRef otherDate, void *context) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFComparisonResult CFDateCompare (CFDateRef* theDate, CFDateRef* otherDate, void* context);

		// extern Boolean CFGregorianDateIsValid (CFGregorianDate gdate, CFOptionFlags unitFlags) __attribute__((availability(macos, introduced=10.4, deprecated=10.10))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 4, message: "Use CFCalendar or NSCalendar API instead")]
		[Deprecated (PlatformName.MacOSX, 10, 10, message: "Use CFCalendar or NSCalendar API instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[Deprecated (PlatformName.iOS, 8, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern byte CFGregorianDateIsValid (CFGregorianDate gdate, nuint unitFlags);

		// extern CFAbsoluteTime CFGregorianDateGetAbsoluteTime (CFGregorianDate gdate, CFTimeZoneRef tz) __attribute__((availability(macos, introduced=10.4, deprecated=10.10))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 4, message: "Use CFCalendar or NSCalendar API instead")]
		[Deprecated (PlatformName.MacOSX, 10, 10, message: "Use CFCalendar or NSCalendar API instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[Deprecated (PlatformName.iOS, 8, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe double CFGregorianDateGetAbsoluteTime (CFGregorianDate gdate, CFTimeZoneRef* tz);

		// extern CFGregorianDate CFAbsoluteTimeGetGregorianDate (CFAbsoluteTime at, CFTimeZoneRef tz) __attribute__((availability(macos, introduced=10.4, deprecated=10.10))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 4, message: "Use CFCalendar or NSCalendar API instead")]
		[Deprecated (PlatformName.MacOSX, 10, 10, message: "Use CFCalendar or NSCalendar API instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[Deprecated (PlatformName.iOS, 8, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFGregorianDate CFAbsoluteTimeGetGregorianDate (double at, CFTimeZoneRef* tz);

		// extern CFAbsoluteTime CFAbsoluteTimeAddGregorianUnits (CFAbsoluteTime at, CFTimeZoneRef tz, CFGregorianUnits units) __attribute__((availability(macos, introduced=10.4, deprecated=10.10))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 4, message: "Use CFCalendar or NSCalendar API instead")]
		[Deprecated (PlatformName.MacOSX, 10, 10, message: "Use CFCalendar or NSCalendar API instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[Deprecated (PlatformName.iOS, 8, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe double CFAbsoluteTimeAddGregorianUnits (double at, CFTimeZoneRef* tz, CFGregorianUnits units);

		// extern CFGregorianUnits CFAbsoluteTimeGetDifferenceAsGregorianUnits (CFAbsoluteTime at1, CFAbsoluteTime at2, CFTimeZoneRef tz, CFOptionFlags unitFlags) __attribute__((availability(macos, introduced=10.4, deprecated=10.10))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 4, message: "Use CFCalendar or NSCalendar API instead")]
		[Deprecated (PlatformName.MacOSX, 10, 10, message: "Use CFCalendar or NSCalendar API instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[Deprecated (PlatformName.iOS, 8, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFGregorianUnits CFAbsoluteTimeGetDifferenceAsGregorianUnits (double at1, double at2, CFTimeZoneRef* tz, nuint unitFlags);

		// extern SInt32 CFAbsoluteTimeGetDayOfWeek (CFAbsoluteTime at, CFTimeZoneRef tz) __attribute__((availability(macos, introduced=10.4, deprecated=10.10))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 4, message: "Use CFCalendar or NSCalendar API instead")]
		[Deprecated (PlatformName.MacOSX, 10, 10, message: "Use CFCalendar or NSCalendar API instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[Deprecated (PlatformName.iOS, 8, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int CFAbsoluteTimeGetDayOfWeek (double at, CFTimeZoneRef* tz);

		// extern SInt32 CFAbsoluteTimeGetDayOfYear (CFAbsoluteTime at, CFTimeZoneRef tz) __attribute__((availability(macos, introduced=10.4, deprecated=10.10))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 4, message: "Use CFCalendar or NSCalendar API instead")]
		[Deprecated (PlatformName.MacOSX, 10, 10, message: "Use CFCalendar or NSCalendar API instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[Deprecated (PlatformName.iOS, 8, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int CFAbsoluteTimeGetDayOfYear (double at, CFTimeZoneRef* tz);

		// extern SInt32 CFAbsoluteTimeGetWeekOfYear (CFAbsoluteTime at, CFTimeZoneRef tz) __attribute__((availability(macos, introduced=10.4, deprecated=10.10))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 4, message: "Use CFCalendar or NSCalendar API instead")]
		[Deprecated (PlatformName.MacOSX, 10, 10, message: "Use CFCalendar or NSCalendar API instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[Deprecated (PlatformName.iOS, 8, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use CFCalendar or NSCalendar API instead")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int CFAbsoluteTimeGetWeekOfYear (double at, CFTimeZoneRef* tz);

		// extern CFTypeID CFDataGetTypeID () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFDataGetTypeID ();

		// extern CFDataRef CFDataCreate (CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFDataRef* CFDataCreate (CFAllocatorRef* allocator, byte* bytes, nint length);

		// extern CFDataRef CFDataCreateWithBytesNoCopy (CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFDataRef* CFDataCreateWithBytesNoCopy (CFAllocatorRef* allocator, byte* bytes, nint length, CFAllocatorRef* bytesDeallocator);

		// extern CFDataRef CFDataCreateCopy (CFAllocatorRef allocator, CFDataRef theData) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFDataRef* CFDataCreateCopy (CFAllocatorRef* allocator, CFDataRef* theData);

		// extern CFMutableDataRef CFDataCreateMutable (CFAllocatorRef allocator, CFIndex capacity) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFMutableDataRef* CFDataCreateMutable (CFAllocatorRef* allocator, nint capacity);

		// extern CFMutableDataRef CFDataCreateMutableCopy (CFAllocatorRef allocator, CFIndex capacity, CFDataRef theData) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFMutableDataRef* CFDataCreateMutableCopy (CFAllocatorRef* allocator, nint capacity, CFDataRef* theData);

		// extern CFIndex CFDataGetLength (CFDataRef theData) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFDataGetLength (CFDataRef* theData);

		// extern const UInt8 * CFDataGetBytePtr (CFDataRef theData) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte* CFDataGetBytePtr (CFDataRef* theData);

		// extern UInt8 * CFDataGetMutableBytePtr (CFMutableDataRef theData) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte* CFDataGetMutableBytePtr (CFMutableDataRef* theData);

		// extern void CFDataGetBytes (CFDataRef theData, CFRange range, UInt8 *buffer) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFDataGetBytes (CFDataRef* theData, CFRange range, byte* buffer);

		// extern void CFDataSetLength (CFMutableDataRef theData, CFIndex length) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFDataSetLength (CFMutableDataRef* theData, nint length);

		// extern void CFDataIncreaseLength (CFMutableDataRef theData, CFIndex extraLength) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFDataIncreaseLength (CFMutableDataRef* theData, nint extraLength);

		// extern void CFDataAppendBytes (CFMutableDataRef theData, const UInt8 *bytes, CFIndex length) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFDataAppendBytes (CFMutableDataRef* theData, byte* bytes, nint length);

		// extern void CFDataReplaceBytes (CFMutableDataRef theData, CFRange range, const UInt8 *newBytes, CFIndex newLength) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFDataReplaceBytes (CFMutableDataRef* theData, CFRange range, byte* newBytes, nint newLength);

		// extern void CFDataDeleteBytes (CFMutableDataRef theData, CFRange range) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFDataDeleteBytes (CFMutableDataRef* theData, CFRange range);

		// extern CFRange CFDataFind (CFDataRef theData, CFDataRef dataToFind, CFRange searchRange, CFDataSearchFlags compareOptions) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFRange CFDataFind (CFDataRef* theData, CFDataRef* dataToFind, CFRange searchRange, CFDataSearchFlags compareOptions);

		// extern CFTypeID CFCharacterSetGetTypeID () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFCharacterSetGetTypeID ();

		// extern CFCharacterSetRef CFCharacterSetGetPredefined (CFCharacterSetPredefinedSet theSetIdentifier) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFCharacterSetRef* CFCharacterSetGetPredefined (CFCharacterSetPredefinedSet theSetIdentifier);

		// extern CFCharacterSetRef CFCharacterSetCreateWithCharactersInRange (CFAllocatorRef alloc, CFRange theRange) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFCharacterSetRef* CFCharacterSetCreateWithCharactersInRange (CFAllocatorRef* alloc, CFRange theRange);

		// extern CFCharacterSetRef CFCharacterSetCreateWithCharactersInString (CFAllocatorRef alloc, CFStringRef theString) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFCharacterSetRef* CFCharacterSetCreateWithCharactersInString (CFAllocatorRef* alloc, CFStringRef* theString);

		// extern CFCharacterSetRef CFCharacterSetCreateWithBitmapRepresentation (CFAllocatorRef alloc, CFDataRef theData) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFCharacterSetRef* CFCharacterSetCreateWithBitmapRepresentation (CFAllocatorRef* alloc, CFDataRef* theData);

		// extern CFCharacterSetRef CFCharacterSetCreateInvertedSet (CFAllocatorRef alloc, CFCharacterSetRef theSet) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFCharacterSetRef* CFCharacterSetCreateInvertedSet (CFAllocatorRef* alloc, CFCharacterSetRef* theSet);

		// extern Boolean CFCharacterSetIsSupersetOfSet (CFCharacterSetRef theSet, CFCharacterSetRef theOtherset) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFCharacterSetIsSupersetOfSet (CFCharacterSetRef* theSet, CFCharacterSetRef* theOtherset);

		// extern Boolean CFCharacterSetHasMemberInPlane (CFCharacterSetRef theSet, CFIndex thePlane) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFCharacterSetHasMemberInPlane (CFCharacterSetRef* theSet, nint thePlane);

		// extern CFMutableCharacterSetRef CFCharacterSetCreateMutable (CFAllocatorRef alloc) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFMutableCharacterSetRef* CFCharacterSetCreateMutable (CFAllocatorRef* alloc);

		// extern CFCharacterSetRef CFCharacterSetCreateCopy (CFAllocatorRef alloc, CFCharacterSetRef theSet) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFCharacterSetRef* CFCharacterSetCreateCopy (CFAllocatorRef* alloc, CFCharacterSetRef* theSet);

		// extern CFMutableCharacterSetRef CFCharacterSetCreateMutableCopy (CFAllocatorRef alloc, CFCharacterSetRef theSet) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFMutableCharacterSetRef* CFCharacterSetCreateMutableCopy (CFAllocatorRef* alloc, CFCharacterSetRef* theSet);

		// extern Boolean CFCharacterSetIsCharacterMember (CFCharacterSetRef theSet, UniChar theChar) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFCharacterSetIsCharacterMember (CFCharacterSetRef* theSet, ushort theChar);

		// extern Boolean CFCharacterSetIsLongCharacterMember (CFCharacterSetRef theSet, UTF32Char theChar) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFCharacterSetIsLongCharacterMember (CFCharacterSetRef* theSet, uint theChar);

		// extern CFDataRef CFCharacterSetCreateBitmapRepresentation (CFAllocatorRef alloc, CFCharacterSetRef theSet) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFDataRef* CFCharacterSetCreateBitmapRepresentation (CFAllocatorRef* alloc, CFCharacterSetRef* theSet);

		// extern void CFCharacterSetAddCharactersInRange (CFMutableCharacterSetRef theSet, CFRange theRange) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFCharacterSetAddCharactersInRange (CFMutableCharacterSetRef* theSet, CFRange theRange);

		// extern void CFCharacterSetRemoveCharactersInRange (CFMutableCharacterSetRef theSet, CFRange theRange) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFCharacterSetRemoveCharactersInRange (CFMutableCharacterSetRef* theSet, CFRange theRange);

		// extern void CFCharacterSetAddCharactersInString (CFMutableCharacterSetRef theSet, CFStringRef theString) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFCharacterSetAddCharactersInString (CFMutableCharacterSetRef* theSet, CFStringRef* theString);

		// extern void CFCharacterSetRemoveCharactersInString (CFMutableCharacterSetRef theSet, CFStringRef theString) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFCharacterSetRemoveCharactersInString (CFMutableCharacterSetRef* theSet, CFStringRef* theString);

		// extern void CFCharacterSetUnion (CFMutableCharacterSetRef theSet, CFCharacterSetRef theOtherSet) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFCharacterSetUnion (CFMutableCharacterSetRef* theSet, CFCharacterSetRef* theOtherSet);

		// extern void CFCharacterSetIntersect (CFMutableCharacterSetRef theSet, CFCharacterSetRef theOtherSet) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFCharacterSetIntersect (CFMutableCharacterSetRef* theSet, CFCharacterSetRef* theOtherSet);

		// extern void CFCharacterSetInvert (CFMutableCharacterSetRef theSet) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFCharacterSetInvert (CFMutableCharacterSetRef* theSet);

		// extern CFTypeID CFStringGetTypeID () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFStringGetTypeID ();

		// extern CFStringRef CFStringCreateWithPascalString (CFAllocatorRef alloc, ConstStr255Param pStr, CFStringEncoding encoding) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFStringCreateWithPascalString (CFAllocatorRef* alloc, byte* pStr, uint encoding);

		// extern CFStringRef CFStringCreateWithCString (CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFStringCreateWithCString (CFAllocatorRef* alloc, sbyte* cStr, uint encoding);

		// extern CFStringRef CFStringCreateWithBytes (CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFStringCreateWithBytes (CFAllocatorRef* alloc, byte* bytes, nint numBytes, uint encoding, byte isExternalRepresentation);

		// extern CFStringRef CFStringCreateWithCharacters (CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFStringCreateWithCharacters (CFAllocatorRef* alloc, ushort* chars, nint numChars);

		// extern CFStringRef CFStringCreateWithPascalStringNoCopy (CFAllocatorRef alloc, ConstStr255Param pStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFStringCreateWithPascalStringNoCopy (CFAllocatorRef* alloc, byte* pStr, uint encoding, CFAllocatorRef* contentsDeallocator);

		// extern CFStringRef CFStringCreateWithCStringNoCopy (CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFStringCreateWithCStringNoCopy (CFAllocatorRef* alloc, sbyte* cStr, uint encoding, CFAllocatorRef* contentsDeallocator);

		// extern CFStringRef CFStringCreateWithBytesNoCopy (CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation, CFAllocatorRef contentsDeallocator) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFStringCreateWithBytesNoCopy (CFAllocatorRef* alloc, byte* bytes, nint numBytes, uint encoding, byte isExternalRepresentation, CFAllocatorRef* contentsDeallocator);

		// extern CFStringRef CFStringCreateWithCharactersNoCopy (CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars, CFAllocatorRef contentsDeallocator) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFStringCreateWithCharactersNoCopy (CFAllocatorRef* alloc, ushort* chars, nint numChars, CFAllocatorRef* contentsDeallocator);

		// extern CFStringRef CFStringCreateWithSubstring (CFAllocatorRef alloc, CFStringRef str, CFRange range) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFStringCreateWithSubstring (CFAllocatorRef* alloc, CFStringRef* str, CFRange range);

		// extern CFStringRef CFStringCreateCopy (CFAllocatorRef alloc, CFStringRef theString) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFStringCreateCopy (CFAllocatorRef* alloc, CFStringRef* theString);

		// extern CFStringRef CFStringCreateWithFormat (CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...) __attribute__((format(CFString, 3, 4))) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFStringCreateWithFormat (CFAllocatorRef* alloc, CFDictionaryRef* formatOptions, CFStringRef* format, IntPtr varArgs);

		// extern CFStringRef CFStringCreateWithFormatAndArguments (CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, va_list arguments) __attribute__((format(CFString, 3, 0))) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFStringCreateWithFormatAndArguments (CFAllocatorRef* alloc, CFDictionaryRef* formatOptions, CFStringRef* format, sbyte* arguments);

		// extern CFMutableStringRef CFStringCreateMutable (CFAllocatorRef alloc, CFIndex maxLength) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFMutableStringRef* CFStringCreateMutable (CFAllocatorRef* alloc, nint maxLength);

		// extern CFMutableStringRef CFStringCreateMutableCopy (CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFMutableStringRef* CFStringCreateMutableCopy (CFAllocatorRef* alloc, nint maxLength, CFStringRef* theString);

		// extern CFMutableStringRef CFStringCreateMutableWithExternalCharactersNoCopy (CFAllocatorRef alloc, UniChar *chars, CFIndex numChars, CFIndex capacity, CFAllocatorRef externalCharactersAllocator) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFMutableStringRef* CFStringCreateMutableWithExternalCharactersNoCopy (CFAllocatorRef* alloc, ushort* chars, nint numChars, nint capacity, CFAllocatorRef* externalCharactersAllocator);

		// extern CFIndex CFStringGetLength (CFStringRef theString) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFStringGetLength (CFStringRef* theString);

		// extern UniChar CFStringGetCharacterAtIndex (CFStringRef theString, CFIndex idx) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe ushort CFStringGetCharacterAtIndex (CFStringRef* theString, nint idx);

		// extern void CFStringGetCharacters (CFStringRef theString, CFRange range, UniChar *buffer) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFStringGetCharacters (CFStringRef* theString, CFRange range, ushort* buffer);

		// extern Boolean CFStringGetPascalString (CFStringRef theString, StringPtr buffer, CFIndex bufferSize, CFStringEncoding encoding) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFStringGetPascalString (CFStringRef* theString, byte* buffer, nint bufferSize, uint encoding);

		// extern Boolean CFStringGetCString (CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFStringGetCString (CFStringRef* theString, sbyte* buffer, nint bufferSize, uint encoding);

		// extern ConstStringPtr CFStringGetPascalStringPtr (CFStringRef theString, CFStringEncoding encoding) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte* CFStringGetPascalStringPtr (CFStringRef* theString, uint encoding);

		// extern const char * CFStringGetCStringPtr (CFStringRef theString, CFStringEncoding encoding) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* CFStringGetCStringPtr (CFStringRef* theString, uint encoding);

		// extern const UniChar * CFStringGetCharactersPtr (CFStringRef theString) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe ushort* CFStringGetCharactersPtr (CFStringRef* theString);

		// extern CFIndex CFStringGetBytes (CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFStringGetBytes (CFStringRef* theString, CFRange range, uint encoding, byte lossByte, byte isExternalRepresentation, byte* buffer, nint maxBufLen, nint* usedBufLen);

		// extern CFStringRef CFStringCreateFromExternalRepresentation (CFAllocatorRef alloc, CFDataRef data, CFStringEncoding encoding) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFStringCreateFromExternalRepresentation (CFAllocatorRef* alloc, CFDataRef* data, uint encoding);

		// extern CFDataRef CFStringCreateExternalRepresentation (CFAllocatorRef alloc, CFStringRef theString, CFStringEncoding encoding, UInt8 lossByte) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFDataRef* CFStringCreateExternalRepresentation (CFAllocatorRef* alloc, CFStringRef* theString, uint encoding, byte lossByte);

		// extern CFStringEncoding CFStringGetSmallestEncoding (CFStringRef theString) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe uint CFStringGetSmallestEncoding (CFStringRef* theString);

		// extern CFStringEncoding CFStringGetFastestEncoding (CFStringRef theString) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe uint CFStringGetFastestEncoding (CFStringRef* theString);

		// extern CFStringEncoding CFStringGetSystemEncoding () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint CFStringGetSystemEncoding ();

		// extern CFIndex CFStringGetMaximumSizeForEncoding (CFIndex length, CFStringEncoding encoding) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint CFStringGetMaximumSizeForEncoding (nint length, uint encoding);

		// extern Boolean CFStringGetFileSystemRepresentation (CFStringRef string, char *buffer, CFIndex maxBufLen) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFStringGetFileSystemRepresentation (CFStringRef* @string, sbyte* buffer, nint maxBufLen);

		// extern CFIndex CFStringGetMaximumSizeOfFileSystemRepresentation (CFStringRef string) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFStringGetMaximumSizeOfFileSystemRepresentation (CFStringRef* @string);

		// extern CFStringRef CFStringCreateWithFileSystemRepresentation (CFAllocatorRef alloc, const char *buffer) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFStringCreateWithFileSystemRepresentation (CFAllocatorRef* alloc, sbyte* buffer);

		// extern CFComparisonResult CFStringCompareWithOptionsAndLocale (CFStringRef theString1, CFStringRef theString2, CFRange rangeToCompare, CFStringCompareFlags compareOptions, CFLocaleRef locale) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFComparisonResult CFStringCompareWithOptionsAndLocale (CFStringRef* theString1, CFStringRef* theString2, CFRange rangeToCompare, CFStringCompareFlags compareOptions, CFLocaleRef* locale);

		// extern CFComparisonResult CFStringCompareWithOptions (CFStringRef theString1, CFStringRef theString2, CFRange rangeToCompare, CFStringCompareFlags compareOptions) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFComparisonResult CFStringCompareWithOptions (CFStringRef* theString1, CFStringRef* theString2, CFRange rangeToCompare, CFStringCompareFlags compareOptions);

		// extern CFComparisonResult CFStringCompare (CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFComparisonResult CFStringCompare (CFStringRef* theString1, CFStringRef* theString2, CFStringCompareFlags compareOptions);

		// extern Boolean CFStringFindWithOptionsAndLocale (CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFLocaleRef locale, CFRange *result) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFStringFindWithOptionsAndLocale (CFStringRef* theString, CFStringRef* stringToFind, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFLocaleRef* locale, CFRange* result);

		// extern Boolean CFStringFindWithOptions (CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFStringFindWithOptions (CFStringRef* theString, CFStringRef* stringToFind, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange* result);

		// extern CFArrayRef CFStringCreateArrayWithFindResults (CFAllocatorRef alloc, CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags compareOptions) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFArrayRef* CFStringCreateArrayWithFindResults (CFAllocatorRef* alloc, CFStringRef* theString, CFStringRef* stringToFind, CFRange rangeToSearch, CFStringCompareFlags compareOptions);

		// extern CFRange CFStringFind (CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFRange CFStringFind (CFStringRef* theString, CFStringRef* stringToFind, CFStringCompareFlags compareOptions);

		// extern Boolean CFStringHasPrefix (CFStringRef theString, CFStringRef prefix) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFStringHasPrefix (CFStringRef* theString, CFStringRef* prefix);

		// extern Boolean CFStringHasSuffix (CFStringRef theString, CFStringRef suffix) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFStringHasSuffix (CFStringRef* theString, CFStringRef* suffix);

		// extern CFRange CFStringGetRangeOfComposedCharactersAtIndex (CFStringRef theString, CFIndex theIndex) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFRange CFStringGetRangeOfComposedCharactersAtIndex (CFStringRef* theString, nint theIndex);

		// extern Boolean CFStringFindCharacterFromSet (CFStringRef theString, CFCharacterSetRef theSet, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFStringFindCharacterFromSet (CFStringRef* theString, CFCharacterSetRef* theSet, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange* result);

		// extern void CFStringGetLineBounds (CFStringRef theString, CFRange range, CFIndex *lineBeginIndex, CFIndex *lineEndIndex, CFIndex *contentsEndIndex) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFStringGetLineBounds (CFStringRef* theString, CFRange range, nint* lineBeginIndex, nint* lineEndIndex, nint* contentsEndIndex);

		// extern void CFStringGetParagraphBounds (CFStringRef string, CFRange range, CFIndex *parBeginIndex, CFIndex *parEndIndex, CFIndex *contentsEndIndex) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFStringGetParagraphBounds (CFStringRef* @string, CFRange range, nint* parBeginIndex, nint* parEndIndex, nint* contentsEndIndex);

		// extern CFIndex CFStringGetHyphenationLocationBeforeIndex (CFStringRef string, CFIndex location, CFRange limitRange, CFOptionFlags options, CFLocaleRef locale, UTF32Char *character) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=4.2))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (4,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFStringGetHyphenationLocationBeforeIndex (CFStringRef* @string, nint location, CFRange limitRange, nuint options, CFLocaleRef* locale, uint* character);

		// extern Boolean CFStringIsHyphenationAvailableForLocale (CFLocaleRef locale) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=4.3))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFStringIsHyphenationAvailableForLocale (CFLocaleRef* locale);

		// extern CFStringRef CFStringCreateByCombiningStrings (CFAllocatorRef alloc, CFArrayRef theArray, CFStringRef separatorString) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFStringCreateByCombiningStrings (CFAllocatorRef* alloc, CFArrayRef* theArray, CFStringRef* separatorString);

		// extern CFArrayRef CFStringCreateArrayBySeparatingStrings (CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFArrayRef* CFStringCreateArrayBySeparatingStrings (CFAllocatorRef* alloc, CFStringRef* theString, CFStringRef* separatorString);

		// extern SInt32 CFStringGetIntValue (CFStringRef str) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int CFStringGetIntValue (CFStringRef* str);

		// extern double CFStringGetDoubleValue (CFStringRef str) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe double CFStringGetDoubleValue (CFStringRef* str);

		// extern void CFStringAppend (CFMutableStringRef theString, CFStringRef appendedString) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFStringAppend (CFMutableStringRef* theString, CFStringRef* appendedString);

		// extern void CFStringAppendCharacters (CFMutableStringRef theString, const UniChar *chars, CFIndex numChars) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFStringAppendCharacters (CFMutableStringRef* theString, ushort* chars, nint numChars);

		// extern void CFStringAppendPascalString (CFMutableStringRef theString, ConstStr255Param pStr, CFStringEncoding encoding) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFStringAppendPascalString (CFMutableStringRef* theString, byte* pStr, uint encoding);

		// extern void CFStringAppendCString (CFMutableStringRef theString, const char *cStr, CFStringEncoding encoding) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFStringAppendCString (CFMutableStringRef* theString, sbyte* cStr, uint encoding);

		// extern void CFStringAppendFormat (CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...) __attribute__((format(CFString, 3, 4))) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFStringAppendFormat (CFMutableStringRef* theString, CFDictionaryRef* formatOptions, CFStringRef* format, IntPtr varArgs);

		// extern void CFStringAppendFormatAndArguments (CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, va_list arguments) __attribute__((format(CFString, 3, 0))) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFStringAppendFormatAndArguments (CFMutableStringRef* theString, CFDictionaryRef* formatOptions, CFStringRef* format, sbyte* arguments);

		// extern void CFStringInsert (CFMutableStringRef str, CFIndex idx, CFStringRef insertedStr) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFStringInsert (CFMutableStringRef* str, nint idx, CFStringRef* insertedStr);

		// extern void CFStringDelete (CFMutableStringRef theString, CFRange range) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFStringDelete (CFMutableStringRef* theString, CFRange range);

		// extern void CFStringReplace (CFMutableStringRef theString, CFRange range, CFStringRef replacement) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFStringReplace (CFMutableStringRef* theString, CFRange range, CFStringRef* replacement);

		// extern void CFStringReplaceAll (CFMutableStringRef theString, CFStringRef replacement) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFStringReplaceAll (CFMutableStringRef* theString, CFStringRef* replacement);

		// extern CFIndex CFStringFindAndReplace (CFMutableStringRef theString, CFStringRef stringToFind, CFStringRef replacementString, CFRange rangeToSearch, CFStringCompareFlags compareOptions) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFStringFindAndReplace (CFMutableStringRef* theString, CFStringRef* stringToFind, CFStringRef* replacementString, CFRange rangeToSearch, CFStringCompareFlags compareOptions);

		// extern void CFStringSetExternalCharactersNoCopy (CFMutableStringRef theString, UniChar *chars, CFIndex length, CFIndex capacity) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFStringSetExternalCharactersNoCopy (CFMutableStringRef* theString, ushort* chars, nint length, nint capacity);

		// extern void CFStringPad (CFMutableStringRef theString, CFStringRef padString, CFIndex length, CFIndex indexIntoPad) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFStringPad (CFMutableStringRef* theString, CFStringRef* padString, nint length, nint indexIntoPad);

		// extern void CFStringTrim (CFMutableStringRef theString, CFStringRef trimString) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFStringTrim (CFMutableStringRef* theString, CFStringRef* trimString);

		// extern void CFStringTrimWhitespace (CFMutableStringRef theString) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFStringTrimWhitespace (CFMutableStringRef* theString);

		// extern void CFStringLowercase (CFMutableStringRef theString, CFLocaleRef locale) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFStringLowercase (CFMutableStringRef* theString, CFLocaleRef* locale);

		// extern void CFStringUppercase (CFMutableStringRef theString, CFLocaleRef locale) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFStringUppercase (CFMutableStringRef* theString, CFLocaleRef* locale);

		// extern void CFStringCapitalize (CFMutableStringRef theString, CFLocaleRef locale) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFStringCapitalize (CFMutableStringRef* theString, CFLocaleRef* locale);

		// extern void CFStringNormalize (CFMutableStringRef theString, CFStringNormalizationForm theForm) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFStringNormalize (CFMutableStringRef* theString, CFStringNormalizationForm theForm);

		// extern void CFStringFold (CFMutableStringRef theString, CFStringCompareFlags theFlags, CFLocaleRef theLocale) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFStringFold (CFMutableStringRef* theString, CFStringCompareFlags theFlags, CFLocaleRef* theLocale);

		// extern Boolean CFStringTransform (CFMutableStringRef string, CFRange *range, CFStringRef transform, Boolean reverse) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFStringTransform (CFMutableStringRef* @string, CFRange* range, CFStringRef* transform, byte reverse);

		// extern Boolean CFStringIsEncodingAvailable (CFStringEncoding encoding) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern byte CFStringIsEncodingAvailable (uint encoding);

		// extern const CFStringEncoding * CFStringGetListOfAvailableEncodings () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe uint* CFStringGetListOfAvailableEncodings ();

		// extern CFStringRef CFStringGetNameOfEncoding (CFStringEncoding encoding) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFStringGetNameOfEncoding (uint encoding);

		// extern unsigned long CFStringConvertEncodingToNSStringEncoding (CFStringEncoding encoding) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFStringConvertEncodingToNSStringEncoding (uint encoding);

		// extern CFStringEncoding CFStringConvertNSStringEncodingToEncoding (unsigned long encoding) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint CFStringConvertNSStringEncodingToEncoding (nuint encoding);

		// extern UInt32 CFStringConvertEncodingToWindowsCodepage (CFStringEncoding encoding) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint CFStringConvertEncodingToWindowsCodepage (uint encoding);

		// extern CFStringEncoding CFStringConvertWindowsCodepageToEncoding (UInt32 codepage) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint CFStringConvertWindowsCodepageToEncoding (uint codepage);

		// extern CFStringEncoding CFStringConvertIANACharSetNameToEncoding (CFStringRef theString) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe uint CFStringConvertIANACharSetNameToEncoding (CFStringRef* theString);

		// extern CFStringRef CFStringConvertEncodingToIANACharSetName (CFStringEncoding encoding) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFStringConvertEncodingToIANACharSetName (uint encoding);

		// extern CFStringEncoding CFStringGetMostCompatibleMacStringEncoding (CFStringEncoding encoding) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint CFStringGetMostCompatibleMacStringEncoding (uint encoding);

		// void CFStringInitInlineBuffer (CFStringRef str, CFStringInlineBuffer *buf, CFRange range) __attribute__((always_inline)) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFStringInitInlineBuffer (CFStringRef* str, CFStringInlineBuffer* buf, CFRange range);

		// UniChar CFStringGetCharacterFromInlineBuffer (CFStringInlineBuffer *buf, CFIndex idx) __attribute__((always_inline)) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe ushort CFStringGetCharacterFromInlineBuffer (CFStringInlineBuffer* buf, nint idx);

		// Boolean CFStringIsSurrogateHighCharacter (UniChar character) __attribute__((always_inline)) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern byte CFStringIsSurrogateHighCharacter (ushort character);

		// Boolean CFStringIsSurrogateLowCharacter (UniChar character) __attribute__((always_inline)) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern byte CFStringIsSurrogateLowCharacter (ushort character);

		// UTF32Char CFStringGetLongCharacterForSurrogatePair (UniChar surrogateHigh, UniChar surrogateLow) __attribute__((always_inline)) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint CFStringGetLongCharacterForSurrogatePair (ushort surrogateHigh, ushort surrogateLow);

		// Boolean CFStringGetSurrogatePairForLongCharacter (UTF32Char character, UniChar *surrogates) __attribute__((always_inline)) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFStringGetSurrogatePairForLongCharacter (uint character, ushort* surrogates);

		// extern void CFShow (CFTypeRef obj) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFShow (void* obj);

		// extern void CFShowStr (CFStringRef str) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFShowStr (CFStringRef* str);

		// extern CFStringRef __CFStringMakeConstantString (const char *cStr) __attribute__((format_arg(1))) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* __CFStringMakeConstantString (sbyte* cStr);

		// extern CFTypeID CFTimeZoneGetTypeID () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFTimeZoneGetTypeID ();

		// extern CFTimeZoneRef CFTimeZoneCopySystem () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFTimeZoneRef* CFTimeZoneCopySystem ();

		// extern void CFTimeZoneResetSystem () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void CFTimeZoneResetSystem ();

		// extern CFTimeZoneRef CFTimeZoneCopyDefault () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFTimeZoneRef* CFTimeZoneCopyDefault ();

		// extern void CFTimeZoneSetDefault (CFTimeZoneRef tz) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFTimeZoneSetDefault (CFTimeZoneRef* tz);

		// extern CFArrayRef CFTimeZoneCopyKnownNames () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFArrayRef* CFTimeZoneCopyKnownNames ();

		// extern CFDictionaryRef CFTimeZoneCopyAbbreviationDictionary () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFDictionaryRef* CFTimeZoneCopyAbbreviationDictionary ();

		// extern void CFTimeZoneSetAbbreviationDictionary (CFDictionaryRef dict) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFTimeZoneSetAbbreviationDictionary (CFDictionaryRef* dict);

		// extern CFTimeZoneRef CFTimeZoneCreate (CFAllocatorRef allocator, CFStringRef name, CFDataRef data) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFTimeZoneRef* CFTimeZoneCreate (CFAllocatorRef* allocator, CFStringRef* name, CFDataRef* data);

		// extern CFTimeZoneRef CFTimeZoneCreateWithTimeIntervalFromGMT (CFAllocatorRef allocator, CFTimeInterval ti) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFTimeZoneRef* CFTimeZoneCreateWithTimeIntervalFromGMT (CFAllocatorRef* allocator, double ti);

		// extern CFTimeZoneRef CFTimeZoneCreateWithName (CFAllocatorRef allocator, CFStringRef name, Boolean tryAbbrev) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFTimeZoneRef* CFTimeZoneCreateWithName (CFAllocatorRef* allocator, CFStringRef* name, byte tryAbbrev);

		// extern CFStringRef CFTimeZoneGetName (CFTimeZoneRef tz) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFTimeZoneGetName (CFTimeZoneRef* tz);

		// extern CFDataRef CFTimeZoneGetData (CFTimeZoneRef tz) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFDataRef* CFTimeZoneGetData (CFTimeZoneRef* tz);

		// extern CFTimeInterval CFTimeZoneGetSecondsFromGMT (CFTimeZoneRef tz, CFAbsoluteTime at) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe double CFTimeZoneGetSecondsFromGMT (CFTimeZoneRef* tz, double at);

		// extern CFStringRef CFTimeZoneCopyAbbreviation (CFTimeZoneRef tz, CFAbsoluteTime at) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFTimeZoneCopyAbbreviation (CFTimeZoneRef* tz, double at);

		// extern Boolean CFTimeZoneIsDaylightSavingTime (CFTimeZoneRef tz, CFAbsoluteTime at) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFTimeZoneIsDaylightSavingTime (CFTimeZoneRef* tz, double at);

		// extern CFTimeInterval CFTimeZoneGetDaylightSavingTimeOffset (CFTimeZoneRef tz, CFAbsoluteTime at) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe double CFTimeZoneGetDaylightSavingTimeOffset (CFTimeZoneRef* tz, double at);

		// extern CFAbsoluteTime CFTimeZoneGetNextDaylightSavingTimeTransition (CFTimeZoneRef tz, CFAbsoluteTime at) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe double CFTimeZoneGetNextDaylightSavingTimeTransition (CFTimeZoneRef* tz, double at);

		// extern CFStringRef CFTimeZoneCopyLocalizedName (CFTimeZoneRef tz, CFTimeZoneNameStyle style, CFLocaleRef locale) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFTimeZoneCopyLocalizedName (CFTimeZoneRef* tz, CFTimeZoneNameStyle style, CFLocaleRef* locale);

		// extern CFTypeID CFCalendarGetTypeID () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFCalendarGetTypeID ();

		// extern CFCalendarRef CFCalendarCopyCurrent () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFCalendarRef* CFCalendarCopyCurrent ();

		// extern CFCalendarRef CFCalendarCreateWithIdentifier (CFAllocatorRef allocator, CFCalendarIdentifier identifier) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFCalendarRef* CFCalendarCreateWithIdentifier (CFAllocatorRef* allocator, CFCalendarIdentifier* identifier);

		// extern CFCalendarIdentifier CFCalendarGetIdentifier (CFCalendarRef calendar) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFCalendarIdentifier* CFCalendarGetIdentifier (CFCalendarRef* calendar);

		// extern CFLocaleRef CFCalendarCopyLocale (CFCalendarRef calendar) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFLocaleRef* CFCalendarCopyLocale (CFCalendarRef* calendar);

		// extern void CFCalendarSetLocale (CFCalendarRef calendar, CFLocaleRef locale) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFCalendarSetLocale (CFCalendarRef* calendar, CFLocaleRef* locale);

		// extern CFTimeZoneRef CFCalendarCopyTimeZone (CFCalendarRef calendar) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFTimeZoneRef* CFCalendarCopyTimeZone (CFCalendarRef* calendar);

		// extern void CFCalendarSetTimeZone (CFCalendarRef calendar, CFTimeZoneRef tz) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFCalendarSetTimeZone (CFCalendarRef* calendar, CFTimeZoneRef* tz);

		// extern CFIndex CFCalendarGetFirstWeekday (CFCalendarRef calendar) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFCalendarGetFirstWeekday (CFCalendarRef* calendar);

		// extern void CFCalendarSetFirstWeekday (CFCalendarRef calendar, CFIndex wkdy) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFCalendarSetFirstWeekday (CFCalendarRef* calendar, nint wkdy);

		// extern CFIndex CFCalendarGetMinimumDaysInFirstWeek (CFCalendarRef calendar) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFCalendarGetMinimumDaysInFirstWeek (CFCalendarRef* calendar);

		// extern void CFCalendarSetMinimumDaysInFirstWeek (CFCalendarRef calendar, CFIndex mwd) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFCalendarSetMinimumDaysInFirstWeek (CFCalendarRef* calendar, nint mwd);

		// extern CFRange CFCalendarGetMinimumRangeOfUnit (CFCalendarRef calendar, CFCalendarUnit unit) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFRange CFCalendarGetMinimumRangeOfUnit (CFCalendarRef* calendar, CFCalendarUnit unit);

		// extern CFRange CFCalendarGetMaximumRangeOfUnit (CFCalendarRef calendar, CFCalendarUnit unit) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFRange CFCalendarGetMaximumRangeOfUnit (CFCalendarRef* calendar, CFCalendarUnit unit);

		// extern CFRange CFCalendarGetRangeOfUnit (CFCalendarRef calendar, CFCalendarUnit smallerUnit, CFCalendarUnit biggerUnit, CFAbsoluteTime at) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFRange CFCalendarGetRangeOfUnit (CFCalendarRef* calendar, CFCalendarUnit smallerUnit, CFCalendarUnit biggerUnit, double at);

		// extern CFIndex CFCalendarGetOrdinalityOfUnit (CFCalendarRef calendar, CFCalendarUnit smallerUnit, CFCalendarUnit biggerUnit, CFAbsoluteTime at) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFCalendarGetOrdinalityOfUnit (CFCalendarRef* calendar, CFCalendarUnit smallerUnit, CFCalendarUnit biggerUnit, double at);

		// extern Boolean CFCalendarGetTimeRangeOfUnit (CFCalendarRef calendar, CFCalendarUnit unit, CFAbsoluteTime at, CFAbsoluteTime *startp, CFTimeInterval *tip) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFCalendarGetTimeRangeOfUnit (CFCalendarRef* calendar, CFCalendarUnit unit, double at, double* startp, double* tip);

		// extern Boolean CFCalendarComposeAbsoluteTime (CFCalendarRef calendar, CFAbsoluteTime *at, const char *componentDesc, ...) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFCalendarComposeAbsoluteTime (CFCalendarRef* calendar, double* at, sbyte* componentDesc, IntPtr varArgs);

		// extern Boolean CFCalendarDecomposeAbsoluteTime (CFCalendarRef calendar, CFAbsoluteTime at, const char *componentDesc, ...) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFCalendarDecomposeAbsoluteTime (CFCalendarRef* calendar, double at, sbyte* componentDesc, IntPtr varArgs);

		// extern Boolean CFCalendarAddComponents (CFCalendarRef calendar, CFAbsoluteTime *at, CFOptionFlags options, const char *componentDesc, ...) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFCalendarAddComponents (CFCalendarRef* calendar, double* at, nuint options, sbyte* componentDesc, IntPtr varArgs);

		// extern Boolean CFCalendarGetComponentDifference (CFCalendarRef calendar, CFAbsoluteTime startingAT, CFAbsoluteTime resultAT, CFOptionFlags options, const char *componentDesc, ...) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFCalendarGetComponentDifference (CFCalendarRef* calendar, double startingAT, double resultAT, nuint options, sbyte* componentDesc, IntPtr varArgs);

		// extern CFStringRef CFDateFormatterCreateDateFormatFromTemplate (CFAllocatorRef allocator, CFStringRef tmplate, CFOptionFlags options, CFLocaleRef locale) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFDateFormatterCreateDateFormatFromTemplate (CFAllocatorRef* allocator, CFStringRef* tmplate, nuint options, CFLocaleRef* locale);

		// extern CFTypeID CFDateFormatterGetTypeID () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFDateFormatterGetTypeID ();

		// extern CFDateFormatterRef CFDateFormatterCreateISO8601Formatter (CFAllocatorRef allocator, CFISO8601DateFormatOptions formatOptions) __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((cf_audited_transfer));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFDateFormatterRef* CFDateFormatterCreateISO8601Formatter (CFAllocatorRef* allocator, CFISO8601DateFormatOptions formatOptions);

		// extern CFDateFormatterRef CFDateFormatterCreate (CFAllocatorRef allocator, CFLocaleRef locale, CFDateFormatterStyle dateStyle, CFDateFormatterStyle timeStyle) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFDateFormatterRef* CFDateFormatterCreate (CFAllocatorRef* allocator, CFLocaleRef* locale, CFDateFormatterStyle dateStyle, CFDateFormatterStyle timeStyle);

		// extern CFLocaleRef CFDateFormatterGetLocale (CFDateFormatterRef formatter) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFLocaleRef* CFDateFormatterGetLocale (CFDateFormatterRef* formatter);

		// extern CFDateFormatterStyle CFDateFormatterGetDateStyle (CFDateFormatterRef formatter) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFDateFormatterStyle CFDateFormatterGetDateStyle (CFDateFormatterRef* formatter);

		// extern CFDateFormatterStyle CFDateFormatterGetTimeStyle (CFDateFormatterRef formatter) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFDateFormatterStyle CFDateFormatterGetTimeStyle (CFDateFormatterRef* formatter);

		// extern CFStringRef CFDateFormatterGetFormat (CFDateFormatterRef formatter) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFDateFormatterGetFormat (CFDateFormatterRef* formatter);

		// extern void CFDateFormatterSetFormat (CFDateFormatterRef formatter, CFStringRef formatString) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFDateFormatterSetFormat (CFDateFormatterRef* formatter, CFStringRef* formatString);

		// extern CFStringRef CFDateFormatterCreateStringWithDate (CFAllocatorRef allocator, CFDateFormatterRef formatter, CFDateRef date) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFDateFormatterCreateStringWithDate (CFAllocatorRef* allocator, CFDateFormatterRef* formatter, CFDateRef* date);

		// extern CFStringRef CFDateFormatterCreateStringWithAbsoluteTime (CFAllocatorRef allocator, CFDateFormatterRef formatter, CFAbsoluteTime at) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFDateFormatterCreateStringWithAbsoluteTime (CFAllocatorRef* allocator, CFDateFormatterRef* formatter, double at);

		// extern CFDateRef CFDateFormatterCreateDateFromString (CFAllocatorRef allocator, CFDateFormatterRef formatter, CFStringRef string, CFRange *rangep) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFDateRef* CFDateFormatterCreateDateFromString (CFAllocatorRef* allocator, CFDateFormatterRef* formatter, CFStringRef* @string, CFRange* rangep);

		// extern Boolean CFDateFormatterGetAbsoluteTimeFromString (CFDateFormatterRef formatter, CFStringRef string, CFRange *rangep, CFAbsoluteTime *atp) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFDateFormatterGetAbsoluteTimeFromString (CFDateFormatterRef* formatter, CFStringRef* @string, CFRange* rangep, double* atp);

		// extern void CFDateFormatterSetProperty (CFDateFormatterRef formatter, CFStringRef key, CFTypeRef value) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFDateFormatterSetProperty (CFDateFormatterRef* formatter, CFStringRef* key, void* value);

		// extern CFTypeRef CFDateFormatterCopyProperty (CFDateFormatterRef formatter, CFDateFormatterKey key) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* CFDateFormatterCopyProperty (CFDateFormatterRef* formatter, CFDateFormatterKey* key);

		// extern CFTypeID CFErrorGetTypeID () __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFErrorGetTypeID ();

		// extern CFErrorRef CFErrorCreate (CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, CFDictionaryRef userInfo) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFErrorRef* CFErrorCreate (CFAllocatorRef* allocator, CFErrorDomain* domain, nint code, CFDictionaryRef* userInfo);

		// extern CFErrorRef CFErrorCreateWithUserInfoKeysAndValues (CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, const void *const *userInfoKeys, const void *const *userInfoValues, CFIndex numUserInfoValues) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFErrorRef* CFErrorCreateWithUserInfoKeysAndValues (CFAllocatorRef* allocator, CFErrorDomain* domain, nint code, void** userInfoKeys, void** userInfoValues, nint numUserInfoValues);

		// extern CFErrorDomain CFErrorGetDomain (CFErrorRef err) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFErrorDomain* CFErrorGetDomain (CFErrorRef* err);

		// extern CFIndex CFErrorGetCode (CFErrorRef err) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFErrorGetCode (CFErrorRef* err);

		// extern CFDictionaryRef CFErrorCopyUserInfo (CFErrorRef err) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFDictionaryRef* CFErrorCopyUserInfo (CFErrorRef* err);

		// extern CFStringRef CFErrorCopyDescription (CFErrorRef err) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFErrorCopyDescription (CFErrorRef* err);

		// extern CFStringRef CFErrorCopyFailureReason (CFErrorRef err) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFErrorCopyFailureReason (CFErrorRef* err);

		// extern CFStringRef CFErrorCopyRecoverySuggestion (CFErrorRef err) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFErrorCopyRecoverySuggestion (CFErrorRef* err);

		// extern CFTypeID CFBooleanGetTypeID () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFBooleanGetTypeID ();

		// extern Boolean CFBooleanGetValue (CFBooleanRef boolean) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFBooleanGetValue (CFBooleanRef* boolean);

		// extern CFTypeID CFNumberGetTypeID () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFNumberGetTypeID ();

		// extern CFNumberRef CFNumberCreate (CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFNumberRef* CFNumberCreate (CFAllocatorRef* allocator, CFNumberType theType, void* valuePtr);

		// extern CFNumberType CFNumberGetType (CFNumberRef number) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFNumberType CFNumberGetType (CFNumberRef* number);

		// extern CFIndex CFNumberGetByteSize (CFNumberRef number) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFNumberGetByteSize (CFNumberRef* number);

		// extern Boolean CFNumberIsFloatType (CFNumberRef number) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFNumberIsFloatType (CFNumberRef* number);

		// extern Boolean CFNumberGetValue (CFNumberRef number, CFNumberType theType, void *valuePtr) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFNumberGetValue (CFNumberRef* number, CFNumberType theType, void* valuePtr);

		// extern CFComparisonResult CFNumberCompare (CFNumberRef number, CFNumberRef otherNumber, void *context) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFComparisonResult CFNumberCompare (CFNumberRef* number, CFNumberRef* otherNumber, void* context);

		// extern CFTypeID CFNumberFormatterGetTypeID () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFNumberFormatterGetTypeID ();

		// extern CFNumberFormatterRef CFNumberFormatterCreate (CFAllocatorRef allocator, CFLocaleRef locale, CFNumberFormatterStyle style) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFNumberFormatterRef* CFNumberFormatterCreate (CFAllocatorRef* allocator, CFLocaleRef* locale, CFNumberFormatterStyle style);

		// extern CFLocaleRef CFNumberFormatterGetLocale (CFNumberFormatterRef formatter) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFLocaleRef* CFNumberFormatterGetLocale (CFNumberFormatterRef* formatter);

		// extern CFNumberFormatterStyle CFNumberFormatterGetStyle (CFNumberFormatterRef formatter) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFNumberFormatterStyle CFNumberFormatterGetStyle (CFNumberFormatterRef* formatter);

		// extern CFStringRef CFNumberFormatterGetFormat (CFNumberFormatterRef formatter) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFNumberFormatterGetFormat (CFNumberFormatterRef* formatter);

		// extern void CFNumberFormatterSetFormat (CFNumberFormatterRef formatter, CFStringRef formatString) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFNumberFormatterSetFormat (CFNumberFormatterRef* formatter, CFStringRef* formatString);

		// extern CFStringRef CFNumberFormatterCreateStringWithNumber (CFAllocatorRef allocator, CFNumberFormatterRef formatter, CFNumberRef number) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFNumberFormatterCreateStringWithNumber (CFAllocatorRef* allocator, CFNumberFormatterRef* formatter, CFNumberRef* number);

		// extern CFStringRef CFNumberFormatterCreateStringWithValue (CFAllocatorRef allocator, CFNumberFormatterRef formatter, CFNumberType numberType, const void *valuePtr) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFNumberFormatterCreateStringWithValue (CFAllocatorRef* allocator, CFNumberFormatterRef* formatter, CFNumberType numberType, void* valuePtr);

		// extern CFNumberRef CFNumberFormatterCreateNumberFromString (CFAllocatorRef allocator, CFNumberFormatterRef formatter, CFStringRef string, CFRange *rangep, CFOptionFlags options) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFNumberRef* CFNumberFormatterCreateNumberFromString (CFAllocatorRef* allocator, CFNumberFormatterRef* formatter, CFStringRef* @string, CFRange* rangep, nuint options);

		// extern Boolean CFNumberFormatterGetValueFromString (CFNumberFormatterRef formatter, CFStringRef string, CFRange *rangep, CFNumberType numberType, void *valuePtr) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFNumberFormatterGetValueFromString (CFNumberFormatterRef* formatter, CFStringRef* @string, CFRange* rangep, CFNumberType numberType, void* valuePtr);

		// extern void CFNumberFormatterSetProperty (CFNumberFormatterRef formatter, CFNumberFormatterKey key, CFTypeRef value) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFNumberFormatterSetProperty (CFNumberFormatterRef* formatter, CFNumberFormatterKey* key, void* value);

		// extern CFTypeRef CFNumberFormatterCopyProperty (CFNumberFormatterRef formatter, CFNumberFormatterKey key) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* CFNumberFormatterCopyProperty (CFNumberFormatterRef* formatter, CFNumberFormatterKey* key);

		// extern Boolean CFNumberFormatterGetDecimalInfoForCurrencyCode (CFStringRef currencyCode, int32_t *defaultFractionDigits, double *roundingIncrement) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFNumberFormatterGetDecimalInfoForCurrencyCode (CFStringRef* currencyCode, int* defaultFractionDigits, double* roundingIncrement);

		// extern CFPropertyListRef _Nullable CFPreferencesCopyAppValue (CFStringRef _Nonnull key, CFStringRef _Nonnull applicationID) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe void* CFPreferencesCopyAppValue (CFStringRef* key, CFStringRef* applicationID);

		// extern Boolean CFPreferencesGetAppBooleanValue (CFStringRef _Nonnull key, CFStringRef _Nonnull applicationID, Boolean * _Nullable keyExistsAndHasValidFormat) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFPreferencesGetAppBooleanValue (CFStringRef* key, CFStringRef* applicationID, [NullAllowed] byte* keyExistsAndHasValidFormat);

		// extern CFIndex CFPreferencesGetAppIntegerValue (CFStringRef _Nonnull key, CFStringRef _Nonnull applicationID, Boolean * _Nullable keyExistsAndHasValidFormat) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFPreferencesGetAppIntegerValue (CFStringRef* key, CFStringRef* applicationID, [NullAllowed] byte* keyExistsAndHasValidFormat);

		// extern void CFPreferencesSetAppValue (CFStringRef _Nonnull key, CFPropertyListRef _Nullable value, CFStringRef _Nonnull applicationID) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFPreferencesSetAppValue (CFStringRef* key, [NullAllowed] void* value, CFStringRef* applicationID);

		// extern void CFPreferencesAddSuitePreferencesToApp (CFStringRef _Nonnull applicationID, CFStringRef _Nonnull suiteID) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFPreferencesAddSuitePreferencesToApp (CFStringRef* applicationID, CFStringRef* suiteID);

		// extern void CFPreferencesRemoveSuitePreferencesFromApp (CFStringRef _Nonnull applicationID, CFStringRef _Nonnull suiteID) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFPreferencesRemoveSuitePreferencesFromApp (CFStringRef* applicationID, CFStringRef* suiteID);

		// extern Boolean CFPreferencesAppSynchronize (CFStringRef _Nonnull applicationID) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFPreferencesAppSynchronize (CFStringRef* applicationID);

		// extern CFPropertyListRef _Nullable CFPreferencesCopyValue (CFStringRef _Nonnull key, CFStringRef _Nonnull applicationID, CFStringRef _Nonnull userName, CFStringRef _Nonnull hostName) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe void* CFPreferencesCopyValue (CFStringRef* key, CFStringRef* applicationID, CFStringRef* userName, CFStringRef* hostName);

		// extern CFDictionaryRef _Nonnull CFPreferencesCopyMultiple (CFArrayRef _Nullable keysToFetch, CFStringRef _Nonnull applicationID, CFStringRef _Nonnull userName, CFStringRef _Nonnull hostName) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFDictionaryRef* CFPreferencesCopyMultiple ([NullAllowed] CFArrayRef* keysToFetch, CFStringRef* applicationID, CFStringRef* userName, CFStringRef* hostName);

		// extern void CFPreferencesSetValue (CFStringRef _Nonnull key, CFPropertyListRef _Nullable value, CFStringRef _Nonnull applicationID, CFStringRef _Nonnull userName, CFStringRef _Nonnull hostName) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFPreferencesSetValue (CFStringRef* key, [NullAllowed] void* value, CFStringRef* applicationID, CFStringRef* userName, CFStringRef* hostName);

		// extern void CFPreferencesSetMultiple (CFDictionaryRef _Nullable keysToSet, CFArrayRef _Nullable keysToRemove, CFStringRef _Nonnull applicationID, CFStringRef _Nonnull userName, CFStringRef _Nonnull hostName) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFPreferencesSetMultiple ([NullAllowed] CFDictionaryRef* keysToSet, [NullAllowed] CFArrayRef* keysToRemove, CFStringRef* applicationID, CFStringRef* userName, CFStringRef* hostName);

		// extern Boolean CFPreferencesSynchronize (CFStringRef _Nonnull applicationID, CFStringRef _Nonnull userName, CFStringRef _Nonnull hostName) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFPreferencesSynchronize (CFStringRef* applicationID, CFStringRef* userName, CFStringRef* hostName);

		// extern CFArrayRef _Nullable CFPreferencesCopyApplicationList (CFStringRef _Nonnull userName, CFStringRef _Nonnull hostName) __attribute__((availability(macos, introduced=10.0, deprecated=10.9))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Unsupported API")]
		[Deprecated (PlatformName.MacOSX, 10, 9, message: "Unsupported API")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Unsupported API")]
		[Deprecated (PlatformName.iOS, 7, 0, message: "Unsupported API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Unsupported API")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Unsupported API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Unsupported API")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Unsupported API")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFArrayRef* CFPreferencesCopyApplicationList (CFStringRef* userName, CFStringRef* hostName);

		// extern CFArrayRef _Nullable CFPreferencesCopyKeyList (CFStringRef _Nonnull applicationID, CFStringRef _Nonnull userName, CFStringRef _Nonnull hostName) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFArrayRef* CFPreferencesCopyKeyList (CFStringRef* applicationID, CFStringRef* userName, CFStringRef* hostName);

		// extern Boolean CFPreferencesAppValueIsForced (CFStringRef _Nonnull key, CFStringRef _Nonnull applicationID) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFPreferencesAppValueIsForced (CFStringRef* key, CFStringRef* applicationID);

		// extern CFTypeID CFURLGetTypeID () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFURLGetTypeID ();

		// extern CFURLRef CFURLCreateWithBytes (CFAllocatorRef allocator, const UInt8 *URLBytes, CFIndex length, CFStringEncoding encoding, CFURLRef baseURL) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFURLRef* CFURLCreateWithBytes (CFAllocatorRef* allocator, byte* URLBytes, nint length, uint encoding, CFURLRef* baseURL);

		// extern CFDataRef CFURLCreateData (CFAllocatorRef allocator, CFURLRef url, CFStringEncoding encoding, Boolean escapeWhitespace) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFDataRef* CFURLCreateData (CFAllocatorRef* allocator, CFURLRef* url, uint encoding, byte escapeWhitespace);

		// extern CFURLRef CFURLCreateWithString (CFAllocatorRef allocator, CFStringRef URLString, CFURLRef baseURL) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFURLRef* CFURLCreateWithString (CFAllocatorRef* allocator, CFStringRef* URLString, CFURLRef* baseURL);

		// extern CFURLRef CFURLCreateAbsoluteURLWithBytes (CFAllocatorRef alloc, const UInt8 *relativeURLBytes, CFIndex length, CFStringEncoding encoding, CFURLRef baseURL, Boolean useCompatibilityMode) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFURLRef* CFURLCreateAbsoluteURLWithBytes (CFAllocatorRef* alloc, byte* relativeURLBytes, nint length, uint encoding, CFURLRef* baseURL, byte useCompatibilityMode);

		// extern CFURLRef CFURLCreateWithFileSystemPath (CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFURLRef* CFURLCreateWithFileSystemPath (CFAllocatorRef* allocator, CFStringRef* filePath, CFURLPathStyle pathStyle, byte isDirectory);

		// extern CFURLRef CFURLCreateFromFileSystemRepresentation (CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFURLRef* CFURLCreateFromFileSystemRepresentation (CFAllocatorRef* allocator, byte* buffer, nint bufLen, byte isDirectory);

		// extern CFURLRef CFURLCreateWithFileSystemPathRelativeToBase (CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory, CFURLRef baseURL) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFURLRef* CFURLCreateWithFileSystemPathRelativeToBase (CFAllocatorRef* allocator, CFStringRef* filePath, CFURLPathStyle pathStyle, byte isDirectory, CFURLRef* baseURL);

		// extern CFURLRef CFURLCreateFromFileSystemRepresentationRelativeToBase (CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory, CFURLRef baseURL) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFURLRef* CFURLCreateFromFileSystemRepresentationRelativeToBase (CFAllocatorRef* allocator, byte* buffer, nint bufLen, byte isDirectory, CFURLRef* baseURL);

		// extern Boolean CFURLGetFileSystemRepresentation (CFURLRef url, Boolean resolveAgainstBase, UInt8 *buffer, CFIndex maxBufLen) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFURLGetFileSystemRepresentation (CFURLRef* url, byte resolveAgainstBase, byte* buffer, nint maxBufLen);

		// extern CFURLRef CFURLCopyAbsoluteURL (CFURLRef relativeURL) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFURLRef* CFURLCopyAbsoluteURL (CFURLRef* relativeURL);

		// extern CFStringRef CFURLGetString (CFURLRef anURL) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFURLGetString (CFURLRef* anURL);

		// extern CFURLRef CFURLGetBaseURL (CFURLRef anURL) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFURLRef* CFURLGetBaseURL (CFURLRef* anURL);

		// extern Boolean CFURLCanBeDecomposed (CFURLRef anURL) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFURLCanBeDecomposed (CFURLRef* anURL);

		// extern CFStringRef CFURLCopyScheme (CFURLRef anURL) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFURLCopyScheme (CFURLRef* anURL);

		// extern CFStringRef CFURLCopyNetLocation (CFURLRef anURL) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFURLCopyNetLocation (CFURLRef* anURL);

		// extern CFStringRef CFURLCopyPath (CFURLRef anURL) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFURLCopyPath (CFURLRef* anURL);

		// extern CFStringRef CFURLCopyStrictPath (CFURLRef anURL, Boolean *isAbsolute) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFURLCopyStrictPath (CFURLRef* anURL, byte* isAbsolute);

		// extern CFStringRef CFURLCopyFileSystemPath (CFURLRef anURL, CFURLPathStyle pathStyle) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFURLCopyFileSystemPath (CFURLRef* anURL, CFURLPathStyle pathStyle);

		// extern Boolean CFURLHasDirectoryPath (CFURLRef anURL) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFURLHasDirectoryPath (CFURLRef* anURL);

		// extern CFStringRef CFURLCopyResourceSpecifier (CFURLRef anURL) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFURLCopyResourceSpecifier (CFURLRef* anURL);

		// extern CFStringRef CFURLCopyHostName (CFURLRef anURL) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFURLCopyHostName (CFURLRef* anURL);

		// extern SInt32 CFURLGetPortNumber (CFURLRef anURL) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int CFURLGetPortNumber (CFURLRef* anURL);

		// extern CFStringRef CFURLCopyUserName (CFURLRef anURL) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFURLCopyUserName (CFURLRef* anURL);

		// extern CFStringRef CFURLCopyPassword (CFURLRef anURL) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFURLCopyPassword (CFURLRef* anURL);

		// extern CFStringRef CFURLCopyParameterString (CFURLRef anURL, CFStringRef charactersToLeaveEscaped) __attribute__((availability(macos, introduced=10.2, deprecated=10.15))) __attribute__((availability(ios, introduced=2.0, deprecated=13.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=6.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "The CFURLCopyParameterString function is deprecated. Post deprecation for applications linked with or after the macOS 10.15, and for all iOS, watchOS, and tvOS applications, CFURLCopyParameterString will always return NULL, and the CFURLCopyPath(), CFURLCopyStrictPath(), and CFURLCopyFileSystemPath() functions will return the complete path including the semicolon separator and params component if the URL string contains them.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "The CFURLCopyParameterString function is deprecated. Post deprecation for applications linked with or after the macOS 10.15, and for all iOS, watchOS, and tvOS applications, CFURLCopyParameterString will always return NULL, and the CFURLCopyPath(), CFURLCopyStrictPath(), and CFURLCopyFileSystemPath() functions will return the complete path including the semicolon separator and params component if the URL string contains them.")]
		[Introduced (PlatformName.iOS, 2, 0, message: "The CFURLCopyParameterString function is deprecated. Post deprecation for applications linked with or after the macOS 10.15, and for all iOS, watchOS, and tvOS applications, CFURLCopyParameterString will always return NULL, and the CFURLCopyPath(), CFURLCopyStrictPath(), and CFURLCopyFileSystemPath() functions will return the complete path including the semicolon separator and params component if the URL string contains them.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "The CFURLCopyParameterString function is deprecated. Post deprecation for applications linked with or after the macOS 10.15, and for all iOS, watchOS, and tvOS applications, CFURLCopyParameterString will always return NULL, and the CFURLCopyPath(), CFURLCopyStrictPath(), and CFURLCopyFileSystemPath() functions will return the complete path including the semicolon separator and params component if the URL string contains them.")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "The CFURLCopyParameterString function is deprecated. Post deprecation for applications linked with or after the macOS 10.15, and for all iOS, watchOS, and tvOS applications, CFURLCopyParameterString will always return NULL, and the CFURLCopyPath(), CFURLCopyStrictPath(), and CFURLCopyFileSystemPath() functions will return the complete path including the semicolon separator and params component if the URL string contains them.")]
		[Deprecated (PlatformName.WatchOS, 6, 0, message: "The CFURLCopyParameterString function is deprecated. Post deprecation for applications linked with or after the macOS 10.15, and for all iOS, watchOS, and tvOS applications, CFURLCopyParameterString will always return NULL, and the CFURLCopyPath(), CFURLCopyStrictPath(), and CFURLCopyFileSystemPath() functions will return the complete path including the semicolon separator and params component if the URL string contains them.")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "The CFURLCopyParameterString function is deprecated. Post deprecation for applications linked with or after the macOS 10.15, and for all iOS, watchOS, and tvOS applications, CFURLCopyParameterString will always return NULL, and the CFURLCopyPath(), CFURLCopyStrictPath(), and CFURLCopyFileSystemPath() functions will return the complete path including the semicolon separator and params component if the URL string contains them.")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "The CFURLCopyParameterString function is deprecated. Post deprecation for applications linked with or after the macOS 10.15, and for all iOS, watchOS, and tvOS applications, CFURLCopyParameterString will always return NULL, and the CFURLCopyPath(), CFURLCopyStrictPath(), and CFURLCopyFileSystemPath() functions will return the complete path including the semicolon separator and params component if the URL string contains them.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFURLCopyParameterString (CFURLRef* anURL, CFStringRef* charactersToLeaveEscaped);

		// extern CFStringRef CFURLCopyQueryString (CFURLRef anURL, CFStringRef charactersToLeaveEscaped) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFURLCopyQueryString (CFURLRef* anURL, CFStringRef* charactersToLeaveEscaped);

		// extern CFStringRef CFURLCopyFragment (CFURLRef anURL, CFStringRef charactersToLeaveEscaped) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFURLCopyFragment (CFURLRef* anURL, CFStringRef* charactersToLeaveEscaped);

		// extern CFStringRef CFURLCopyLastPathComponent (CFURLRef url) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFURLCopyLastPathComponent (CFURLRef* url);

		// extern CFStringRef CFURLCopyPathExtension (CFURLRef url) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFURLCopyPathExtension (CFURLRef* url);

		// extern CFURLRef CFURLCreateCopyAppendingPathComponent (CFAllocatorRef allocator, CFURLRef url, CFStringRef pathComponent, Boolean isDirectory) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFURLRef* CFURLCreateCopyAppendingPathComponent (CFAllocatorRef* allocator, CFURLRef* url, CFStringRef* pathComponent, byte isDirectory);

		// extern CFURLRef CFURLCreateCopyDeletingLastPathComponent (CFAllocatorRef allocator, CFURLRef url) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFURLRef* CFURLCreateCopyDeletingLastPathComponent (CFAllocatorRef* allocator, CFURLRef* url);

		// extern CFURLRef CFURLCreateCopyAppendingPathExtension (CFAllocatorRef allocator, CFURLRef url, CFStringRef extension) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFURLRef* CFURLCreateCopyAppendingPathExtension (CFAllocatorRef* allocator, CFURLRef* url, CFStringRef* extension);

		// extern CFURLRef CFURLCreateCopyDeletingPathExtension (CFAllocatorRef allocator, CFURLRef url) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFURLRef* CFURLCreateCopyDeletingPathExtension (CFAllocatorRef* allocator, CFURLRef* url);

		// extern CFIndex CFURLGetBytes (CFURLRef url, UInt8 *buffer, CFIndex bufferLength) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFURLGetBytes (CFURLRef* url, byte* buffer, nint bufferLength);

		// extern CFRange CFURLGetByteRangeForComponent (CFURLRef url, CFURLComponentType component, CFRange *rangeIncludingSeparators) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFRange CFURLGetByteRangeForComponent (CFURLRef* url, CFURLComponentType component, CFRange* rangeIncludingSeparators);

		// extern CFStringRef CFURLCreateStringByReplacingPercentEscapes (CFAllocatorRef allocator, CFStringRef originalString, CFStringRef charactersToLeaveEscaped) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFURLCreateStringByReplacingPercentEscapes (CFAllocatorRef* allocator, CFStringRef* originalString, CFStringRef* charactersToLeaveEscaped);

		// extern CFStringRef CFURLCreateStringByReplacingPercentEscapesUsingEncoding (CFAllocatorRef allocator, CFStringRef origString, CFStringRef charsToLeaveEscaped, CFStringEncoding encoding) __attribute__((availability(macos, introduced=10.0, deprecated=10.11))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use [NSString stringByRemovingPercentEncoding] or CFURLCreateStringByReplacingPercentEscapes() instead, which always uses the recommended UTF-8 encoding.")]
		[Deprecated (PlatformName.MacOSX, 10, 11, message: "Use [NSString stringByRemovingPercentEncoding] or CFURLCreateStringByReplacingPercentEscapes() instead, which always uses the recommended UTF-8 encoding.")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use [NSString stringByRemovingPercentEncoding] or CFURLCreateStringByReplacingPercentEscapes() instead, which always uses the recommended UTF-8 encoding.")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use [NSString stringByRemovingPercentEncoding] or CFURLCreateStringByReplacingPercentEscapes() instead, which always uses the recommended UTF-8 encoding.")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use [NSString stringByRemovingPercentEncoding] or CFURLCreateStringByReplacingPercentEscapes() instead, which always uses the recommended UTF-8 encoding.")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use [NSString stringByRemovingPercentEncoding] or CFURLCreateStringByReplacingPercentEscapes() instead, which always uses the recommended UTF-8 encoding.")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use [NSString stringByRemovingPercentEncoding] or CFURLCreateStringByReplacingPercentEscapes() instead, which always uses the recommended UTF-8 encoding.")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use [NSString stringByRemovingPercentEncoding] or CFURLCreateStringByReplacingPercentEscapes() instead, which always uses the recommended UTF-8 encoding.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFURLCreateStringByReplacingPercentEscapesUsingEncoding (CFAllocatorRef* allocator, CFStringRef* origString, CFStringRef* charsToLeaveEscaped, uint encoding);

		// extern CFStringRef CFURLCreateStringByAddingPercentEscapes (CFAllocatorRef allocator, CFStringRef originalString, CFStringRef charactersToLeaveUnescaped, CFStringRef legalURLCharactersToBeEscaped, CFStringEncoding encoding) __attribute__((availability(macos, introduced=10.0, deprecated=10.11))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use [NSString stringByAddingPercentEncodingWithAllowedCharacters:] instead, which always uses the recommended UTF-8 encoding, and which encodes for a specific URL component or subcomponent (since each URL component or subcomponent has different rules for what characters are valid).")]
		[Deprecated (PlatformName.MacOSX, 10, 11, message: "Use [NSString stringByAddingPercentEncodingWithAllowedCharacters:] instead, which always uses the recommended UTF-8 encoding, and which encodes for a specific URL component or subcomponent (since each URL component or subcomponent has different rules for what characters are valid).")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use [NSString stringByAddingPercentEncodingWithAllowedCharacters:] instead, which always uses the recommended UTF-8 encoding, and which encodes for a specific URL component or subcomponent (since each URL component or subcomponent has different rules for what characters are valid).")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use [NSString stringByAddingPercentEncodingWithAllowedCharacters:] instead, which always uses the recommended UTF-8 encoding, and which encodes for a specific URL component or subcomponent (since each URL component or subcomponent has different rules for what characters are valid).")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use [NSString stringByAddingPercentEncodingWithAllowedCharacters:] instead, which always uses the recommended UTF-8 encoding, and which encodes for a specific URL component or subcomponent (since each URL component or subcomponent has different rules for what characters are valid).")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use [NSString stringByAddingPercentEncodingWithAllowedCharacters:] instead, which always uses the recommended UTF-8 encoding, and which encodes for a specific URL component or subcomponent (since each URL component or subcomponent has different rules for what characters are valid).")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use [NSString stringByAddingPercentEncodingWithAllowedCharacters:] instead, which always uses the recommended UTF-8 encoding, and which encodes for a specific URL component or subcomponent (since each URL component or subcomponent has different rules for what characters are valid).")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use [NSString stringByAddingPercentEncodingWithAllowedCharacters:] instead, which always uses the recommended UTF-8 encoding, and which encodes for a specific URL component or subcomponent (since each URL component or subcomponent has different rules for what characters are valid).")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFURLCreateStringByAddingPercentEscapes (CFAllocatorRef* allocator, CFStringRef* originalString, CFStringRef* charactersToLeaveUnescaped, CFStringRef* legalURLCharactersToBeEscaped, uint encoding);

		// extern Boolean CFURLIsFileReferenceURL (CFURLRef url) __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFURLIsFileReferenceURL (CFURLRef* url);

		// extern CFURLRef CFURLCreateFileReferenceURL (CFAllocatorRef allocator, CFURLRef url, CFErrorRef *error) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFURLRef* CFURLCreateFileReferenceURL (CFAllocatorRef* allocator, CFURLRef* url, CFErrorRef** error);

		// extern CFURLRef CFURLCreateFilePathURL (CFAllocatorRef allocator, CFURLRef url, CFErrorRef *error) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFURLRef* CFURLCreateFilePathURL (CFAllocatorRef* allocator, CFURLRef* url, CFErrorRef** error);

		// extern CFURLRef CFURLCreateFromFSRef (CFAllocatorRef allocator, const struct FSRef *fsRef) __attribute__((availability(macos, introduced=10.0, deprecated=10.9))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Not supported")]
		[Deprecated (PlatformName.MacOSX, 10, 9, message: "Not supported")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Not supported")]
		[Deprecated (PlatformName.iOS, 7, 0, message: "Not supported")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Not supported")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Not supported")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Not supported")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Not supported")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFURLRef* CFURLCreateFromFSRef (CFAllocatorRef* allocator, FSRef* fsRef);

		// extern Boolean CFURLGetFSRef (CFURLRef url, struct FSRef *fsRef) __attribute__((availability(macos, introduced=10.0, deprecated=10.9))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Not supported")]
		[Deprecated (PlatformName.MacOSX, 10, 9, message: "Not supported")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Not supported")]
		[Deprecated (PlatformName.iOS, 7, 0, message: "Not supported")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Not supported")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Not supported")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Not supported")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Not supported")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFURLGetFSRef (CFURLRef* url, FSRef* fsRef);

		// extern Boolean CFURLCopyResourcePropertyForKey (CFURLRef url, CFStringRef key, void *propertyValueTypeRefPtr, CFErrorRef *error) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFURLCopyResourcePropertyForKey (CFURLRef* url, CFStringRef* key, void* propertyValueTypeRefPtr, CFErrorRef** error);

		// extern CFDictionaryRef CFURLCopyResourcePropertiesForKeys (CFURLRef url, CFArrayRef keys, CFErrorRef *error) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFDictionaryRef* CFURLCopyResourcePropertiesForKeys (CFURLRef* url, CFArrayRef* keys, CFErrorRef** error);

		// extern Boolean CFURLSetResourcePropertyForKey (CFURLRef url, CFStringRef key, CFTypeRef propertyValue, CFErrorRef *error) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFURLSetResourcePropertyForKey (CFURLRef* url, CFStringRef* key, void* propertyValue, CFErrorRef** error);

		// extern Boolean CFURLSetResourcePropertiesForKeys (CFURLRef url, CFDictionaryRef keyedPropertyValues, CFErrorRef *error) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFURLSetResourcePropertiesForKeys (CFURLRef* url, CFDictionaryRef* keyedPropertyValues, CFErrorRef** error);

		// extern void CFURLClearResourcePropertyCacheForKey (CFURLRef url, CFStringRef key) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFURLClearResourcePropertyCacheForKey (CFURLRef* url, CFStringRef* key);

		// extern void CFURLClearResourcePropertyCache (CFURLRef url) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFURLClearResourcePropertyCache (CFURLRef* url);

		// extern void CFURLSetTemporaryResourcePropertyForKey (CFURLRef url, CFStringRef key, CFTypeRef propertyValue) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFURLSetTemporaryResourcePropertyForKey (CFURLRef* url, CFStringRef* key, void* propertyValue);

		// extern Boolean CFURLResourceIsReachable (CFURLRef url, CFErrorRef *error) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFURLResourceIsReachable (CFURLRef* url, CFErrorRef** error);

		// extern CFDataRef CFURLCreateBookmarkData (CFAllocatorRef allocator, CFURLRef url, CFURLBookmarkCreationOptions options, CFArrayRef resourcePropertiesToInclude, CFURLRef relativeToURL, CFErrorRef *error) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFDataRef* CFURLCreateBookmarkData (CFAllocatorRef* allocator, CFURLRef* url, CFURLBookmarkCreationOptions options, CFArrayRef* resourcePropertiesToInclude, CFURLRef* relativeToURL, CFErrorRef** error);

		// extern CFURLRef CFURLCreateByResolvingBookmarkData (CFAllocatorRef allocator, CFDataRef bookmark, CFURLBookmarkResolutionOptions options, CFURLRef relativeToURL, CFArrayRef resourcePropertiesToInclude, Boolean *isStale, CFErrorRef *error) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFURLRef* CFURLCreateByResolvingBookmarkData (CFAllocatorRef* allocator, CFDataRef* bookmark, CFURLBookmarkResolutionOptions options, CFURLRef* relativeToURL, CFArrayRef* resourcePropertiesToInclude, byte* isStale, CFErrorRef** error);

		// extern CFDictionaryRef CFURLCreateResourcePropertiesForKeysFromBookmarkData (CFAllocatorRef allocator, CFArrayRef resourcePropertiesToReturn, CFDataRef bookmark) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFDictionaryRef* CFURLCreateResourcePropertiesForKeysFromBookmarkData (CFAllocatorRef* allocator, CFArrayRef* resourcePropertiesToReturn, CFDataRef* bookmark);

		// extern CFTypeRef CFURLCreateResourcePropertyForKeyFromBookmarkData (CFAllocatorRef allocator, CFStringRef resourcePropertyKey, CFDataRef bookmark) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* CFURLCreateResourcePropertyForKeyFromBookmarkData (CFAllocatorRef* allocator, CFStringRef* resourcePropertyKey, CFDataRef* bookmark);

		// extern CFDataRef CFURLCreateBookmarkDataFromFile (CFAllocatorRef allocator, CFURLRef fileURL, CFErrorRef *errorRef) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFDataRef* CFURLCreateBookmarkDataFromFile (CFAllocatorRef* allocator, CFURLRef* fileURL, CFErrorRef** errorRef);

		// extern Boolean CFURLWriteBookmarkDataToFile (CFDataRef bookmarkRef, CFURLRef fileURL, CFURLBookmarkFileCreationOptions options, CFErrorRef *errorRef) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFURLWriteBookmarkDataToFile (CFDataRef* bookmarkRef, CFURLRef* fileURL, nuint options, CFErrorRef** errorRef);

		// extern CFDataRef CFURLCreateBookmarkDataFromAliasRecord (CFAllocatorRef allocatorRef, CFDataRef aliasRecordDataRef) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10,6)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFDataRef* CFURLCreateBookmarkDataFromAliasRecord (CFAllocatorRef* allocatorRef, CFDataRef* aliasRecordDataRef);

		// extern Boolean CFURLStartAccessingSecurityScopedResource (CFURLRef url) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFURLStartAccessingSecurityScopedResource (CFURLRef* url);

		// extern void CFURLStopAccessingSecurityScopedResource (CFURLRef url) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFURLStopAccessingSecurityScopedResource (CFURLRef* url);

		// extern CFTypeID CFRunLoopGetTypeID () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFRunLoopGetTypeID ();

		// extern CFRunLoopRef CFRunLoopGetCurrent () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFRunLoopRef* CFRunLoopGetCurrent ();

		// extern CFRunLoopRef CFRunLoopGetMain () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFRunLoopRef* CFRunLoopGetMain ();

		// extern CFRunLoopMode CFRunLoopCopyCurrentMode (CFRunLoopRef rl) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFRunLoopMode* CFRunLoopCopyCurrentMode (CFRunLoopRef* rl);

		// extern CFArrayRef CFRunLoopCopyAllModes (CFRunLoopRef rl) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFArrayRef* CFRunLoopCopyAllModes (CFRunLoopRef* rl);

		// extern void CFRunLoopAddCommonMode (CFRunLoopRef rl, CFRunLoopMode mode) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFRunLoopAddCommonMode (CFRunLoopRef* rl, CFRunLoopMode* mode);

		// extern CFAbsoluteTime CFRunLoopGetNextTimerFireDate (CFRunLoopRef rl, CFRunLoopMode mode) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe double CFRunLoopGetNextTimerFireDate (CFRunLoopRef* rl, CFRunLoopMode* mode);

		// extern void CFRunLoopRun () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void CFRunLoopRun ();

		// extern CFRunLoopRunResult CFRunLoopRunInMode (CFRunLoopMode mode, CFTimeInterval seconds, Boolean returnAfterSourceHandled) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFRunLoopRunResult CFRunLoopRunInMode (CFRunLoopMode* mode, double seconds, byte returnAfterSourceHandled);

		// extern Boolean CFRunLoopIsWaiting (CFRunLoopRef rl) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFRunLoopIsWaiting (CFRunLoopRef* rl);

		// extern void CFRunLoopWakeUp (CFRunLoopRef rl) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFRunLoopWakeUp (CFRunLoopRef* rl);

		// extern void CFRunLoopStop (CFRunLoopRef rl) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFRunLoopStop (CFRunLoopRef* rl);

		// extern void CFRunLoopPerformBlock (CFRunLoopRef rl, CFTypeRef mode, void (^block)()) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFRunLoopPerformBlock (CFRunLoopRef* rl, void* mode, Action block);

		// extern Boolean CFRunLoopContainsSource (CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFRunLoopContainsSource (CFRunLoopRef* rl, CFRunLoopSourceRef* source, CFRunLoopMode* mode);

		// extern void CFRunLoopAddSource (CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFRunLoopAddSource (CFRunLoopRef* rl, CFRunLoopSourceRef* source, CFRunLoopMode* mode);

		// extern void CFRunLoopRemoveSource (CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFRunLoopRemoveSource (CFRunLoopRef* rl, CFRunLoopSourceRef* source, CFRunLoopMode* mode);

		// extern Boolean CFRunLoopContainsObserver (CFRunLoopRef rl, CFRunLoopObserverRef observer, CFRunLoopMode mode) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFRunLoopContainsObserver (CFRunLoopRef* rl, CFRunLoopObserverRef* observer, CFRunLoopMode* mode);

		// extern void CFRunLoopAddObserver (CFRunLoopRef rl, CFRunLoopObserverRef observer, CFRunLoopMode mode) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFRunLoopAddObserver (CFRunLoopRef* rl, CFRunLoopObserverRef* observer, CFRunLoopMode* mode);

		// extern void CFRunLoopRemoveObserver (CFRunLoopRef rl, CFRunLoopObserverRef observer, CFRunLoopMode mode) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFRunLoopRemoveObserver (CFRunLoopRef* rl, CFRunLoopObserverRef* observer, CFRunLoopMode* mode);

		// extern Boolean CFRunLoopContainsTimer (CFRunLoopRef rl, CFRunLoopTimerRef timer, CFRunLoopMode mode) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFRunLoopContainsTimer (CFRunLoopRef* rl, CFRunLoopTimerRef* timer, CFRunLoopMode* mode);

		// extern void CFRunLoopAddTimer (CFRunLoopRef rl, CFRunLoopTimerRef timer, CFRunLoopMode mode) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFRunLoopAddTimer (CFRunLoopRef* rl, CFRunLoopTimerRef* timer, CFRunLoopMode* mode);

		// extern void CFRunLoopRemoveTimer (CFRunLoopRef rl, CFRunLoopTimerRef timer, CFRunLoopMode mode) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFRunLoopRemoveTimer (CFRunLoopRef* rl, CFRunLoopTimerRef* timer, CFRunLoopMode* mode);

		// extern CFTypeID CFRunLoopSourceGetTypeID () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFRunLoopSourceGetTypeID ();

		// extern CFRunLoopSourceRef CFRunLoopSourceCreate (CFAllocatorRef allocator, CFIndex order, CFRunLoopSourceContext *context) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFRunLoopSourceRef* CFRunLoopSourceCreate (CFAllocatorRef* allocator, nint order, CFRunLoopSourceContext* context);

		// extern CFIndex CFRunLoopSourceGetOrder (CFRunLoopSourceRef source) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFRunLoopSourceGetOrder (CFRunLoopSourceRef* source);

		// extern void CFRunLoopSourceInvalidate (CFRunLoopSourceRef source) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFRunLoopSourceInvalidate (CFRunLoopSourceRef* source);

		// extern Boolean CFRunLoopSourceIsValid (CFRunLoopSourceRef source) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFRunLoopSourceIsValid (CFRunLoopSourceRef* source);

		// extern void CFRunLoopSourceGetContext (CFRunLoopSourceRef source, CFRunLoopSourceContext *context) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFRunLoopSourceGetContext (CFRunLoopSourceRef* source, CFRunLoopSourceContext* context);

		// extern void CFRunLoopSourceSignal (CFRunLoopSourceRef source) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFRunLoopSourceSignal (CFRunLoopSourceRef* source);

		// extern CFTypeID CFRunLoopObserverGetTypeID () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFRunLoopObserverGetTypeID ();

		// extern CFRunLoopObserverRef CFRunLoopObserverCreate (CFAllocatorRef allocator, CFOptionFlags activities, Boolean repeats, CFIndex order, CFRunLoopObserverCallBack callout, CFRunLoopObserverContext *context) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFRunLoopObserverRef* CFRunLoopObserverCreate (CFAllocatorRef* allocator, nuint activities, byte repeats, nint order, CFRunLoopObserverCallBack* callout, CFRunLoopObserverContext* context);

		// extern CFRunLoopObserverRef CFRunLoopObserverCreateWithHandler (CFAllocatorRef allocator, CFOptionFlags activities, Boolean repeats, CFIndex order, void (^block)(CFRunLoopObserverRef, CFRunLoopActivity)) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFRunLoopObserverRef* CFRunLoopObserverCreateWithHandler (CFAllocatorRef* allocator, nuint activities, byte repeats, nint order, Action<CoreFoundation.CFRunLoopObserverRef*, CFRunLoopActivity> block);

		// extern CFOptionFlags CFRunLoopObserverGetActivities (CFRunLoopObserverRef observer) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint CFRunLoopObserverGetActivities (CFRunLoopObserverRef* observer);

		// extern Boolean CFRunLoopObserverDoesRepeat (CFRunLoopObserverRef observer) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFRunLoopObserverDoesRepeat (CFRunLoopObserverRef* observer);

		// extern CFIndex CFRunLoopObserverGetOrder (CFRunLoopObserverRef observer) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFRunLoopObserverGetOrder (CFRunLoopObserverRef* observer);

		// extern void CFRunLoopObserverInvalidate (CFRunLoopObserverRef observer) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFRunLoopObserverInvalidate (CFRunLoopObserverRef* observer);

		// extern Boolean CFRunLoopObserverIsValid (CFRunLoopObserverRef observer) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFRunLoopObserverIsValid (CFRunLoopObserverRef* observer);

		// extern void CFRunLoopObserverGetContext (CFRunLoopObserverRef observer, CFRunLoopObserverContext *context) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFRunLoopObserverGetContext (CFRunLoopObserverRef* observer, CFRunLoopObserverContext* context);

		// extern CFTypeID CFRunLoopTimerGetTypeID () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFRunLoopTimerGetTypeID ();

		// extern CFRunLoopTimerRef CFRunLoopTimerCreate (CFAllocatorRef allocator, CFAbsoluteTime fireDate, CFTimeInterval interval, CFOptionFlags flags, CFIndex order, CFRunLoopTimerCallBack callout, CFRunLoopTimerContext *context) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFRunLoopTimerRef* CFRunLoopTimerCreate (CFAllocatorRef* allocator, double fireDate, double interval, nuint flags, nint order, CFRunLoopTimerCallBack* callout, CFRunLoopTimerContext* context);

		// extern CFRunLoopTimerRef CFRunLoopTimerCreateWithHandler (CFAllocatorRef allocator, CFAbsoluteTime fireDate, CFTimeInterval interval, CFOptionFlags flags, CFIndex order, void (^block)(CFRunLoopTimerRef)) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFRunLoopTimerRef* CFRunLoopTimerCreateWithHandler (CFAllocatorRef* allocator, double fireDate, double interval, nuint flags, nint order, Action<CoreFoundation.CFRunLoopTimerRef*> block);

		// extern CFAbsoluteTime CFRunLoopTimerGetNextFireDate (CFRunLoopTimerRef timer) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe double CFRunLoopTimerGetNextFireDate (CFRunLoopTimerRef* timer);

		// extern void CFRunLoopTimerSetNextFireDate (CFRunLoopTimerRef timer, CFAbsoluteTime fireDate) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFRunLoopTimerSetNextFireDate (CFRunLoopTimerRef* timer, double fireDate);

		// extern CFTimeInterval CFRunLoopTimerGetInterval (CFRunLoopTimerRef timer) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe double CFRunLoopTimerGetInterval (CFRunLoopTimerRef* timer);

		// extern Boolean CFRunLoopTimerDoesRepeat (CFRunLoopTimerRef timer) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFRunLoopTimerDoesRepeat (CFRunLoopTimerRef* timer);

		// extern CFIndex CFRunLoopTimerGetOrder (CFRunLoopTimerRef timer) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFRunLoopTimerGetOrder (CFRunLoopTimerRef* timer);

		// extern void CFRunLoopTimerInvalidate (CFRunLoopTimerRef timer) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFRunLoopTimerInvalidate (CFRunLoopTimerRef* timer);

		// extern Boolean CFRunLoopTimerIsValid (CFRunLoopTimerRef timer) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFRunLoopTimerIsValid (CFRunLoopTimerRef* timer);

		// extern void CFRunLoopTimerGetContext (CFRunLoopTimerRef timer, CFRunLoopTimerContext *context) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFRunLoopTimerGetContext (CFRunLoopTimerRef* timer, CFRunLoopTimerContext* context);

		// extern CFTimeInterval CFRunLoopTimerGetTolerance (CFRunLoopTimerRef timer) __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe double CFRunLoopTimerGetTolerance (CFRunLoopTimerRef* timer);

		// extern void CFRunLoopTimerSetTolerance (CFRunLoopTimerRef timer, CFTimeInterval tolerance) __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFRunLoopTimerSetTolerance (CFRunLoopTimerRef* timer, double tolerance);

		// extern CFTypeID CFSocketGetTypeID () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFSocketGetTypeID ();

		// extern CFSocketRef CFSocketCreate (CFAllocatorRef allocator, SInt32 protocolFamily, SInt32 socketType, SInt32 protocol, CFOptionFlags callBackTypes, CFSocketCallBack callout, const CFSocketContext *context) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFSocketRef* CFSocketCreate (CFAllocatorRef* allocator, int protocolFamily, int socketType, int protocol, nuint callBackTypes, CFSocketCallBack* callout, CFSocketContext* context);

		// extern CFSocketRef CFSocketCreateWithNative (CFAllocatorRef allocator, CFSocketNativeHandle sock, CFOptionFlags callBackTypes, CFSocketCallBack callout, const CFSocketContext *context) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFSocketRef* CFSocketCreateWithNative (CFAllocatorRef* allocator, int sock, nuint callBackTypes, CFSocketCallBack* callout, CFSocketContext* context);

		// extern CFSocketRef CFSocketCreateWithSocketSignature (CFAllocatorRef allocator, const CFSocketSignature *signature, CFOptionFlags callBackTypes, CFSocketCallBack callout, const CFSocketContext *context) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFSocketRef* CFSocketCreateWithSocketSignature (CFAllocatorRef* allocator, CFSocketSignature* signature, nuint callBackTypes, CFSocketCallBack* callout, CFSocketContext* context);

		// extern CFSocketRef CFSocketCreateConnectedToSocketSignature (CFAllocatorRef allocator, const CFSocketSignature *signature, CFOptionFlags callBackTypes, CFSocketCallBack callout, const CFSocketContext *context, CFTimeInterval timeout) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFSocketRef* CFSocketCreateConnectedToSocketSignature (CFAllocatorRef* allocator, CFSocketSignature* signature, nuint callBackTypes, CFSocketCallBack* callout, CFSocketContext* context, double timeout);

		// extern CFSocketError CFSocketSetAddress (CFSocketRef s, CFDataRef address) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFSocketError CFSocketSetAddress (CFSocketRef* s, CFDataRef* address);

		// extern CFSocketError CFSocketConnectToAddress (CFSocketRef s, CFDataRef address, CFTimeInterval timeout) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFSocketError CFSocketConnectToAddress (CFSocketRef* s, CFDataRef* address, double timeout);

		// extern void CFSocketInvalidate (CFSocketRef s) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFSocketInvalidate (CFSocketRef* s);

		// extern Boolean CFSocketIsValid (CFSocketRef s) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFSocketIsValid (CFSocketRef* s);

		// extern CFDataRef CFSocketCopyAddress (CFSocketRef s) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFDataRef* CFSocketCopyAddress (CFSocketRef* s);

		// extern CFDataRef CFSocketCopyPeerAddress (CFSocketRef s) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFDataRef* CFSocketCopyPeerAddress (CFSocketRef* s);

		// extern void CFSocketGetContext (CFSocketRef s, CFSocketContext *context) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFSocketGetContext (CFSocketRef* s, CFSocketContext* context);

		// extern CFSocketNativeHandle CFSocketGetNative (CFSocketRef s) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int CFSocketGetNative (CFSocketRef* s);

		// extern CFRunLoopSourceRef CFSocketCreateRunLoopSource (CFAllocatorRef allocator, CFSocketRef s, CFIndex order) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFRunLoopSourceRef* CFSocketCreateRunLoopSource (CFAllocatorRef* allocator, CFSocketRef* s, nint order);

		// extern CFOptionFlags CFSocketGetSocketFlags (CFSocketRef s) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint CFSocketGetSocketFlags (CFSocketRef* s);

		// extern void CFSocketSetSocketFlags (CFSocketRef s, CFOptionFlags flags) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFSocketSetSocketFlags (CFSocketRef* s, nuint flags);

		// extern void CFSocketDisableCallBacks (CFSocketRef s, CFOptionFlags callBackTypes) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFSocketDisableCallBacks (CFSocketRef* s, nuint callBackTypes);

		// extern void CFSocketEnableCallBacks (CFSocketRef s, CFOptionFlags callBackTypes) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFSocketEnableCallBacks (CFSocketRef* s, nuint callBackTypes);

		// extern CFSocketError CFSocketSendData (CFSocketRef s, CFDataRef address, CFDataRef data, CFTimeInterval timeout) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFSocketError CFSocketSendData (CFSocketRef* s, CFDataRef* address, CFDataRef* data, double timeout);

		// extern CFSocketError CFSocketRegisterValue (const CFSocketSignature *nameServerSignature, CFTimeInterval timeout, CFStringRef name, CFPropertyListRef value) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFSocketError CFSocketRegisterValue (CFSocketSignature* nameServerSignature, double timeout, CFStringRef* name, void* value);

		// extern CFSocketError CFSocketCopyRegisteredValue (const CFSocketSignature *nameServerSignature, CFTimeInterval timeout, CFStringRef name, CFPropertyListRef *value, CFDataRef *nameServerAddress) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFSocketError CFSocketCopyRegisteredValue (CFSocketSignature* nameServerSignature, double timeout, CFStringRef* name, void** value, CFDataRef** nameServerAddress);

		// extern CFSocketError CFSocketRegisterSocketSignature (const CFSocketSignature *nameServerSignature, CFTimeInterval timeout, CFStringRef name, const CFSocketSignature *signature) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFSocketError CFSocketRegisterSocketSignature (CFSocketSignature* nameServerSignature, double timeout, CFStringRef* name, CFSocketSignature* signature);

		// extern CFSocketError CFSocketCopyRegisteredSocketSignature (const CFSocketSignature *nameServerSignature, CFTimeInterval timeout, CFStringRef name, CFSocketSignature *signature, CFDataRef *nameServerAddress) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFSocketError CFSocketCopyRegisteredSocketSignature (CFSocketSignature* nameServerSignature, double timeout, CFStringRef* name, CFSocketSignature* signature, CFDataRef** nameServerAddress);

		// extern CFSocketError CFSocketUnregister (const CFSocketSignature *nameServerSignature, CFTimeInterval timeout, CFStringRef name) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFSocketError CFSocketUnregister (CFSocketSignature* nameServerSignature, double timeout, CFStringRef* name);

		// extern void CFSocketSetDefaultNameRegistryPortNumber (UInt16 port) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void CFSocketSetDefaultNameRegistryPortNumber (ushort port);

		// extern UInt16 CFSocketGetDefaultNameRegistryPortNumber () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ushort CFSocketGetDefaultNameRegistryPortNumber ();

		// extern int getattrlistbulk (int, void *, void *, size_t, uint64_t) __attribute__((availability(ios, introduced=8.0)));
		[iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getattrlistbulk (int, void*, void*, nuint, ulong);

		// extern int getattrlistat (int, const char *, void *, void *, size_t, unsigned long) __attribute__((availability(ios, introduced=8.0)));
		[iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getattrlistat (int, sbyte*, void*, void*, nuint, nuint);

		// extern int setattrlistat (int, const char *, void *, void *, size_t, uint32_t) __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int setattrlistat (int, sbyte*, void*, void*, nuint, uint);

		// extern int faccessat (int, const char *, int, int) __attribute__((availability(ios, introduced=8.0)));
		[iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int faccessat (int, sbyte*, int, int);

		// extern int fchownat (int, const char *, uid_t, gid_t, int) __attribute__((availability(ios, introduced=8.0)));
		[iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fchownat (int, sbyte*, uint, uint, int);

		// extern int linkat (int, const char *, int, const char *, int) __attribute__((availability(ios, introduced=8.0)));
		[iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int linkat (int, sbyte*, int, sbyte*, int);

		// extern ssize_t readlinkat (int, const char *, char *, size_t) __attribute__((availability(ios, introduced=8.0)));
		[iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint readlinkat (int, sbyte*, sbyte*, nuint);

		// extern int symlinkat (const char *, int, const char *) __attribute__((availability(ios, introduced=8.0)));
		[iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int symlinkat (sbyte*, int, sbyte*);

		// extern int unlinkat (int, const char *, int) __attribute__((availability(ios, introduced=8.0)));
		[iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int unlinkat (int, sbyte*, int);

		// extern void _exit (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void _exit (int);

		// extern void _exit (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void _exit (int);

		// extern int access (const char *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int access (sbyte*, int);

		// extern unsigned int alarm (unsigned int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint alarm (uint);

		// extern int chdir (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int chdir (sbyte*);

		// extern int chown (const char *, uid_t, gid_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int chown (sbyte*, uint, uint);

		// extern int close (int) asm("_close");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int close (int);

		// extern int dup (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int dup (int);

		// extern int dup2 (int, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int dup2 (int, int);

		// extern int execl (const char *__path, const char *__arg0, ...) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int execl (sbyte* __path, sbyte* __arg0, IntPtr varArgs);

		// extern int execle (const char *__path, const char *__arg0, ...) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int execle (sbyte* __path, sbyte* __arg0, IntPtr varArgs);

		// extern int execlp (const char *__file, const char *__arg0, ...) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int execlp (sbyte* __file, sbyte* __arg0, IntPtr varArgs);

		// extern int execv (const char *__path, char *const *__argv) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int execv (sbyte* __path, sbyte** __argv);

		// extern int execve (const char *__file, char *const *__argv, char *const *__envp) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int execve (sbyte* __file, sbyte** __argv, sbyte** __envp);

		// extern int execvp (const char *__file, char *const *__argv) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int execvp (sbyte* __file, sbyte** __argv);

		// extern pid_t fork () __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int fork ();

		// extern long fpathconf (int, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint fpathconf (int, int);

		// extern char * getcwd (char *, size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* getcwd (sbyte*, nuint);

		// extern gid_t getegid ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint getegid ();

		// extern uid_t geteuid ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint geteuid ();

		// extern gid_t getgid ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint getgid ();

		// extern int getgroups (int, gid_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int getgroups (int, uint[]);

		// extern char * getlogin ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* getlogin ();

		// extern pid_t getpgrp ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int getpgrp ();

		// extern pid_t getpid ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int getpid ();

		// extern pid_t getppid ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int getppid ();

		// extern uid_t getuid ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint getuid ();

		// extern int isatty (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int isatty (int);

		// extern int link (const char *, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int link (sbyte*, sbyte*);

		// extern off_t lseek (int, off_t, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern long lseek (int, long, int);

		// extern long pathconf (const char *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint pathconf (sbyte*, int);

		// extern int pause () asm("_pause");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int pause ();

		// extern int pipe (int *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int pipe (int[]);

		// extern ssize_t read (int, void *, size_t) asm("_read");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint read (int, void*, nuint);

		// extern int rmdir (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int rmdir (sbyte*);

		// extern int setgid (gid_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int setgid (uint);

		// extern int setpgid (pid_t, pid_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int setpgid (int, int);

		// extern pid_t setsid ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int setsid ();

		// extern int setuid (uid_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int setuid (uint);

		// extern unsigned int sleep (unsigned int) asm("_sleep");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint sleep (uint);

		// extern long sysconf (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint sysconf (int);

		// extern pid_t tcgetpgrp (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int tcgetpgrp (int);

		// extern int tcsetpgrp (int, pid_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int tcsetpgrp (int, int);

		// extern char * ttyname (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* ttyname (int);

		// extern int ttyname_r (int, char *, size_t) asm("_ttyname_r");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int ttyname_r (int, sbyte*, nuint);

		// extern int unlink (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int unlink (sbyte*);

		// extern ssize_t write (int __fd, const void *__buf, size_t __nbyte) asm("_write");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint write (int __fd, void* __buf, nuint __nbyte);

		// extern size_t confstr (int, char *, size_t) asm("_confstr");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint confstr (int, sbyte*, nuint);

		// extern int getopt (int, char *const *, const char *) asm("_getopt");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getopt (int, sbyte*[], sbyte*);

		// extern void * brk (const void *) __attribute__((deprecated(""))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* brk (void*);

		// extern int chroot (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int chroot (sbyte*);

		// extern char * crypt (const char *, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* crypt (sbyte*, sbyte*);

		// extern void encrypt (char *, int) asm("_encrypt");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void encrypt (sbyte*, int);

		// extern int fchdir (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int fchdir (int);

		// extern long gethostid ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint gethostid ();

		// extern pid_t getpgid (pid_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int getpgid (int);

		// extern pid_t getsid (pid_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int getsid (int);

		// extern int getdtablesize ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int getdtablesize ();

		// extern int getpagesize () __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int getpagesize ();

		// extern char * getpass (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* getpass (sbyte*);

		// extern char * getwd (char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* getwd (sbyte*);

		// extern int lchown (const char *, uid_t, gid_t) asm("_lchown");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int lchown (sbyte*, uint, uint);

		// extern int lockf (int, int, off_t) asm("_lockf");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int lockf (int, int, long);

		// extern int nice (int) asm("_nice");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int nice (int);

		// extern ssize_t pread (int __fd, void *__buf, size_t __nbyte, off_t __offset) asm("_pread");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint pread (int __fd, void* __buf, nuint __nbyte, long __offset);

		// extern ssize_t pwrite (int __fd, const void *__buf, size_t __nbyte, off_t __offset) asm("_pwrite");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint pwrite (int __fd, void* __buf, nuint __nbyte, long __offset);

		// extern void * sbrk (int) __attribute__((deprecated(""))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* sbrk (int);

		// extern pid_t setpgrp () asm("_setpgrp");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int setpgrp ();

		// extern int setregid (gid_t, gid_t) asm("_setregid");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int setregid (uint, uint);

		// extern int setreuid (uid_t, uid_t) asm("_setreuid");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int setreuid (uint, uint);

		// extern void swab (const void *__restrict, void *__restrict, ssize_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void swab (void*, void*, nint);

		// extern void sync ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void sync ();

		// extern int truncate (const char *, off_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int truncate (sbyte*, long);

		// extern useconds_t ualarm (useconds_t, useconds_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint ualarm (uint, uint);

		// extern int usleep (useconds_t) asm("_usleep");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int usleep (uint);

		// extern int vfork () __attribute__((returns_twice));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int vfork ();

		// extern int vfork () __attribute__((returns_twice)) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int vfork ();

		// extern int fsync (int) asm("_fsync");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int fsync (int);

		// extern int ftruncate (int, off_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int ftruncate (int, long);

		// extern int getlogin_r (char *, size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getlogin_r (sbyte*, nuint);

		// extern int fchown (int, uid_t, gid_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int fchown (int, uint, uint);

		// extern int gethostname (char *, size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int gethostname (sbyte*, nuint);

		// extern ssize_t readlink (const char *__restrict, char *__restrict, size_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint readlink (sbyte*, sbyte*, nuint);

		// extern int setegid (gid_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int setegid (uint);

		// extern int seteuid (uid_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int seteuid (uint);

		// extern int symlink (const char *, const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int symlink (sbyte*, sbyte*);

		// extern int pselect (int, fd_set *__restrict, fd_set *__restrict, fd_set *__restrict, const struct timespec *__restrict, const sigset_t *__restrict) asm("_pselect");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pselect (int, fd_set*, fd_set*, fd_set*, timespec*, uint*);

		// extern int select (int, fd_set *__restrict, fd_set *__restrict, fd_set *__restrict, struct timeval *__restrict) asm("_select");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int select (int, fd_set*, fd_set*, fd_set*, timeval*);

		// extern void _Exit (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void _Exit (int);

		// extern int accessx_np (const struct accessx_descriptor *, size_t, int *, uid_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int accessx_np (accessx_descriptor*, nuint, int*, uint);

		// extern int acct (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acct (sbyte*);

		// extern int add_profil (char *, size_t, unsigned long, unsigned int) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int add_profil (sbyte*, nuint, nuint, uint);

		// extern void endusershell ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void endusershell ();

		// extern int execvP (const char *__file, const char *__searchpath, char *const *__argv) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int execvP (sbyte* __file, sbyte* __searchpath, sbyte** __argv);

		// extern char * fflagstostr (unsigned long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* fflagstostr (nuint);

		// extern int getdomainname (char *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getdomainname (sbyte*, int);

		// extern int getgrouplist (const char *, int, int *, int *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getgrouplist (sbyte*, int, int*, int*);

		// extern int gethostuuid (unsigned char *, const struct timespec *) __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int gethostuuid (byte[], timespec*);

		// extern mode_t getmode (const void *, mode_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe ushort getmode (void*, ushort);

		// extern int getpeereid (int, uid_t *, gid_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getpeereid (int, uint*, uint*);

		// extern int getsgroups_np (int *, unsigned char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getsgroups_np (int*, byte[]);

		// extern char * getusershell ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* getusershell ();

		// extern int getwgroups_np (int *, unsigned char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getwgroups_np (int*, byte[]);

		// extern int initgroups (const char *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int initgroups (sbyte*, int);

		// extern int issetugid ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int issetugid ();

		// extern char * mkdtemp (char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* mkdtemp (sbyte*);

		// extern int mknod (const char *, mode_t, dev_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mknod (sbyte*, ushort, int);

		// extern int mkpath_np (const char *path, mode_t omode) __attribute__((availability(ios, introduced=5.0)));
		[iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mkpath_np (sbyte* path, ushort omode);

		// extern int mkpathat_np (int dfd, const char *path, mode_t omode) __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mkpathat_np (int dfd, sbyte* path, ushort omode);

		// extern int mkstemp (char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mkstemp (sbyte*);

		// extern int mkstemps (char *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mkstemps (sbyte*, int);

		// extern char * mktemp (char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* mktemp (sbyte*);

		// extern int mkostemp (char *path, int oflags) __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mkostemp (sbyte* path, int oflags);

		// extern int mkostemps (char *path, int slen, int oflags) __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mkostemps (sbyte* path, int slen, int oflags);

		// extern int mkstemp_dprotected_np (char *path, int dpclass, int dpflags) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3,0), TV (10,0), NoMac, iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mkstemp_dprotected_np (sbyte* path, int dpclass, int dpflags);

		// extern char * mkdtempat_np (int dfd, char *path) __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* mkdtempat_np (int dfd, sbyte* path);

		// extern int mkstempsat_np (int dfd, char *path, int slen) __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mkstempsat_np (int dfd, sbyte* path, int slen);

		// extern int mkostempsat_np (int dfd, char *path, int slen, int oflags) __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mkostempsat_np (int dfd, sbyte* path, int slen, int oflags);

		// extern int nfssvc (int, void *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int nfssvc (int, void*);

		// extern int profil (char *, size_t, unsigned long, unsigned int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int profil (sbyte*, nuint, nuint, uint);

		// extern int pthread_setugid_np (uid_t, gid_t) __attribute__((deprecated("Use of per-thread security contexts is error-prone and discouraged.")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int pthread_setugid_np (uint, uint);

		// extern int pthread_getugid_np (uid_t *, gid_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int pthread_getugid_np (uint*, uint*);

		// extern int reboot (int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int reboot (int);

		// extern int revoke (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int revoke (sbyte*);

		// extern int rcmd (char **, int, const char *, const char *, const char *, int *) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int rcmd (sbyte**, int, sbyte*, sbyte*, sbyte*, int*);

		// extern int rcmd_af (char **, int, const char *, const char *, const char *, int *, int) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int rcmd_af (sbyte**, int, sbyte*, sbyte*, sbyte*, int*, int);

		// extern int rresvport (int *) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int rresvport (int*);

		// extern int rresvport_af (int *, int) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int rresvport_af (int*, int);

		// extern int iruserok (unsigned long, int, const char *, const char *) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int iruserok (nuint, int, sbyte*, sbyte*);

		// extern int iruserok_sa (const void *, int, int, const char *, const char *) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int iruserok_sa (void*, int, int, sbyte*, sbyte*);

		// extern int ruserok (const char *, int, const char *, const char *) __attribute__((deprecated("")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int ruserok (sbyte*, int, sbyte*, sbyte*);

		// extern int setdomainname (const char *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int setdomainname (sbyte*, int);

		// extern int setgroups (int, const gid_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int setgroups (int, uint*);

		// extern void sethostid (long);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void sethostid (nint);

		// extern int sethostname (const char *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sethostname (sbyte*, int);

		// extern void setkey (const char *) asm("_setkey");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void setkey (sbyte*);

		// extern int setlogin (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int setlogin (sbyte*);

		// extern void * setmode (const char *) asm("_setmode");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* setmode (sbyte*);

		// extern int setrgid (gid_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int setrgid (uint);

		// extern int setruid (uid_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int setruid (uint);

		// extern int setsgroups_np (int, const unsigned char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int setsgroups_np (int, byte[]);

		// extern void setusershell ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void setusershell ();

		// extern int setwgroups_np (int, const unsigned char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int setwgroups_np (int, byte[]);

		// extern int strtofflags (char **, unsigned long *, unsigned long *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int strtofflags (sbyte**, nuint*, nuint*);

		// extern int swapon (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int swapon (sbyte*);

		// extern int ttyslot ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int ttyslot ();

		// extern int undelete (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int undelete (sbyte*);

		// extern int unwhiteout (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int unwhiteout (sbyte*);

		// extern void * valloc (size_t) __attribute__((alloc_size(1)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* valloc (nuint);

		// extern int syscall (int, ...) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(ios, deprecated=10.0))) __attribute__((availability(macos, deprecated=10.12)));
		[Deprecated (PlatformName.iOS, 10, 0, message: "syscall(2) is unsupported; please switch to a supported interface. For SYS_kdebug_trace use kdebug_signpost().")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "syscall(2) is unsupported; please switch to a supported interface. For SYS_kdebug_trace use kdebug_signpost().")]
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int syscall (int, IntPtr varArgs);

		// extern int getsubopt (char **, char *const *, char **);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getsubopt (sbyte**, sbyte**, sbyte**);

		// extern int fgetattrlist (int, void *, void *, size_t, unsigned int) __attribute__((availability(ios, introduced=3.0)));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fgetattrlist (int, void*, void*, nuint, uint);

		// extern int fsetattrlist (int, void *, void *, size_t, unsigned int) __attribute__((availability(ios, introduced=3.0)));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fsetattrlist (int, void*, void*, nuint, uint);

		// extern int getattrlist (const char *, void *, void *, size_t, unsigned int) asm("_getattrlist");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getattrlist (sbyte*, void*, void*, nuint, uint);

		// extern int setattrlist (const char *, void *, void *, size_t, unsigned int) asm("_setattrlist");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int setattrlist (sbyte*, void*, void*, nuint, uint);

		// extern int exchangedata (const char *, const char *, unsigned int) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int exchangedata (sbyte*, sbyte*, uint);

		// extern int getdirentriesattr (int, void *, void *, size_t, unsigned int *, unsigned int *, unsigned int *, unsigned int) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getdirentriesattr (int, void*, void*, nuint, uint*, uint*, uint*, uint);

		// extern int searchfs (const char *, struct fssearchblock *, unsigned long *, unsigned int, unsigned int, struct searchstate *) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int searchfs (sbyte*, fssearchblock*, nuint*, uint, uint, searchstate*);

		// extern int fsctl (const char *, unsigned long, void *, unsigned int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int fsctl (sbyte*, nuint, void*, uint);

		// extern int ffsctl (int, unsigned long, void *, unsigned int) __attribute__((availability(ios, introduced=3.0)));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int ffsctl (int, nuint, void*, uint);

		// extern int fsync_volume_np (int, int) __attribute__((availability(ios, introduced=6.0)));
		[iOS (6,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int fsync_volume_np (int, int);

		// extern int sync_volume_np (const char *, int) __attribute__((availability(ios, introduced=6.0)));
		[iOS (6,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int sync_volume_np (sbyte*, int);

		// extern int open (const char *, int, ...) asm("_open");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int open (sbyte*, int, IntPtr varArgs);

		// extern int openat (int, const char *, int, ...) asm("_openat") __attribute__((availability(ios, introduced=8.0)));
		[iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int openat (int, sbyte*, int, IntPtr varArgs);

		// extern int creat (const char *, mode_t) asm("_creat");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int creat (sbyte*, ushort);

		// extern int fcntl (int, int, ...) asm("_fcntl");
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int fcntl (int, int, IntPtr varArgs);

		// extern int openx_np (const char *, int, filesec_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int openx_np (sbyte*, int, filesec_t*);

		// extern int open_dprotected_np (const char *, int, int, int, ...);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int open_dprotected_np (sbyte*, int, int, int, IntPtr varArgs);

		// extern int flock (int, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int flock (int, int);

		// extern filesec_t filesec_init ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe filesec_t* filesec_init ();

		// extern filesec_t filesec_dup (filesec_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe filesec_t* filesec_dup (filesec_t*);

		// extern void filesec_free (filesec_t);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void filesec_free (filesec_t*);

		// extern int filesec_get_property (filesec_t, filesec_property_t, void *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int filesec_get_property (filesec_t*, filesec_property_t, void*);

		// extern int filesec_query_property (filesec_t, filesec_property_t, int *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int filesec_query_property (filesec_t*, filesec_property_t, int*);

		// extern int filesec_set_property (filesec_t, filesec_property_t, const void *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int filesec_set_property (filesec_t*, filesec_property_t, void*);

		// extern int filesec_unset_property (filesec_t, filesec_property_t) __attribute__((availability(ios, introduced=3.2)));
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int filesec_unset_property (filesec_t*, filesec_property_t);

		// extern const char * _Nonnull sel_getName (SEL _Nonnull sel) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=1.0)));
		[Watch (1,0), TV (9,0), Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* sel_getName (Selector sel);

		// extern SEL _Nonnull sel_registerName (const char * _Nonnull str) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=1.0)));
		[Watch (1,0), TV (9,0), Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe Selector sel_registerName (sbyte* str);

		// extern const char * _Nonnull object_getClassName (id _Nullable obj) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=1.0)));
		[Watch (1,0), TV (9,0), Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* object_getClassName ([NullAllowed] NSObject obj);

		// extern void * _Nullable object_getIndexedIvars (id _Nullable obj) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=1.0)));
		[Watch (1,0), TV (9,0), Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe void* object_getIndexedIvars ([NullAllowed] NSObject obj);

		// extern BOOL sel_isMapped (SEL _Nonnull sel) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=1.0)));
		[Watch (1,0), TV (9,0), Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool sel_isMapped (Selector sel);

		// extern SEL _Nonnull sel_getUid (const char * _Nonnull str) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=1.0)));
		[Watch (1,0), TV (9,0), Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe Selector sel_getUid (sbyte* str);

		// extern void * os_retain (void *object) __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((visibility("default"))) __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[Mac (10,10), iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* os_retain (void* @object);

		// extern void os_release (void *object) __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((visibility("default"))) __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[Mac (10,10), iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void os_release (void* @object);

		// extern dispatch_time_t dispatch_time (dispatch_time_t when, int64_t delta) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((warn_unused_result)) __attribute__((nothrow));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ulong dispatch_time (ulong when, long delta);

		// extern dispatch_time_t dispatch_walltime (const struct timespec * _Nullable when, int64_t delta) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((warn_unused_result)) __attribute__((nothrow));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe ulong dispatch_walltime ([NullAllowed] timespec* when, long delta);

		// void _dispatch_object_validate (dispatch_object_t _Nonnull object) __attribute__((always_inline)) __attribute__((nonnull())) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void _dispatch_object_validate (DispatchObject @object);

		// extern void dispatch_retain (dispatch_object_t _Nonnull object) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((nonnull())) __attribute__((nothrow)) __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void dispatch_retain (DispatchObject @object);

		// extern void dispatch_release (dispatch_object_t _Nonnull object) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((nonnull())) __attribute__((nothrow)) __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void dispatch_release (DispatchObject @object);

		// extern void * _Nullable dispatch_get_context (dispatch_object_t _Nonnull object) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((nonnull())) __attribute__((pure)) __attribute__((warn_unused_result)) __attribute__((nothrow));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe void* dispatch_get_context (DispatchObject @object);

		// extern void dispatch_set_context (dispatch_object_t _Nonnull object, void * _Nullable context) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((nothrow));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void dispatch_set_context (DispatchObject @object, [NullAllowed] void* context);

		// extern void dispatch_set_finalizer_f (dispatch_object_t _Nonnull object, dispatch_function_t _Nullable finalizer) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((nothrow));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void dispatch_set_finalizer_f (DispatchObject @object, [NullAllowed] dispatch_function_t* finalizer);

		// extern void dispatch_activate (dispatch_object_t _Nonnull object) __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((visibility("default"))) __attribute__((nonnull())) __attribute__((nothrow));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void dispatch_activate (DispatchObject @object);

		// extern void dispatch_suspend (dispatch_object_t _Nonnull object) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((nonnull())) __attribute__((nothrow));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void dispatch_suspend (DispatchObject @object);

		// extern void dispatch_resume (dispatch_object_t _Nonnull object) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((nonnull())) __attribute__((nothrow));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void dispatch_resume (DispatchObject @object);

		// extern void dispatch_set_qos_class_floor (dispatch_object_t _Nonnull object, dispatch_qos_class_t qos_class, int relative_priority) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(tvos, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((visibility("default"))) __attribute__((nothrow));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void dispatch_set_qos_class_floor (DispatchObject @object, dispatch_qos_class_t qos_class, int relative_priority);

		// extern void dispatch_debug (dispatch_object_t _Nonnull object, const char * _Nonnull message, ...) __attribute__((availability(macos, introduced=10.6, deprecated=10.9))) __attribute__((availability(ios, introduced=4.0, deprecated=6.0))) __attribute__((visibility("default"))) __attribute__((nonnull(2))) __attribute__((nothrow)) __attribute__((cold)) __attribute__((format(printf, 2, 3)));
		[Introduced (PlatformName.MacOSX, 10, 6, message: "unsupported interface")]
		[Deprecated (PlatformName.MacOSX, 10, 9, message: "unsupported interface")]
		[Introduced (PlatformName.iOS, 4, 0, message: "unsupported interface")]
		[Deprecated (PlatformName.iOS, 6, 0, message: "unsupported interface")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void dispatch_debug (DispatchObject @object, sbyte* message, IntPtr varArgs);

		// extern void dispatch_debugv (dispatch_object_t _Nonnull object, const char * _Nonnull message, va_list ap) __attribute__((availability(macos, introduced=10.6, deprecated=10.9))) __attribute__((availability(ios, introduced=4.0, deprecated=6.0))) __attribute__((visibility("default"))) __attribute__((nonnull(2))) __attribute__((nothrow)) __attribute__((cold)) __attribute__((format(printf, 2, 0)));
		[Introduced (PlatformName.MacOSX, 10, 6, message: "unsupported interface")]
		[Deprecated (PlatformName.MacOSX, 10, 9, message: "unsupported interface")]
		[Introduced (PlatformName.iOS, 4, 0, message: "unsupported interface")]
		[Deprecated (PlatformName.iOS, 6, 0, message: "unsupported interface")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void dispatch_debugv (DispatchObject @object, sbyte* message, sbyte* ap);

		// extern void dispatch_async (dispatch_queue_t _Nonnull queue, dispatch_block_t _Nonnull block) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((nonnull())) __attribute__((nothrow));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void dispatch_async (DispatchQueue queue, dispatch_block_t block);

		// extern void dispatch_async_f (dispatch_queue_t _Nonnull queue, void * _Nullable context, dispatch_function_t _Nonnull work) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((nonnull(1))) __attribute__((nonnull(3))) __attribute__((nothrow));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void dispatch_async_f (DispatchQueue queue, [NullAllowed] void* context, dispatch_function_t* work);

		// extern void dispatch_sync (dispatch_queue_t _Nonnull queue, dispatch_block_t _Nonnull block) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((nonnull())) __attribute__((nothrow));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void dispatch_sync (DispatchQueue queue, dispatch_block_t block);

		// extern void dispatch_sync_f (dispatch_queue_t _Nonnull queue, void * _Nullable context, dispatch_function_t _Nonnull work) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((nonnull(1))) __attribute__((nonnull(3))) __attribute__((nothrow));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void dispatch_sync_f (DispatchQueue queue, [NullAllowed] void* context, dispatch_function_t* work);

		// extern void dispatch_async_and_wait (dispatch_queue_t _Nonnull queue, dispatch_block_t _Nonnull block) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(tvos, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((visibility("default"))) __attribute__((nonnull())) __attribute__((nothrow));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void dispatch_async_and_wait (DispatchQueue queue, dispatch_block_t block);

		// extern void dispatch_async_and_wait_f (dispatch_queue_t _Nonnull queue, void * _Nullable context, dispatch_function_t _Nonnull work) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(tvos, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((visibility("default"))) __attribute__((nonnull(1))) __attribute__((nonnull(3))) __attribute__((nothrow));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void dispatch_async_and_wait_f (DispatchQueue queue, [NullAllowed] void* context, dispatch_function_t* work);

		// extern void dispatch_apply (size_t iterations, dispatch_queue_t _Nullable queue, void (^ _Nonnull)(size_t) block) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((nonnull(3))) __attribute__((nothrow));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void dispatch_apply (nuint iterations, [NullAllowed] DispatchQueue queue, Action<nuint> block);

		// extern void dispatch_apply_f (size_t iterations, dispatch_queue_t _Nullable queue, void * _Nullable context, void (* _Nonnull)(void * _Nullable, size_t) work) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((nonnull(4))) __attribute__((nothrow));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void dispatch_apply_f (nuint iterations, [NullAllowed] DispatchQueue queue, [NullAllowed] void* context, Action<void*, nuint>* work);

		// extern dispatch_queue_t _Nonnull dispatch_get_current_queue () __attribute__((availability(macos, introduced=10.6, deprecated=10.9))) __attribute__((availability(ios, introduced=4.0, deprecated=6.0))) __attribute__((visibility("default"))) __attribute__((pure)) __attribute__((warn_unused_result)) __attribute__((nothrow));
		[Introduced (PlatformName.MacOSX, 10, 6, message: "unsupported interface")]
		[Deprecated (PlatformName.MacOSX, 10, 9, message: "unsupported interface")]
		[Introduced (PlatformName.iOS, 4, 0, message: "unsupported interface")]
		[Deprecated (PlatformName.iOS, 6, 0, message: "unsupported interface")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern DispatchQueue dispatch_get_current_queue ();

		// dispatch_queue_main_t _Nonnull dispatch_get_main_queue () __attribute__((always_inline)) __attribute__((const)) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern OS_dispatch_queue_main dispatch_get_main_queue ();

		// extern dispatch_queue_global_t _Nonnull dispatch_get_global_queue (long identifier, unsigned long flags) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((const)) __attribute__((warn_unused_result)) __attribute__((nothrow));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern OS_dispatch_queue_global dispatch_get_global_queue (nint identifier, nuint flags);

		// extern dispatch_queue_attr_t _Nonnull dispatch_queue_attr_make_initially_inactive (dispatch_queue_attr_t _Nullable attr) __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((visibility("default"))) __attribute__((warn_unused_result)) __attribute__((pure)) __attribute__((nothrow));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern OS_dispatch_queue_attr dispatch_queue_attr_make_initially_inactive ([NullAllowed] OS_dispatch_queue_attr attr);

		// extern dispatch_queue_attr_t _Nonnull dispatch_queue_attr_make_with_autorelease_frequency (dispatch_queue_attr_t _Nullable attr, dispatch_autorelease_frequency_t frequency) __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((visibility("default"))) __attribute__((warn_unused_result)) __attribute__((pure)) __attribute__((nothrow));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern OS_dispatch_queue_attr dispatch_queue_attr_make_with_autorelease_frequency ([NullAllowed] OS_dispatch_queue_attr attr, dispatch_autorelease_frequency_t frequency);

		// extern dispatch_queue_attr_t _Nonnull dispatch_queue_attr_make_with_qos_class (dispatch_queue_attr_t _Nullable attr, dispatch_qos_class_t qos_class, int relative_priority) __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((visibility("default"))) __attribute__((warn_unused_result)) __attribute__((pure)) __attribute__((nothrow));
		[Mac (10,10), iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern OS_dispatch_queue_attr dispatch_queue_attr_make_with_qos_class ([NullAllowed] OS_dispatch_queue_attr attr, dispatch_qos_class_t qos_class, int relative_priority);

		// extern dispatch_queue_t _Nonnull dispatch_queue_create_with_target (const char * _Nullable label, dispatch_queue_attr_t _Nullable attr, dispatch_queue_t _Nullable target) asm("_dispatch_queue_create_with_target$V2") __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((visibility("default"))) __attribute__((malloc)) __attribute__((ns_returns_retained)) __attribute__((warn_unused_result)) __attribute__((nothrow)) __attribute__((ns_returns_retained));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe DispatchQueue dispatch_queue_create_with_target ([NullAllowed] sbyte* label, [NullAllowed] OS_dispatch_queue_attr attr, [NullAllowed] DispatchQueue target);

		// extern dispatch_queue_t _Nonnull dispatch_queue_create (const char * _Nullable label, dispatch_queue_attr_t _Nullable attr) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((malloc)) __attribute__((ns_returns_retained)) __attribute__((warn_unused_result)) __attribute__((nothrow)) __attribute__((ns_returns_retained));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe DispatchQueue dispatch_queue_create ([NullAllowed] sbyte* label, [NullAllowed] OS_dispatch_queue_attr attr);

		// extern const char * _Nonnull dispatch_queue_get_label (dispatch_queue_t _Nullable queue) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((pure)) __attribute__((warn_unused_result)) __attribute__((nothrow));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* dispatch_queue_get_label ([NullAllowed] DispatchQueue queue);

		// extern dispatch_qos_class_t dispatch_queue_get_qos_class (dispatch_queue_t _Nonnull queue, int * _Nullable relative_priority_ptr) __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((visibility("default"))) __attribute__((warn_unused_result)) __attribute__((nonnull(1))) __attribute__((nothrow));
		[Mac (10,10), iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe dispatch_qos_class_t dispatch_queue_get_qos_class (DispatchQueue queue, [NullAllowed] int* relative_priority_ptr);

		// extern void dispatch_set_target_queue (dispatch_object_t _Nonnull object, dispatch_queue_t _Nullable queue) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((nothrow));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void dispatch_set_target_queue (DispatchObject @object, [NullAllowed] DispatchQueue queue);

		// extern void dispatch_main () __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((nothrow));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void dispatch_main ();

		// extern void dispatch_after (dispatch_time_t when, dispatch_queue_t _Nonnull queue, dispatch_block_t _Nonnull block) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((nonnull(2))) __attribute__((nonnull(3))) __attribute__((nothrow));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void dispatch_after (ulong when, DispatchQueue queue, dispatch_block_t block);

		// extern void dispatch_after_f (dispatch_time_t when, dispatch_queue_t _Nonnull queue, void * _Nullable context, dispatch_function_t _Nonnull work) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((nonnull(2))) __attribute__((nonnull(4))) __attribute__((nothrow));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void dispatch_after_f (ulong when, DispatchQueue queue, [NullAllowed] void* context, dispatch_function_t* work);

		// extern void dispatch_barrier_async (dispatch_queue_t _Nonnull queue, dispatch_block_t _Nonnull block) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=4.3))) __attribute__((visibility("default"))) __attribute__((nonnull())) __attribute__((nothrow));
		[Mac (10,7), iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void dispatch_barrier_async (DispatchQueue queue, dispatch_block_t block);

		// extern void dispatch_barrier_async_f (dispatch_queue_t _Nonnull queue, void * _Nullable context, dispatch_function_t _Nonnull work) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=4.3))) __attribute__((visibility("default"))) __attribute__((nonnull(1))) __attribute__((nonnull(3))) __attribute__((nothrow));
		[Mac (10,7), iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void dispatch_barrier_async_f (DispatchQueue queue, [NullAllowed] void* context, dispatch_function_t* work);

		// extern void dispatch_barrier_sync (dispatch_queue_t _Nonnull queue, dispatch_block_t _Nonnull block) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=4.3))) __attribute__((visibility("default"))) __attribute__((nonnull())) __attribute__((nothrow));
		[Mac (10,7), iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void dispatch_barrier_sync (DispatchQueue queue, dispatch_block_t block);

		// extern void dispatch_barrier_sync_f (dispatch_queue_t _Nonnull queue, void * _Nullable context, dispatch_function_t _Nonnull work) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=4.3))) __attribute__((visibility("default"))) __attribute__((nonnull(1))) __attribute__((nonnull(3))) __attribute__((nothrow));
		[Mac (10,7), iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void dispatch_barrier_sync_f (DispatchQueue queue, [NullAllowed] void* context, dispatch_function_t* work);

		// extern void dispatch_barrier_async_and_wait (dispatch_queue_t _Nonnull queue, dispatch_block_t _Nonnull block) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(tvos, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((visibility("default"))) __attribute__((nonnull())) __attribute__((nothrow));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void dispatch_barrier_async_and_wait (DispatchQueue queue, dispatch_block_t block);

		// extern void dispatch_barrier_async_and_wait_f (dispatch_queue_t _Nonnull queue, void * _Nullable context, dispatch_function_t _Nonnull work) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(tvos, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((visibility("default"))) __attribute__((nonnull(1))) __attribute__((nonnull(3))) __attribute__((nothrow));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void dispatch_barrier_async_and_wait_f (DispatchQueue queue, [NullAllowed] void* context, dispatch_function_t* work);

		// extern void dispatch_queue_set_specific (dispatch_queue_t _Nonnull queue, const void * _Nonnull key, void * _Nullable context, dispatch_function_t _Nullable destructor) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((visibility("default"))) __attribute__((nonnull(1))) __attribute__((nothrow));
		[Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void dispatch_queue_set_specific (DispatchQueue queue, void* key, [NullAllowed] void* context, [NullAllowed] dispatch_function_t* destructor);

		// extern void * _Nullable dispatch_queue_get_specific (dispatch_queue_t _Nonnull queue, const void * _Nonnull key) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((visibility("default"))) __attribute__((nonnull(1))) __attribute__((pure)) __attribute__((warn_unused_result)) __attribute__((nothrow));
		[Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe void* dispatch_queue_get_specific (DispatchQueue queue, void* key);

		// extern void * _Nullable dispatch_get_specific (const void * _Nonnull key) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((visibility("default"))) __attribute__((pure)) __attribute__((warn_unused_result)) __attribute__((nothrow));
		[Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe void* dispatch_get_specific (void* key);

		// extern void dispatch_assert_queue (dispatch_queue_t _Nonnull queue) asm("_dispatch_assert_queue$V2") __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((visibility("default"))) __attribute__((nonnull(1)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void dispatch_assert_queue (DispatchQueue queue);

		// extern void dispatch_assert_queue_barrier (dispatch_queue_t _Nonnull queue) __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((visibility("default"))) __attribute__((nonnull(1)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void dispatch_assert_queue_barrier (DispatchQueue queue);

		// extern void dispatch_assert_queue_not (dispatch_queue_t _Nonnull queue) asm("_dispatch_assert_queue_not$V2") __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((visibility("default"))) __attribute__((nonnull(1)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void dispatch_assert_queue_not (DispatchQueue queue);

		// extern dispatch_block_t _Nonnull dispatch_block_create (dispatch_block_flags_t flags, dispatch_block_t _Nonnull block) __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((visibility("default"))) __attribute__((nonnull(2))) __attribute__((ns_returns_retained)) __attribute__((warn_unused_result)) __attribute__((nothrow)) __attribute__((ns_returns_retained));
		[Mac (10,10), iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern dispatch_block_t dispatch_block_create (dispatch_block_flags_t flags, dispatch_block_t block);

		// extern dispatch_block_t _Nonnull dispatch_block_create_with_qos_class (dispatch_block_flags_t flags, dispatch_qos_class_t qos_class, int relative_priority, dispatch_block_t _Nonnull block) __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((visibility("default"))) __attribute__((nonnull(4))) __attribute__((ns_returns_retained)) __attribute__((warn_unused_result)) __attribute__((nothrow)) __attribute__((ns_returns_retained));
		[Mac (10,10), iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern dispatch_block_t dispatch_block_create_with_qos_class (dispatch_block_flags_t flags, dispatch_qos_class_t qos_class, int relative_priority, dispatch_block_t block);

		// extern void dispatch_block_perform (dispatch_block_flags_t flags, dispatch_block_t _Nonnull block) __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((visibility("default"))) __attribute__((nonnull(2))) __attribute__((nothrow));
		[Mac (10,10), iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void dispatch_block_perform (dispatch_block_flags_t flags, dispatch_block_t block);

		// extern long dispatch_block_wait (dispatch_block_t _Nonnull block, dispatch_time_t timeout) __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((visibility("default"))) __attribute__((nonnull(1))) __attribute__((nothrow));
		[Mac (10,10), iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint dispatch_block_wait (dispatch_block_t block, ulong timeout);

		// extern void dispatch_block_notify (dispatch_block_t _Nonnull block, dispatch_queue_t _Nonnull queue, dispatch_block_t _Nonnull notification_block) __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((visibility("default"))) __attribute__((nonnull())) __attribute__((nothrow));
		[Mac (10,10), iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void dispatch_block_notify (dispatch_block_t block, DispatchQueue queue, dispatch_block_t notification_block);

		// extern void dispatch_block_cancel (dispatch_block_t _Nonnull block) __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((visibility("default"))) __attribute__((nonnull())) __attribute__((nothrow));
		[Mac (10,10), iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void dispatch_block_cancel (dispatch_block_t block);

		// extern long dispatch_block_testcancel (dispatch_block_t _Nonnull block) __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((visibility("default"))) __attribute__((nonnull())) __attribute__((warn_unused_result)) __attribute__((pure)) __attribute__((nothrow));
		[Mac (10,10), iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint dispatch_block_testcancel (dispatch_block_t block);

		// extern mach_msg_return_t mach_msg_overwrite (mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify, mach_msg_header_t *rcv_msg, mach_msg_size_t rcv_limit) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mach_msg_overwrite (mach_msg_header_t* msg, int option, uint send_size, uint rcv_size, uint rcv_name, uint timeout, uint notify, mach_msg_header_t* rcv_msg, uint rcv_limit);

		// extern mach_msg_return_t mach_msg (mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int mach_msg (mach_msg_header_t* msg, int option, uint send_size, uint rcv_size, uint rcv_name, uint timeout, uint notify);

		// extern kern_return_t mach_voucher_deallocate (mach_port_name_t voucher) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int mach_voucher_deallocate (uint voucher);

		// extern dispatch_source_t _Nonnull dispatch_source_create (dispatch_source_type_t _Nonnull type, uintptr_t handle, unsigned long mask, dispatch_queue_t _Nullable queue) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((malloc)) __attribute__((ns_returns_retained)) __attribute__((warn_unused_result)) __attribute__((nothrow)) __attribute__((ns_returns_retained));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe OS_dispatch_source dispatch_source_create (dispatch_source_type_t* type, UIntPtr handle, nuint mask, [NullAllowed] DispatchQueue queue);

		// extern void dispatch_source_set_event_handler (dispatch_source_t _Nonnull source, dispatch_block_t _Nullable handler) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((nonnull(1))) __attribute__((nothrow));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void dispatch_source_set_event_handler (OS_dispatch_source source, [NullAllowed] dispatch_block_t handler);

		// extern void dispatch_source_set_event_handler_f (dispatch_source_t _Nonnull source, dispatch_function_t _Nullable handler) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((nonnull(1))) __attribute__((nothrow));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void dispatch_source_set_event_handler_f (OS_dispatch_source source, [NullAllowed] dispatch_function_t* handler);

		// extern void dispatch_source_set_cancel_handler (dispatch_source_t _Nonnull source, dispatch_block_t _Nullable handler) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((nonnull(1))) __attribute__((nothrow));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void dispatch_source_set_cancel_handler (OS_dispatch_source source, [NullAllowed] dispatch_block_t handler);

		// extern void dispatch_source_set_cancel_handler_f (dispatch_source_t _Nonnull source, dispatch_function_t _Nullable handler) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((nonnull(1))) __attribute__((nothrow));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void dispatch_source_set_cancel_handler_f (OS_dispatch_source source, [NullAllowed] dispatch_function_t* handler);

		// extern void dispatch_source_cancel (dispatch_source_t _Nonnull source) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((nonnull())) __attribute__((nothrow));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void dispatch_source_cancel (OS_dispatch_source source);

		// extern long dispatch_source_testcancel (dispatch_source_t _Nonnull source) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((nonnull())) __attribute__((warn_unused_result)) __attribute__((pure)) __attribute__((nothrow));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint dispatch_source_testcancel (OS_dispatch_source source);

		// extern uintptr_t dispatch_source_get_handle (dispatch_source_t _Nonnull source) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((nonnull())) __attribute__((warn_unused_result)) __attribute__((pure)) __attribute__((nothrow));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern UIntPtr dispatch_source_get_handle (OS_dispatch_source source);

		// extern unsigned long dispatch_source_get_mask (dispatch_source_t _Nonnull source) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((nonnull())) __attribute__((warn_unused_result)) __attribute__((pure)) __attribute__((nothrow));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint dispatch_source_get_mask (OS_dispatch_source source);

		// extern unsigned long dispatch_source_get_data (dispatch_source_t _Nonnull source) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((nonnull())) __attribute__((warn_unused_result)) __attribute__((pure)) __attribute__((nothrow));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint dispatch_source_get_data (OS_dispatch_source source);

		// extern void dispatch_source_merge_data (dispatch_source_t _Nonnull source, unsigned long value) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((nonnull())) __attribute__((nothrow));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void dispatch_source_merge_data (OS_dispatch_source source, nuint value);

		// extern void dispatch_source_set_timer (dispatch_source_t _Nonnull source, dispatch_time_t start, uint64_t interval, uint64_t leeway) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((nonnull())) __attribute__((nothrow));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void dispatch_source_set_timer (OS_dispatch_source source, ulong start, ulong interval, ulong leeway);

		// extern void dispatch_source_set_registration_handler (dispatch_source_t _Nonnull source, dispatch_block_t _Nullable handler) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=4.3))) __attribute__((visibility("default"))) __attribute__((nonnull(1))) __attribute__((nothrow));
		[Mac (10,7), iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void dispatch_source_set_registration_handler (OS_dispatch_source source, [NullAllowed] dispatch_block_t handler);

		// extern void dispatch_source_set_registration_handler_f (dispatch_source_t _Nonnull source, dispatch_function_t _Nullable handler) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=4.3))) __attribute__((visibility("default"))) __attribute__((nonnull(1))) __attribute__((nothrow));
		[Mac (10,7), iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void dispatch_source_set_registration_handler_f (OS_dispatch_source source, [NullAllowed] dispatch_function_t* handler);

		// extern dispatch_group_t _Nonnull dispatch_group_create () __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((malloc)) __attribute__((ns_returns_retained)) __attribute__((warn_unused_result)) __attribute__((nothrow)) __attribute__((ns_returns_retained));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern DispatchGroup dispatch_group_create ();

		// extern void dispatch_group_async (dispatch_group_t _Nonnull group, dispatch_queue_t _Nonnull queue, dispatch_block_t _Nonnull block) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((nonnull())) __attribute__((nothrow));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void dispatch_group_async (DispatchGroup group, DispatchQueue queue, dispatch_block_t block);

		// extern void dispatch_group_async_f (dispatch_group_t _Nonnull group, dispatch_queue_t _Nonnull queue, void * _Nullable context, dispatch_function_t _Nonnull work) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((nonnull(4))) __attribute__((nothrow));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void dispatch_group_async_f (DispatchGroup group, DispatchQueue queue, [NullAllowed] void* context, dispatch_function_t* work);

		// extern long dispatch_group_wait (dispatch_group_t _Nonnull group, dispatch_time_t timeout) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((nonnull())) __attribute__((nothrow));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint dispatch_group_wait (DispatchGroup group, ulong timeout);

		// extern void dispatch_group_notify (dispatch_group_t _Nonnull group, dispatch_queue_t _Nonnull queue, dispatch_block_t _Nonnull block) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((nonnull())) __attribute__((nothrow));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void dispatch_group_notify (DispatchGroup group, DispatchQueue queue, dispatch_block_t block);

		// extern void dispatch_group_notify_f (dispatch_group_t _Nonnull group, dispatch_queue_t _Nonnull queue, void * _Nullable context, dispatch_function_t _Nonnull work) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((nonnull(4))) __attribute__((nothrow));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void dispatch_group_notify_f (DispatchGroup group, DispatchQueue queue, [NullAllowed] void* context, dispatch_function_t* work);

		// extern void dispatch_group_enter (dispatch_group_t _Nonnull group) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((nonnull())) __attribute__((nothrow));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void dispatch_group_enter (DispatchGroup group);

		// extern void dispatch_group_leave (dispatch_group_t _Nonnull group) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((nonnull())) __attribute__((nothrow));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void dispatch_group_leave (DispatchGroup group);

		// extern dispatch_semaphore_t _Nonnull dispatch_semaphore_create (long value) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((malloc)) __attribute__((ns_returns_retained)) __attribute__((warn_unused_result)) __attribute__((nothrow)) __attribute__((ns_returns_retained));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern OS_dispatch_semaphore dispatch_semaphore_create (nint value);

		// extern long dispatch_semaphore_wait (dispatch_semaphore_t _Nonnull dsema, dispatch_time_t timeout) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((nonnull())) __attribute__((nothrow));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint dispatch_semaphore_wait (OS_dispatch_semaphore dsema, ulong timeout);

		// extern long dispatch_semaphore_signal (dispatch_semaphore_t _Nonnull dsema) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((nonnull())) __attribute__((nothrow));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint dispatch_semaphore_signal (OS_dispatch_semaphore dsema);

		// extern void dispatch_once (dispatch_once_t * _Nonnull predicate, dispatch_block_t _Nonnull block) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((nonnull())) __attribute__((nothrow));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void dispatch_once (IntPtr* predicate, dispatch_block_t block);

		// void _dispatch_once (dispatch_once_t * _Nonnull predicate, dispatch_block_t _Nonnull block) __attribute__((always_inline)) __attribute__((nonnull())) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void _dispatch_once (IntPtr* predicate, dispatch_block_t block);

		// extern long __builtin_expect (long, long) __attribute__((nothrow)) __attribute__((const));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint __builtin_expect (nint, nint);

		// extern void __builtin_assume (_Bool) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void __builtin_assume (bool);

		// extern void dispatch_once_f (dispatch_once_t * _Nonnull predicate, void * _Nullable context, dispatch_function_t _Nonnull function) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default"))) __attribute__((nonnull(1))) __attribute__((nonnull(3))) __attribute__((nothrow));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void dispatch_once_f (IntPtr* predicate, [NullAllowed] void* context, dispatch_function_t* function);

		// void _dispatch_once_f (dispatch_once_t * _Nonnull predicate, void * _Nullable context, dispatch_function_t _Nonnull function) __attribute__((always_inline)) __attribute__((nonnull(1))) __attribute__((nonnull(3))) __attribute__((nothrow));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void _dispatch_once_f (IntPtr* predicate, [NullAllowed] void* context, dispatch_function_t* function);

		// extern dispatch_data_t _Nonnull dispatch_data_create (const void * _Nonnull buffer, size_t size, dispatch_queue_t _Nullable queue, dispatch_block_t _Nullable destructor) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((visibility("default"))) __attribute__((ns_returns_retained)) __attribute__((warn_unused_result)) __attribute__((nothrow)) __attribute__((ns_returns_retained));
		[Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe OS_dispatch_data dispatch_data_create (void* buffer, nuint size, [NullAllowed] DispatchQueue queue, [NullAllowed] dispatch_block_t destructor);

		// extern size_t dispatch_data_get_size (dispatch_data_t _Nonnull data) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((visibility("default"))) __attribute__((pure)) __attribute__((nonnull(1))) __attribute__((nothrow));
		[Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint dispatch_data_get_size (OS_dispatch_data data);

		// extern dispatch_data_t _Nonnull dispatch_data_create_map (dispatch_data_t _Nonnull data, const void * _Nullable * _Nullable buffer_ptr, size_t * _Nullable size_ptr) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((visibility("default"))) __attribute__((nonnull(1))) __attribute__((ns_returns_retained)) __attribute__((warn_unused_result)) __attribute__((nothrow)) __attribute__((ns_returns_retained));
		[Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe OS_dispatch_data dispatch_data_create_map (OS_dispatch_data data, [NullAllowed] void** buffer_ptr, [NullAllowed] nuint* size_ptr);

		// extern dispatch_data_t _Nonnull dispatch_data_create_concat (dispatch_data_t _Nonnull data1, dispatch_data_t _Nonnull data2) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((visibility("default"))) __attribute__((nonnull())) __attribute__((ns_returns_retained)) __attribute__((warn_unused_result)) __attribute__((nothrow)) __attribute__((ns_returns_retained));
		[Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern OS_dispatch_data dispatch_data_create_concat (OS_dispatch_data data1, OS_dispatch_data data2);

		// extern dispatch_data_t _Nonnull dispatch_data_create_subrange (dispatch_data_t _Nonnull data, size_t offset, size_t length) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((visibility("default"))) __attribute__((nonnull(1))) __attribute__((ns_returns_retained)) __attribute__((warn_unused_result)) __attribute__((nothrow)) __attribute__((ns_returns_retained));
		[Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern OS_dispatch_data dispatch_data_create_subrange (OS_dispatch_data data, nuint offset, nuint length);

		// extern _Bool dispatch_data_apply (dispatch_data_t _Nonnull data, dispatch_data_applier_t _Nonnull applier) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((visibility("default"))) __attribute__((nonnull())) __attribute__((nothrow));
		[Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool dispatch_data_apply (OS_dispatch_data data, dispatch_data_applier_t applier);

		// extern dispatch_data_t _Nonnull dispatch_data_copy_region (dispatch_data_t _Nonnull data, size_t location, size_t * _Nonnull offset_ptr) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((visibility("default"))) __attribute__((nonnull(1))) __attribute__((nonnull(3))) __attribute__((ns_returns_retained)) __attribute__((warn_unused_result)) __attribute__((nothrow)) __attribute__((ns_returns_retained));
		[Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe OS_dispatch_data dispatch_data_copy_region (OS_dispatch_data data, nuint location, nuint* offset_ptr);

		// extern void dispatch_read (dispatch_fd_t fd, size_t length, dispatch_queue_t _Nonnull queue, void (^ _Nonnull)(dispatch_data_t _Nonnull, int) handler) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((visibility("default"))) __attribute__((nonnull(3))) __attribute__((nonnull(4))) __attribute__((nothrow));
		[Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void dispatch_read (int fd, nuint length, DispatchQueue queue, Action<OS_dispatch_data, int> handler);

		// extern void dispatch_write (dispatch_fd_t fd, dispatch_data_t _Nonnull data, dispatch_queue_t _Nonnull queue, void (^ _Nonnull)(dispatch_data_t _Nullable, int) handler) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((visibility("default"))) __attribute__((nonnull(2))) __attribute__((nonnull(3))) __attribute__((nonnull(4))) __attribute__((nothrow));
		[Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void dispatch_write (int fd, OS_dispatch_data data, DispatchQueue queue, Action<OS_dispatch_data, int> handler);

		// extern dispatch_io_t _Nonnull dispatch_io_create (dispatch_io_type_t type, dispatch_fd_t fd, dispatch_queue_t _Nonnull queue, void (^ _Nonnull)(int) cleanup_handler) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((visibility("default"))) __attribute__((malloc)) __attribute__((ns_returns_retained)) __attribute__((warn_unused_result)) __attribute__((nothrow)) __attribute__((ns_returns_retained));
		[Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern OS_dispatch_io dispatch_io_create (nuint type, int fd, DispatchQueue queue, Action<int> cleanup_handler);

		// extern dispatch_io_t _Nonnull dispatch_io_create_with_path (dispatch_io_type_t type, const char * _Nonnull path, int oflag, mode_t mode, dispatch_queue_t _Nonnull queue, void (^ _Nonnull)(int) cleanup_handler) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((visibility("default"))) __attribute__((nonnull(2))) __attribute__((malloc)) __attribute__((ns_returns_retained)) __attribute__((warn_unused_result)) __attribute__((nothrow)) __attribute__((ns_returns_retained));
		[Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe OS_dispatch_io dispatch_io_create_with_path (nuint type, sbyte* path, int oflag, ushort mode, DispatchQueue queue, Action<int> cleanup_handler);

		// extern dispatch_io_t _Nonnull dispatch_io_create_with_io (dispatch_io_type_t type, dispatch_io_t _Nonnull io, dispatch_queue_t _Nonnull queue, void (^ _Nonnull)(int) cleanup_handler) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((visibility("default"))) __attribute__((nonnull(2))) __attribute__((malloc)) __attribute__((ns_returns_retained)) __attribute__((warn_unused_result)) __attribute__((nothrow)) __attribute__((ns_returns_retained));
		[Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern OS_dispatch_io dispatch_io_create_with_io (nuint type, OS_dispatch_io io, DispatchQueue queue, Action<int> cleanup_handler);

		// extern void dispatch_io_read (dispatch_io_t _Nonnull channel, off_t offset, size_t length, dispatch_queue_t _Nonnull queue, dispatch_io_handler_t _Nonnull io_handler) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((visibility("default"))) __attribute__((nonnull(1))) __attribute__((nonnull(4))) __attribute__((nonnull(5))) __attribute__((nothrow));
		[Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void dispatch_io_read (OS_dispatch_io channel, long offset, nuint length, DispatchQueue queue, dispatch_io_handler_t io_handler);

		// extern void dispatch_io_write (dispatch_io_t _Nonnull channel, off_t offset, dispatch_data_t _Nonnull data, dispatch_queue_t _Nonnull queue, dispatch_io_handler_t _Nonnull io_handler) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((visibility("default"))) __attribute__((nonnull(1))) __attribute__((nonnull(3))) __attribute__((nonnull(4))) __attribute__((nonnull(5))) __attribute__((nothrow));
		[Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void dispatch_io_write (OS_dispatch_io channel, long offset, OS_dispatch_data data, DispatchQueue queue, dispatch_io_handler_t io_handler);

		// extern void dispatch_io_close (dispatch_io_t _Nonnull channel, dispatch_io_close_flags_t flags) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((visibility("default"))) __attribute__((nonnull(1))) __attribute__((nothrow));
		[Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void dispatch_io_close (OS_dispatch_io channel, nuint flags);

		// extern void dispatch_io_barrier (dispatch_io_t _Nonnull channel, dispatch_block_t _Nonnull barrier) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((visibility("default"))) __attribute__((nonnull())) __attribute__((nothrow));
		[Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void dispatch_io_barrier (OS_dispatch_io channel, dispatch_block_t barrier);

		// extern dispatch_fd_t dispatch_io_get_descriptor (dispatch_io_t _Nonnull channel) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((visibility("default"))) __attribute__((nonnull())) __attribute__((warn_unused_result)) __attribute__((nothrow));
		[Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int dispatch_io_get_descriptor (OS_dispatch_io channel);

		// extern void dispatch_io_set_high_water (dispatch_io_t _Nonnull channel, size_t high_water) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((visibility("default"))) __attribute__((nonnull(1))) __attribute__((nothrow));
		[Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void dispatch_io_set_high_water (OS_dispatch_io channel, nuint high_water);

		// extern void dispatch_io_set_low_water (dispatch_io_t _Nonnull channel, size_t low_water) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((visibility("default"))) __attribute__((nonnull(1))) __attribute__((nothrow));
		[Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void dispatch_io_set_low_water (OS_dispatch_io channel, nuint low_water);

		// extern void dispatch_io_set_interval (dispatch_io_t _Nonnull channel, uint64_t interval, dispatch_io_interval_flags_t flags) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((visibility("default"))) __attribute__((nonnull(1))) __attribute__((nothrow));
		[Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void dispatch_io_set_interval (OS_dispatch_io channel, ulong interval, nuint flags);

		// extern dispatch_workloop_t _Nonnull dispatch_workloop_create (const char * _Nullable label) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(tvos, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((visibility("default"))) __attribute__((malloc)) __attribute__((ns_returns_retained)) __attribute__((warn_unused_result)) __attribute__((nothrow)) __attribute__((ns_returns_retained));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe OS_dispatch_workloop dispatch_workloop_create ([NullAllowed] sbyte* label);

		// extern dispatch_workloop_t _Nonnull dispatch_workloop_create_inactive (const char * _Nullable label) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(tvos, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((visibility("default"))) __attribute__((malloc)) __attribute__((ns_returns_retained)) __attribute__((warn_unused_result)) __attribute__((nothrow)) __attribute__((ns_returns_retained));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe OS_dispatch_workloop dispatch_workloop_create_inactive ([NullAllowed] sbyte* label);

		// extern void dispatch_workloop_set_autorelease_frequency (dispatch_workloop_t _Nonnull workloop, dispatch_autorelease_frequency_t frequency) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(tvos, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((visibility("default"))) __attribute__((nonnull())) __attribute__((nothrow));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void dispatch_workloop_set_autorelease_frequency (OS_dispatch_workloop workloop, dispatch_autorelease_frequency_t frequency);

		// extern CFTypeID CFReadStreamGetTypeID () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFReadStreamGetTypeID ();

		// extern CFTypeID CFWriteStreamGetTypeID () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFWriteStreamGetTypeID ();

		// extern CFReadStreamRef _Null_unspecified CFReadStreamCreateWithBytesNoCopy (CFAllocatorRef _Null_unspecified alloc, const UInt8 * _Null_unspecified bytes, CFIndex length, CFAllocatorRef _Null_unspecified bytesDeallocator) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFReadStreamRef* CFReadStreamCreateWithBytesNoCopy (CFAllocatorRef* alloc, byte* bytes, nint length, CFAllocatorRef* bytesDeallocator);

		// extern CFWriteStreamRef _Null_unspecified CFWriteStreamCreateWithBuffer (CFAllocatorRef _Null_unspecified alloc, UInt8 * _Null_unspecified buffer, CFIndex bufferCapacity) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFWriteStreamRef* CFWriteStreamCreateWithBuffer (CFAllocatorRef* alloc, byte* buffer, nint bufferCapacity);

		// extern CFWriteStreamRef _Null_unspecified CFWriteStreamCreateWithAllocatedBuffers (CFAllocatorRef _Null_unspecified alloc, CFAllocatorRef _Null_unspecified bufferAllocator) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFWriteStreamRef* CFWriteStreamCreateWithAllocatedBuffers (CFAllocatorRef* alloc, CFAllocatorRef* bufferAllocator);

		// extern CFReadStreamRef _Null_unspecified CFReadStreamCreateWithFile (CFAllocatorRef _Null_unspecified alloc, CFURLRef _Null_unspecified fileURL) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFReadStreamRef* CFReadStreamCreateWithFile (CFAllocatorRef* alloc, CFURLRef* fileURL);

		// extern CFWriteStreamRef _Null_unspecified CFWriteStreamCreateWithFile (CFAllocatorRef _Null_unspecified alloc, CFURLRef _Null_unspecified fileURL) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFWriteStreamRef* CFWriteStreamCreateWithFile (CFAllocatorRef* alloc, CFURLRef* fileURL);

		// extern void CFStreamCreateBoundPair (CFAllocatorRef _Null_unspecified alloc, CFReadStreamRef  _Null_unspecified * _Null_unspecified readStream, CFWriteStreamRef  _Null_unspecified * _Null_unspecified writeStream, CFIndex transferBufferSize);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFStreamCreateBoundPair (CFAllocatorRef* alloc, CFReadStreamRef** readStream, CFWriteStreamRef** writeStream, nint transferBufferSize);

		// extern void CFStreamCreatePairWithSocket (CFAllocatorRef _Null_unspecified alloc, CFSocketNativeHandle sock, CFReadStreamRef  _Null_unspecified * _Null_unspecified readStream, CFWriteStreamRef  _Null_unspecified * _Null_unspecified writeStream);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFStreamCreatePairWithSocket (CFAllocatorRef* alloc, int sock, CFReadStreamRef** readStream, CFWriteStreamRef** writeStream);

		// extern void CFStreamCreatePairWithSocketToHost (CFAllocatorRef _Null_unspecified alloc, CFStringRef _Null_unspecified host, UInt32 port, CFReadStreamRef  _Null_unspecified * _Null_unspecified readStream, CFWriteStreamRef  _Null_unspecified * _Null_unspecified writeStream);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFStreamCreatePairWithSocketToHost (CFAllocatorRef* alloc, CFStringRef* host, uint port, CFReadStreamRef** readStream, CFWriteStreamRef** writeStream);

		// extern void CFStreamCreatePairWithPeerSocketSignature (CFAllocatorRef _Null_unspecified alloc, const CFSocketSignature * _Null_unspecified signature, CFReadStreamRef  _Null_unspecified * _Null_unspecified readStream, CFWriteStreamRef  _Null_unspecified * _Null_unspecified writeStream);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFStreamCreatePairWithPeerSocketSignature (CFAllocatorRef* alloc, CFSocketSignature* signature, CFReadStreamRef** readStream, CFWriteStreamRef** writeStream);

		// extern CFStreamStatus CFReadStreamGetStatus (CFReadStreamRef _Null_unspecified stream) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStreamStatus CFReadStreamGetStatus (CFReadStreamRef* stream);

		// extern CFStreamStatus CFWriteStreamGetStatus (CFWriteStreamRef _Null_unspecified stream) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStreamStatus CFWriteStreamGetStatus (CFWriteStreamRef* stream);

		// extern CFErrorRef _Null_unspecified CFReadStreamCopyError (CFReadStreamRef _Null_unspecified stream) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFErrorRef* CFReadStreamCopyError (CFReadStreamRef* stream);

		// extern CFErrorRef _Null_unspecified CFWriteStreamCopyError (CFWriteStreamRef _Null_unspecified stream) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFErrorRef* CFWriteStreamCopyError (CFWriteStreamRef* stream);

		// extern Boolean CFReadStreamOpen (CFReadStreamRef _Null_unspecified stream) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFReadStreamOpen (CFReadStreamRef* stream);

		// extern Boolean CFWriteStreamOpen (CFWriteStreamRef _Null_unspecified stream) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFWriteStreamOpen (CFWriteStreamRef* stream);

		// extern void CFReadStreamClose (CFReadStreamRef _Null_unspecified stream) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFReadStreamClose (CFReadStreamRef* stream);

		// extern void CFWriteStreamClose (CFWriteStreamRef _Null_unspecified stream) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFWriteStreamClose (CFWriteStreamRef* stream);

		// extern Boolean CFReadStreamHasBytesAvailable (CFReadStreamRef _Null_unspecified stream) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFReadStreamHasBytesAvailable (CFReadStreamRef* stream);

		// extern CFIndex CFReadStreamRead (CFReadStreamRef _Null_unspecified stream, UInt8 * _Null_unspecified buffer, CFIndex bufferLength) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFReadStreamRead (CFReadStreamRef* stream, byte* buffer, nint bufferLength);

		// extern const UInt8 * _Null_unspecified CFReadStreamGetBuffer (CFReadStreamRef _Null_unspecified stream, CFIndex maxBytesToRead, CFIndex * _Null_unspecified numBytesRead) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte* CFReadStreamGetBuffer (CFReadStreamRef* stream, nint maxBytesToRead, nint* numBytesRead);

		// extern Boolean CFWriteStreamCanAcceptBytes (CFWriteStreamRef _Null_unspecified stream) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFWriteStreamCanAcceptBytes (CFWriteStreamRef* stream);

		// extern CFIndex CFWriteStreamWrite (CFWriteStreamRef _Null_unspecified stream, const UInt8 * _Null_unspecified buffer, CFIndex bufferLength) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFWriteStreamWrite (CFWriteStreamRef* stream, byte* buffer, nint bufferLength);

		// extern CFTypeRef _Null_unspecified CFReadStreamCopyProperty (CFReadStreamRef _Null_unspecified stream, CFStreamPropertyKey _Null_unspecified propertyName) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* CFReadStreamCopyProperty (CFReadStreamRef* stream, CFStreamPropertyKey* propertyName);

		// extern CFTypeRef _Null_unspecified CFWriteStreamCopyProperty (CFWriteStreamRef _Null_unspecified stream, CFStreamPropertyKey _Null_unspecified propertyName) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* CFWriteStreamCopyProperty (CFWriteStreamRef* stream, CFStreamPropertyKey* propertyName);

		// extern Boolean CFReadStreamSetProperty (CFReadStreamRef _Null_unspecified stream, CFStreamPropertyKey _Null_unspecified propertyName, CFTypeRef _Null_unspecified propertyValue) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFReadStreamSetProperty (CFReadStreamRef* stream, CFStreamPropertyKey* propertyName, void* propertyValue);

		// extern Boolean CFWriteStreamSetProperty (CFWriteStreamRef _Null_unspecified stream, CFStreamPropertyKey _Null_unspecified propertyName, CFTypeRef _Null_unspecified propertyValue) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFWriteStreamSetProperty (CFWriteStreamRef* stream, CFStreamPropertyKey* propertyName, void* propertyValue);

		// extern Boolean CFReadStreamSetClient (CFReadStreamRef _Null_unspecified stream, CFOptionFlags streamEvents, CFReadStreamClientCallBack _Null_unspecified clientCB, CFStreamClientContext * _Null_unspecified clientContext) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFReadStreamSetClient (CFReadStreamRef* stream, nuint streamEvents, CFReadStreamClientCallBack* clientCB, CFStreamClientContext* clientContext);

		// extern Boolean CFWriteStreamSetClient (CFWriteStreamRef _Null_unspecified stream, CFOptionFlags streamEvents, CFWriteStreamClientCallBack _Null_unspecified clientCB, CFStreamClientContext * _Null_unspecified clientContext) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFWriteStreamSetClient (CFWriteStreamRef* stream, nuint streamEvents, CFWriteStreamClientCallBack* clientCB, CFStreamClientContext* clientContext);

		// extern void CFReadStreamScheduleWithRunLoop (CFReadStreamRef _Null_unspecified stream, CFRunLoopRef _Null_unspecified runLoop, CFRunLoopMode _Null_unspecified runLoopMode) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFReadStreamScheduleWithRunLoop (CFReadStreamRef* stream, CFRunLoopRef* runLoop, CFRunLoopMode* runLoopMode);

		// extern void CFWriteStreamScheduleWithRunLoop (CFWriteStreamRef _Null_unspecified stream, CFRunLoopRef _Null_unspecified runLoop, CFRunLoopMode _Null_unspecified runLoopMode) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFWriteStreamScheduleWithRunLoop (CFWriteStreamRef* stream, CFRunLoopRef* runLoop, CFRunLoopMode* runLoopMode);

		// extern void CFReadStreamUnscheduleFromRunLoop (CFReadStreamRef _Null_unspecified stream, CFRunLoopRef _Null_unspecified runLoop, CFRunLoopMode _Null_unspecified runLoopMode) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFReadStreamUnscheduleFromRunLoop (CFReadStreamRef* stream, CFRunLoopRef* runLoop, CFRunLoopMode* runLoopMode);

		// extern void CFWriteStreamUnscheduleFromRunLoop (CFWriteStreamRef _Null_unspecified stream, CFRunLoopRef _Null_unspecified runLoop, CFRunLoopMode _Null_unspecified runLoopMode) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFWriteStreamUnscheduleFromRunLoop (CFWriteStreamRef* stream, CFRunLoopRef* runLoop, CFRunLoopMode* runLoopMode);

		// extern void CFReadStreamSetDispatchQueue (CFReadStreamRef _Null_unspecified stream, dispatch_queue_t _Null_unspecified q) __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFReadStreamSetDispatchQueue (CFReadStreamRef* stream, DispatchQueue q);

		// extern void CFWriteStreamSetDispatchQueue (CFWriteStreamRef _Null_unspecified stream, dispatch_queue_t _Null_unspecified q) __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFWriteStreamSetDispatchQueue (CFWriteStreamRef* stream, DispatchQueue q);

		// extern dispatch_queue_t _Null_unspecified CFReadStreamCopyDispatchQueue (CFReadStreamRef _Null_unspecified stream) __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe DispatchQueue CFReadStreamCopyDispatchQueue (CFReadStreamRef* stream);

		// extern dispatch_queue_t _Null_unspecified CFWriteStreamCopyDispatchQueue (CFWriteStreamRef _Null_unspecified stream) __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe DispatchQueue CFWriteStreamCopyDispatchQueue (CFWriteStreamRef* stream);

		// extern CFStreamError CFReadStreamGetError (CFReadStreamRef _Null_unspecified stream) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStreamError CFReadStreamGetError (CFReadStreamRef* stream);

		// extern CFStreamError CFWriteStreamGetError (CFWriteStreamRef _Null_unspecified stream) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStreamError CFWriteStreamGetError (CFWriteStreamRef* stream);

		// extern CFPropertyListRef CFPropertyListCreateFromXMLData (CFAllocatorRef allocator, CFDataRef xmlData, CFOptionFlags mutabilityOption, CFStringRef *errorString) __attribute__((availability(macos, introduced=10.0, deprecated=10.10))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use CFPropertyListCreateWithData instead.")]
		[Deprecated (PlatformName.MacOSX, 10, 10, message: "Use CFPropertyListCreateWithData instead.")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use CFPropertyListCreateWithData instead.")]
		[Deprecated (PlatformName.iOS, 8, 0, message: "Use CFPropertyListCreateWithData instead.")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use CFPropertyListCreateWithData instead.")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use CFPropertyListCreateWithData instead.")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use CFPropertyListCreateWithData instead.")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use CFPropertyListCreateWithData instead.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* CFPropertyListCreateFromXMLData (CFAllocatorRef* allocator, CFDataRef* xmlData, nuint mutabilityOption, CFStringRef** errorString);

		// extern CFDataRef CFPropertyListCreateXMLData (CFAllocatorRef allocator, CFPropertyListRef propertyList) __attribute__((availability(macos, introduced=10.0, deprecated=10.10))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use CFPropertyListCreateData instead.")]
		[Deprecated (PlatformName.MacOSX, 10, 10, message: "Use CFPropertyListCreateData instead.")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use CFPropertyListCreateData instead.")]
		[Deprecated (PlatformName.iOS, 8, 0, message: "Use CFPropertyListCreateData instead.")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use CFPropertyListCreateData instead.")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use CFPropertyListCreateData instead.")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use CFPropertyListCreateData instead.")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use CFPropertyListCreateData instead.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFDataRef* CFPropertyListCreateXMLData (CFAllocatorRef* allocator, void* propertyList);

		// extern CFPropertyListRef CFPropertyListCreateDeepCopy (CFAllocatorRef allocator, CFPropertyListRef propertyList, CFOptionFlags mutabilityOption) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* CFPropertyListCreateDeepCopy (CFAllocatorRef* allocator, void* propertyList, nuint mutabilityOption);

		// extern Boolean CFPropertyListIsValid (CFPropertyListRef plist, CFPropertyListFormat format) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFPropertyListIsValid (void* plist, CFPropertyListFormat format);

		// extern CFIndex CFPropertyListWriteToStream (CFPropertyListRef propertyList, CFWriteStreamRef stream, CFPropertyListFormat format, CFStringRef *errorString) __attribute__((availability(macos, introduced=10.2, deprecated=10.10))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "Use CFPropertyListWrite instead.")]
		[Deprecated (PlatformName.MacOSX, 10, 10, message: "Use CFPropertyListWrite instead.")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use CFPropertyListWrite instead.")]
		[Deprecated (PlatformName.iOS, 8, 0, message: "Use CFPropertyListWrite instead.")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use CFPropertyListWrite instead.")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use CFPropertyListWrite instead.")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use CFPropertyListWrite instead.")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use CFPropertyListWrite instead.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFPropertyListWriteToStream (void* propertyList, CFWriteStreamRef* stream, CFPropertyListFormat format, CFStringRef** errorString);

		// extern CFPropertyListRef CFPropertyListCreateFromStream (CFAllocatorRef allocator, CFReadStreamRef stream, CFIndex streamLength, CFOptionFlags mutabilityOption, CFPropertyListFormat *format, CFStringRef *errorString) __attribute__((availability(macos, introduced=10.2, deprecated=10.10))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "Use CFPropertyListCreateWithStream instead.")]
		[Deprecated (PlatformName.MacOSX, 10, 10, message: "Use CFPropertyListCreateWithStream instead.")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use CFPropertyListCreateWithStream instead.")]
		[Deprecated (PlatformName.iOS, 8, 0, message: "Use CFPropertyListCreateWithStream instead.")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use CFPropertyListCreateWithStream instead.")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use CFPropertyListCreateWithStream instead.")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use CFPropertyListCreateWithStream instead.")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use CFPropertyListCreateWithStream instead.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* CFPropertyListCreateFromStream (CFAllocatorRef* allocator, CFReadStreamRef* stream, nint streamLength, nuint mutabilityOption, CFPropertyListFormat* format, CFStringRef** errorString);

		// extern CFPropertyListRef CFPropertyListCreateWithData (CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* CFPropertyListCreateWithData (CFAllocatorRef* allocator, CFDataRef* data, nuint options, CFPropertyListFormat* format, CFErrorRef** error);

		// extern CFPropertyListRef CFPropertyListCreateWithStream (CFAllocatorRef allocator, CFReadStreamRef stream, CFIndex streamLength, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* CFPropertyListCreateWithStream (CFAllocatorRef* allocator, CFReadStreamRef* stream, nint streamLength, nuint options, CFPropertyListFormat* format, CFErrorRef** error);

		// extern CFIndex CFPropertyListWrite (CFPropertyListRef propertyList, CFWriteStreamRef stream, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFPropertyListWrite (void* propertyList, CFWriteStreamRef* stream, CFPropertyListFormat format, nuint options, CFErrorRef** error);

		// extern CFDataRef CFPropertyListCreateData (CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFDataRef* CFPropertyListCreateData (CFAllocatorRef* allocator, void* propertyList, CFPropertyListFormat format, nuint options, CFErrorRef** error);

		// extern CFTypeID CFSetGetTypeID () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFSetGetTypeID ();

		// extern CFSetRef CFSetCreate (CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFSetCallBacks *callBacks) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFSetRef* CFSetCreate (CFAllocatorRef* allocator, void** values, nint numValues, CFSetCallBacks* callBacks);

		// extern CFSetRef CFSetCreateCopy (CFAllocatorRef allocator, CFSetRef theSet) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFSetRef* CFSetCreateCopy (CFAllocatorRef* allocator, CFSetRef* theSet);

		// extern CFMutableSetRef CFSetCreateMutable (CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFMutableSetRef* CFSetCreateMutable (CFAllocatorRef* allocator, nint capacity, CFSetCallBacks* callBacks);

		// extern CFMutableSetRef CFSetCreateMutableCopy (CFAllocatorRef allocator, CFIndex capacity, CFSetRef theSet) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFMutableSetRef* CFSetCreateMutableCopy (CFAllocatorRef* allocator, nint capacity, CFSetRef* theSet);

		// extern CFIndex CFSetGetCount (CFSetRef theSet) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFSetGetCount (CFSetRef* theSet);

		// extern CFIndex CFSetGetCountOfValue (CFSetRef theSet, const void *value) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFSetGetCountOfValue (CFSetRef* theSet, void* value);

		// extern Boolean CFSetContainsValue (CFSetRef theSet, const void *value) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFSetContainsValue (CFSetRef* theSet, void* value);

		// extern const void * CFSetGetValue (CFSetRef theSet, const void *value) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* CFSetGetValue (CFSetRef* theSet, void* value);

		// extern Boolean CFSetGetValueIfPresent (CFSetRef theSet, const void *candidate, const void **value) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFSetGetValueIfPresent (CFSetRef* theSet, void* candidate, void** value);

		// extern void CFSetGetValues (CFSetRef theSet, const void **values) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFSetGetValues (CFSetRef* theSet, void** values);

		// extern void CFSetApplyFunction (CFSetRef theSet, CFSetApplierFunction applier, void *context) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFSetApplyFunction (CFSetRef* theSet, CFSetApplierFunction* applier, void* context);

		// extern void CFSetAddValue (CFMutableSetRef theSet, const void *value) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFSetAddValue (CFMutableSetRef* theSet, void* value);

		// extern void CFSetReplaceValue (CFMutableSetRef theSet, const void *value) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFSetReplaceValue (CFMutableSetRef* theSet, void* value);

		// extern void CFSetSetValue (CFMutableSetRef theSet, const void *value) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFSetSetValue (CFMutableSetRef* theSet, void* value);

		// extern void CFSetRemoveValue (CFMutableSetRef theSet, const void *value) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFSetRemoveValue (CFMutableSetRef* theSet, void* value);

		// extern void CFSetRemoveAllValues (CFMutableSetRef theSet) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFSetRemoveAllValues (CFMutableSetRef* theSet);

		// extern CFTypeID CFTreeGetTypeID () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFTreeGetTypeID ();

		// extern CFTreeRef CFTreeCreate (CFAllocatorRef allocator, const CFTreeContext *context) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFTreeRef* CFTreeCreate (CFAllocatorRef* allocator, CFTreeContext* context);

		// extern CFTreeRef CFTreeGetParent (CFTreeRef tree) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFTreeRef* CFTreeGetParent (CFTreeRef* tree);

		// extern CFTreeRef CFTreeGetNextSibling (CFTreeRef tree) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFTreeRef* CFTreeGetNextSibling (CFTreeRef* tree);

		// extern CFTreeRef CFTreeGetFirstChild (CFTreeRef tree) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFTreeRef* CFTreeGetFirstChild (CFTreeRef* tree);

		// extern void CFTreeGetContext (CFTreeRef tree, CFTreeContext *context) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFTreeGetContext (CFTreeRef* tree, CFTreeContext* context);

		// extern CFIndex CFTreeGetChildCount (CFTreeRef tree) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFTreeGetChildCount (CFTreeRef* tree);

		// extern CFTreeRef CFTreeGetChildAtIndex (CFTreeRef tree, CFIndex idx) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFTreeRef* CFTreeGetChildAtIndex (CFTreeRef* tree, nint idx);

		// extern void CFTreeGetChildren (CFTreeRef tree, CFTreeRef *children) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFTreeGetChildren (CFTreeRef* tree, CFTreeRef** children);

		// extern void CFTreeApplyFunctionToChildren (CFTreeRef tree, CFTreeApplierFunction applier, void *context) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFTreeApplyFunctionToChildren (CFTreeRef* tree, CFTreeApplierFunction* applier, void* context);

		// extern CFTreeRef CFTreeFindRoot (CFTreeRef tree) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFTreeRef* CFTreeFindRoot (CFTreeRef* tree);

		// extern void CFTreeSetContext (CFTreeRef tree, const CFTreeContext *context) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFTreeSetContext (CFTreeRef* tree, CFTreeContext* context);

		// extern void CFTreePrependChild (CFTreeRef tree, CFTreeRef newChild) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFTreePrependChild (CFTreeRef* tree, CFTreeRef* newChild);

		// extern void CFTreeAppendChild (CFTreeRef tree, CFTreeRef newChild) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFTreeAppendChild (CFTreeRef* tree, CFTreeRef* newChild);

		// extern void CFTreeInsertSibling (CFTreeRef tree, CFTreeRef newSibling) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFTreeInsertSibling (CFTreeRef* tree, CFTreeRef* newSibling);

		// extern void CFTreeRemove (CFTreeRef tree) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFTreeRemove (CFTreeRef* tree);

		// extern void CFTreeRemoveAllChildren (CFTreeRef tree) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFTreeRemoveAllChildren (CFTreeRef* tree);

		// extern void CFTreeSortChildren (CFTreeRef tree, CFComparatorFunction comparator, void *context) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFTreeSortChildren (CFTreeRef* tree, CFComparatorFunction* comparator, void* context);

		// extern Boolean CFURLCreateDataAndPropertiesFromResource (CFAllocatorRef alloc, CFURLRef url, CFDataRef *resourceData, CFDictionaryRef *properties, CFArrayRef desiredProperties, SInt32 *errorCode) __attribute__((availability(macos, introduced=10.0, deprecated=10.9))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "For resource data, use the CFReadStream API. For file resource properties, use CFURLCopyResourcePropertiesForKeys.")]
		[Deprecated (PlatformName.MacOSX, 10, 9, message: "For resource data, use the CFReadStream API. For file resource properties, use CFURLCopyResourcePropertiesForKeys.")]
		[Introduced (PlatformName.iOS, 2, 0, message: "For resource data, use the CFReadStream API. For file resource properties, use CFURLCopyResourcePropertiesForKeys.")]
		[Deprecated (PlatformName.iOS, 7, 0, message: "For resource data, use the CFReadStream API. For file resource properties, use CFURLCopyResourcePropertiesForKeys.")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "For resource data, use the CFReadStream API. For file resource properties, use CFURLCopyResourcePropertiesForKeys.")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "For resource data, use the CFReadStream API. For file resource properties, use CFURLCopyResourcePropertiesForKeys.")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "For resource data, use the CFReadStream API. For file resource properties, use CFURLCopyResourcePropertiesForKeys.")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "For resource data, use the CFReadStream API. For file resource properties, use CFURLCopyResourcePropertiesForKeys.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFURLCreateDataAndPropertiesFromResource (CFAllocatorRef* alloc, CFURLRef* url, CFDataRef** resourceData, CFDictionaryRef** properties, CFArrayRef* desiredProperties, int* errorCode);

		// extern Boolean CFURLWriteDataAndPropertiesToResource (CFURLRef url, CFDataRef dataToWrite, CFDictionaryRef propertiesToWrite, SInt32 *errorCode) __attribute__((availability(macos, introduced=10.0, deprecated=10.9))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "For resource data, use the CFWriteStream API. For file resource properties, use CFURLSetResourcePropertiesForKeys.")]
		[Deprecated (PlatformName.MacOSX, 10, 9, message: "For resource data, use the CFWriteStream API. For file resource properties, use CFURLSetResourcePropertiesForKeys.")]
		[Introduced (PlatformName.iOS, 2, 0, message: "For resource data, use the CFWriteStream API. For file resource properties, use CFURLSetResourcePropertiesForKeys.")]
		[Deprecated (PlatformName.iOS, 7, 0, message: "For resource data, use the CFWriteStream API. For file resource properties, use CFURLSetResourcePropertiesForKeys.")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "For resource data, use the CFWriteStream API. For file resource properties, use CFURLSetResourcePropertiesForKeys.")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "For resource data, use the CFWriteStream API. For file resource properties, use CFURLSetResourcePropertiesForKeys.")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "For resource data, use the CFWriteStream API. For file resource properties, use CFURLSetResourcePropertiesForKeys.")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "For resource data, use the CFWriteStream API. For file resource properties, use CFURLSetResourcePropertiesForKeys.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFURLWriteDataAndPropertiesToResource (CFURLRef* url, CFDataRef* dataToWrite, CFDictionaryRef* propertiesToWrite, int* errorCode);

		// extern Boolean CFURLDestroyResource (CFURLRef url, SInt32 *errorCode) __attribute__((availability(macos, introduced=10.0, deprecated=10.9))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use CFURLGetFileSystemRepresentation and removefile(3) instead.")]
		[Deprecated (PlatformName.MacOSX, 10, 9, message: "Use CFURLGetFileSystemRepresentation and removefile(3) instead.")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use CFURLGetFileSystemRepresentation and removefile(3) instead.")]
		[Deprecated (PlatformName.iOS, 7, 0, message: "Use CFURLGetFileSystemRepresentation and removefile(3) instead.")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use CFURLGetFileSystemRepresentation and removefile(3) instead.")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use CFURLGetFileSystemRepresentation and removefile(3) instead.")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use CFURLGetFileSystemRepresentation and removefile(3) instead.")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use CFURLGetFileSystemRepresentation and removefile(3) instead.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFURLDestroyResource (CFURLRef* url, int* errorCode);

		// extern CFTypeRef CFURLCreatePropertyFromResource (CFAllocatorRef alloc, CFURLRef url, CFStringRef property, SInt32 *errorCode) __attribute__((availability(macos, introduced=10.0, deprecated=10.9))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "For file resource properties, use CFURLCopyResourcePropertyForKey.")]
		[Deprecated (PlatformName.MacOSX, 10, 9, message: "For file resource properties, use CFURLCopyResourcePropertyForKey.")]
		[Introduced (PlatformName.iOS, 2, 0, message: "For file resource properties, use CFURLCopyResourcePropertyForKey.")]
		[Deprecated (PlatformName.iOS, 7, 0, message: "For file resource properties, use CFURLCopyResourcePropertyForKey.")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "For file resource properties, use CFURLCopyResourcePropertyForKey.")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "For file resource properties, use CFURLCopyResourcePropertyForKey.")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "For file resource properties, use CFURLCopyResourcePropertyForKey.")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "For file resource properties, use CFURLCopyResourcePropertyForKey.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* CFURLCreatePropertyFromResource (CFAllocatorRef* alloc, CFURLRef* url, CFStringRef* property, int* errorCode);

		// extern CFTypeID CFUUIDGetTypeID () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFUUIDGetTypeID ();

		// extern CFUUIDRef CFUUIDCreate (CFAllocatorRef alloc) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFUUIDRef* CFUUIDCreate (CFAllocatorRef* alloc);

		// extern CFUUIDRef CFUUIDCreateWithBytes (CFAllocatorRef alloc, UInt8 byte0, UInt8 byte1, UInt8 byte2, UInt8 byte3, UInt8 byte4, UInt8 byte5, UInt8 byte6, UInt8 byte7, UInt8 byte8, UInt8 byte9, UInt8 byte10, UInt8 byte11, UInt8 byte12, UInt8 byte13, UInt8 byte14, UInt8 byte15) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFUUIDRef* CFUUIDCreateWithBytes (CFAllocatorRef* alloc, byte byte0, byte byte1, byte byte2, byte byte3, byte byte4, byte byte5, byte byte6, byte byte7, byte byte8, byte byte9, byte byte10, byte byte11, byte byte12, byte byte13, byte byte14, byte byte15);

		// extern CFUUIDRef CFUUIDCreateFromString (CFAllocatorRef alloc, CFStringRef uuidStr) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFUUIDRef* CFUUIDCreateFromString (CFAllocatorRef* alloc, CFStringRef* uuidStr);

		// extern CFStringRef CFUUIDCreateString (CFAllocatorRef alloc, CFUUIDRef uuid) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFUUIDCreateString (CFAllocatorRef* alloc, CFUUIDRef* uuid);

		// extern CFUUIDRef CFUUIDGetConstantUUIDWithBytes (CFAllocatorRef alloc, UInt8 byte0, UInt8 byte1, UInt8 byte2, UInt8 byte3, UInt8 byte4, UInt8 byte5, UInt8 byte6, UInt8 byte7, UInt8 byte8, UInt8 byte9, UInt8 byte10, UInt8 byte11, UInt8 byte12, UInt8 byte13, UInt8 byte14, UInt8 byte15) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFUUIDRef* CFUUIDGetConstantUUIDWithBytes (CFAllocatorRef* alloc, byte byte0, byte byte1, byte byte2, byte byte3, byte byte4, byte byte5, byte byte6, byte byte7, byte byte8, byte byte9, byte byte10, byte byte11, byte byte12, byte byte13, byte byte14, byte byte15);

		// extern CFUUIDBytes CFUUIDGetUUIDBytes (CFUUIDRef uuid) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFUUIDBytes CFUUIDGetUUIDBytes (CFUUIDRef* uuid);

		// extern CFUUIDRef CFUUIDCreateFromUUIDBytes (CFAllocatorRef alloc, CFUUIDBytes bytes) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFUUIDRef* CFUUIDCreateFromUUIDBytes (CFAllocatorRef* alloc, CFUUIDBytes bytes);

		// extern CFURLRef CFCopyHomeDirectoryURL () __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(macos, unavailable))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), NoMac, iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFURLRef* CFCopyHomeDirectoryURL ();

		// extern CFBundleRef CFBundleGetMainBundle () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFBundleRef* CFBundleGetMainBundle ();

		// extern CFBundleRef CFBundleGetBundleWithIdentifier (CFStringRef bundleID) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFBundleRef* CFBundleGetBundleWithIdentifier (CFStringRef* bundleID);

		// extern CFArrayRef CFBundleGetAllBundles () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFArrayRef* CFBundleGetAllBundles ();

		// extern CFTypeID CFBundleGetTypeID () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFBundleGetTypeID ();

		// extern CFBundleRef CFBundleCreate (CFAllocatorRef allocator, CFURLRef bundleURL) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFBundleRef* CFBundleCreate (CFAllocatorRef* allocator, CFURLRef* bundleURL);

		// extern CFArrayRef CFBundleCreateBundlesFromDirectory (CFAllocatorRef allocator, CFURLRef directoryURL, CFStringRef bundleType) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFArrayRef* CFBundleCreateBundlesFromDirectory (CFAllocatorRef* allocator, CFURLRef* directoryURL, CFStringRef* bundleType);

		// extern CFURLRef CFBundleCopyBundleURL (CFBundleRef bundle) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFURLRef* CFBundleCopyBundleURL (CFBundleRef* bundle);

		// extern CFTypeRef CFBundleGetValueForInfoDictionaryKey (CFBundleRef bundle, CFStringRef key) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* CFBundleGetValueForInfoDictionaryKey (CFBundleRef* bundle, CFStringRef* key);

		// extern CFDictionaryRef CFBundleGetInfoDictionary (CFBundleRef bundle) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFDictionaryRef* CFBundleGetInfoDictionary (CFBundleRef* bundle);

		// extern CFDictionaryRef CFBundleGetLocalInfoDictionary (CFBundleRef bundle) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFDictionaryRef* CFBundleGetLocalInfoDictionary (CFBundleRef* bundle);

		// extern void CFBundleGetPackageInfo (CFBundleRef bundle, UInt32 *packageType, UInt32 *packageCreator) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFBundleGetPackageInfo (CFBundleRef* bundle, uint* packageType, uint* packageCreator);

		// extern CFStringRef CFBundleGetIdentifier (CFBundleRef bundle) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFBundleGetIdentifier (CFBundleRef* bundle);

		// extern UInt32 CFBundleGetVersionNumber (CFBundleRef bundle) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe uint CFBundleGetVersionNumber (CFBundleRef* bundle);

		// extern CFStringRef CFBundleGetDevelopmentRegion (CFBundleRef bundle) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFBundleGetDevelopmentRegion (CFBundleRef* bundle);

		// extern CFURLRef CFBundleCopySupportFilesDirectoryURL (CFBundleRef bundle) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFURLRef* CFBundleCopySupportFilesDirectoryURL (CFBundleRef* bundle);

		// extern CFURLRef CFBundleCopyResourcesDirectoryURL (CFBundleRef bundle) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFURLRef* CFBundleCopyResourcesDirectoryURL (CFBundleRef* bundle);

		// extern CFURLRef CFBundleCopyPrivateFrameworksURL (CFBundleRef bundle) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFURLRef* CFBundleCopyPrivateFrameworksURL (CFBundleRef* bundle);

		// extern CFURLRef CFBundleCopySharedFrameworksURL (CFBundleRef bundle) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFURLRef* CFBundleCopySharedFrameworksURL (CFBundleRef* bundle);

		// extern CFURLRef CFBundleCopySharedSupportURL (CFBundleRef bundle) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFURLRef* CFBundleCopySharedSupportURL (CFBundleRef* bundle);

		// extern CFURLRef CFBundleCopyBuiltInPlugInsURL (CFBundleRef bundle) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFURLRef* CFBundleCopyBuiltInPlugInsURL (CFBundleRef* bundle);

		// extern CFDictionaryRef CFBundleCopyInfoDictionaryInDirectory (CFURLRef bundleURL) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFDictionaryRef* CFBundleCopyInfoDictionaryInDirectory (CFURLRef* bundleURL);

		// extern Boolean CFBundleGetPackageInfoInDirectory (CFURLRef url, UInt32 *packageType, UInt32 *packageCreator) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFBundleGetPackageInfoInDirectory (CFURLRef* url, uint* packageType, uint* packageCreator);

		// extern CFURLRef CFBundleCopyResourceURL (CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFURLRef* CFBundleCopyResourceURL (CFBundleRef* bundle, CFStringRef* resourceName, CFStringRef* resourceType, CFStringRef* subDirName);

		// extern CFArrayRef CFBundleCopyResourceURLsOfType (CFBundleRef bundle, CFStringRef resourceType, CFStringRef subDirName) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFArrayRef* CFBundleCopyResourceURLsOfType (CFBundleRef* bundle, CFStringRef* resourceType, CFStringRef* subDirName);

		// extern CFStringRef CFBundleCopyLocalizedString (CFBundleRef bundle, CFStringRef key, CFStringRef value, CFStringRef tableName) __attribute__((format_arg(2))) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFBundleCopyLocalizedString (CFBundleRef* bundle, CFStringRef* key, CFStringRef* value, CFStringRef* tableName);

		// extern CFURLRef CFBundleCopyResourceURLInDirectory (CFURLRef bundleURL, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFURLRef* CFBundleCopyResourceURLInDirectory (CFURLRef* bundleURL, CFStringRef* resourceName, CFStringRef* resourceType, CFStringRef* subDirName);

		// extern CFArrayRef CFBundleCopyResourceURLsOfTypeInDirectory (CFURLRef bundleURL, CFStringRef resourceType, CFStringRef subDirName) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFArrayRef* CFBundleCopyResourceURLsOfTypeInDirectory (CFURLRef* bundleURL, CFStringRef* resourceType, CFStringRef* subDirName);

		// extern CFArrayRef CFBundleCopyBundleLocalizations (CFBundleRef bundle) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFArrayRef* CFBundleCopyBundleLocalizations (CFBundleRef* bundle);

		// extern CFArrayRef CFBundleCopyPreferredLocalizationsFromArray (CFArrayRef locArray) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFArrayRef* CFBundleCopyPreferredLocalizationsFromArray (CFArrayRef* locArray);

		// extern CFArrayRef CFBundleCopyLocalizationsForPreferences (CFArrayRef locArray, CFArrayRef prefArray) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFArrayRef* CFBundleCopyLocalizationsForPreferences (CFArrayRef* locArray, CFArrayRef* prefArray);

		// extern CFURLRef CFBundleCopyResourceURLForLocalization (CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName, CFStringRef localizationName) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFURLRef* CFBundleCopyResourceURLForLocalization (CFBundleRef* bundle, CFStringRef* resourceName, CFStringRef* resourceType, CFStringRef* subDirName, CFStringRef* localizationName);

		// extern CFArrayRef CFBundleCopyResourceURLsOfTypeForLocalization (CFBundleRef bundle, CFStringRef resourceType, CFStringRef subDirName, CFStringRef localizationName) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFArrayRef* CFBundleCopyResourceURLsOfTypeForLocalization (CFBundleRef* bundle, CFStringRef* resourceType, CFStringRef* subDirName, CFStringRef* localizationName);

		// extern CFDictionaryRef CFBundleCopyInfoDictionaryForURL (CFURLRef url) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFDictionaryRef* CFBundleCopyInfoDictionaryForURL (CFURLRef* url);

		// extern CFArrayRef CFBundleCopyLocalizationsForURL (CFURLRef url) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFArrayRef* CFBundleCopyLocalizationsForURL (CFURLRef* url);

		// extern CFArrayRef CFBundleCopyExecutableArchitecturesForURL (CFURLRef url) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFArrayRef* CFBundleCopyExecutableArchitecturesForURL (CFURLRef* url);

		// extern CFURLRef CFBundleCopyExecutableURL (CFBundleRef bundle) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFURLRef* CFBundleCopyExecutableURL (CFBundleRef* bundle);

		// extern CFArrayRef CFBundleCopyExecutableArchitectures (CFBundleRef bundle) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFArrayRef* CFBundleCopyExecutableArchitectures (CFBundleRef* bundle);

		// extern Boolean CFBundlePreflightExecutable (CFBundleRef bundle, CFErrorRef *error) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFBundlePreflightExecutable (CFBundleRef* bundle, CFErrorRef** error);

		// extern Boolean CFBundleLoadExecutableAndReturnError (CFBundleRef bundle, CFErrorRef *error) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFBundleLoadExecutableAndReturnError (CFBundleRef* bundle, CFErrorRef** error);

		// extern Boolean CFBundleLoadExecutable (CFBundleRef bundle) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFBundleLoadExecutable (CFBundleRef* bundle);

		// extern Boolean CFBundleIsExecutableLoaded (CFBundleRef bundle) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFBundleIsExecutableLoaded (CFBundleRef* bundle);

		// extern void CFBundleUnloadExecutable (CFBundleRef bundle) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFBundleUnloadExecutable (CFBundleRef* bundle);

		// extern void * CFBundleGetFunctionPointerForName (CFBundleRef bundle, CFStringRef functionName) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* CFBundleGetFunctionPointerForName (CFBundleRef* bundle, CFStringRef* functionName);

		// extern void CFBundleGetFunctionPointersForNames (CFBundleRef bundle, CFArrayRef functionNames, void **ftbl) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFBundleGetFunctionPointersForNames (CFBundleRef* bundle, CFArrayRef* functionNames, void*[] ftbl);

		// extern void * CFBundleGetDataPointerForName (CFBundleRef bundle, CFStringRef symbolName) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* CFBundleGetDataPointerForName (CFBundleRef* bundle, CFStringRef* symbolName);

		// extern void CFBundleGetDataPointersForNames (CFBundleRef bundle, CFArrayRef symbolNames, void **stbl) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFBundleGetDataPointersForNames (CFBundleRef* bundle, CFArrayRef* symbolNames, void*[] stbl);

		// extern CFURLRef CFBundleCopyAuxiliaryExecutableURL (CFBundleRef bundle, CFStringRef executableName) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFURLRef* CFBundleCopyAuxiliaryExecutableURL (CFBundleRef* bundle, CFStringRef* executableName);

		// extern CFPlugInRef CFBundleGetPlugIn (CFBundleRef bundle) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFPlugInRef* CFBundleGetPlugIn (CFBundleRef* bundle);

		// extern CFBundleRefNum CFBundleOpenBundleResourceMap (CFBundleRef bundle) __attribute__((availability(macos, introduced=10.0, deprecated=10.15))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "The Carbon Resource Manager is deprecated. This should only be used to access Resource Manager-style resources in old bundles.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "The Carbon Resource Manager is deprecated. This should only be used to access Resource Manager-style resources in old bundles.")]
		[NoWatch, NoTV, NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int CFBundleOpenBundleResourceMap (CFBundleRef* bundle);

		// extern SInt32 CFBundleOpenBundleResourceFiles (CFBundleRef bundle, CFBundleRefNum *refNum, CFBundleRefNum *localizedRefNum) __attribute__((availability(macos, introduced=10.0, deprecated=10.15))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "The Carbon Resource Manager is deprecated. This should only be used to access Resource Manager-style resources in old bundles.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "The Carbon Resource Manager is deprecated. This should only be used to access Resource Manager-style resources in old bundles.")]
		[NoWatch, NoTV, NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int CFBundleOpenBundleResourceFiles (CFBundleRef* bundle, int* refNum, int* localizedRefNum);

		// extern void CFBundleCloseBundleResourceMap (CFBundleRef bundle, CFBundleRefNum refNum) __attribute__((availability(macos, introduced=10.0, deprecated=10.15))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "The Carbon Resource Manager is deprecated. This should only be used to access Resource Manager-style resources in old bundles.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "The Carbon Resource Manager is deprecated. This should only be used to access Resource Manager-style resources in old bundles.")]
		[NoWatch, NoTV, NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFBundleCloseBundleResourceMap (CFBundleRef* bundle, int refNum);

		// extern CFTypeID CFMessagePortGetTypeID () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFMessagePortGetTypeID ();

		// extern CFMessagePortRef CFMessagePortCreateLocal (CFAllocatorRef allocator, CFStringRef name, CFMessagePortCallBack callout, CFMessagePortContext *context, Boolean *shouldFreeInfo) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFMessagePortRef* CFMessagePortCreateLocal (CFAllocatorRef* allocator, CFStringRef* name, CFMessagePortCallBack* callout, CFMessagePortContext* context, byte* shouldFreeInfo);

		// extern CFMessagePortRef CFMessagePortCreateRemote (CFAllocatorRef allocator, CFStringRef name) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFMessagePortRef* CFMessagePortCreateRemote (CFAllocatorRef* allocator, CFStringRef* name);

		// extern Boolean CFMessagePortIsRemote (CFMessagePortRef ms) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFMessagePortIsRemote (CFMessagePortRef* ms);

		// extern CFStringRef CFMessagePortGetName (CFMessagePortRef ms) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFMessagePortGetName (CFMessagePortRef* ms);

		// extern Boolean CFMessagePortSetName (CFMessagePortRef ms, CFStringRef newName) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFMessagePortSetName (CFMessagePortRef* ms, CFStringRef* newName);

		// extern void CFMessagePortGetContext (CFMessagePortRef ms, CFMessagePortContext *context) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFMessagePortGetContext (CFMessagePortRef* ms, CFMessagePortContext* context);

		// extern void CFMessagePortInvalidate (CFMessagePortRef ms) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFMessagePortInvalidate (CFMessagePortRef* ms);

		// extern Boolean CFMessagePortIsValid (CFMessagePortRef ms) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFMessagePortIsValid (CFMessagePortRef* ms);

		// extern CFMessagePortInvalidationCallBack CFMessagePortGetInvalidationCallBack (CFMessagePortRef ms) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFMessagePortInvalidationCallBack* CFMessagePortGetInvalidationCallBack (CFMessagePortRef* ms);

		// extern void CFMessagePortSetInvalidationCallBack (CFMessagePortRef ms, CFMessagePortInvalidationCallBack callout) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFMessagePortSetInvalidationCallBack (CFMessagePortRef* ms, CFMessagePortInvalidationCallBack* callout);

		// extern SInt32 CFMessagePortSendRequest (CFMessagePortRef remote, SInt32 msgid, CFDataRef data, CFTimeInterval sendTimeout, CFTimeInterval rcvTimeout, CFStringRef replyMode, CFDataRef *returnData) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int CFMessagePortSendRequest (CFMessagePortRef* remote, int msgid, CFDataRef* data, double sendTimeout, double rcvTimeout, CFStringRef* replyMode, CFDataRef** returnData);

		// extern CFRunLoopSourceRef CFMessagePortCreateRunLoopSource (CFAllocatorRef allocator, CFMessagePortRef local, CFIndex order) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFRunLoopSourceRef* CFMessagePortCreateRunLoopSource (CFAllocatorRef* allocator, CFMessagePortRef* local, nint order);

		// extern void CFMessagePortSetDispatchQueue (CFMessagePortRef ms, dispatch_queue_t queue) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFMessagePortSetDispatchQueue (CFMessagePortRef* ms, DispatchQueue queue);

		// extern CFTypeID CFPlugInGetTypeID () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFPlugInGetTypeID ();

		// extern CFPlugInRef CFPlugInCreate (CFAllocatorRef allocator, CFURLRef plugInURL) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFPlugInRef* CFPlugInCreate (CFAllocatorRef* allocator, CFURLRef* plugInURL);

		// extern CFBundleRef CFPlugInGetBundle (CFPlugInRef plugIn) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFBundleRef* CFPlugInGetBundle (CFPlugInRef* plugIn);

		// extern void CFPlugInSetLoadOnDemand (CFPlugInRef plugIn, Boolean flag) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFPlugInSetLoadOnDemand (CFPlugInRef* plugIn, byte flag);

		// extern Boolean CFPlugInIsLoadOnDemand (CFPlugInRef plugIn) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFPlugInIsLoadOnDemand (CFPlugInRef* plugIn);

		// extern CFArrayRef CFPlugInFindFactoriesForPlugInType (CFUUIDRef typeUUID) __attribute__((cf_returns_retained)) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFArrayRef* CFPlugInFindFactoriesForPlugInType (CFUUIDRef* typeUUID);

		// extern CFArrayRef CFPlugInFindFactoriesForPlugInTypeInPlugIn (CFUUIDRef typeUUID, CFPlugInRef plugIn) __attribute__((cf_returns_retained)) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFArrayRef* CFPlugInFindFactoriesForPlugInTypeInPlugIn (CFUUIDRef* typeUUID, CFPlugInRef* plugIn);

		// extern void * CFPlugInInstanceCreate (CFAllocatorRef allocator, CFUUIDRef factoryUUID, CFUUIDRef typeUUID) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* CFPlugInInstanceCreate (CFAllocatorRef* allocator, CFUUIDRef* factoryUUID, CFUUIDRef* typeUUID);

		// extern Boolean CFPlugInRegisterFactoryFunction (CFUUIDRef factoryUUID, CFPlugInFactoryFunction func) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFPlugInRegisterFactoryFunction (CFUUIDRef* factoryUUID, CFPlugInFactoryFunction* func);

		// extern Boolean CFPlugInRegisterFactoryFunctionByName (CFUUIDRef factoryUUID, CFPlugInRef plugIn, CFStringRef functionName) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFPlugInRegisterFactoryFunctionByName (CFUUIDRef* factoryUUID, CFPlugInRef* plugIn, CFStringRef* functionName);

		// extern Boolean CFPlugInUnregisterFactory (CFUUIDRef factoryUUID) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFPlugInUnregisterFactory (CFUUIDRef* factoryUUID);

		// extern Boolean CFPlugInRegisterPlugInType (CFUUIDRef factoryUUID, CFUUIDRef typeUUID) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFPlugInRegisterPlugInType (CFUUIDRef* factoryUUID, CFUUIDRef* typeUUID);

		// extern Boolean CFPlugInUnregisterPlugInType (CFUUIDRef factoryUUID, CFUUIDRef typeUUID) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFPlugInUnregisterPlugInType (CFUUIDRef* factoryUUID, CFUUIDRef* typeUUID);

		// extern void CFPlugInAddInstanceForFactory (CFUUIDRef factoryID) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFPlugInAddInstanceForFactory (CFUUIDRef* factoryID);

		// extern void CFPlugInRemoveInstanceForFactory (CFUUIDRef factoryID) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFPlugInRemoveInstanceForFactory (CFUUIDRef* factoryID);

		// extern Boolean CFPlugInInstanceGetInterfaceFunctionTable (CFPlugInInstanceRef instance, CFStringRef interfaceName, void **ftbl) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFPlugInInstanceGetInterfaceFunctionTable (CFPlugInInstanceRef* instance, CFStringRef* interfaceName, void** ftbl);

		// extern CFStringRef CFPlugInInstanceGetFactoryName (CFPlugInInstanceRef instance) __attribute__((cf_returns_retained)) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFPlugInInstanceGetFactoryName (CFPlugInInstanceRef* instance);

		// extern void * CFPlugInInstanceGetInstanceData (CFPlugInInstanceRef instance) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* CFPlugInInstanceGetInstanceData (CFPlugInInstanceRef* instance);

		// extern CFTypeID CFPlugInInstanceGetTypeID () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFPlugInInstanceGetTypeID ();

		// extern CFPlugInInstanceRef CFPlugInInstanceCreateWithInstanceDataSize (CFAllocatorRef allocator, CFIndex instanceDataSize, CFPlugInInstanceDeallocateInstanceDataFunction deallocateInstanceFunction, CFStringRef factoryName, CFPlugInInstanceGetInterfaceFunction getInterfaceFunction) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFPlugInInstanceRef* CFPlugInInstanceCreateWithInstanceDataSize (CFAllocatorRef* allocator, nint instanceDataSize, CFPlugInInstanceDeallocateInstanceDataFunction* deallocateInstanceFunction, CFStringRef* factoryName, CFPlugInInstanceGetInterfaceFunction* getInterfaceFunction);

		// extern CFTypeID CFMachPortGetTypeID () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFMachPortGetTypeID ();

		// extern CFMachPortRef CFMachPortCreate (CFAllocatorRef allocator, CFMachPortCallBack callout, CFMachPortContext *context, Boolean *shouldFreeInfo) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFMachPortRef* CFMachPortCreate (CFAllocatorRef* allocator, CFMachPortCallBack* callout, CFMachPortContext* context, byte* shouldFreeInfo);

		// extern CFMachPortRef CFMachPortCreateWithPort (CFAllocatorRef allocator, mach_port_t portNum, CFMachPortCallBack callout, CFMachPortContext *context, Boolean *shouldFreeInfo) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFMachPortRef* CFMachPortCreateWithPort (CFAllocatorRef* allocator, uint portNum, CFMachPortCallBack* callout, CFMachPortContext* context, byte* shouldFreeInfo);

		// extern mach_port_t CFMachPortGetPort (CFMachPortRef port) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe uint CFMachPortGetPort (CFMachPortRef* port);

		// extern void CFMachPortGetContext (CFMachPortRef port, CFMachPortContext *context) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFMachPortGetContext (CFMachPortRef* port, CFMachPortContext* context);

		// extern void CFMachPortInvalidate (CFMachPortRef port) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFMachPortInvalidate (CFMachPortRef* port);

		// extern Boolean CFMachPortIsValid (CFMachPortRef port) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFMachPortIsValid (CFMachPortRef* port);

		// extern CFMachPortInvalidationCallBack CFMachPortGetInvalidationCallBack (CFMachPortRef port) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFMachPortInvalidationCallBack* CFMachPortGetInvalidationCallBack (CFMachPortRef* port);

		// extern void CFMachPortSetInvalidationCallBack (CFMachPortRef port, CFMachPortInvalidationCallBack callout) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFMachPortSetInvalidationCallBack (CFMachPortRef* port, CFMachPortInvalidationCallBack* callout);

		// extern CFRunLoopSourceRef CFMachPortCreateRunLoopSource (CFAllocatorRef allocator, CFMachPortRef port, CFIndex order) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFRunLoopSourceRef* CFMachPortCreateRunLoopSource (CFAllocatorRef* allocator, CFMachPortRef* port, nint order);

		// extern CFTypeID CFAttributedStringGetTypeID () __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFAttributedStringGetTypeID ();

		// extern CFAttributedStringRef CFAttributedStringCreate (CFAllocatorRef alloc, CFStringRef str, CFDictionaryRef attributes) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFAttributedStringRef* CFAttributedStringCreate (CFAllocatorRef* alloc, CFStringRef* str, CFDictionaryRef* attributes);

		// extern CFAttributedStringRef CFAttributedStringCreateWithSubstring (CFAllocatorRef alloc, CFAttributedStringRef aStr, CFRange range) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFAttributedStringRef* CFAttributedStringCreateWithSubstring (CFAllocatorRef* alloc, CFAttributedStringRef* aStr, CFRange range);

		// extern CFAttributedStringRef CFAttributedStringCreateCopy (CFAllocatorRef alloc, CFAttributedStringRef aStr) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFAttributedStringRef* CFAttributedStringCreateCopy (CFAllocatorRef* alloc, CFAttributedStringRef* aStr);

		// extern CFStringRef CFAttributedStringGetString (CFAttributedStringRef aStr) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFAttributedStringGetString (CFAttributedStringRef* aStr);

		// extern CFIndex CFAttributedStringGetLength (CFAttributedStringRef aStr) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFAttributedStringGetLength (CFAttributedStringRef* aStr);

		// extern CFDictionaryRef CFAttributedStringGetAttributes (CFAttributedStringRef aStr, CFIndex loc, CFRange *effectiveRange) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFDictionaryRef* CFAttributedStringGetAttributes (CFAttributedStringRef* aStr, nint loc, CFRange* effectiveRange);

		// extern CFTypeRef CFAttributedStringGetAttribute (CFAttributedStringRef aStr, CFIndex loc, CFStringRef attrName, CFRange *effectiveRange) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* CFAttributedStringGetAttribute (CFAttributedStringRef* aStr, nint loc, CFStringRef* attrName, CFRange* effectiveRange);

		// extern CFDictionaryRef CFAttributedStringGetAttributesAndLongestEffectiveRange (CFAttributedStringRef aStr, CFIndex loc, CFRange inRange, CFRange *longestEffectiveRange) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFDictionaryRef* CFAttributedStringGetAttributesAndLongestEffectiveRange (CFAttributedStringRef* aStr, nint loc, CFRange inRange, CFRange* longestEffectiveRange);

		// extern CFTypeRef CFAttributedStringGetAttributeAndLongestEffectiveRange (CFAttributedStringRef aStr, CFIndex loc, CFStringRef attrName, CFRange inRange, CFRange *longestEffectiveRange) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* CFAttributedStringGetAttributeAndLongestEffectiveRange (CFAttributedStringRef* aStr, nint loc, CFStringRef* attrName, CFRange inRange, CFRange* longestEffectiveRange);

		// extern CFMutableAttributedStringRef CFAttributedStringCreateMutableCopy (CFAllocatorRef alloc, CFIndex maxLength, CFAttributedStringRef aStr) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFMutableAttributedStringRef* CFAttributedStringCreateMutableCopy (CFAllocatorRef* alloc, nint maxLength, CFAttributedStringRef* aStr);

		// extern CFMutableAttributedStringRef CFAttributedStringCreateMutable (CFAllocatorRef alloc, CFIndex maxLength) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFMutableAttributedStringRef* CFAttributedStringCreateMutable (CFAllocatorRef* alloc, nint maxLength);

		// extern void CFAttributedStringReplaceString (CFMutableAttributedStringRef aStr, CFRange range, CFStringRef replacement) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFAttributedStringReplaceString (CFMutableAttributedStringRef* aStr, CFRange range, CFStringRef* replacement);

		// extern CFMutableStringRef CFAttributedStringGetMutableString (CFMutableAttributedStringRef aStr) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFMutableStringRef* CFAttributedStringGetMutableString (CFMutableAttributedStringRef* aStr);

		// extern void CFAttributedStringSetAttributes (CFMutableAttributedStringRef aStr, CFRange range, CFDictionaryRef replacement, Boolean clearOtherAttributes) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFAttributedStringSetAttributes (CFMutableAttributedStringRef* aStr, CFRange range, CFDictionaryRef* replacement, byte clearOtherAttributes);

		// extern void CFAttributedStringSetAttribute (CFMutableAttributedStringRef aStr, CFRange range, CFStringRef attrName, CFTypeRef value) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFAttributedStringSetAttribute (CFMutableAttributedStringRef* aStr, CFRange range, CFStringRef* attrName, void* value);

		// extern void CFAttributedStringRemoveAttribute (CFMutableAttributedStringRef aStr, CFRange range, CFStringRef attrName) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFAttributedStringRemoveAttribute (CFMutableAttributedStringRef* aStr, CFRange range, CFStringRef* attrName);

		// extern void CFAttributedStringReplaceAttributedString (CFMutableAttributedStringRef aStr, CFRange range, CFAttributedStringRef replacement) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFAttributedStringReplaceAttributedString (CFMutableAttributedStringRef* aStr, CFRange range, CFAttributedStringRef* replacement);

		// extern void CFAttributedStringBeginEditing (CFMutableAttributedStringRef aStr) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFAttributedStringBeginEditing (CFMutableAttributedStringRef* aStr);

		// extern void CFAttributedStringEndEditing (CFMutableAttributedStringRef aStr) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFAttributedStringEndEditing (CFMutableAttributedStringRef* aStr);

		// extern CFTypeID CFURLEnumeratorGetTypeID () __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFURLEnumeratorGetTypeID ();

		// extern CFURLEnumeratorRef CFURLEnumeratorCreateForDirectoryURL (CFAllocatorRef alloc, CFURLRef directoryURL, CFURLEnumeratorOptions option, CFArrayRef propertyKeys) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFURLEnumeratorRef* CFURLEnumeratorCreateForDirectoryURL (CFAllocatorRef* alloc, CFURLRef* directoryURL, CFURLEnumeratorOptions option, CFArrayRef* propertyKeys);

		// extern CFURLEnumeratorRef CFURLEnumeratorCreateForMountedVolumes (CFAllocatorRef alloc, CFURLEnumeratorOptions option, CFArrayRef propertyKeys) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFURLEnumeratorRef* CFURLEnumeratorCreateForMountedVolumes (CFAllocatorRef* alloc, CFURLEnumeratorOptions option, CFArrayRef* propertyKeys);

		// extern CFURLEnumeratorResult CFURLEnumeratorGetNextURL (CFURLEnumeratorRef enumerator, CFURLRef *url, CFErrorRef *error) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFURLEnumeratorResult CFURLEnumeratorGetNextURL (CFURLEnumeratorRef* enumerator, CFURLRef** url, CFErrorRef** error);

		// extern void CFURLEnumeratorSkipDescendents (CFURLEnumeratorRef enumerator) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFURLEnumeratorSkipDescendents (CFURLEnumeratorRef* enumerator);

		// extern CFIndex CFURLEnumeratorGetDescendentLevel (CFURLEnumeratorRef enumerator) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFURLEnumeratorGetDescendentLevel (CFURLEnumeratorRef* enumerator);

		// extern Boolean CFURLEnumeratorGetSourceDidChange (CFURLEnumeratorRef enumerator) __attribute__((availability(macos, introduced=10.6, deprecated=10.7))) __attribute__((availability(ios, introduced=4.0, deprecated=5.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 6, message: "Use File System Events API instead")]
		[Deprecated (PlatformName.MacOSX, 10, 7, message: "Use File System Events API instead")]
		[Introduced (PlatformName.iOS, 4, 0, message: "Use File System Events API instead")]
		[Deprecated (PlatformName.iOS, 5, 0, message: "Use File System Events API instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use File System Events API instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use File System Events API instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use File System Events API instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use File System Events API instead")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFURLEnumeratorGetSourceDidChange (CFURLEnumeratorRef* enumerator);

		// extern acl_t acl_dup (acl_t acl);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe acl_t* acl_dup (acl_t* acl);

		// extern int acl_free (void *obj_p);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_free (void* obj_p);

		// extern acl_t acl_init (int count);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe acl_t* acl_init (int count);

		// extern int acl_copy_entry (acl_entry_t dest_d, acl_entry_t src_d);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_copy_entry (acl_entry_t* dest_d, acl_entry_t* src_d);

		// extern int acl_create_entry (acl_t *acl_p, acl_entry_t *entry_p);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_create_entry (acl_t** acl_p, acl_entry_t** entry_p);

		// extern int acl_create_entry_np (acl_t *acl_p, acl_entry_t *entry_p, int entry_index);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_create_entry_np (acl_t** acl_p, acl_entry_t** entry_p, int entry_index);

		// extern int acl_delete_entry (acl_t acl, acl_entry_t entry_d);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_delete_entry (acl_t* acl, acl_entry_t* entry_d);

		// extern int acl_get_entry (acl_t acl, int entry_id, acl_entry_t *entry_p);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_get_entry (acl_t* acl, int entry_id, acl_entry_t** entry_p);

		// extern int acl_valid (acl_t acl);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_valid (acl_t* acl);

		// extern int acl_valid_fd_np (int fd, acl_type_t type, acl_t acl);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_valid_fd_np (int fd, acl_type_t type, acl_t* acl);

		// extern int acl_valid_file_np (const char *path, acl_type_t type, acl_t acl);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_valid_file_np (sbyte* path, acl_type_t type, acl_t* acl);

		// extern int acl_valid_link_np (const char *path, acl_type_t type, acl_t acl);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_valid_link_np (sbyte* path, acl_type_t type, acl_t* acl);

		// extern int acl_add_perm (acl_permset_t permset_d, acl_perm_t perm);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_add_perm (acl_permset_t* permset_d, acl_perm_t perm);

		// extern int acl_calc_mask (acl_t *acl_p);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_calc_mask (acl_t** acl_p);

		// extern int acl_clear_perms (acl_permset_t permset_d);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_clear_perms (acl_permset_t* permset_d);

		// extern int acl_delete_perm (acl_permset_t permset_d, acl_perm_t perm);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_delete_perm (acl_permset_t* permset_d, acl_perm_t perm);

		// extern int acl_get_perm_np (acl_permset_t permset_d, acl_perm_t perm);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_get_perm_np (acl_permset_t* permset_d, acl_perm_t perm);

		// extern int acl_get_permset (acl_entry_t entry_d, acl_permset_t *permset_p);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_get_permset (acl_entry_t* entry_d, acl_permset_t** permset_p);

		// extern int acl_set_permset (acl_entry_t entry_d, acl_permset_t permset_d);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_set_permset (acl_entry_t* entry_d, acl_permset_t* permset_d);

		// extern int acl_maximal_permset_mask_np (acl_permset_mask_t *mask_p) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_maximal_permset_mask_np (ulong* mask_p);

		// extern int acl_get_permset_mask_np (acl_entry_t entry_d, acl_permset_mask_t *mask_p) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_get_permset_mask_np (acl_entry_t* entry_d, ulong* mask_p);

		// extern int acl_set_permset_mask_np (acl_entry_t entry_d, acl_permset_mask_t mask) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_set_permset_mask_np (acl_entry_t* entry_d, ulong mask);

		// extern int acl_add_flag_np (acl_flagset_t flagset_d, acl_flag_t flag);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_add_flag_np (acl_flagset_t* flagset_d, acl_flag_t flag);

		// extern int acl_clear_flags_np (acl_flagset_t flagset_d);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_clear_flags_np (acl_flagset_t* flagset_d);

		// extern int acl_delete_flag_np (acl_flagset_t flagset_d, acl_flag_t flag);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_delete_flag_np (acl_flagset_t* flagset_d, acl_flag_t flag);

		// extern int acl_get_flag_np (acl_flagset_t flagset_d, acl_flag_t flag);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_get_flag_np (acl_flagset_t* flagset_d, acl_flag_t flag);

		// extern int acl_get_flagset_np (void *obj_p, acl_flagset_t *flagset_p);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_get_flagset_np (void* obj_p, acl_flagset_t** flagset_p);

		// extern int acl_set_flagset_np (void *obj_p, acl_flagset_t flagset_d);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_set_flagset_np (void* obj_p, acl_flagset_t* flagset_d);

		// extern void * acl_get_qualifier (acl_entry_t entry_d);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* acl_get_qualifier (acl_entry_t* entry_d);

		// extern int acl_get_tag_type (acl_entry_t entry_d, acl_tag_t *tag_type_p);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_get_tag_type (acl_entry_t* entry_d, acl_tag_t* tag_type_p);

		// extern int acl_set_qualifier (acl_entry_t entry_d, const void *tag_qualifier_p);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_set_qualifier (acl_entry_t* entry_d, void* tag_qualifier_p);

		// extern int acl_set_tag_type (acl_entry_t entry_d, acl_tag_t tag_type);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_set_tag_type (acl_entry_t* entry_d, acl_tag_t tag_type);

		// extern int acl_delete_def_file (const char *path_p);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_delete_def_file (sbyte* path_p);

		// extern acl_t acl_get_fd (int fd);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe acl_t* acl_get_fd (int fd);

		// extern acl_t acl_get_fd_np (int fd, acl_type_t type);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe acl_t* acl_get_fd_np (int fd, acl_type_t type);

		// extern acl_t acl_get_file (const char *path_p, acl_type_t type);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe acl_t* acl_get_file (sbyte* path_p, acl_type_t type);

		// extern acl_t acl_get_link_np (const char *path_p, acl_type_t type);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe acl_t* acl_get_link_np (sbyte* path_p, acl_type_t type);

		// extern int acl_set_fd (int fd, acl_t acl);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_set_fd (int fd, acl_t* acl);

		// extern int acl_set_fd_np (int fd, acl_t acl, acl_type_t acl_type);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_set_fd_np (int fd, acl_t* acl, acl_type_t acl_type);

		// extern int acl_set_file (const char *path_p, acl_type_t type, acl_t acl);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_set_file (sbyte* path_p, acl_type_t type, acl_t* acl);

		// extern int acl_set_link_np (const char *path_p, acl_type_t type, acl_t acl);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int acl_set_link_np (sbyte* path_p, acl_type_t type, acl_t* acl);

		// extern ssize_t acl_copy_ext (void *buf_p, acl_t acl, ssize_t size);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint acl_copy_ext (void* buf_p, acl_t* acl, nint size);

		// extern ssize_t acl_copy_ext_native (void *buf_p, acl_t acl, ssize_t size);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint acl_copy_ext_native (void* buf_p, acl_t* acl, nint size);

		// extern acl_t acl_copy_int (const void *buf_p);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe acl_t* acl_copy_int (void* buf_p);

		// extern acl_t acl_copy_int_native (const void *buf_p);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe acl_t* acl_copy_int_native (void* buf_p);

		// extern acl_t acl_from_text (const char *buf_p);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe acl_t* acl_from_text (sbyte* buf_p);

		// extern ssize_t acl_size (acl_t acl);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint acl_size (acl_t* acl);

		// extern char * acl_to_text (acl_t acl, ssize_t *len_p);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* acl_to_text (acl_t* acl, nint* len_p);

		// extern CFTypeID CFFileSecurityGetTypeID () __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFFileSecurityGetTypeID ();

		// extern CFFileSecurityRef CFFileSecurityCreate (CFAllocatorRef allocator) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFFileSecurityRef* CFFileSecurityCreate (CFAllocatorRef* allocator);

		// extern CFFileSecurityRef CFFileSecurityCreateCopy (CFAllocatorRef allocator, CFFileSecurityRef fileSec) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFFileSecurityRef* CFFileSecurityCreateCopy (CFAllocatorRef* allocator, CFFileSecurityRef* fileSec);

		// extern Boolean CFFileSecurityCopyOwnerUUID (CFFileSecurityRef fileSec, CFUUIDRef *ownerUUID) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFFileSecurityCopyOwnerUUID (CFFileSecurityRef* fileSec, CFUUIDRef** ownerUUID);

		// extern Boolean CFFileSecuritySetOwnerUUID (CFFileSecurityRef fileSec, CFUUIDRef ownerUUID) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFFileSecuritySetOwnerUUID (CFFileSecurityRef* fileSec, CFUUIDRef* ownerUUID);

		// extern Boolean CFFileSecurityCopyGroupUUID (CFFileSecurityRef fileSec, CFUUIDRef *groupUUID) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFFileSecurityCopyGroupUUID (CFFileSecurityRef* fileSec, CFUUIDRef** groupUUID);

		// extern Boolean CFFileSecuritySetGroupUUID (CFFileSecurityRef fileSec, CFUUIDRef groupUUID) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFFileSecuritySetGroupUUID (CFFileSecurityRef* fileSec, CFUUIDRef* groupUUID);

		// extern Boolean CFFileSecurityCopyAccessControlList (CFFileSecurityRef fileSec, acl_t *accessControlList) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFFileSecurityCopyAccessControlList (CFFileSecurityRef* fileSec, acl_t** accessControlList);

		// extern Boolean CFFileSecuritySetAccessControlList (CFFileSecurityRef fileSec, acl_t accessControlList) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFFileSecuritySetAccessControlList (CFFileSecurityRef* fileSec, acl_t* accessControlList);

		// extern Boolean CFFileSecurityGetOwner (CFFileSecurityRef fileSec, uid_t *owner) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFFileSecurityGetOwner (CFFileSecurityRef* fileSec, uint* owner);

		// extern Boolean CFFileSecuritySetOwner (CFFileSecurityRef fileSec, uid_t owner) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFFileSecuritySetOwner (CFFileSecurityRef* fileSec, uint owner);

		// extern Boolean CFFileSecurityGetGroup (CFFileSecurityRef fileSec, gid_t *group) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFFileSecurityGetGroup (CFFileSecurityRef* fileSec, uint* group);

		// extern Boolean CFFileSecuritySetGroup (CFFileSecurityRef fileSec, gid_t group) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFFileSecuritySetGroup (CFFileSecurityRef* fileSec, uint group);

		// extern Boolean CFFileSecurityGetMode (CFFileSecurityRef fileSec, mode_t *mode) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFFileSecurityGetMode (CFFileSecurityRef* fileSec, ushort* mode);

		// extern Boolean CFFileSecuritySetMode (CFFileSecurityRef fileSec, mode_t mode) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFFileSecuritySetMode (CFFileSecurityRef* fileSec, ushort mode);

		// extern Boolean CFFileSecurityClearProperties (CFFileSecurityRef fileSec, CFFileSecurityClearOptions clearPropertyMask) __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,8), iOS (6,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFFileSecurityClearProperties (CFFileSecurityRef* fileSec, CFFileSecurityClearOptions clearPropertyMask);

		// extern CFStringRef CFStringTokenizerCopyBestStringLanguage (CFStringRef string, CFRange range) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFStringTokenizerCopyBestStringLanguage (CFStringRef* @string, CFRange range);

		// extern CFTypeID CFStringTokenizerGetTypeID () __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFStringTokenizerGetTypeID ();

		// extern CFStringTokenizerRef CFStringTokenizerCreate (CFAllocatorRef alloc, CFStringRef string, CFRange range, CFOptionFlags options, CFLocaleRef locale) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringTokenizerRef* CFStringTokenizerCreate (CFAllocatorRef* alloc, CFStringRef* @string, CFRange range, nuint options, CFLocaleRef* locale);

		// extern void CFStringTokenizerSetString (CFStringTokenizerRef tokenizer, CFStringRef string, CFRange range) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFStringTokenizerSetString (CFStringTokenizerRef* tokenizer, CFStringRef* @string, CFRange range);

		// extern CFStringTokenizerTokenType CFStringTokenizerGoToTokenAtIndex (CFStringTokenizerRef tokenizer, CFIndex index) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringTokenizerTokenType CFStringTokenizerGoToTokenAtIndex (CFStringTokenizerRef* tokenizer, nint index);

		// extern CFStringTokenizerTokenType CFStringTokenizerAdvanceToNextToken (CFStringTokenizerRef tokenizer) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringTokenizerTokenType CFStringTokenizerAdvanceToNextToken (CFStringTokenizerRef* tokenizer);

		// extern CFRange CFStringTokenizerGetCurrentTokenRange (CFStringTokenizerRef tokenizer) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFRange CFStringTokenizerGetCurrentTokenRange (CFStringTokenizerRef* tokenizer);

		// extern CFTypeRef CFStringTokenizerCopyCurrentTokenAttribute (CFStringTokenizerRef tokenizer, CFOptionFlags attribute) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* CFStringTokenizerCopyCurrentTokenAttribute (CFStringTokenizerRef* tokenizer, nuint attribute);

		// extern CFIndex CFStringTokenizerGetCurrentSubTokens (CFStringTokenizerRef tokenizer, CFRange *ranges, CFIndex maxRangeLength, CFMutableArrayRef derivedSubTokens) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFStringTokenizerGetCurrentSubTokens (CFStringTokenizerRef* tokenizer, CFRange* ranges, nint maxRangeLength, CFMutableArrayRef* derivedSubTokens);

		// extern CFTypeID CFFileDescriptorGetTypeID () __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFFileDescriptorGetTypeID ();

		// extern CFFileDescriptorRef CFFileDescriptorCreate (CFAllocatorRef allocator, CFFileDescriptorNativeDescriptor fd, Boolean closeOnInvalidate, CFFileDescriptorCallBack callout, const CFFileDescriptorContext *context) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFFileDescriptorRef* CFFileDescriptorCreate (CFAllocatorRef* allocator, int fd, byte closeOnInvalidate, CFFileDescriptorCallBack* callout, CFFileDescriptorContext* context);

		// extern CFFileDescriptorNativeDescriptor CFFileDescriptorGetNativeDescriptor (CFFileDescriptorRef f) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int CFFileDescriptorGetNativeDescriptor (CFFileDescriptorRef* f);

		// extern void CFFileDescriptorGetContext (CFFileDescriptorRef f, CFFileDescriptorContext *context) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFFileDescriptorGetContext (CFFileDescriptorRef* f, CFFileDescriptorContext* context);

		// extern void CFFileDescriptorEnableCallBacks (CFFileDescriptorRef f, CFOptionFlags callBackTypes) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFFileDescriptorEnableCallBacks (CFFileDescriptorRef* f, nuint callBackTypes);

		// extern void CFFileDescriptorDisableCallBacks (CFFileDescriptorRef f, CFOptionFlags callBackTypes) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFFileDescriptorDisableCallBacks (CFFileDescriptorRef* f, nuint callBackTypes);

		// extern void CFFileDescriptorInvalidate (CFFileDescriptorRef f) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFFileDescriptorInvalidate (CFFileDescriptorRef* f);

		// extern Boolean CFFileDescriptorIsValid (CFFileDescriptorRef f) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFFileDescriptorIsValid (CFFileDescriptorRef* f);

		// extern CFRunLoopSourceRef CFFileDescriptorCreateRunLoopSource (CFAllocatorRef allocator, CFFileDescriptorRef f, CFIndex order) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFRunLoopSourceRef* CFFileDescriptorCreateRunLoopSource (CFAllocatorRef* allocator, CFFileDescriptorRef* f, nint order);

		// extern CFTypeID CFUserNotificationGetTypeID () __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((cf_audited_transfer));
		[NoWatch, NoTV, NoiOS, Mac (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFUserNotificationGetTypeID ();

		// extern CFUserNotificationRef CFUserNotificationCreate (CFAllocatorRef allocator, CFTimeInterval timeout, CFOptionFlags flags, SInt32 *error, CFDictionaryRef dictionary) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((cf_audited_transfer));
		[NoWatch, NoTV, NoiOS, Mac (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFUserNotificationRef* CFUserNotificationCreate (CFAllocatorRef* allocator, double timeout, nuint flags, int* error, CFDictionaryRef* dictionary);

		// extern SInt32 CFUserNotificationReceiveResponse (CFUserNotificationRef userNotification, CFTimeInterval timeout, CFOptionFlags *responseFlags) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((cf_audited_transfer));
		[NoWatch, NoTV, NoiOS, Mac (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int CFUserNotificationReceiveResponse (CFUserNotificationRef* userNotification, double timeout, nuint* responseFlags);

		// extern CFStringRef CFUserNotificationGetResponseValue (CFUserNotificationRef userNotification, CFStringRef key, CFIndex idx) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((cf_audited_transfer));
		[NoWatch, NoTV, NoiOS, Mac (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFUserNotificationGetResponseValue (CFUserNotificationRef* userNotification, CFStringRef* key, nint idx);

		// extern CFDictionaryRef CFUserNotificationGetResponseDictionary (CFUserNotificationRef userNotification) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((cf_audited_transfer));
		[NoWatch, NoTV, NoiOS, Mac (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFDictionaryRef* CFUserNotificationGetResponseDictionary (CFUserNotificationRef* userNotification);

		// extern SInt32 CFUserNotificationUpdate (CFUserNotificationRef userNotification, CFTimeInterval timeout, CFOptionFlags flags, CFDictionaryRef dictionary) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((cf_audited_transfer));
		[NoWatch, NoTV, NoiOS, Mac (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int CFUserNotificationUpdate (CFUserNotificationRef* userNotification, double timeout, nuint flags, CFDictionaryRef* dictionary);

		// extern SInt32 CFUserNotificationCancel (CFUserNotificationRef userNotification) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((cf_audited_transfer));
		[NoWatch, NoTV, NoiOS, Mac (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int CFUserNotificationCancel (CFUserNotificationRef* userNotification);

		// extern CFRunLoopSourceRef CFUserNotificationCreateRunLoopSource (CFAllocatorRef allocator, CFUserNotificationRef userNotification, CFUserNotificationCallBack callout, CFIndex order) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((cf_audited_transfer));
		[NoWatch, NoTV, NoiOS, Mac (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFRunLoopSourceRef* CFUserNotificationCreateRunLoopSource (CFAllocatorRef* allocator, CFUserNotificationRef* userNotification, CFUserNotificationCallBack* callout, nint order);

		// extern SInt32 CFUserNotificationDisplayNotice (CFTimeInterval timeout, CFOptionFlags flags, CFURLRef iconURL, CFURLRef soundURL, CFURLRef localizationURL, CFStringRef alertHeader, CFStringRef alertMessage, CFStringRef defaultButtonTitle) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((cf_audited_transfer));
		[NoWatch, NoTV, NoiOS, Mac (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int CFUserNotificationDisplayNotice (double timeout, nuint flags, CFURLRef* iconURL, CFURLRef* soundURL, CFURLRef* localizationURL, CFStringRef* alertHeader, CFStringRef* alertMessage, CFStringRef* defaultButtonTitle);

		// extern SInt32 CFUserNotificationDisplayAlert (CFTimeInterval timeout, CFOptionFlags flags, CFURLRef iconURL, CFURLRef soundURL, CFURLRef localizationURL, CFStringRef alertHeader, CFStringRef alertMessage, CFStringRef defaultButtonTitle, CFStringRef alternateButtonTitle, CFStringRef otherButtonTitle, CFOptionFlags *responseFlags) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((cf_audited_transfer));
		[NoWatch, NoTV, NoiOS, Mac (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int CFUserNotificationDisplayAlert (double timeout, nuint flags, CFURLRef* iconURL, CFURLRef* soundURL, CFURLRef* localizationURL, CFStringRef* alertHeader, CFStringRef* alertMessage, CFStringRef* defaultButtonTitle, CFStringRef* alternateButtonTitle, CFStringRef* otherButtonTitle, nuint* responseFlags);

		// CFOptionFlags CFUserNotificationCheckBoxChecked (CFIndex i) __attribute__((always_inline)) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((cf_audited_transfer));
		[NoWatch, NoTV, NoiOS, Mac (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFUserNotificationCheckBoxChecked (nint i);

		// CFOptionFlags CFUserNotificationSecureTextField (CFIndex i) __attribute__((always_inline)) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((cf_audited_transfer));
		[NoWatch, NoTV, NoiOS, Mac (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFUserNotificationSecureTextField (nint i);

		// CFOptionFlags CFUserNotificationPopUpSelection (CFIndex n) __attribute__((always_inline)) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((cf_audited_transfer));
		[NoWatch, NoTV, NoiOS, Mac (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFUserNotificationPopUpSelection (nint n);

		// extern NSString * _Nonnull NSStringFromSelector (SEL _Nonnull aSelector);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSString NSStringFromSelector (Selector aSelector);

		// extern SEL _Nonnull NSSelectorFromString (NSString * _Nonnull aSelectorName);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern Selector NSSelectorFromString (NSString aSelectorName);

		// extern NSString * _Nonnull NSStringFromClass (Class _Nonnull aClass);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSString NSStringFromClass (Class aClass);

		// extern Class _Nullable NSClassFromString (NSString * _Nonnull aClassName);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern Class NSClassFromString (NSString aClassName);

		// extern NSString * _Nonnull NSStringFromProtocol (Protocol * _Nonnull proto) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSString NSStringFromProtocol (Protocol proto);

		// extern Protocol * _Nullable NSProtocolFromString (NSString * _Nonnull namestr) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern Protocol NSProtocolFromString (NSString namestr);

		// extern const char * _Nonnull NSGetSizeAndAlignment (const char * _Nonnull typePtr, NSUInteger * _Nullable sizep, NSUInteger * _Nullable alignp);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe sbyte* NSGetSizeAndAlignment (sbyte* typePtr, [NullAllowed] nuint* sizep, [NullAllowed] nuint* alignp);

		// extern void NSLog (id, ...) __attribute__((format(NSString, 1, 2)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void NSLog (NSObject, IntPtr varArgs);

		// extern void NSLog (NSString * _Nonnull format, ...) __attribute__((format(NSString, 1, 2))) __attribute__((not_tail_called));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void NSLog (NSString format, IntPtr varArgs);

		// extern void NSLogv (id, __builtin_va_list) __attribute__((format(NSString, 1, 0)));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void NSLogv (NSObject, sbyte*);

		// extern void NSLogv (NSString * _Nonnull format, va_list args) __attribute__((format(NSString, 1, 0))) __attribute__((not_tail_called));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void NSLogv (NSString format, sbyte* args);

		// extern NSZone * _Nonnull NSDefaultMallocZone () __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe NSZone* NSDefaultMallocZone ();

		// extern NSZone * _Nonnull NSCreateZone (NSUInteger startSize, NSUInteger granularity, BOOL canFree) __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe NSZone* NSCreateZone (nuint startSize, nuint granularity, bool canFree);

		// extern void NSRecycleZone (NSZone * _Nonnull zone) __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void NSRecycleZone (NSZone* zone);

		// extern void NSSetZoneName (NSZone * _Nullable zone, NSString * _Nonnull name) __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void NSSetZoneName ([NullAllowed] NSZone* zone, NSString name);

		// extern NSString * _Nonnull NSZoneName (NSZone * _Nullable zone) __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe NSString NSZoneName ([NullAllowed] NSZone* zone);

		// extern NSZone * _Nullable NSZoneFromPointer (void * _Nonnull ptr) __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe NSZone* NSZoneFromPointer (void* ptr);

		// extern void * _Nonnull NSZoneMalloc (NSZone * _Nullable zone, NSUInteger size) __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* NSZoneMalloc ([NullAllowed] NSZone* zone, nuint size);

		// extern void * _Nonnull NSZoneCalloc (NSZone * _Nullable zone, NSUInteger numElems, NSUInteger byteSize) __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* NSZoneCalloc ([NullAllowed] NSZone* zone, nuint numElems, nuint byteSize);

		// extern void * _Nonnull NSZoneRealloc (NSZone * _Nullable zone, void * _Nullable ptr, NSUInteger size) __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* NSZoneRealloc ([NullAllowed] NSZone* zone, [NullAllowed] void* ptr, nuint size);

		// extern void NSZoneFree (NSZone * _Nullable zone, void * _Nonnull ptr) __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void NSZoneFree ([NullAllowed] NSZone* zone, void* ptr);

		// id _Nullable NSMakeCollectable (CFTypeRef _Nullable cf) __attribute__((always_inline)) __attribute__((ns_returns_retained)) __attribute__((ns_returns_retained)) __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe NSObject NSMakeCollectable ([NullAllowed] void* cf);

		// id _Nullable NSMakeCollectable (CFTypeRef _Nullable cf) __attribute__((availability(swift, unavailable))) __attribute__((always_inline)) __attribute__((ns_returns_retained)) __attribute__((ns_returns_retained));
		[Unavailable (PlatformName.Swift)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe NSObject NSMakeCollectable ([NullAllowed] void* cf);

		// extern NSUInteger NSPageSize ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint NSPageSize ();

		// extern NSUInteger NSLogPageSize ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint NSLogPageSize ();

		// extern NSUInteger NSRoundUpToMultipleOfPageSize (NSUInteger bytes);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint NSRoundUpToMultipleOfPageSize (nuint bytes);

		// extern NSUInteger NSRoundDownToMultipleOfPageSize (NSUInteger bytes);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint NSRoundDownToMultipleOfPageSize (nuint bytes);

		// extern void * _Nonnull NSAllocateMemoryPages (NSUInteger bytes);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* NSAllocateMemoryPages (nuint bytes);

		// extern void NSDeallocateMemoryPages (void * _Nonnull ptr, NSUInteger bytes);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void NSDeallocateMemoryPages (void* ptr, nuint bytes);

		// extern void NSCopyMemoryPages (const void * _Nonnull source, void * _Nonnull dest, NSUInteger bytes);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void NSCopyMemoryPages (void* source, void* dest, nuint bytes);

		// extern NSUInteger NSRealMemoryAvailable () __attribute__((availability(macos, introduced=10.0, deprecated=10.8))) __attribute__((availability(ios, introduced=2.0, deprecated=6.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use NSProcessInfo instead")]
		[Deprecated (PlatformName.MacOSX, 10, 8, message: "Use NSProcessInfo instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use NSProcessInfo instead")]
		[Deprecated (PlatformName.iOS, 6, 0, message: "Use NSProcessInfo instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use NSProcessInfo instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use NSProcessInfo instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use NSProcessInfo instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use NSProcessInfo instead")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint NSRealMemoryAvailable ();

		// extern id _Nonnull NSAllocateObject (Class _Nonnull aClass, NSUInteger extraBytes, NSZone * _Nullable zone);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe NSObject NSAllocateObject (Class aClass, nuint extraBytes, [NullAllowed] NSZone* zone);

		// extern void NSDeallocateObject (id _Nonnull object);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void NSDeallocateObject (NSObject @object);

		// extern id _Nonnull NSCopyObject (id _Nonnull object, NSUInteger extraBytes, NSZone * _Nullable zone) __attribute__((availability(macos, introduced=10.0, deprecated=10.8))) __attribute__((availability(ios, introduced=2.0, deprecated=6.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Not supported")]
		[Deprecated (PlatformName.MacOSX, 10, 8, message: "Not supported")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Not supported")]
		[Deprecated (PlatformName.iOS, 6, 0, message: "Not supported")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Not supported")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Not supported")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Not supported")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Not supported")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe NSObject NSCopyObject (NSObject @object, nuint extraBytes, [NullAllowed] NSZone* zone);

		// extern BOOL NSShouldRetainWithZone (id _Nonnull anObject, NSZone * _Nullable requestedZone);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool NSShouldRetainWithZone (NSObject anObject, [NullAllowed] NSZone* requestedZone);

		// extern void NSIncrementExtraRefCount (id _Nonnull object);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void NSIncrementExtraRefCount (NSObject @object);

		// extern BOOL NSDecrementExtraRefCountWasZero (id _Nonnull object);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool NSDecrementExtraRefCountWasZero (NSObject @object);

		// extern NSUInteger NSExtraRefCount (id _Nonnull object);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint NSExtraRefCount (NSObject @object);

		// CFTypeRef _Nullable CFBridgingRetain (id _Nullable X) __attribute__((always_inline)) __attribute__((cf_returns_retained));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe void* CFBridgingRetain ([NullAllowed] NSObject X);

		// id _Nullable CFBridgingRelease (CFTypeRef _Nullable X) __attribute__((always_inline)) __attribute__((ns_returns_retained));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe NSObject CFBridgingRelease ([NullAllowed] void* X);

		// NSRange NSMakeRange (NSUInteger loc, NSUInteger len) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSRange NSMakeRange (nuint loc, nuint len);

		// NSUInteger NSMaxRange (NSRange range) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint NSMaxRange (NSRange range);

		// BOOL NSLocationInRange (NSUInteger loc, NSRange range) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool NSLocationInRange (nuint loc, NSRange range);

		// BOOL NSEqualRanges (NSRange range1, NSRange range2) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool NSEqualRanges (NSRange range1, NSRange range2);

		// extern NSRange NSUnionRange (NSRange range1, NSRange range2);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSRange NSUnionRange (NSRange range1, NSRange range2);

		// extern NSRange NSIntersectionRange (NSRange range1, NSRange range2);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSRange NSIntersectionRange (NSRange range1, NSRange range2);

		// extern NSString * _Nonnull NSStringFromRange (NSRange range);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSString NSStringFromRange (NSRange range);

		// extern NSRange NSRangeFromString (NSString * _Nonnull aString);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSRange NSRangeFromString (NSString aString);

		// long NSHostByteOrder () __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nint NSHostByteOrder ();

		// unsigned short NSSwapShort (unsigned short inv) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ushort NSSwapShort (ushort inv);

		// unsigned int NSSwapInt (unsigned int inv) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint NSSwapInt (uint inv);

		// unsigned long NSSwapLong (unsigned long inv) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint NSSwapLong (nuint inv);

		// unsigned long long NSSwapLongLong (unsigned long long inv) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ulong NSSwapLongLong (ulong inv);

		// unsigned short NSSwapBigShortToHost (unsigned short x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ushort NSSwapBigShortToHost (ushort x);

		// unsigned int NSSwapBigIntToHost (unsigned int x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint NSSwapBigIntToHost (uint x);

		// unsigned long NSSwapBigLongToHost (unsigned long x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint NSSwapBigLongToHost (nuint x);

		// unsigned long long NSSwapBigLongLongToHost (unsigned long long x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ulong NSSwapBigLongLongToHost (ulong x);

		// unsigned short NSSwapHostShortToBig (unsigned short x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ushort NSSwapHostShortToBig (ushort x);

		// unsigned int NSSwapHostIntToBig (unsigned int x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint NSSwapHostIntToBig (uint x);

		// unsigned long NSSwapHostLongToBig (unsigned long x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint NSSwapHostLongToBig (nuint x);

		// unsigned long long NSSwapHostLongLongToBig (unsigned long long x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ulong NSSwapHostLongLongToBig (ulong x);

		// unsigned short NSSwapLittleShortToHost (unsigned short x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ushort NSSwapLittleShortToHost (ushort x);

		// unsigned int NSSwapLittleIntToHost (unsigned int x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint NSSwapLittleIntToHost (uint x);

		// unsigned long NSSwapLittleLongToHost (unsigned long x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint NSSwapLittleLongToHost (nuint x);

		// unsigned long long NSSwapLittleLongLongToHost (unsigned long long x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ulong NSSwapLittleLongLongToHost (ulong x);

		// unsigned short NSSwapHostShortToLittle (unsigned short x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ushort NSSwapHostShortToLittle (ushort x);

		// unsigned int NSSwapHostIntToLittle (unsigned int x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint NSSwapHostIntToLittle (uint x);

		// unsigned long NSSwapHostLongToLittle (unsigned long x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint NSSwapHostLongToLittle (nuint x);

		// unsigned long long NSSwapHostLongLongToLittle (unsigned long long x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern ulong NSSwapHostLongLongToLittle (ulong x);

		// NSSwappedFloat NSConvertHostFloatToSwapped (float x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSSwappedFloat NSConvertHostFloatToSwapped (float x);

		// float NSConvertSwappedFloatToHost (NSSwappedFloat x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float NSConvertSwappedFloatToHost (NSSwappedFloat x);

		// NSSwappedDouble NSConvertHostDoubleToSwapped (double x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSSwappedDouble NSConvertHostDoubleToSwapped (double x);

		// double NSConvertSwappedDoubleToHost (NSSwappedDouble x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double NSConvertSwappedDoubleToHost (NSSwappedDouble x);

		// NSSwappedFloat NSSwapFloat (NSSwappedFloat x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSSwappedFloat NSSwapFloat (NSSwappedFloat x);

		// NSSwappedDouble NSSwapDouble (NSSwappedDouble x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSSwappedDouble NSSwapDouble (NSSwappedDouble x);

		// double NSSwapBigDoubleToHost (NSSwappedDouble x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double NSSwapBigDoubleToHost (NSSwappedDouble x);

		// float NSSwapBigFloatToHost (NSSwappedFloat x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float NSSwapBigFloatToHost (NSSwappedFloat x);

		// NSSwappedDouble NSSwapHostDoubleToBig (double x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSSwappedDouble NSSwapHostDoubleToBig (double x);

		// NSSwappedFloat NSSwapHostFloatToBig (float x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSSwappedFloat NSSwapHostFloatToBig (float x);

		// double NSSwapLittleDoubleToHost (NSSwappedDouble x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double NSSwapLittleDoubleToHost (NSSwappedDouble x);

		// float NSSwapLittleFloatToHost (NSSwappedFloat x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern float NSSwapLittleFloatToHost (NSSwappedFloat x);

		// NSSwappedDouble NSSwapHostDoubleToLittle (double x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSSwappedDouble NSSwapHostDoubleToLittle (double x);

		// NSSwappedFloat NSSwapHostFloatToLittle (float x) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSSwappedFloat NSSwapHostFloatToLittle (float x);

		// BOOL NSDecimalIsNotANumber (const NSDecimal * _Nonnull dcm) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool NSDecimalIsNotANumber (NSDecimal* dcm);

		// extern void NSDecimalCopy (NSDecimal * _Nonnull destination, const NSDecimal * _Nonnull source);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void NSDecimalCopy (NSDecimal* destination, NSDecimal* source);

		// extern void NSDecimalCompact (NSDecimal * _Nonnull number);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void NSDecimalCompact (NSDecimal* number);

		// extern NSComparisonResult NSDecimalCompare (const NSDecimal * _Nonnull leftOperand, const NSDecimal * _Nonnull rightOperand);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe NSComparisonResult NSDecimalCompare (NSDecimal* leftOperand, NSDecimal* rightOperand);

		// extern void NSDecimalRound (NSDecimal * _Nonnull result, const NSDecimal * _Nonnull number, NSInteger scale, NSRoundingMode roundingMode);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void NSDecimalRound (NSDecimal* result, NSDecimal* number, nint scale, NSRoundingMode roundingMode);

		// extern NSCalculationError NSDecimalNormalize (NSDecimal * _Nonnull number1, NSDecimal * _Nonnull number2, NSRoundingMode roundingMode);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe NSCalculationError NSDecimalNormalize (NSDecimal* number1, NSDecimal* number2, NSRoundingMode roundingMode);

		// extern NSCalculationError NSDecimalAdd (NSDecimal * _Nonnull result, const NSDecimal * _Nonnull leftOperand, const NSDecimal * _Nonnull rightOperand, NSRoundingMode roundingMode);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe NSCalculationError NSDecimalAdd (NSDecimal* result, NSDecimal* leftOperand, NSDecimal* rightOperand, NSRoundingMode roundingMode);

		// extern NSCalculationError NSDecimalSubtract (NSDecimal * _Nonnull result, const NSDecimal * _Nonnull leftOperand, const NSDecimal * _Nonnull rightOperand, NSRoundingMode roundingMode);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe NSCalculationError NSDecimalSubtract (NSDecimal* result, NSDecimal* leftOperand, NSDecimal* rightOperand, NSRoundingMode roundingMode);

		// extern NSCalculationError NSDecimalMultiply (NSDecimal * _Nonnull result, const NSDecimal * _Nonnull leftOperand, const NSDecimal * _Nonnull rightOperand, NSRoundingMode roundingMode);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe NSCalculationError NSDecimalMultiply (NSDecimal* result, NSDecimal* leftOperand, NSDecimal* rightOperand, NSRoundingMode roundingMode);

		// extern NSCalculationError NSDecimalDivide (NSDecimal * _Nonnull result, const NSDecimal * _Nonnull leftOperand, const NSDecimal * _Nonnull rightOperand, NSRoundingMode roundingMode);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe NSCalculationError NSDecimalDivide (NSDecimal* result, NSDecimal* leftOperand, NSDecimal* rightOperand, NSRoundingMode roundingMode);

		// extern NSCalculationError NSDecimalPower (NSDecimal * _Nonnull result, const NSDecimal * _Nonnull number, NSUInteger power, NSRoundingMode roundingMode);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe NSCalculationError NSDecimalPower (NSDecimal* result, NSDecimal* number, nuint power, NSRoundingMode roundingMode);

		// extern NSCalculationError NSDecimalMultiplyByPowerOf10 (NSDecimal * _Nonnull result, const NSDecimal * _Nonnull number, short power, NSRoundingMode roundingMode);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe NSCalculationError NSDecimalMultiplyByPowerOf10 (NSDecimal* result, NSDecimal* number, short power, NSRoundingMode roundingMode);

		// extern NSString * _Nonnull NSDecimalString (const NSDecimal * _Nonnull dcm, id _Nullable locale);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe NSString NSDecimalString (NSDecimal* dcm, [NullAllowed] NSObject locale);

		// extern NSUncaughtExceptionHandler * _Nullable NSGetUncaughtExceptionHandler ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe NSUncaughtExceptionHandler* NSGetUncaughtExceptionHandler ();

		// extern void NSSetUncaughtExceptionHandler (NSUncaughtExceptionHandler * _Nullable);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void NSSetUncaughtExceptionHandler ([NullAllowed] NSUncaughtExceptionHandler*);

		// extern NSString * _Nonnull NSUserName ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSString NSUserName ();

		// extern NSString * _Nonnull NSFullUserName ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSString NSFullUserName ();

		// extern NSString * _Nonnull NSHomeDirectory ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSString NSHomeDirectory ();

		// extern NSString * _Nullable NSHomeDirectoryForUser (NSString * _Nullable userName);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern NSString NSHomeDirectoryForUser ([NullAllowed] NSString userName);

		// extern NSString * _Nonnull NSTemporaryDirectory ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSString NSTemporaryDirectory ();

		// extern NSString * _Nonnull NSOpenStepRootDirectory ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSString NSOpenStepRootDirectory ();

		// extern NSArray<NSString *> * _Nonnull NSSearchPathForDirectoriesInDomains (NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSString[] NSSearchPathForDirectoriesInDomains (NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, bool expandTilde);

		// extern void NSFreeHashTable (NSHashTable * _Nonnull table);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void NSFreeHashTable (NSHashTable table);

		// extern void NSResetHashTable (NSHashTable * _Nonnull table);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void NSResetHashTable (NSHashTable table);

		// extern BOOL NSCompareHashTables (NSHashTable * _Nonnull table1, NSHashTable * _Nonnull table2);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool NSCompareHashTables (NSHashTable table1, NSHashTable table2);

		// extern NSHashTable * _Nonnull NSCopyHashTableWithZone (NSHashTable * _Nonnull table, NSZone * _Nullable zone);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe NSHashTable NSCopyHashTableWithZone (NSHashTable table, [NullAllowed] NSZone* zone);

		// extern void * _Nonnull NSHashGet (NSHashTable * _Nonnull table, const void * _Nullable pointer);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* NSHashGet (NSHashTable table, [NullAllowed] void* pointer);

		// extern void NSHashInsert (NSHashTable * _Nonnull table, const void * _Nullable pointer);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void NSHashInsert (NSHashTable table, [NullAllowed] void* pointer);

		// extern void NSHashInsertKnownAbsent (NSHashTable * _Nonnull table, const void * _Nullable pointer);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void NSHashInsertKnownAbsent (NSHashTable table, [NullAllowed] void* pointer);

		// extern void * _Nullable NSHashInsertIfAbsent (NSHashTable * _Nonnull table, const void * _Nullable pointer);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe void* NSHashInsertIfAbsent (NSHashTable table, [NullAllowed] void* pointer);

		// extern void NSHashRemove (NSHashTable * _Nonnull table, const void * _Nullable pointer);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void NSHashRemove (NSHashTable table, [NullAllowed] void* pointer);

		// extern NSHashEnumerator NSEnumerateHashTable (NSHashTable * _Nonnull table);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSHashEnumerator NSEnumerateHashTable (NSHashTable table);

		// extern void * _Nullable NSNextHashEnumeratorItem (NSHashEnumerator * _Nonnull enumerator);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe void* NSNextHashEnumeratorItem (NSHashEnumerator* enumerator);

		// extern void NSEndHashTableEnumeration (NSHashEnumerator * _Nonnull enumerator);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void NSEndHashTableEnumeration (NSHashEnumerator* enumerator);

		// extern NSUInteger NSCountHashTable (NSHashTable * _Nonnull table);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint NSCountHashTable (NSHashTable table);

		// extern NSString * _Nonnull NSStringFromHashTable (NSHashTable * _Nonnull table);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSString NSStringFromHashTable (NSHashTable table);

		// extern NSArray * _Nonnull NSAllHashTableObjects (NSHashTable * _Nonnull table);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke), Verify (StronglyTypedNSArray)]
		static extern NSObject[] NSAllHashTableObjects (NSHashTable table);

		// extern NSHashTable * _Nonnull NSCreateHashTableWithZone (NSHashTableCallBacks callBacks, NSUInteger capacity, NSZone * _Nullable zone);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe NSHashTable NSCreateHashTableWithZone (NSHashTableCallBacks callBacks, nuint capacity, [NullAllowed] NSZone* zone);

		// extern NSHashTable * _Nonnull NSCreateHashTable (NSHashTableCallBacks callBacks, NSUInteger capacity);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSHashTable NSCreateHashTable (NSHashTableCallBacks callBacks, nuint capacity);

		// extern void NSFreeMapTable (NSMapTable * _Nonnull table);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void NSFreeMapTable (NSMapTable table);

		// extern void NSResetMapTable (NSMapTable * _Nonnull table);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void NSResetMapTable (NSMapTable table);

		// extern BOOL NSCompareMapTables (NSMapTable * _Nonnull table1, NSMapTable * _Nonnull table2);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool NSCompareMapTables (NSMapTable table1, NSMapTable table2);

		// extern NSMapTable * _Nonnull NSCopyMapTableWithZone (NSMapTable * _Nonnull table, NSZone * _Nullable zone);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe NSMapTable NSCopyMapTableWithZone (NSMapTable table, [NullAllowed] NSZone* zone);

		// extern BOOL NSMapMember (NSMapTable * _Nonnull table, const void * _Nonnull key, void * _Nullable * _Nullable originalKey, void * _Nullable * _Nullable value);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool NSMapMember (NSMapTable table, void* key, [NullAllowed] void** originalKey, [NullAllowed] void** value);

		// extern void * _Nullable NSMapGet (NSMapTable * _Nonnull table, const void * _Nullable key);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe void* NSMapGet (NSMapTable table, [NullAllowed] void* key);

		// extern void NSMapInsert (NSMapTable * _Nonnull table, const void * _Nullable key, const void * _Nullable value);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void NSMapInsert (NSMapTable table, [NullAllowed] void* key, [NullAllowed] void* value);

		// extern void NSMapInsertKnownAbsent (NSMapTable * _Nonnull table, const void * _Nullable key, const void * _Nullable value);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void NSMapInsertKnownAbsent (NSMapTable table, [NullAllowed] void* key, [NullAllowed] void* value);

		// extern void * _Nullable NSMapInsertIfAbsent (NSMapTable * _Nonnull table, const void * _Nullable key, const void * _Nullable value);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe void* NSMapInsertIfAbsent (NSMapTable table, [NullAllowed] void* key, [NullAllowed] void* value);

		// extern void NSMapRemove (NSMapTable * _Nonnull table, const void * _Nullable key);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void NSMapRemove (NSMapTable table, [NullAllowed] void* key);

		// extern NSMapEnumerator NSEnumerateMapTable (NSMapTable * _Nonnull table);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSMapEnumerator NSEnumerateMapTable (NSMapTable table);

		// extern BOOL NSNextMapEnumeratorPair (NSMapEnumerator * _Nonnull enumerator, void * _Nullable * _Nullable key, void * _Nullable * _Nullable value);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool NSNextMapEnumeratorPair (NSMapEnumerator* enumerator, [NullAllowed] void** key, [NullAllowed] void** value);

		// extern void NSEndMapTableEnumeration (NSMapEnumerator * _Nonnull enumerator);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void NSEndMapTableEnumeration (NSMapEnumerator* enumerator);

		// extern NSUInteger NSCountMapTable (NSMapTable * _Nonnull table);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint NSCountMapTable (NSMapTable table);

		// extern NSString * _Nonnull NSStringFromMapTable (NSMapTable * _Nonnull table);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSString NSStringFromMapTable (NSMapTable table);

		// extern NSArray * _Nonnull NSAllMapTableKeys (NSMapTable * _Nonnull table);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke), Verify (StronglyTypedNSArray)]
		static extern NSObject[] NSAllMapTableKeys (NSMapTable table);

		// extern NSArray * _Nonnull NSAllMapTableValues (NSMapTable * _Nonnull table);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke), Verify (StronglyTypedNSArray)]
		static extern NSObject[] NSAllMapTableValues (NSMapTable table);

		// extern NSMapTable * _Nonnull NSCreateMapTableWithZone (NSMapTableKeyCallBacks keyCallBacks, NSMapTableValueCallBacks valueCallBacks, NSUInteger capacity, NSZone * _Nullable zone);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe NSMapTable NSCreateMapTableWithZone (NSMapTableKeyCallBacks keyCallBacks, NSMapTableValueCallBacks valueCallBacks, nuint capacity, [NullAllowed] NSZone* zone);

		// extern NSMapTable * _Nonnull NSCreateMapTable (NSMapTableKeyCallBacks keyCallBacks, NSMapTableValueCallBacks valueCallBacks, NSUInteger capacity);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSMapTable NSCreateMapTable (NSMapTableKeyCallBacks keyCallBacks, NSMapTableValueCallBacks valueCallBacks, nuint capacity);

		// extern CFStringRef _Nullable SecCopyErrorMessageString (OSStatus status, void * _Nullable reserved) __attribute__((availability(ios, introduced=11.3))) __attribute__((cf_audited_transfer));
		[iOS (11,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFStringRef* SecCopyErrorMessageString (int status, [NullAllowed] void* reserved);

		// extern CFTypeID SecCertificateGetTypeID () __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint SecCertificateGetTypeID ();

		// extern SecCertificateRef _Nullable SecCertificateCreateWithData (CFAllocatorRef _Nullable allocator, CFDataRef _Nonnull data) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe SecCertificateRef* SecCertificateCreateWithData ([NullAllowed] CFAllocatorRef* allocator, CFDataRef* data);

		// extern CFDataRef _Nonnull SecCertificateCopyData (SecCertificateRef _Nonnull certificate) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFDataRef* SecCertificateCopyData (SecCertificateRef* certificate);

		// extern CFStringRef _Nullable SecCertificateCopySubjectSummary (SecCertificateRef _Nonnull certificate) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFStringRef* SecCertificateCopySubjectSummary (SecCertificateRef* certificate);

		// extern OSStatus SecCertificateCopyCommonName (SecCertificateRef _Nonnull certificate, CFStringRef  _Nullable * _Nonnull commonName) __attribute__((availability(ios, introduced=10.3))) __attribute__((cf_audited_transfer));
		[iOS (10,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SecCertificateCopyCommonName (SecCertificateRef* certificate, [NullAllowed] CFStringRef** commonName);

		// extern OSStatus SecCertificateCopyEmailAddresses (SecCertificateRef _Nonnull certificate, CFArrayRef  _Nullable * _Nonnull emailAddresses) __attribute__((availability(ios, introduced=10.3))) __attribute__((cf_audited_transfer));
		[iOS (10,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SecCertificateCopyEmailAddresses (SecCertificateRef* certificate, [NullAllowed] CFArrayRef** emailAddresses);

		// extern CFDataRef _Nullable SecCertificateCopyNormalizedIssuerSequence (SecCertificateRef _Nonnull certificate) __attribute__((availability(ios, introduced=10.3))) __attribute__((cf_audited_transfer));
		[iOS (10,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFDataRef* SecCertificateCopyNormalizedIssuerSequence (SecCertificateRef* certificate);

		// extern CFDataRef _Nullable SecCertificateCopyNormalizedSubjectSequence (SecCertificateRef _Nonnull certificate) __attribute__((availability(ios, introduced=10.3))) __attribute__((cf_audited_transfer));
		[iOS (10,3)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFDataRef* SecCertificateCopyNormalizedSubjectSequence (SecCertificateRef* certificate);

		// extern SecKeyRef _Nullable SecCertificateCopyKey (SecCertificateRef _Nonnull certificate) __attribute__((cf_returns_retained)) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, introduced=12.0))) __attribute__((cf_audited_transfer));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe SecKeyRef* SecCertificateCopyKey (SecCertificateRef* certificate);

		// extern SecKeyRef _Nullable SecCertificateCopyPublicKey (SecCertificateRef _Nonnull certificate) __attribute__((availability(ios, introduced=10.3, deprecated=12.0))) __attribute__((availability(macos, unavailable))) __attribute__((availability(macCatalyst, unavailable))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.iOS, 10, 3)]
		[Deprecated (PlatformName.iOS, 12, 0)]
		[Unavailable (PlatformName.MacCatalyst)]
		[NoMac]
		[DllImport ("__Internal"), Advice ("This API is not available when using UIKit on macOS.")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe SecKeyRef* SecCertificateCopyPublicKey (SecCertificateRef* certificate);

		// extern CFDataRef _Nullable SecCertificateCopySerialNumberData (SecCertificateRef _Nonnull certificate, CFErrorRef  _Nullable * _Nullable error) __attribute__((availability(ios, introduced=11.0))) __attribute__((cf_audited_transfer));
		[iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFDataRef* SecCertificateCopySerialNumberData (SecCertificateRef* certificate, [NullAllowed] CFErrorRef** error);

		// extern CFDataRef _Nullable SecCertificateCopySerialNumber (SecCertificateRef _Nonnull certificate) __attribute__((availability(ios, introduced=10.3, deprecated=11.0))) __attribute__((availability(macos, unavailable))) __attribute__((availability(macCatalyst, unavailable))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.iOS, 10, 3)]
		[Deprecated (PlatformName.iOS, 11, 0)]
		[Unavailable (PlatformName.MacCatalyst)]
		[NoMac]
		[DllImport ("__Internal"), Advice ("This API is not available when using UIKit on macOS.")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFDataRef* SecCertificateCopySerialNumber (SecCertificateRef* certificate);

		// extern CFTypeID SecIdentityGetTypeID () __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint SecIdentityGetTypeID ();

		// extern OSStatus SecIdentityCopyCertificate (SecIdentityRef _Nonnull identityRef, SecCertificateRef  _Nullable * _Nonnull certificateRef) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SecIdentityCopyCertificate (SecIdentityRef* identityRef, [NullAllowed] SecCertificateRef** certificateRef);

		// extern OSStatus SecIdentityCopyPrivateKey (SecIdentityRef _Nonnull identityRef, SecKeyRef  _Nullable * _Nonnull privateKeyRef) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SecIdentityCopyPrivateKey (SecIdentityRef* identityRef, [NullAllowed] SecKeyRef** privateKeyRef);

		// extern CFTypeID SecAccessControlGetTypeID () __attribute__((availability(ios, introduced=8.0))) __attribute__((cf_audited_transfer));
		[iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint SecAccessControlGetTypeID ();

		// extern SecAccessControlRef _Nullable SecAccessControlCreateWithFlags (CFAllocatorRef _Nullable allocator, CFTypeRef _Nonnull protection, SecAccessControlCreateFlags flags, CFErrorRef  _Nullable * _Nullable error) __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((cf_audited_transfer));
		[Mac (10,10), iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe SecAccessControlRef* SecAccessControlCreateWithFlags ([NullAllowed] CFAllocatorRef* allocator, void* protection, SecAccessControlCreateFlags flags, [NullAllowed] CFErrorRef** error);

		// extern OSStatus SecItemCopyMatching (CFDictionaryRef _Nonnull query, CFTypeRef  _Nullable * _Nullable result) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,6), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SecItemCopyMatching (CFDictionaryRef* query, [NullAllowed] void** result);

		// extern OSStatus SecItemAdd (CFDictionaryRef _Nonnull attributes, CFTypeRef  _Nullable * _Nullable result) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,6), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SecItemAdd (CFDictionaryRef* attributes, [NullAllowed] void** result);

		// extern OSStatus SecItemUpdate (CFDictionaryRef _Nonnull query, CFDictionaryRef _Nonnull attributesToUpdate) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,6), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SecItemUpdate (CFDictionaryRef* query, CFDictionaryRef* attributesToUpdate);

		// extern OSStatus SecItemDelete (CFDictionaryRef _Nonnull query) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,6), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SecItemDelete (CFDictionaryRef* query);

		// extern CFTypeID SecKeyGetTypeID () __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint SecKeyGetTypeID ();

		// extern OSStatus SecKeyGeneratePair (CFDictionaryRef _Nonnull parameters, SecKeyRef  _Nullable * _Nullable publicKey, SecKeyRef  _Nullable * _Nullable privateKey) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SecKeyGeneratePair (CFDictionaryRef* parameters, [NullAllowed] SecKeyRef** publicKey, [NullAllowed] SecKeyRef** privateKey);

		// extern OSStatus SecKeyRawSign (SecKeyRef _Nonnull key, SecPadding padding, const uint8_t * _Nonnull dataToSign, size_t dataToSignLen, uint8_t * _Nonnull sig, size_t * _Nonnull sigLen) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SecKeyRawSign (SecKeyRef* key, SecPadding padding, byte* dataToSign, nuint dataToSignLen, byte* sig, nuint* sigLen);

		// extern OSStatus SecKeyRawVerify (SecKeyRef _Nonnull key, SecPadding padding, const uint8_t * _Nonnull signedData, size_t signedDataLen, const uint8_t * _Nonnull sig, size_t sigLen) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SecKeyRawVerify (SecKeyRef* key, SecPadding padding, byte* signedData, nuint signedDataLen, byte* sig, nuint sigLen);

		// extern OSStatus SecKeyEncrypt (SecKeyRef _Nonnull key, SecPadding padding, const uint8_t * _Nonnull plainText, size_t plainTextLen, uint8_t * _Nonnull cipherText, size_t * _Nonnull cipherTextLen) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SecKeyEncrypt (SecKeyRef* key, SecPadding padding, byte* plainText, nuint plainTextLen, byte* cipherText, nuint* cipherTextLen);

		// extern OSStatus SecKeyDecrypt (SecKeyRef _Nonnull key, SecPadding padding, const uint8_t * _Nonnull cipherText, size_t cipherTextLen, uint8_t * _Nonnull plainText, size_t * _Nonnull plainTextLen) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SecKeyDecrypt (SecKeyRef* key, SecPadding padding, byte* cipherText, nuint cipherTextLen, byte* plainText, nuint* plainTextLen);

		// extern SecKeyRef _Nullable SecKeyCreateRandomKey (CFDictionaryRef _Nonnull parameters, CFErrorRef  _Nullable * _Nullable error) __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((cf_audited_transfer));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe SecKeyRef* SecKeyCreateRandomKey (CFDictionaryRef* parameters, [NullAllowed] CFErrorRef** error);

		// extern SecKeyRef _Nullable SecKeyCreateWithData (CFDataRef _Nonnull keyData, CFDictionaryRef _Nonnull attributes, CFErrorRef  _Nullable * _Nullable error) __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((cf_audited_transfer));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe SecKeyRef* SecKeyCreateWithData (CFDataRef* keyData, CFDictionaryRef* attributes, [NullAllowed] CFErrorRef** error);

		// extern size_t SecKeyGetBlockSize (SecKeyRef _Nonnull key) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint SecKeyGetBlockSize (SecKeyRef* key);

		// extern CFDataRef _Nullable SecKeyCopyExternalRepresentation (SecKeyRef _Nonnull key, CFErrorRef  _Nullable * _Nullable error) __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((cf_audited_transfer));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFDataRef* SecKeyCopyExternalRepresentation (SecKeyRef* key, [NullAllowed] CFErrorRef** error);

		// extern CFDictionaryRef _Nullable SecKeyCopyAttributes (SecKeyRef _Nonnull key) __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((cf_audited_transfer));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFDictionaryRef* SecKeyCopyAttributes (SecKeyRef* key);

		// extern SecKeyRef _Nullable SecKeyCopyPublicKey (SecKeyRef _Nonnull key) __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((cf_audited_transfer));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe SecKeyRef* SecKeyCopyPublicKey (SecKeyRef* key);

		// extern CFDataRef _Nullable SecKeyCreateSignature (SecKeyRef _Nonnull key, SecKeyAlgorithm _Nonnull algorithm, CFDataRef _Nonnull dataToSign, CFErrorRef  _Nullable * _Nullable error) __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((cf_audited_transfer));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFDataRef* SecKeyCreateSignature (SecKeyRef* key, SecKeyAlgorithm* algorithm, CFDataRef* dataToSign, [NullAllowed] CFErrorRef** error);

		// extern Boolean SecKeyVerifySignature (SecKeyRef _Nonnull key, SecKeyAlgorithm _Nonnull algorithm, CFDataRef _Nonnull signedData, CFDataRef _Nonnull signature, CFErrorRef  _Nullable * _Nullable error) __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((cf_audited_transfer));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte SecKeyVerifySignature (SecKeyRef* key, SecKeyAlgorithm* algorithm, CFDataRef* signedData, CFDataRef* signature, [NullAllowed] CFErrorRef** error);

		// extern CFDataRef _Nullable SecKeyCreateEncryptedData (SecKeyRef _Nonnull key, SecKeyAlgorithm _Nonnull algorithm, CFDataRef _Nonnull plaintext, CFErrorRef  _Nullable * _Nullable error) __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((cf_audited_transfer));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFDataRef* SecKeyCreateEncryptedData (SecKeyRef* key, SecKeyAlgorithm* algorithm, CFDataRef* plaintext, [NullAllowed] CFErrorRef** error);

		// extern CFDataRef _Nullable SecKeyCreateDecryptedData (SecKeyRef _Nonnull key, SecKeyAlgorithm _Nonnull algorithm, CFDataRef _Nonnull ciphertext, CFErrorRef  _Nullable * _Nullable error) __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((cf_audited_transfer));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFDataRef* SecKeyCreateDecryptedData (SecKeyRef* key, SecKeyAlgorithm* algorithm, CFDataRef* ciphertext, [NullAllowed] CFErrorRef** error);

		// extern CFDataRef _Nullable SecKeyCopyKeyExchangeResult (SecKeyRef _Nonnull privateKey, SecKeyAlgorithm _Nonnull algorithm, SecKeyRef _Nonnull publicKey, CFDictionaryRef _Nonnull parameters, CFErrorRef  _Nullable * _Nullable error) __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((cf_audited_transfer));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFDataRef* SecKeyCopyKeyExchangeResult (SecKeyRef* privateKey, SecKeyAlgorithm* algorithm, SecKeyRef* publicKey, CFDictionaryRef* parameters, [NullAllowed] CFErrorRef** error);

		// extern Boolean SecKeyIsAlgorithmSupported (SecKeyRef _Nonnull key, SecKeyOperationType operation, SecKeyAlgorithm _Nonnull algorithm) __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((cf_audited_transfer));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte SecKeyIsAlgorithmSupported (SecKeyRef* key, SecKeyOperationType operation, SecKeyAlgorithm* algorithm);

		// extern CFTypeID SecPolicyGetTypeID () __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint SecPolicyGetTypeID ();

		// extern CFDictionaryRef _Nullable SecPolicyCopyProperties (SecPolicyRef _Nonnull policyRef) __attribute__((availability(ios, introduced=7.0))) __attribute__((cf_audited_transfer));
		[iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFDictionaryRef* SecPolicyCopyProperties (SecPolicyRef* policyRef);

		// extern SecPolicyRef _Nonnull SecPolicyCreateBasicX509 () __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe SecPolicyRef* SecPolicyCreateBasicX509 ();

		// extern SecPolicyRef _Nonnull SecPolicyCreateSSL (Boolean server, CFStringRef _Nullable hostname) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe SecPolicyRef* SecPolicyCreateSSL (byte server, [NullAllowed] CFStringRef* hostname);

		// extern SecPolicyRef _Nullable SecPolicyCreateRevocation (CFOptionFlags revocationFlags) __attribute__((availability(ios, introduced=7.0))) __attribute__((cf_audited_transfer));
		[iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe SecPolicyRef* SecPolicyCreateRevocation (nuint revocationFlags);

		// extern SecPolicyRef _Nullable SecPolicyCreateWithProperties (CFTypeRef _Nonnull policyIdentifier, CFDictionaryRef _Nullable properties) __attribute__((availability(ios, introduced=7.0))) __attribute__((cf_audited_transfer));
		[iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe SecPolicyRef* SecPolicyCreateWithProperties (void* policyIdentifier, [NullAllowed] CFDictionaryRef* properties);

		// extern int SecRandomCopyBytes (SecRandomRef _Nullable rnd, size_t count, void * _Nonnull bytes) __attribute__((warn_unused_result)) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SecRandomCopyBytes ([NullAllowed] SecRandomRef* rnd, nuint count, void* bytes);

		// extern OSStatus SecPKCS12Import (CFDataRef _Nonnull pkcs12_data, CFDictionaryRef _Nonnull options, CFArrayRef  _Nullable * _Nonnull items) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,6), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SecPKCS12Import (CFDataRef* pkcs12_data, CFDictionaryRef* options, [NullAllowed] CFArrayRef** items);

		// extern CFTypeID SecTrustGetTypeID () __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint SecTrustGetTypeID ();

		// extern OSStatus SecTrustCreateWithCertificates (CFTypeRef _Nonnull certificates, CFTypeRef _Nullable policies, SecTrustRef  _Nullable * _Nonnull trust) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SecTrustCreateWithCertificates (void* certificates, [NullAllowed] void* policies, [NullAllowed] SecTrustRef** trust);

		// extern OSStatus SecTrustSetPolicies (SecTrustRef _Nonnull trust, CFTypeRef _Nonnull policies) __attribute__((availability(ios, introduced=6.0))) __attribute__((cf_audited_transfer));
		[iOS (6,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SecTrustSetPolicies (SecTrustRef* trust, void* policies);

		// extern OSStatus SecTrustCopyPolicies (SecTrustRef _Nonnull trust, CFArrayRef  _Nullable * _Nonnull policies) __attribute__((availability(ios, introduced=7.0))) __attribute__((cf_audited_transfer));
		[iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SecTrustCopyPolicies (SecTrustRef* trust, [NullAllowed] CFArrayRef** policies);

		// extern OSStatus SecTrustSetNetworkFetchAllowed (SecTrustRef _Nonnull trust, Boolean allowFetch) __attribute__((availability(ios, introduced=7.0))) __attribute__((cf_audited_transfer));
		[iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SecTrustSetNetworkFetchAllowed (SecTrustRef* trust, byte allowFetch);

		// extern OSStatus SecTrustGetNetworkFetchAllowed (SecTrustRef _Nonnull trust, Boolean * _Nonnull allowFetch) __attribute__((availability(ios, introduced=7.0))) __attribute__((cf_audited_transfer));
		[iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SecTrustGetNetworkFetchAllowed (SecTrustRef* trust, byte* allowFetch);

		// extern OSStatus SecTrustSetAnchorCertificates (SecTrustRef _Nonnull trust, CFArrayRef _Nullable anchorCertificates) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SecTrustSetAnchorCertificates (SecTrustRef* trust, [NullAllowed] CFArrayRef* anchorCertificates);

		// extern OSStatus SecTrustSetAnchorCertificatesOnly (SecTrustRef _Nonnull trust, Boolean anchorCertificatesOnly) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SecTrustSetAnchorCertificatesOnly (SecTrustRef* trust, byte anchorCertificatesOnly);

		// extern OSStatus SecTrustCopyCustomAnchorCertificates (SecTrustRef _Nonnull trust, CFArrayRef  _Nullable * _Nonnull anchors) __attribute__((availability(ios, introduced=7.0))) __attribute__((cf_audited_transfer));
		[iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SecTrustCopyCustomAnchorCertificates (SecTrustRef* trust, [NullAllowed] CFArrayRef** anchors);

		// extern OSStatus SecTrustSetVerifyDate (SecTrustRef _Nonnull trust, CFDateRef _Nonnull verifyDate) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SecTrustSetVerifyDate (SecTrustRef* trust, CFDateRef* verifyDate);

		// extern CFAbsoluteTime SecTrustGetVerifyTime (SecTrustRef _Nonnull trust) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe double SecTrustGetVerifyTime (SecTrustRef* trust);

		// extern OSStatus SecTrustEvaluate (SecTrustRef _Nonnull trust, SecTrustResultType * _Nonnull result) __attribute__((availability(macos, introduced=10.3, deprecated=10.15))) __attribute__((availability(ios, introduced=2.0, deprecated=13.0))) __attribute__((availability(watchos, introduced=1.0, deprecated=6.0))) __attribute__((availability(tvos, introduced=2.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 3)]
		[Deprecated (PlatformName.MacOSX, 10, 15)]
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 13, 0)]
		[Introduced (PlatformName.WatchOS, 1, 0)]
		[Deprecated (PlatformName.WatchOS, 6, 0)]
		[Introduced (PlatformName.TvOS, 2, 0)]
		[Deprecated (PlatformName.TvOS, 13, 0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SecTrustEvaluate (SecTrustRef* trust, SecTrustResultType* result);

		// extern OSStatus SecTrustEvaluateAsync (SecTrustRef _Nonnull trust, dispatch_queue_t _Nullable queue, SecTrustCallback _Nonnull result) __attribute__((availability(macos, introduced=10.7, deprecated=10.15))) __attribute__((availability(ios, introduced=7.0, deprecated=13.0))) __attribute__((availability(watchos, introduced=1.0, deprecated=6.0))) __attribute__((availability(tvos, introduced=7.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 7)]
		[Deprecated (PlatformName.MacOSX, 10, 15)]
		[Introduced (PlatformName.iOS, 7, 0)]
		[Deprecated (PlatformName.iOS, 13, 0)]
		[Introduced (PlatformName.WatchOS, 1, 0)]
		[Deprecated (PlatformName.WatchOS, 6, 0)]
		[Introduced (PlatformName.TvOS, 7, 0)]
		[Deprecated (PlatformName.TvOS, 13, 0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SecTrustEvaluateAsync (SecTrustRef* trust, [NullAllowed] DispatchQueue queue, SecTrustCallback result);

		// extern _Bool SecTrustEvaluateWithError (SecTrustRef _Nonnull trust, CFErrorRef  _Nullable * _Nullable error) __attribute__((warn_unused_result)) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(tvos, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((cf_audited_transfer));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool SecTrustEvaluateWithError (SecTrustRef* trust, [NullAllowed] CFErrorRef** error);

		// extern OSStatus SecTrustEvaluateAsyncWithError (SecTrustRef _Nonnull trust, dispatch_queue_t _Nonnull queue, SecTrustWithErrorCallback _Nonnull result) __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(tvos, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((cf_audited_transfer));
		[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SecTrustEvaluateAsyncWithError (SecTrustRef* trust, DispatchQueue queue, SecTrustWithErrorCallback result);

		// extern OSStatus SecTrustGetTrustResult (SecTrustRef _Nonnull trust, SecTrustResultType * _Nonnull result) __attribute__((availability(ios, introduced=7.0))) __attribute__((cf_audited_transfer));
		[iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SecTrustGetTrustResult (SecTrustRef* trust, SecTrustResultType* result);

		// extern SecKeyRef _Nullable SecTrustCopyPublicKey (SecTrustRef _Nonnull trust) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe SecKeyRef* SecTrustCopyPublicKey (SecTrustRef* trust);

		// extern CFIndex SecTrustGetCertificateCount (SecTrustRef _Nonnull trust) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint SecTrustGetCertificateCount (SecTrustRef* trust);

		// extern SecCertificateRef _Nullable SecTrustGetCertificateAtIndex (SecTrustRef _Nonnull trust, CFIndex ix) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe SecCertificateRef* SecTrustGetCertificateAtIndex (SecTrustRef* trust, nint ix);

		// extern CFDataRef _Nonnull SecTrustCopyExceptions (SecTrustRef _Nonnull trust) __attribute__((availability(ios, introduced=4.0))) __attribute__((cf_audited_transfer));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFDataRef* SecTrustCopyExceptions (SecTrustRef* trust);

		// extern _Bool SecTrustSetExceptions (SecTrustRef _Nonnull trust, CFDataRef _Nullable exceptions) __attribute__((availability(ios, introduced=4.0))) __attribute__((cf_audited_transfer));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool SecTrustSetExceptions (SecTrustRef* trust, [NullAllowed] CFDataRef* exceptions);

		// extern CFArrayRef _Nullable SecTrustCopyProperties (SecTrustRef _Nonnull trust) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFArrayRef* SecTrustCopyProperties (SecTrustRef* trust);

		// extern CFDictionaryRef _Nullable SecTrustCopyResult (SecTrustRef _Nonnull trust) __attribute__((availability(ios, introduced=7.0))) __attribute__((cf_audited_transfer));
		[iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFDictionaryRef* SecTrustCopyResult (SecTrustRef* trust);

		// extern OSStatus SecTrustSetOCSPResponse (SecTrustRef _Nonnull trust, CFTypeRef _Nullable responseData) __attribute__((availability(ios, introduced=7.0))) __attribute__((cf_audited_transfer));
		[iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SecTrustSetOCSPResponse (SecTrustRef* trust, [NullAllowed] void* responseData);

		// extern OSStatus SecTrustSetSignedCertificateTimestamps (SecTrustRef _Nonnull trust, CFArrayRef _Nullable sctArray) __attribute__((availability(macos, introduced=10.14.2))) __attribute__((availability(ios, introduced=12.1.1))) __attribute__((availability(tvos, introduced=12.1.1))) __attribute__((availability(watchos, introduced=5.1.1))) __attribute__((cf_audited_transfer));
		[Watch (5,1,1), TV (12,1,1), Mac (10,14,2), iOS (12,1,1)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SecTrustSetSignedCertificateTimestamps (SecTrustRef* trust, [NullAllowed] CFArrayRef* sctArray);

		// extern void SecAddSharedWebCredential (CFStringRef _Nonnull fqdn, CFStringRef _Nonnull account, CFStringRef _Nullable password, void (^ _Nonnull)(CFErrorRef _Nullable) completionHandler) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, unavailable))) __attribute__((availability(macCatalyst, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((cf_audited_transfer));
		[Unavailable (PlatformName.MacCatalyst)]
		[NoWatch, NoTV, NoMac, iOS (8,0)]
		[DllImport ("__Internal"), Advice ("This API is not available when using UIKit on macOS.")]
		[Verify (PlatformInvoke)]
		static extern unsafe void SecAddSharedWebCredential (CFStringRef* fqdn, CFStringRef* account, [NullAllowed] CFStringRef* password, Action<CoreFoundation.CFErrorRef*> completionHandler);

		// extern void SecRequestSharedWebCredential (CFStringRef _Nullable fqdn, CFStringRef _Nullable account, void (^ _Nonnull)(CFArrayRef _Nullable, CFErrorRef _Nullable) completionHandler) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, unavailable))) __attribute__((availability(macCatalyst, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((cf_audited_transfer));
		[Unavailable (PlatformName.MacCatalyst)]
		[NoWatch, NoTV, NoMac, iOS (8,0)]
		[DllImport ("__Internal"), Advice ("This API is not available when using UIKit on macOS.")]
		[Verify (PlatformInvoke)]
		static extern unsafe void SecRequestSharedWebCredential ([NullAllowed] CFStringRef* fqdn, [NullAllowed] CFStringRef* account, Action<CoreFoundation.CFArrayRef*, CoreFoundation.CFErrorRef*> completionHandler);

		// extern CFStringRef _Nullable SecCreateSharedWebCredentialPassword () __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(macos, unavailable))) __attribute__((availability(macCatalyst, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((cf_audited_transfer));
		[Unavailable (PlatformName.MacCatalyst)]
		[NoWatch, NoTV, NoMac, iOS (8,0)]
		[DllImport ("__Internal"), Advice ("This API is not available when using UIKit on macOS.")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFStringRef* SecCreateSharedWebCredentialPassword ();

		// extern void * sec_retain (void *obj) __attribute__((visibility("default")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* sec_retain (void* obj);

		// extern void sec_release (void *obj) __attribute__((visibility("default")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void sec_release (void* obj);

		// extern sec_trust_t _Nullable sec_trust_create (SecTrustRef _Nonnull trust) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, introduced=12.0))) __attribute__((ns_returns_retained)) __attribute__((ns_returns_retained));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe OS_sec_trust sec_trust_create (SecTrustRef* trust);

		// extern SecTrustRef _Nonnull sec_trust_copy_ref (sec_trust_t _Nonnull trust) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, introduced=12.0)));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe SecTrustRef* sec_trust_copy_ref (OS_sec_trust trust);

		// extern sec_identity_t _Nullable sec_identity_create (SecIdentityRef _Nonnull identity) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, introduced=12.0))) __attribute__((ns_returns_retained)) __attribute__((ns_returns_retained));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe OS_sec_identity sec_identity_create (SecIdentityRef* identity);

		// extern sec_identity_t _Nullable sec_identity_create_with_certificates (SecIdentityRef _Nonnull identity, CFArrayRef _Nonnull certificates) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, introduced=12.0))) __attribute__((ns_returns_retained)) __attribute__((ns_returns_retained));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe OS_sec_identity sec_identity_create_with_certificates (SecIdentityRef* identity, CFArrayRef* certificates);

		// extern _Bool sec_identity_access_certificates (sec_identity_t _Nonnull identity, void (^ _Nonnull)(sec_certificate_t _Nonnull) handler) __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool sec_identity_access_certificates (OS_sec_identity identity, Action<OS_sec_certificate> handler);

		// extern SecIdentityRef _Nullable sec_identity_copy_ref (sec_identity_t _Nonnull identity) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, introduced=12.0)));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe SecIdentityRef* sec_identity_copy_ref (OS_sec_identity identity);

		// extern CFArrayRef _Nullable sec_identity_copy_certificates_ref (sec_identity_t _Nonnull identity) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, introduced=12.0)));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFArrayRef* sec_identity_copy_certificates_ref (OS_sec_identity identity);

		// extern sec_certificate_t _Nullable sec_certificate_create (SecCertificateRef _Nonnull certificate) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, introduced=12.0))) __attribute__((ns_returns_retained)) __attribute__((ns_returns_retained));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe OS_sec_certificate sec_certificate_create (SecCertificateRef* certificate);

		// extern SecCertificateRef _Nonnull sec_certificate_copy_ref (sec_certificate_t _Nonnull certificate) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, introduced=12.0)));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe SecCertificateRef* sec_certificate_copy_ref (OS_sec_certificate certificate);

		// extern const char * _Nullable sec_protocol_metadata_get_negotiated_protocol (sec_protocol_metadata_t _Nonnull metadata) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, introduced=12.0)));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe sbyte* sec_protocol_metadata_get_negotiated_protocol (OS_sec_protocol_metadata metadata);

		// extern dispatch_data_t _Nullable sec_protocol_metadata_copy_peer_public_key (sec_protocol_metadata_t _Nonnull metadata) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, introduced=12.0))) __attribute__((ns_returns_retained)) __attribute__((ns_returns_retained));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern OS_dispatch_data sec_protocol_metadata_copy_peer_public_key (OS_sec_protocol_metadata metadata);

		// extern tls_protocol_version_t sec_protocol_metadata_get_negotiated_tls_protocol_version (sec_protocol_metadata_t _Nonnull metadata) __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern tls_protocol_version_t sec_protocol_metadata_get_negotiated_tls_protocol_version (OS_sec_protocol_metadata metadata);

		// extern SSLProtocol sec_protocol_metadata_get_negotiated_protocol_version (sec_protocol_metadata_t _Nonnull metadata) __attribute__((availability(macos, introduced=10.14, deprecated=10.15))) __attribute__((availability(ios, introduced=12.0, deprecated=13.0))) __attribute__((availability(watchos, introduced=5.0, deprecated=6.0))) __attribute__((availability(tvos, introduced=12.0, deprecated=13.0)));
		[Introduced (PlatformName.MacOSX, 10, 14)]
		[Deprecated (PlatformName.MacOSX, 10, 15)]
		[Introduced (PlatformName.iOS, 12, 0)]
		[Deprecated (PlatformName.iOS, 13, 0)]
		[Introduced (PlatformName.WatchOS, 5, 0)]
		[Deprecated (PlatformName.WatchOS, 6, 0)]
		[Introduced (PlatformName.TvOS, 12, 0)]
		[Deprecated (PlatformName.TvOS, 13, 0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern SSLProtocol sec_protocol_metadata_get_negotiated_protocol_version (OS_sec_protocol_metadata metadata);

		// extern tls_ciphersuite_t sec_protocol_metadata_get_negotiated_tls_ciphersuite (sec_protocol_metadata_t _Nonnull metadata) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, introduced=12.0)));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern tls_ciphersuite_t sec_protocol_metadata_get_negotiated_tls_ciphersuite (OS_sec_protocol_metadata metadata);

		// extern SSLCipherSuite sec_protocol_metadata_get_negotiated_ciphersuite (sec_protocol_metadata_t _Nonnull metadata) __attribute__((availability(macos, introduced=10.14, deprecated=10.15))) __attribute__((availability(ios, introduced=12.0, deprecated=13.0))) __attribute__((availability(watchos, introduced=5.0, deprecated=6.0))) __attribute__((availability(tvos, introduced=12.0, deprecated=13.0))) __attribute__((availability(macCatalyst, unavailable)));
		[Introduced (PlatformName.MacOSX, 10, 14)]
		[Deprecated (PlatformName.MacOSX, 10, 15)]
		[Introduced (PlatformName.iOS, 12, 0)]
		[Deprecated (PlatformName.iOS, 13, 0)]
		[Introduced (PlatformName.WatchOS, 5, 0)]
		[Deprecated (PlatformName.WatchOS, 6, 0)]
		[Introduced (PlatformName.TvOS, 12, 0)]
		[Deprecated (PlatformName.TvOS, 13, 0)]
		[Unavailable (PlatformName.MacCatalyst)]
		[DllImport ("__Internal"), Advice ("This API is not available when using UIKit on macOS.")]
		[Verify (PlatformInvoke)]
		static extern ushort sec_protocol_metadata_get_negotiated_ciphersuite (OS_sec_protocol_metadata metadata);

		// extern _Bool sec_protocol_metadata_get_early_data_accepted (sec_protocol_metadata_t _Nonnull metadata) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, introduced=12.0)));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool sec_protocol_metadata_get_early_data_accepted (OS_sec_protocol_metadata metadata);

		// extern _Bool sec_protocol_metadata_access_peer_certificate_chain (sec_protocol_metadata_t _Nonnull metadata, void (^ _Nonnull)(sec_certificate_t _Nonnull) handler) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, introduced=12.0)));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool sec_protocol_metadata_access_peer_certificate_chain (OS_sec_protocol_metadata metadata, Action<OS_sec_certificate> handler);

		// extern _Bool sec_protocol_metadata_access_ocsp_response (sec_protocol_metadata_t _Nonnull metadata, void (^ _Nonnull)(dispatch_data_t _Nonnull) handler) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, introduced=12.0)));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool sec_protocol_metadata_access_ocsp_response (OS_sec_protocol_metadata metadata, Action<OS_dispatch_data> handler);

		// extern _Bool sec_protocol_metadata_access_supported_signature_algorithms (sec_protocol_metadata_t _Nonnull metadata, void (^ _Nonnull)(uint16_t) handler) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, introduced=12.0)));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool sec_protocol_metadata_access_supported_signature_algorithms (OS_sec_protocol_metadata metadata, Action<ushort> handler);

		// extern _Bool sec_protocol_metadata_access_distinguished_names (sec_protocol_metadata_t _Nonnull metadata, void (^ _Nonnull)(dispatch_data_t _Nonnull) handler) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, introduced=12.0)));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool sec_protocol_metadata_access_distinguished_names (OS_sec_protocol_metadata metadata, Action<OS_dispatch_data> handler);

		// extern _Bool sec_protocol_metadata_access_pre_shared_keys (sec_protocol_metadata_t _Nonnull metadata, void (^ _Nonnull)(dispatch_data_t _Nonnull, dispatch_data_t _Nonnull) handler) __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool sec_protocol_metadata_access_pre_shared_keys (OS_sec_protocol_metadata metadata, Action<OS_dispatch_data, OS_dispatch_data> handler);

		// extern const char * _Nullable sec_protocol_metadata_get_server_name (sec_protocol_metadata_t _Nonnull metadata) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, introduced=12.0)));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe sbyte* sec_protocol_metadata_get_server_name (OS_sec_protocol_metadata metadata);

		// extern _Bool sec_protocol_metadata_peers_are_equal (sec_protocol_metadata_t _Nonnull metadataA, sec_protocol_metadata_t _Nonnull metadataB) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, introduced=12.0)));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool sec_protocol_metadata_peers_are_equal (OS_sec_protocol_metadata metadataA, OS_sec_protocol_metadata metadataB);

		// extern _Bool sec_protocol_metadata_challenge_parameters_are_equal (sec_protocol_metadata_t _Nonnull metadataA, sec_protocol_metadata_t _Nonnull metadataB) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, introduced=12.0)));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool sec_protocol_metadata_challenge_parameters_are_equal (OS_sec_protocol_metadata metadataA, OS_sec_protocol_metadata metadataB);

		// extern dispatch_data_t _Nullable sec_protocol_metadata_create_secret (sec_protocol_metadata_t _Nonnull metadata, size_t label_len, const char * _Nonnull label, size_t exporter_length) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, introduced=12.0))) __attribute__((ns_returns_retained)) __attribute__((ns_returns_retained));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe OS_dispatch_data sec_protocol_metadata_create_secret (OS_sec_protocol_metadata metadata, nuint label_len, sbyte* label, nuint exporter_length);

		// extern dispatch_data_t _Nullable sec_protocol_metadata_create_secret_with_context (sec_protocol_metadata_t _Nonnull metadata, size_t label_len, const char * _Nonnull label, size_t context_len, const uint8_t * _Nonnull context, size_t exporter_length) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, introduced=12.0))) __attribute__((ns_returns_retained)) __attribute__((ns_returns_retained));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe OS_dispatch_data sec_protocol_metadata_create_secret_with_context (OS_sec_protocol_metadata metadata, nuint label_len, sbyte* label, nuint context_len, byte* context, nuint exporter_length);

		// extern _Bool sec_protocol_options_are_equal (sec_protocol_options_t _Nonnull optionsA, sec_protocol_options_t _Nonnull optionsB) __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool sec_protocol_options_are_equal (OS_sec_protocol_options optionsA, OS_sec_protocol_options optionsB);

		// extern void sec_protocol_options_set_local_identity (sec_protocol_options_t _Nonnull options, sec_identity_t _Nonnull identity) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, introduced=12.0)));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void sec_protocol_options_set_local_identity (OS_sec_protocol_options options, OS_sec_identity identity);

		// extern void sec_protocol_options_append_tls_ciphersuite (sec_protocol_options_t _Nonnull options, tls_ciphersuite_t ciphersuite) __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void sec_protocol_options_append_tls_ciphersuite (OS_sec_protocol_options options, tls_ciphersuite_t ciphersuite);

		// extern void sec_protocol_options_add_tls_ciphersuite (sec_protocol_options_t _Nonnull options, SSLCipherSuite ciphersuite) __attribute__((availability(macos, introduced=10.14, deprecated=10.15))) __attribute__((availability(ios, introduced=12.0, deprecated=13.0))) __attribute__((availability(watchos, introduced=5.0, deprecated=6.0))) __attribute__((availability(tvos, introduced=12.0, deprecated=13.0))) __attribute__((availability(macCatalyst, unavailable)));
		[Introduced (PlatformName.MacOSX, 10, 14, message: "Use sec_protocol_options_append_tls_ciphersuite")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "Use sec_protocol_options_append_tls_ciphersuite")]
		[Introduced (PlatformName.iOS, 12, 0, message: "Use sec_protocol_options_append_tls_ciphersuite")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "Use sec_protocol_options_append_tls_ciphersuite")]
		[Introduced (PlatformName.WatchOS, 5, 0, message: "Use sec_protocol_options_append_tls_ciphersuite")]
		[Deprecated (PlatformName.WatchOS, 6, 0, message: "Use sec_protocol_options_append_tls_ciphersuite")]
		[Introduced (PlatformName.TvOS, 12, 0, message: "Use sec_protocol_options_append_tls_ciphersuite")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Use sec_protocol_options_append_tls_ciphersuite")]
		[Unavailable (PlatformName.MacCatalyst)]
		[DllImport ("__Internal"), Advice ("This API is not available when using UIKit on macOS.")]
		[Verify (PlatformInvoke)]
		static extern void sec_protocol_options_add_tls_ciphersuite (OS_sec_protocol_options options, ushort ciphersuite);

		// extern void sec_protocol_options_append_tls_ciphersuite_group (sec_protocol_options_t _Nonnull options, tls_ciphersuite_group_t group) __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void sec_protocol_options_append_tls_ciphersuite_group (OS_sec_protocol_options options, tls_ciphersuite_group_t group);

		// extern void sec_protocol_options_add_tls_ciphersuite_group (sec_protocol_options_t _Nonnull options, SSLCiphersuiteGroup group) __attribute__((availability(macos, introduced=10.14, deprecated=10.15))) __attribute__((availability(ios, introduced=12.0, deprecated=13.0))) __attribute__((availability(watchos, introduced=5.0, deprecated=6.0))) __attribute__((availability(tvos, introduced=12.0, deprecated=13.0))) __attribute__((availability(macCatalyst, unavailable)));
		[Introduced (PlatformName.MacOSX, 10, 14, message: "Use sec_protocol_options_append_tls_ciphersuite_group")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "Use sec_protocol_options_append_tls_ciphersuite_group")]
		[Introduced (PlatformName.iOS, 12, 0, message: "Use sec_protocol_options_append_tls_ciphersuite_group")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "Use sec_protocol_options_append_tls_ciphersuite_group")]
		[Introduced (PlatformName.WatchOS, 5, 0, message: "Use sec_protocol_options_append_tls_ciphersuite_group")]
		[Deprecated (PlatformName.WatchOS, 6, 0, message: "Use sec_protocol_options_append_tls_ciphersuite_group")]
		[Introduced (PlatformName.TvOS, 12, 0, message: "Use sec_protocol_options_append_tls_ciphersuite_group")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Use sec_protocol_options_append_tls_ciphersuite_group")]
		[Unavailable (PlatformName.MacCatalyst)]
		[DllImport ("__Internal"), Advice ("This API is not available when using UIKit on macOS.")]
		[Verify (PlatformInvoke)]
		static extern void sec_protocol_options_add_tls_ciphersuite_group (OS_sec_protocol_options options, SSLCiphersuiteGroup group);

		// extern void sec_protocol_options_set_tls_min_version (sec_protocol_options_t _Nonnull options, SSLProtocol version) __attribute__((availability(macos, introduced=10.14, deprecated=10.15))) __attribute__((availability(ios, introduced=12.0, deprecated=13.0))) __attribute__((availability(watchos, introduced=5.0, deprecated=6.0))) __attribute__((availability(tvos, introduced=12.0, deprecated=13.0))) __attribute__((availability(macCatalyst, unavailable)));
		[Introduced (PlatformName.MacOSX, 10, 14)]
		[Deprecated (PlatformName.MacOSX, 10, 15)]
		[Introduced (PlatformName.iOS, 12, 0)]
		[Deprecated (PlatformName.iOS, 13, 0)]
		[Introduced (PlatformName.WatchOS, 5, 0)]
		[Deprecated (PlatformName.WatchOS, 6, 0)]
		[Introduced (PlatformName.TvOS, 12, 0)]
		[Deprecated (PlatformName.TvOS, 13, 0)]
		[Unavailable (PlatformName.MacCatalyst)]
		[DllImport ("__Internal"), Advice ("This API is not available when using UIKit on macOS.")]
		[Verify (PlatformInvoke)]
		static extern void sec_protocol_options_set_tls_min_version (OS_sec_protocol_options options, SSLProtocol version);

		// extern void sec_protocol_options_set_min_tls_protocol_version (sec_protocol_options_t _Nonnull options, tls_protocol_version_t version) __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void sec_protocol_options_set_min_tls_protocol_version (OS_sec_protocol_options options, tls_protocol_version_t version);

		// extern tls_protocol_version_t sec_protocol_options_get_default_min_tls_protocol_version () __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern tls_protocol_version_t sec_protocol_options_get_default_min_tls_protocol_version ();

		// extern tls_protocol_version_t sec_protocol_options_get_default_min_dtls_protocol_version () __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern tls_protocol_version_t sec_protocol_options_get_default_min_dtls_protocol_version ();

		// extern void sec_protocol_options_set_tls_max_version (sec_protocol_options_t _Nonnull options, SSLProtocol version) __attribute__((availability(macos, introduced=10.14, deprecated=10.15))) __attribute__((availability(ios, introduced=12.0, deprecated=13.0))) __attribute__((availability(watchos, introduced=5.0, deprecated=6.0))) __attribute__((availability(tvos, introduced=12.0, deprecated=13.0))) __attribute__((availability(macCatalyst, unavailable)));
		[Introduced (PlatformName.MacOSX, 10, 14)]
		[Deprecated (PlatformName.MacOSX, 10, 15)]
		[Introduced (PlatformName.iOS, 12, 0)]
		[Deprecated (PlatformName.iOS, 13, 0)]
		[Introduced (PlatformName.WatchOS, 5, 0)]
		[Deprecated (PlatformName.WatchOS, 6, 0)]
		[Introduced (PlatformName.TvOS, 12, 0)]
		[Deprecated (PlatformName.TvOS, 13, 0)]
		[Unavailable (PlatformName.MacCatalyst)]
		[DllImport ("__Internal"), Advice ("This API is not available when using UIKit on macOS.")]
		[Verify (PlatformInvoke)]
		static extern void sec_protocol_options_set_tls_max_version (OS_sec_protocol_options options, SSLProtocol version);

		// extern void sec_protocol_options_set_max_tls_protocol_version (sec_protocol_options_t _Nonnull options, tls_protocol_version_t version) __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void sec_protocol_options_set_max_tls_protocol_version (OS_sec_protocol_options options, tls_protocol_version_t version);

		// extern tls_protocol_version_t sec_protocol_options_get_default_max_tls_protocol_version () __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern tls_protocol_version_t sec_protocol_options_get_default_max_tls_protocol_version ();

		// extern tls_protocol_version_t sec_protocol_options_get_default_max_dtls_protocol_version () __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern tls_protocol_version_t sec_protocol_options_get_default_max_dtls_protocol_version ();

		// extern void sec_protocol_options_add_tls_application_protocol (sec_protocol_options_t _Nonnull options, const char * _Nonnull application_protocol) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, introduced=12.0)));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void sec_protocol_options_add_tls_application_protocol (OS_sec_protocol_options options, sbyte* application_protocol);

		// extern void sec_protocol_options_set_tls_server_name (sec_protocol_options_t _Nonnull options, const char * _Nonnull server_name) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, introduced=12.0)));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void sec_protocol_options_set_tls_server_name (OS_sec_protocol_options options, sbyte* server_name);

		// extern void sec_protocol_options_set_tls_diffie_hellman_parameters (sec_protocol_options_t _Nonnull options, dispatch_data_t _Nonnull params) __attribute__((availability(macos, introduced=10.14, deprecated=10.15))) __attribute__((availability(ios, introduced=12.0, deprecated=13.0))) __attribute__((availability(watchos, introduced=5.0, deprecated=6.0))) __attribute__((availability(tvos, introduced=12.0, deprecated=13.0)));
		[Introduced (PlatformName.MacOSX, 10, 14, message: "DHE ciphersuites are no longer supported")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "DHE ciphersuites are no longer supported")]
		[Introduced (PlatformName.iOS, 12, 0, message: "DHE ciphersuites are no longer supported")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "DHE ciphersuites are no longer supported")]
		[Introduced (PlatformName.WatchOS, 5, 0, message: "DHE ciphersuites are no longer supported")]
		[Deprecated (PlatformName.WatchOS, 6, 0, message: "DHE ciphersuites are no longer supported")]
		[Introduced (PlatformName.TvOS, 12, 0, message: "DHE ciphersuites are no longer supported")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "DHE ciphersuites are no longer supported")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void sec_protocol_options_set_tls_diffie_hellman_parameters (OS_sec_protocol_options options, OS_dispatch_data @params);

		// extern void sec_protocol_options_add_pre_shared_key (sec_protocol_options_t _Nonnull options, dispatch_data_t _Nonnull psk, dispatch_data_t _Nonnull psk_identity) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, introduced=12.0)));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void sec_protocol_options_add_pre_shared_key (OS_sec_protocol_options options, OS_dispatch_data psk, OS_dispatch_data psk_identity);

		// extern void sec_protocol_options_set_tls_pre_shared_key_identity_hint (sec_protocol_options_t _Nonnull options, dispatch_data_t _Nonnull psk_identity_hint) __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void sec_protocol_options_set_tls_pre_shared_key_identity_hint (OS_sec_protocol_options options, OS_dispatch_data psk_identity_hint);

		// extern void sec_protocol_options_set_pre_shared_key_selection_block (sec_protocol_options_t _Nonnull options, sec_protocol_pre_shared_key_selection_t _Nonnull psk_selection_block, dispatch_queue_t _Nonnull psk_selection_queue) __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void sec_protocol_options_set_pre_shared_key_selection_block (OS_sec_protocol_options options, sec_protocol_pre_shared_key_selection_t psk_selection_block, DispatchQueue psk_selection_queue);

		// extern void sec_protocol_options_set_tls_tickets_enabled (sec_protocol_options_t _Nonnull options, _Bool tickets_enabled) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, introduced=12.0)));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void sec_protocol_options_set_tls_tickets_enabled (OS_sec_protocol_options options, bool tickets_enabled);

		// extern void sec_protocol_options_set_tls_is_fallback_attempt (sec_protocol_options_t _Nonnull options, _Bool is_fallback_attempt) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, introduced=12.0)));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void sec_protocol_options_set_tls_is_fallback_attempt (OS_sec_protocol_options options, bool is_fallback_attempt);

		// extern void sec_protocol_options_set_tls_resumption_enabled (sec_protocol_options_t _Nonnull options, _Bool resumption_enabled) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, introduced=12.0)));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void sec_protocol_options_set_tls_resumption_enabled (OS_sec_protocol_options options, bool resumption_enabled);

		// extern void sec_protocol_options_set_tls_false_start_enabled (sec_protocol_options_t _Nonnull options, _Bool false_start_enabled) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, introduced=12.0)));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void sec_protocol_options_set_tls_false_start_enabled (OS_sec_protocol_options options, bool false_start_enabled);

		// extern void sec_protocol_options_set_tls_ocsp_enabled (sec_protocol_options_t _Nonnull options, _Bool ocsp_enabled) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, introduced=12.0)));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void sec_protocol_options_set_tls_ocsp_enabled (OS_sec_protocol_options options, bool ocsp_enabled);

		// extern void sec_protocol_options_set_tls_sct_enabled (sec_protocol_options_t _Nonnull options, _Bool sct_enabled) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, introduced=12.0)));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void sec_protocol_options_set_tls_sct_enabled (OS_sec_protocol_options options, bool sct_enabled);

		// extern void sec_protocol_options_set_tls_renegotiation_enabled (sec_protocol_options_t _Nonnull options, _Bool renegotiation_enabled) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, introduced=12.0)));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void sec_protocol_options_set_tls_renegotiation_enabled (OS_sec_protocol_options options, bool renegotiation_enabled);

		// extern void sec_protocol_options_set_peer_authentication_required (sec_protocol_options_t _Nonnull options, _Bool peer_authentication_required) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, introduced=12.0)));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void sec_protocol_options_set_peer_authentication_required (OS_sec_protocol_options options, bool peer_authentication_required);

		// extern void sec_protocol_options_set_key_update_block (sec_protocol_options_t _Nonnull options, sec_protocol_key_update_t _Nonnull key_update_block, dispatch_queue_t _Nonnull key_update_queue) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, introduced=12.0)));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void sec_protocol_options_set_key_update_block (OS_sec_protocol_options options, sec_protocol_key_update_t key_update_block, DispatchQueue key_update_queue);

		// extern void sec_protocol_options_set_challenge_block (sec_protocol_options_t _Nonnull options, sec_protocol_challenge_t _Nonnull challenge_block, dispatch_queue_t _Nonnull challenge_queue) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, introduced=12.0)));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void sec_protocol_options_set_challenge_block (OS_sec_protocol_options options, sec_protocol_challenge_t challenge_block, DispatchQueue challenge_queue);

		// extern void sec_protocol_options_set_verify_block (sec_protocol_options_t _Nonnull options, sec_protocol_verify_t _Nonnull verify_block, dispatch_queue_t _Nonnull verify_block_queue) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, introduced=12.0)));
		[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void sec_protocol_options_set_verify_block (OS_sec_protocol_options options, sec_protocol_verify_t verify_block, DispatchQueue verify_block_queue);

		// extern CFTypeID CFHostGetTypeID () __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFHostGetTypeID ();

		// extern CFHostRef _Nonnull CFHostCreateWithName (CFAllocatorRef _Nullable allocator, CFStringRef _Nonnull hostname) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFHostRef* CFHostCreateWithName ([NullAllowed] CFAllocatorRef* allocator, CFStringRef* hostname);

		// extern CFHostRef _Nonnull CFHostCreateWithAddress (CFAllocatorRef _Nullable allocator, CFDataRef _Nonnull addr) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFHostRef* CFHostCreateWithAddress ([NullAllowed] CFAllocatorRef* allocator, CFDataRef* addr);

		// extern CFHostRef _Nonnull CFHostCreateCopy (CFAllocatorRef _Nullable alloc, CFHostRef _Nonnull host) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFHostRef* CFHostCreateCopy ([NullAllowed] CFAllocatorRef* alloc, CFHostRef* host);

		// extern Boolean CFHostStartInfoResolution (CFHostRef _Nonnull theHost, CFHostInfoType info, CFStreamError * _Nullable error) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFHostStartInfoResolution (CFHostRef* theHost, CFHostInfoType info, [NullAllowed] CFStreamError* error);

		// extern CFArrayRef _Nullable CFHostGetAddressing (CFHostRef _Nonnull theHost, Boolean * _Nullable hasBeenResolved) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFArrayRef* CFHostGetAddressing (CFHostRef* theHost, [NullAllowed] byte* hasBeenResolved);

		// extern CFArrayRef _Nullable CFHostGetNames (CFHostRef _Nonnull theHost, Boolean * _Nullable hasBeenResolved) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFArrayRef* CFHostGetNames (CFHostRef* theHost, [NullAllowed] byte* hasBeenResolved);

		// extern CFDataRef _Nullable CFHostGetReachability (CFHostRef _Nonnull theHost, Boolean * _Nullable hasBeenResolved) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFDataRef* CFHostGetReachability (CFHostRef* theHost, [NullAllowed] byte* hasBeenResolved);

		// extern void CFHostCancelInfoResolution (CFHostRef _Nonnull theHost, CFHostInfoType info) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFHostCancelInfoResolution (CFHostRef* theHost, CFHostInfoType info);

		// extern Boolean CFHostSetClient (CFHostRef _Nonnull theHost, CFHostClientCallBack _Nullable clientCB, CFHostClientContext * _Nullable clientContext) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFHostSetClient (CFHostRef* theHost, [NullAllowed] CFHostClientCallBack* clientCB, [NullAllowed] CFHostClientContext* clientContext);

		// extern void CFHostScheduleWithRunLoop (CFHostRef _Nonnull theHost, CFRunLoopRef _Nonnull runLoop, CFStringRef _Nonnull runLoopMode) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFHostScheduleWithRunLoop (CFHostRef* theHost, CFRunLoopRef* runLoop, CFStringRef* runLoopMode);

		// extern void CFHostUnscheduleFromRunLoop (CFHostRef _Nonnull theHost, CFRunLoopRef _Nonnull runLoop, CFStringRef _Nonnull runLoopMode) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFHostUnscheduleFromRunLoop (CFHostRef* theHost, CFRunLoopRef* runLoop, CFStringRef* runLoopMode);

		// extern CFTypeID CFNetServiceGetTypeID () __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFNetServiceGetTypeID ();

		// extern CFTypeID CFNetServiceMonitorGetTypeID () __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFNetServiceMonitorGetTypeID ();

		// extern CFTypeID CFNetServiceBrowserGetTypeID () __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFNetServiceBrowserGetTypeID ();

		// extern CFNetServiceRef _Nonnull CFNetServiceCreate (CFAllocatorRef _Nullable alloc, CFStringRef _Nonnull domain, CFStringRef _Nonnull serviceType, CFStringRef _Nonnull name, SInt32 port) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFNetServiceRef* CFNetServiceCreate ([NullAllowed] CFAllocatorRef* alloc, CFStringRef* domain, CFStringRef* serviceType, CFStringRef* name, int port);

		// extern CFNetServiceRef _Nonnull CFNetServiceCreateCopy (CFAllocatorRef _Nullable alloc, CFNetServiceRef _Nonnull service) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFNetServiceRef* CFNetServiceCreateCopy ([NullAllowed] CFAllocatorRef* alloc, CFNetServiceRef* service);

		// extern CFStringRef _Nonnull CFNetServiceGetDomain (CFNetServiceRef _Nonnull theService) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFNetServiceGetDomain (CFNetServiceRef* theService);

		// extern CFStringRef _Nonnull CFNetServiceGetType (CFNetServiceRef _Nonnull theService) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFNetServiceGetType (CFNetServiceRef* theService);

		// extern CFStringRef _Nonnull CFNetServiceGetName (CFNetServiceRef _Nonnull theService) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFNetServiceGetName (CFNetServiceRef* theService);

		// extern Boolean CFNetServiceRegisterWithOptions (CFNetServiceRef _Nonnull theService, CFOptionFlags options, CFStreamError * _Nullable error) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFNetServiceRegisterWithOptions (CFNetServiceRef* theService, nuint options, [NullAllowed] CFStreamError* error);

		// extern Boolean CFNetServiceResolveWithTimeout (CFNetServiceRef _Nonnull theService, CFTimeInterval timeout, CFStreamError * _Nullable error) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFNetServiceResolveWithTimeout (CFNetServiceRef* theService, double timeout, [NullAllowed] CFStreamError* error);

		// extern void CFNetServiceCancel (CFNetServiceRef _Nonnull theService) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFNetServiceCancel (CFNetServiceRef* theService);

		// extern CFStringRef _Nullable CFNetServiceGetTargetHost (CFNetServiceRef _Nonnull theService) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFStringRef* CFNetServiceGetTargetHost (CFNetServiceRef* theService);

		// extern SInt32 CFNetServiceGetPortNumber (CFNetServiceRef _Nonnull theService) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int CFNetServiceGetPortNumber (CFNetServiceRef* theService);

		// extern CFArrayRef _Nullable CFNetServiceGetAddressing (CFNetServiceRef _Nonnull theService) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFArrayRef* CFNetServiceGetAddressing (CFNetServiceRef* theService);

		// extern CFDataRef _Nullable CFNetServiceGetTXTData (CFNetServiceRef _Nonnull theService) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFDataRef* CFNetServiceGetTXTData (CFNetServiceRef* theService);

		// extern Boolean CFNetServiceSetTXTData (CFNetServiceRef _Nonnull theService, CFDataRef _Nonnull txtRecord) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFNetServiceSetTXTData (CFNetServiceRef* theService, CFDataRef* txtRecord);

		// extern CFDictionaryRef _Nullable CFNetServiceCreateDictionaryWithTXTData (CFAllocatorRef _Nullable alloc, CFDataRef _Nonnull txtRecord) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFDictionaryRef* CFNetServiceCreateDictionaryWithTXTData ([NullAllowed] CFAllocatorRef* alloc, CFDataRef* txtRecord);

		// extern CFDataRef _Nullable CFNetServiceCreateTXTDataWithDictionary (CFAllocatorRef _Nullable alloc, CFDictionaryRef _Nonnull keyValuePairs) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFDataRef* CFNetServiceCreateTXTDataWithDictionary ([NullAllowed] CFAllocatorRef* alloc, CFDictionaryRef* keyValuePairs);

		// extern Boolean CFNetServiceSetClient (CFNetServiceRef _Nonnull theService, CFNetServiceClientCallBack _Nullable clientCB, CFNetServiceClientContext * _Nullable clientContext) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFNetServiceSetClient (CFNetServiceRef* theService, [NullAllowed] CFNetServiceClientCallBack* clientCB, [NullAllowed] CFNetServiceClientContext* clientContext);

		// extern void CFNetServiceScheduleWithRunLoop (CFNetServiceRef _Nonnull theService, CFRunLoopRef _Nonnull runLoop, CFStringRef _Nonnull runLoopMode) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFNetServiceScheduleWithRunLoop (CFNetServiceRef* theService, CFRunLoopRef* runLoop, CFStringRef* runLoopMode);

		// extern void CFNetServiceUnscheduleFromRunLoop (CFNetServiceRef _Nonnull theService, CFRunLoopRef _Nonnull runLoop, CFStringRef _Nonnull runLoopMode) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFNetServiceUnscheduleFromRunLoop (CFNetServiceRef* theService, CFRunLoopRef* runLoop, CFStringRef* runLoopMode);

		// extern CFNetServiceMonitorRef _Nonnull CFNetServiceMonitorCreate (CFAllocatorRef _Nullable alloc, CFNetServiceRef _Nonnull theService, CFNetServiceMonitorClientCallBack _Nonnull clientCB, CFNetServiceClientContext * _Nonnull clientContext) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFNetServiceMonitorRef* CFNetServiceMonitorCreate ([NullAllowed] CFAllocatorRef* alloc, CFNetServiceRef* theService, CFNetServiceMonitorClientCallBack* clientCB, CFNetServiceClientContext* clientContext);

		// extern void CFNetServiceMonitorInvalidate (CFNetServiceMonitorRef _Nonnull monitor) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFNetServiceMonitorInvalidate (CFNetServiceMonitorRef* monitor);

		// extern Boolean CFNetServiceMonitorStart (CFNetServiceMonitorRef _Nonnull monitor, CFNetServiceMonitorType recordType, CFStreamError * _Nullable error) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFNetServiceMonitorStart (CFNetServiceMonitorRef* monitor, CFNetServiceMonitorType recordType, [NullAllowed] CFStreamError* error);

		// extern void CFNetServiceMonitorStop (CFNetServiceMonitorRef _Nonnull monitor, CFStreamError * _Nullable error) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFNetServiceMonitorStop (CFNetServiceMonitorRef* monitor, [NullAllowed] CFStreamError* error);

		// extern void CFNetServiceMonitorScheduleWithRunLoop (CFNetServiceMonitorRef _Nonnull monitor, CFRunLoopRef _Nonnull runLoop, CFStringRef _Nonnull runLoopMode) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFNetServiceMonitorScheduleWithRunLoop (CFNetServiceMonitorRef* monitor, CFRunLoopRef* runLoop, CFStringRef* runLoopMode);

		// extern void CFNetServiceMonitorUnscheduleFromRunLoop (CFNetServiceMonitorRef _Nonnull monitor, CFRunLoopRef _Nonnull runLoop, CFStringRef _Nonnull runLoopMode) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFNetServiceMonitorUnscheduleFromRunLoop (CFNetServiceMonitorRef* monitor, CFRunLoopRef* runLoop, CFStringRef* runLoopMode);

		// extern CFNetServiceBrowserRef _Nonnull CFNetServiceBrowserCreate (CFAllocatorRef _Nullable alloc, CFNetServiceBrowserClientCallBack _Nonnull clientCB, CFNetServiceClientContext * _Nonnull clientContext) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFNetServiceBrowserRef* CFNetServiceBrowserCreate ([NullAllowed] CFAllocatorRef* alloc, CFNetServiceBrowserClientCallBack* clientCB, CFNetServiceClientContext* clientContext);

		// extern void CFNetServiceBrowserInvalidate (CFNetServiceBrowserRef _Nonnull browser) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFNetServiceBrowserInvalidate (CFNetServiceBrowserRef* browser);

		// extern Boolean CFNetServiceBrowserSearchForDomains (CFNetServiceBrowserRef _Nonnull browser, Boolean registrationDomains, CFStreamError * _Nullable error) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFNetServiceBrowserSearchForDomains (CFNetServiceBrowserRef* browser, byte registrationDomains, [NullAllowed] CFStreamError* error);

		// extern Boolean CFNetServiceBrowserSearchForServices (CFNetServiceBrowserRef _Nonnull browser, CFStringRef _Nonnull domain, CFStringRef _Nonnull serviceType, CFStreamError * _Nullable error) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFNetServiceBrowserSearchForServices (CFNetServiceBrowserRef* browser, CFStringRef* domain, CFStringRef* serviceType, [NullAllowed] CFStreamError* error);

		// extern void CFNetServiceBrowserStopSearch (CFNetServiceBrowserRef _Nonnull browser, CFStreamError * _Nullable error) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFNetServiceBrowserStopSearch (CFNetServiceBrowserRef* browser, [NullAllowed] CFStreamError* error);

		// extern void CFNetServiceBrowserScheduleWithRunLoop (CFNetServiceBrowserRef _Nonnull browser, CFRunLoopRef _Nonnull runLoop, CFStringRef _Nonnull runLoopMode) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFNetServiceBrowserScheduleWithRunLoop (CFNetServiceBrowserRef* browser, CFRunLoopRef* runLoop, CFStringRef* runLoopMode);

		// extern void CFNetServiceBrowserUnscheduleFromRunLoop (CFNetServiceBrowserRef _Nonnull browser, CFRunLoopRef _Nonnull runLoop, CFStringRef _Nonnull runLoopMode) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFNetServiceBrowserUnscheduleFromRunLoop (CFNetServiceBrowserRef* browser, CFRunLoopRef* runLoop, CFStringRef* runLoopMode);

		// extern Boolean CFNetServiceRegister (CFNetServiceRef _Nonnull theService, CFStreamError * _Nullable error) __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFNetServiceRegister (CFNetServiceRef* theService, [NullAllowed] CFStreamError* error);

		// extern Boolean CFNetServiceResolve (CFNetServiceRef _Nonnull theService, CFStreamError * _Nullable error) __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFNetServiceResolve (CFNetServiceRef* theService, [NullAllowed] CFStreamError* error);

		// SInt32 CFSocketStreamSOCKSGetErrorSubdomain (const CFStreamError * _Nonnull error) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int CFSocketStreamSOCKSGetErrorSubdomain (CFStreamError* error);

		// SInt32 CFSocketStreamSOCKSGetError (const CFStreamError * _Nonnull error) __attribute__((always_inline));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int CFSocketStreamSOCKSGetError (CFStreamError* error);

		// extern void CFStreamCreatePairWithSocketToCFHost (CFAllocatorRef _Nullable alloc, CFHostRef _Nonnull host, SInt32 port, CFReadStreamRef  _Nullable * _Nullable readStream, CFWriteStreamRef  _Nullable * _Nullable writeStream) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFStreamCreatePairWithSocketToCFHost ([NullAllowed] CFAllocatorRef* alloc, CFHostRef* host, int port, [NullAllowed] CFReadStreamRef** readStream, [NullAllowed] CFWriteStreamRef** writeStream);

		// extern void CFStreamCreatePairWithSocketToNetService (CFAllocatorRef _Nullable alloc, CFNetServiceRef _Nonnull service, CFReadStreamRef  _Nullable * _Nullable readStream, CFWriteStreamRef  _Nullable * _Nullable writeStream) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFStreamCreatePairWithSocketToNetService ([NullAllowed] CFAllocatorRef* alloc, CFNetServiceRef* service, [NullAllowed] CFReadStreamRef** readStream, [NullAllowed] CFWriteStreamRef** writeStream);

		// extern CFReadStreamRef _Nonnull CFReadStreamCreateWithFTPURL (CFAllocatorRef _Nullable alloc, CFURLRef _Nonnull ftpURL) __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
		[Introduced (PlatformName.iOS, 2, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFReadStreamRef* CFReadStreamCreateWithFTPURL ([NullAllowed] CFAllocatorRef* alloc, CFURLRef* ftpURL);

		// extern CFIndex CFFTPCreateParsedResourceListing (CFAllocatorRef _Nullable alloc, const UInt8 * _Nonnull buffer, CFIndex bufferLength, CFDictionaryRef  _Nullable * _Nullable parsed) __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
		[Introduced (PlatformName.iOS, 2, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFFTPCreateParsedResourceListing ([NullAllowed] CFAllocatorRef* alloc, byte* buffer, nint bufferLength, [NullAllowed] CFDictionaryRef** parsed);

		// extern CFWriteStreamRef _Nonnull CFWriteStreamCreateWithFTPURL (CFAllocatorRef _Nullable alloc, CFURLRef _Nonnull ftpURL) __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
		[Introduced (PlatformName.iOS, 2, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFWriteStreamRef* CFWriteStreamCreateWithFTPURL ([NullAllowed] CFAllocatorRef* alloc, CFURLRef* ftpURL);

		// extern CFTypeID CFHTTPMessageGetTypeID () __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFHTTPMessageGetTypeID ();

		// extern CFHTTPMessageRef _Nonnull CFHTTPMessageCreateRequest (CFAllocatorRef _Nullable alloc, CFStringRef _Nonnull requestMethod, CFURLRef _Nonnull url, CFStringRef _Nonnull httpVersion) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFHTTPMessageRef* CFHTTPMessageCreateRequest ([NullAllowed] CFAllocatorRef* alloc, CFStringRef* requestMethod, CFURLRef* url, CFStringRef* httpVersion);

		// extern CFHTTPMessageRef _Nonnull CFHTTPMessageCreateResponse (CFAllocatorRef _Nullable alloc, CFIndex statusCode, CFStringRef _Nullable statusDescription, CFStringRef _Nonnull httpVersion) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFHTTPMessageRef* CFHTTPMessageCreateResponse ([NullAllowed] CFAllocatorRef* alloc, nint statusCode, [NullAllowed] CFStringRef* statusDescription, CFStringRef* httpVersion);

		// extern CFHTTPMessageRef _Nonnull CFHTTPMessageCreateEmpty (CFAllocatorRef _Nullable alloc, Boolean isRequest) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFHTTPMessageRef* CFHTTPMessageCreateEmpty ([NullAllowed] CFAllocatorRef* alloc, byte isRequest);

		// extern CFHTTPMessageRef _Nonnull CFHTTPMessageCreateCopy (CFAllocatorRef _Nullable alloc, CFHTTPMessageRef _Nonnull message) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFHTTPMessageRef* CFHTTPMessageCreateCopy ([NullAllowed] CFAllocatorRef* alloc, CFHTTPMessageRef* message);

		// extern Boolean CFHTTPMessageIsRequest (CFHTTPMessageRef _Nonnull message) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFHTTPMessageIsRequest (CFHTTPMessageRef* message);

		// extern CFStringRef _Nonnull CFHTTPMessageCopyVersion (CFHTTPMessageRef _Nonnull message) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFHTTPMessageCopyVersion (CFHTTPMessageRef* message);

		// extern CFDataRef _Nullable CFHTTPMessageCopyBody (CFHTTPMessageRef _Nonnull message) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFDataRef* CFHTTPMessageCopyBody (CFHTTPMessageRef* message);

		// extern void CFHTTPMessageSetBody (CFHTTPMessageRef _Nonnull message, CFDataRef _Nonnull bodyData) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFHTTPMessageSetBody (CFHTTPMessageRef* message, CFDataRef* bodyData);

		// extern CFStringRef _Nullable CFHTTPMessageCopyHeaderFieldValue (CFHTTPMessageRef _Nonnull message, CFStringRef _Nonnull headerField) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFStringRef* CFHTTPMessageCopyHeaderFieldValue (CFHTTPMessageRef* message, CFStringRef* headerField);

		// extern CFDictionaryRef _Nullable CFHTTPMessageCopyAllHeaderFields (CFHTTPMessageRef _Nonnull message) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFDictionaryRef* CFHTTPMessageCopyAllHeaderFields (CFHTTPMessageRef* message);

		// extern void CFHTTPMessageSetHeaderFieldValue (CFHTTPMessageRef _Nonnull message, CFStringRef _Nonnull headerField, CFStringRef _Nullable value) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFHTTPMessageSetHeaderFieldValue (CFHTTPMessageRef* message, CFStringRef* headerField, [NullAllowed] CFStringRef* value);

		// extern Boolean CFHTTPMessageAppendBytes (CFHTTPMessageRef _Nonnull message, const UInt8 * _Nonnull newBytes, CFIndex numBytes) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFHTTPMessageAppendBytes (CFHTTPMessageRef* message, byte* newBytes, nint numBytes);

		// extern Boolean CFHTTPMessageIsHeaderComplete (CFHTTPMessageRef _Nonnull message) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFHTTPMessageIsHeaderComplete (CFHTTPMessageRef* message);

		// extern CFDataRef _Nullable CFHTTPMessageCopySerializedMessage (CFHTTPMessageRef _Nonnull message) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFDataRef* CFHTTPMessageCopySerializedMessage (CFHTTPMessageRef* message);

		// extern CFURLRef _Nullable CFHTTPMessageCopyRequestURL (CFHTTPMessageRef _Nonnull request) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFURLRef* CFHTTPMessageCopyRequestURL (CFHTTPMessageRef* request);

		// extern CFStringRef _Nullable CFHTTPMessageCopyRequestMethod (CFHTTPMessageRef _Nonnull request) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFStringRef* CFHTTPMessageCopyRequestMethod (CFHTTPMessageRef* request);

		// extern Boolean CFHTTPMessageAddAuthentication (CFHTTPMessageRef _Nonnull request, CFHTTPMessageRef _Nullable authenticationFailureResponse, CFStringRef _Nonnull username, CFStringRef _Nonnull password, CFStringRef _Nullable authenticationScheme, Boolean forProxy) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFHTTPMessageAddAuthentication (CFHTTPMessageRef* request, [NullAllowed] CFHTTPMessageRef* authenticationFailureResponse, CFStringRef* username, CFStringRef* password, [NullAllowed] CFStringRef* authenticationScheme, byte forProxy);

		// extern CFIndex CFHTTPMessageGetResponseStatusCode (CFHTTPMessageRef _Nonnull response) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFHTTPMessageGetResponseStatusCode (CFHTTPMessageRef* response);

		// extern CFStringRef _Nullable CFHTTPMessageCopyResponseStatusLine (CFHTTPMessageRef _Nonnull response) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFStringRef* CFHTTPMessageCopyResponseStatusLine (CFHTTPMessageRef* response);

		// extern CFReadStreamRef _Nonnull CFReadStreamCreateForHTTPRequest (CFAllocatorRef _Nullable alloc, CFHTTPMessageRef _Nonnull request) __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
		[Introduced (PlatformName.iOS, 2, 0, message: "Use NSURLSession API for http requests")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use NSURLSession API for http requests")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFReadStreamRef* CFReadStreamCreateForHTTPRequest ([NullAllowed] CFAllocatorRef* alloc, CFHTTPMessageRef* request);

		// extern CFReadStreamRef _Nonnull CFReadStreamCreateForStreamedHTTPRequest (CFAllocatorRef _Nullable alloc, CFHTTPMessageRef _Nonnull requestHeaders, CFReadStreamRef _Nonnull requestBody) __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
		[Introduced (PlatformName.iOS, 2, 0, message: "Use NSURLSession API for http requests")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use NSURLSession API for http requests")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFReadStreamRef* CFReadStreamCreateForStreamedHTTPRequest ([NullAllowed] CFAllocatorRef* alloc, CFHTTPMessageRef* requestHeaders, CFReadStreamRef* requestBody);

		// extern CFTypeID CFHTTPAuthenticationGetTypeID () __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CFHTTPAuthenticationGetTypeID ();

		// extern CFHTTPAuthenticationRef _Nonnull CFHTTPAuthenticationCreateFromResponse (CFAllocatorRef _Nullable alloc, CFHTTPMessageRef _Nonnull response) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFHTTPAuthenticationRef* CFHTTPAuthenticationCreateFromResponse ([NullAllowed] CFAllocatorRef* alloc, CFHTTPMessageRef* response);

		// extern Boolean CFHTTPAuthenticationIsValid (CFHTTPAuthenticationRef _Nonnull auth, CFStreamError * _Nullable error) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFHTTPAuthenticationIsValid (CFHTTPAuthenticationRef* auth, [NullAllowed] CFStreamError* error);

		// extern Boolean CFHTTPAuthenticationAppliesToRequest (CFHTTPAuthenticationRef _Nonnull auth, CFHTTPMessageRef _Nonnull request) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFHTTPAuthenticationAppliesToRequest (CFHTTPAuthenticationRef* auth, CFHTTPMessageRef* request);

		// extern Boolean CFHTTPAuthenticationRequiresOrderedRequests (CFHTTPAuthenticationRef _Nonnull auth) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFHTTPAuthenticationRequiresOrderedRequests (CFHTTPAuthenticationRef* auth);

		// extern Boolean CFHTTPMessageApplyCredentials (CFHTTPMessageRef _Nonnull request, CFHTTPAuthenticationRef _Nonnull auth, CFStringRef _Nullable username, CFStringRef _Nullable password, CFStreamError * _Nullable error) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFHTTPMessageApplyCredentials (CFHTTPMessageRef* request, CFHTTPAuthenticationRef* auth, [NullAllowed] CFStringRef* username, [NullAllowed] CFStringRef* password, [NullAllowed] CFStreamError* error);

		// extern Boolean CFHTTPMessageApplyCredentialDictionary (CFHTTPMessageRef _Nonnull request, CFHTTPAuthenticationRef _Nonnull auth, CFDictionaryRef _Nonnull dict, CFStreamError * _Nullable error) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFHTTPMessageApplyCredentialDictionary (CFHTTPMessageRef* request, CFHTTPAuthenticationRef* auth, CFDictionaryRef* dict, [NullAllowed] CFStreamError* error);

		// extern CFStringRef _Nonnull CFHTTPAuthenticationCopyRealm (CFHTTPAuthenticationRef _Nonnull auth) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFHTTPAuthenticationCopyRealm (CFHTTPAuthenticationRef* auth);

		// extern CFArrayRef _Nonnull CFHTTPAuthenticationCopyDomains (CFHTTPAuthenticationRef _Nonnull auth) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFArrayRef* CFHTTPAuthenticationCopyDomains (CFHTTPAuthenticationRef* auth);

		// extern CFStringRef _Nonnull CFHTTPAuthenticationCopyMethod (CFHTTPAuthenticationRef _Nonnull auth) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFStringRef* CFHTTPAuthenticationCopyMethod (CFHTTPAuthenticationRef* auth);

		// extern Boolean CFHTTPAuthenticationRequiresUserNameAndPassword (CFHTTPAuthenticationRef _Nonnull auth) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFHTTPAuthenticationRequiresUserNameAndPassword (CFHTTPAuthenticationRef* auth);

		// extern Boolean CFHTTPAuthenticationRequiresAccountDomain (CFHTTPAuthenticationRef _Nonnull auth) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CFHTTPAuthenticationRequiresAccountDomain (CFHTTPAuthenticationRef* auth);

		// extern CFNetDiagnosticRef _Nonnull CFNetDiagnosticCreateWithStreams (CFAllocatorRef _Nullable alloc, CFReadStreamRef _Nullable readStream, CFWriteStreamRef _Nullable writeStream) __attribute__((availability(ios, introduced=2.0, deprecated=11.0)));
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 11, 0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFNetDiagnosticRef* CFNetDiagnosticCreateWithStreams ([NullAllowed] CFAllocatorRef* alloc, [NullAllowed] CFReadStreamRef* readStream, [NullAllowed] CFWriteStreamRef* writeStream);

		// extern CFNetDiagnosticRef _Nonnull CFNetDiagnosticCreateWithURL (CFAllocatorRef _Nonnull alloc, CFURLRef _Nonnull url) __attribute__((availability(ios, introduced=2.0, deprecated=11.0)));
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 11, 0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFNetDiagnosticRef* CFNetDiagnosticCreateWithURL (CFAllocatorRef* alloc, CFURLRef* url);

		// extern void CFNetDiagnosticSetName (CFNetDiagnosticRef _Nonnull details, CFStringRef _Nonnull name) __attribute__((availability(ios, introduced=2.0, deprecated=11.0)));
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 11, 0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CFNetDiagnosticSetName (CFNetDiagnosticRef* details, CFStringRef* name);

		// extern CFNetDiagnosticStatus CFNetDiagnosticDiagnoseProblemInteractively (CFNetDiagnosticRef _Nonnull details) __attribute__((availability(ios, introduced=2.0, deprecated=11.0)));
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 11, 0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFNetDiagnosticDiagnoseProblemInteractively (CFNetDiagnosticRef* details);

		// extern CFNetDiagnosticStatus CFNetDiagnosticCopyNetworkStatusPassively (CFNetDiagnosticRef _Nonnull details, CFStringRef  _Nullable * _Nullable description) __attribute__((availability(ios, introduced=2.0, deprecated=11.0)));
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 11, 0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nint CFNetDiagnosticCopyNetworkStatusPassively (CFNetDiagnosticRef* details, [NullAllowed] CFStringRef** description);

		// extern CFDictionaryRef _Nullable CFNetworkCopySystemProxySettings () __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFDictionaryRef* CFNetworkCopySystemProxySettings ();

		// extern CFArrayRef _Nonnull CFNetworkCopyProxiesForURL (CFURLRef _Nonnull url, CFDictionaryRef _Nonnull proxySettings) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFArrayRef* CFNetworkCopyProxiesForURL (CFURLRef* url, CFDictionaryRef* proxySettings);

		// extern CFArrayRef _Nullable CFNetworkCopyProxiesForAutoConfigurationScript (CFStringRef _Nonnull proxyAutoConfigurationScript, CFURLRef _Nonnull targetURL, CFErrorRef  _Nullable * _Nullable error) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFArrayRef* CFNetworkCopyProxiesForAutoConfigurationScript (CFStringRef* proxyAutoConfigurationScript, CFURLRef* targetURL, [NullAllowed] CFErrorRef** error);

		// extern CFRunLoopSourceRef _Nonnull CFNetworkExecuteProxyAutoConfigurationScript (CFStringRef _Nonnull proxyAutoConfigurationScript, CFURLRef _Nonnull targetURL, CFProxyAutoConfigurationResultCallback _Nonnull cb, CFStreamClientContext * _Nonnull clientContext) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFRunLoopSourceRef* CFNetworkExecuteProxyAutoConfigurationScript (CFStringRef* proxyAutoConfigurationScript, CFURLRef* targetURL, CFProxyAutoConfigurationResultCallback* cb, CFStreamClientContext* clientContext);

		// extern CFRunLoopSourceRef _Nonnull CFNetworkExecuteProxyAutoConfigurationURL (CFURLRef _Nonnull proxyAutoConfigURL, CFURLRef _Nonnull targetURL, CFProxyAutoConfigurationResultCallback _Nonnull cb, CFStreamClientContext * _Nonnull clientContext) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFRunLoopSourceRef* CFNetworkExecuteProxyAutoConfigurationURL (CFURLRef* proxyAutoConfigURL, CFURLRef* targetURL, CFProxyAutoConfigurationResultCallback* cb, CFStreamClientContext* clientContext);

		// extern int audit (const void *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int audit (void*, int);

		// extern int auditon (int, void *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int auditon (int, void*, int);

		// extern int auditctl (const char *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int auditctl (sbyte*);

		// extern int getauid (au_id_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getauid (uint*);

		// extern int setauid (const au_id_t *);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int setauid (uint*);

		// extern int getaudit_addr (struct auditinfo_addr *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getaudit_addr (auditinfo_addr*, int);

		// extern int setaudit_addr (const struct auditinfo_addr *, int);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int setaudit_addr (auditinfo_addr*, int);

		// extern int getaudit (struct auditinfo *) __attribute__((availability(ios, introduced=2.0, deprecated=6.0)));
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 6, 0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int getaudit (auditinfo*);

		// extern int setaudit (const struct auditinfo *) __attribute__((availability(ios, introduced=2.0, deprecated=6.0)));
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 6, 0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int setaudit (auditinfo*);

		// extern mach_port_name_t audit_session_self ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern uint audit_session_self ();

		// extern au_asid_t audit_session_join (mach_port_name_t port);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int audit_session_join (uint port);

		// extern int audit_session_port (au_asid_t asid, mach_port_name_t *portname);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int audit_session_port (int asid, uint* portname);

		// extern CFTypeID SSLContextGetTypeID () __attribute__((availability(macos, introduced=10.8, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 8, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint SSLContextGetTypeID ();

		// extern SSLContextRef _Nullable SSLCreateContext (CFAllocatorRef _Nullable alloc, SSLProtocolSide protocolSide, SSLConnectionType connectionType) __attribute__((availability(macos, introduced=10.8, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 8, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe SSLContextRef* SSLCreateContext ([NullAllowed] CFAllocatorRef* alloc, SSLProtocolSide protocolSide, SSLConnectionType connectionType);

		// extern OSStatus SSLGetSessionState (SSLContextRef _Nonnull context, SSLSessionState * _Nonnull state) __attribute__((availability(macos, introduced=10.2, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLGetSessionState (SSLContextRef* context, SSLSessionState* state);

		// extern OSStatus SSLSetSessionOption (SSLContextRef _Nonnull context, SSLSessionOption option, Boolean value) __attribute__((availability(macos, introduced=10.6, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 6, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLSetSessionOption (SSLContextRef* context, SSLSessionOption option, byte value);

		// extern OSStatus SSLGetSessionOption (SSLContextRef _Nonnull context, SSLSessionOption option, Boolean * _Nonnull value) __attribute__((availability(macos, introduced=10.6, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 6, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLGetSessionOption (SSLContextRef* context, SSLSessionOption option, byte* value);

		// extern OSStatus SSLSetIOFuncs (SSLContextRef _Nonnull context, SSLReadFunc _Nonnull readFunc, SSLWriteFunc _Nonnull writeFunc) __attribute__((availability(macos, introduced=10.2, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLSetIOFuncs (SSLContextRef* context, SSLReadFunc* readFunc, SSLWriteFunc* writeFunc);

		// extern OSStatus SSLSetSessionConfig (SSLContextRef _Nonnull context, CFStringRef _Nonnull config) __attribute__((availability(macos, introduced=10.12, deprecated=10.15))) __attribute__((availability(ios, introduced=10.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 12, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 10, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLSetSessionConfig (SSLContextRef* context, CFStringRef* config);

		// extern OSStatus SSLSetProtocolVersionMin (SSLContextRef _Nonnull context, SSLProtocol minVersion) __attribute__((availability(macos, introduced=10.8, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 8, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLSetProtocolVersionMin (SSLContextRef* context, SSLProtocol minVersion);

		// extern OSStatus SSLGetProtocolVersionMin (SSLContextRef _Nonnull context, SSLProtocol * _Nonnull minVersion) __attribute__((availability(macos, introduced=10.8, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 8, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLGetProtocolVersionMin (SSLContextRef* context, SSLProtocol* minVersion);

		// extern OSStatus SSLSetProtocolVersionMax (SSLContextRef _Nonnull context, SSLProtocol maxVersion) __attribute__((availability(macos, introduced=10.8, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 8, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLSetProtocolVersionMax (SSLContextRef* context, SSLProtocol maxVersion);

		// extern OSStatus SSLGetProtocolVersionMax (SSLContextRef _Nonnull context, SSLProtocol * _Nonnull maxVersion) __attribute__((availability(macos, introduced=10.8, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 8, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLGetProtocolVersionMax (SSLContextRef* context, SSLProtocol* maxVersion);

		// extern OSStatus SSLSetCertificate (SSLContextRef _Nonnull context, CFArrayRef _Nullable certRefs) __attribute__((availability(macos, introduced=10.2, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLSetCertificate (SSLContextRef* context, [NullAllowed] CFArrayRef* certRefs);

		// extern OSStatus SSLSetConnection (SSLContextRef _Nonnull context, SSLConnectionRef _Nullable connection) __attribute__((availability(macos, introduced=10.2, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLSetConnection (SSLContextRef* context, [NullAllowed] void* connection);

		// extern OSStatus SSLGetConnection (SSLContextRef _Nonnull context, SSLConnectionRef  _Nullable * _Nonnull connection) __attribute__((availability(macos, introduced=10.2, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLGetConnection (SSLContextRef* context, [NullAllowed] void** connection);

		// extern OSStatus SSLSetPeerDomainName (SSLContextRef _Nonnull context, const char * _Nullable peerName, size_t peerNameLen) __attribute__((availability(macos, introduced=10.2, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLSetPeerDomainName (SSLContextRef* context, [NullAllowed] sbyte* peerName, nuint peerNameLen);

		// extern OSStatus SSLGetPeerDomainNameLength (SSLContextRef _Nonnull context, size_t * _Nonnull peerNameLen) __attribute__((availability(macos, introduced=10.2, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLGetPeerDomainNameLength (SSLContextRef* context, nuint* peerNameLen);

		// extern OSStatus SSLGetPeerDomainName (SSLContextRef _Nonnull context, char * _Nonnull peerName, size_t * _Nonnull peerNameLen) __attribute__((availability(macos, introduced=10.2, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLGetPeerDomainName (SSLContextRef* context, sbyte* peerName, nuint* peerNameLen);

		// extern OSStatus SSLCopyRequestedPeerNameLength (SSLContextRef _Nonnull ctx, size_t * _Nonnull peerNameLen) __attribute__((availability(macos, introduced=10.11, deprecated=10.15))) __attribute__((availability(ios, introduced=9.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 11, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 9, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLCopyRequestedPeerNameLength (SSLContextRef* ctx, nuint* peerNameLen);

		// extern OSStatus SSLCopyRequestedPeerName (SSLContextRef _Nonnull context, char * _Nonnull peerName, size_t * _Nonnull peerNameLen) __attribute__((availability(macos, introduced=10.11, deprecated=10.15))) __attribute__((availability(ios, introduced=9.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 11, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 9, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLCopyRequestedPeerName (SSLContextRef* context, sbyte* peerName, nuint* peerNameLen);

		// extern OSStatus SSLSetDatagramHelloCookie (SSLContextRef _Nonnull dtlsContext, const void * _Nullable cookie, size_t cookieLen) __attribute__((availability(macos, introduced=10.8, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 8, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLSetDatagramHelloCookie (SSLContextRef* dtlsContext, [NullAllowed] void* cookie, nuint cookieLen);

		// extern OSStatus SSLSetMaxDatagramRecordSize (SSLContextRef _Nonnull dtlsContext, size_t maxSize) __attribute__((availability(macos, introduced=10.8, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 8, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLSetMaxDatagramRecordSize (SSLContextRef* dtlsContext, nuint maxSize);

		// extern OSStatus SSLGetMaxDatagramRecordSize (SSLContextRef _Nonnull dtlsContext, size_t * _Nonnull maxSize) __attribute__((availability(macos, introduced=10.8, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 8, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLGetMaxDatagramRecordSize (SSLContextRef* dtlsContext, nuint* maxSize);

		// extern OSStatus SSLGetNegotiatedProtocolVersion (SSLContextRef _Nonnull context, SSLProtocol * _Nonnull protocol) __attribute__((availability(macos, introduced=10.2, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLGetNegotiatedProtocolVersion (SSLContextRef* context, SSLProtocol* protocol);

		// extern OSStatus SSLGetNumberSupportedCiphers (SSLContextRef _Nonnull context, size_t * _Nonnull numCiphers) __attribute__((availability(macos, introduced=10.2, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLGetNumberSupportedCiphers (SSLContextRef* context, nuint* numCiphers);

		// extern OSStatus SSLGetSupportedCiphers (SSLContextRef _Nonnull context, SSLCipherSuite * _Nonnull ciphers, size_t * _Nonnull numCiphers) __attribute__((availability(macos, introduced=10.2, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLGetSupportedCiphers (SSLContextRef* context, ushort* ciphers, nuint* numCiphers);

		// extern OSStatus SSLGetNumberEnabledCiphers (SSLContextRef _Nonnull context, size_t * _Nonnull numCiphers) __attribute__((availability(macos, introduced=10.2, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLGetNumberEnabledCiphers (SSLContextRef* context, nuint* numCiphers);

		// extern OSStatus SSLSetEnabledCiphers (SSLContextRef _Nonnull context, const SSLCipherSuite * _Nonnull ciphers, size_t numCiphers) __attribute__((availability(macos, introduced=10.2, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLSetEnabledCiphers (SSLContextRef* context, ushort* ciphers, nuint numCiphers);

		// extern OSStatus SSLGetEnabledCiphers (SSLContextRef _Nonnull context, SSLCipherSuite * _Nonnull ciphers, size_t * _Nonnull numCiphers) __attribute__((availability(macos, introduced=10.2, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLGetEnabledCiphers (SSLContextRef* context, ushort* ciphers, nuint* numCiphers);

		// extern OSStatus SSLSetSessionTicketsEnabled (SSLContextRef _Nonnull context, Boolean enabled) __attribute__((availability(macos, introduced=10.13, deprecated=10.15))) __attribute__((availability(ios, introduced=11.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 13, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 11, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLSetSessionTicketsEnabled (SSLContextRef* context, byte enabled);

		// extern OSStatus SSLCopyPeerTrust (SSLContextRef _Nonnull context, SecTrustRef  _Nullable * _Nonnull trust) __attribute__((availability(macos, introduced=10.6, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 6, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLCopyPeerTrust (SSLContextRef* context, [NullAllowed] SecTrustRef** trust);

		// extern OSStatus SSLSetPeerID (SSLContextRef _Nonnull context, const void * _Nullable peerID, size_t peerIDLen) __attribute__((availability(macos, introduced=10.2, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLSetPeerID (SSLContextRef* context, [NullAllowed] void* peerID, nuint peerIDLen);

		// extern OSStatus SSLGetPeerID (SSLContextRef _Nonnull context, const void * _Nullable * _Nonnull peerID, size_t * _Nonnull peerIDLen) __attribute__((availability(macos, introduced=10.2, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLGetPeerID (SSLContextRef* context, [NullAllowed] void** peerID, nuint* peerIDLen);

		// extern OSStatus SSLGetNegotiatedCipher (SSLContextRef _Nonnull context, SSLCipherSuite * _Nonnull cipherSuite) __attribute__((availability(macos, introduced=10.2, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLGetNegotiatedCipher (SSLContextRef* context, ushort* cipherSuite);

		// extern OSStatus SSLSetALPNProtocols (SSLContextRef _Nonnull context, CFArrayRef _Nonnull protocols) __attribute__((availability(macos, introduced=10.13, deprecated=10.15))) __attribute__((availability(ios, introduced=11.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 13, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 11, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLSetALPNProtocols (SSLContextRef* context, CFArrayRef* protocols);

		// extern OSStatus SSLCopyALPNProtocols (SSLContextRef _Nonnull context, CFArrayRef  _Nullable * _Nonnull protocols) __attribute__((availability(macos, introduced=10.13, deprecated=10.15))) __attribute__((availability(ios, introduced=11.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 13, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 11, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLCopyALPNProtocols (SSLContextRef* context, [NullAllowed] CFArrayRef** protocols);

		// extern OSStatus SSLSetOCSPResponse (SSLContextRef _Nonnull context, CFDataRef _Nonnull response) __attribute__((availability(macos, introduced=10.13, deprecated=10.15))) __attribute__((availability(ios, introduced=11.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 13, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 11, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLSetOCSPResponse (SSLContextRef* context, CFDataRef* response);

		// extern OSStatus SSLSetEncryptionCertificate (SSLContextRef _Nonnull context, CFArrayRef _Nonnull certRefs) __attribute__((availability(macos, introduced=10.2, deprecated=10.11))) __attribute__((availability(ios, introduced=5.0, deprecated=9.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 11, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLSetEncryptionCertificate (SSLContextRef* context, CFArrayRef* certRefs);

		// extern OSStatus SSLSetClientSideAuthenticate (SSLContextRef _Nonnull context, SSLAuthenticate auth) __attribute__((availability(macos, introduced=10.2, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLSetClientSideAuthenticate (SSLContextRef* context, SSLAuthenticate auth);

		// extern OSStatus SSLAddDistinguishedName (SSLContextRef _Nonnull context, const void * _Nullable derDN, size_t derDNLen) __attribute__((availability(macos, introduced=10.4, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 4, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLAddDistinguishedName (SSLContextRef* context, [NullAllowed] void* derDN, nuint derDNLen);

		// extern OSStatus SSLCopyDistinguishedNames (SSLContextRef _Nonnull context, CFArrayRef  _Nullable * _Nonnull names) __attribute__((availability(macos, introduced=10.5, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 5, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLCopyDistinguishedNames (SSLContextRef* context, [NullAllowed] CFArrayRef** names);

		// extern OSStatus SSLGetClientCertificateState (SSLContextRef _Nonnull context, SSLClientCertificateState * _Nonnull clientState) __attribute__((availability(macos, introduced=10.3, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 3, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLGetClientCertificateState (SSLContextRef* context, SSLClientCertificateState* clientState);

		// extern OSStatus SSLHandshake (SSLContextRef _Nonnull context) __attribute__((availability(macos, introduced=10.2, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLHandshake (SSLContextRef* context);

		// extern OSStatus SSLReHandshake (SSLContextRef _Nonnull context) __attribute__((availability(macos, introduced=10.12, deprecated=10.15))) __attribute__((availability(ios, introduced=10.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 12, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 10, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLReHandshake (SSLContextRef* context);

		// extern OSStatus SSLWrite (SSLContextRef _Nonnull context, const void * _Nullable data, size_t dataLength, size_t * _Nonnull processed) __attribute__((availability(macos, introduced=10.2, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLWrite (SSLContextRef* context, [NullAllowed] void* data, nuint dataLength, nuint* processed);

		// extern OSStatus SSLRead (SSLContextRef _Nonnull context, void * _Nonnull data, size_t dataLength, size_t * _Nonnull processed) __attribute__((availability(macos, introduced=10.2, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLRead (SSLContextRef* context, void* data, nuint dataLength, nuint* processed);

		// extern OSStatus SSLGetBufferedReadSize (SSLContextRef _Nonnull context, size_t * _Nonnull bufferSize) __attribute__((availability(macos, introduced=10.2, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLGetBufferedReadSize (SSLContextRef* context, nuint* bufferSize);

		// extern OSStatus SSLGetDatagramWriteSize (SSLContextRef _Nonnull dtlsContext, size_t * _Nonnull bufSize) __attribute__((availability(macos, introduced=10.8, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 8, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLGetDatagramWriteSize (SSLContextRef* dtlsContext, nuint* bufSize);

		// extern OSStatus SSLClose (SSLContextRef _Nonnull context) __attribute__((availability(macos, introduced=10.2, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLClose (SSLContextRef* context);

		// extern OSStatus SSLSetError (SSLContextRef _Nonnull context, OSStatus status) __attribute__((availability(macos, introduced=10.13, deprecated=10.15))) __attribute__((availability(ios, introduced=11.0, deprecated=13.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 13, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 11, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int SSLSetError (SSLContextRef* context, int status);

		// extern void uuid_clear (unsigned char *uu);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void uuid_clear (byte[] uu);

		// extern int uuid_compare (const unsigned char *uu1, const unsigned char *uu2);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int uuid_compare (byte[] uu1, byte[] uu2);

		// extern void uuid_copy (unsigned char *dst, const unsigned char *src);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void uuid_copy (byte[] dst, byte[] src);

		// extern void uuid_generate (unsigned char *out);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void uuid_generate (byte[] @out);

		// extern void uuid_generate_random (unsigned char *out);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void uuid_generate_random (byte[] @out);

		// extern void uuid_generate_time (unsigned char *out);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void uuid_generate_time (byte[] @out);

		// extern void uuid_generate_early_random (unsigned char *out);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void uuid_generate_early_random (byte[] @out);

		// extern int uuid_is_null (const unsigned char *uu);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int uuid_is_null (byte[] uu);

		// extern int uuid_parse (const char *in, unsigned char *uu);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int uuid_parse (sbyte[] @in, byte[] uu);

		// extern void uuid_unparse (const unsigned char *uu, char *out);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void uuid_unparse (byte[] uu, sbyte[] @out);

		// extern void uuid_unparse_lower (const unsigned char *uu, char *out);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void uuid_unparse_lower (byte[] uu, sbyte[] @out);

		// extern void uuid_unparse_upper (const unsigned char *uu, char *out);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void uuid_unparse_upper (byte[] uu, sbyte[] @out);

		// CGPoint CGPointMake (CGFloat x, CGFloat y) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CGPoint CGPointMake (nfloat x, nfloat y);

		// CGSize CGSizeMake (CGFloat width, CGFloat height) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CGSize CGSizeMake (nfloat width, nfloat height);

		// CGVector CGVectorMake (CGFloat dx, CGFloat dy) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CGVector CGVectorMake (nfloat dx, nfloat dy);

		// CGRect CGRectMake (CGFloat x, CGFloat y, CGFloat width, CGFloat height) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CGRect CGRectMake (nfloat x, nfloat y, nfloat width, nfloat height);

		// extern CGFloat CGRectGetMinX (CGRect rect) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nfloat CGRectGetMinX (CGRect rect);

		// extern CGFloat CGRectGetMidX (CGRect rect) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nfloat CGRectGetMidX (CGRect rect);

		// extern CGFloat CGRectGetMaxX (CGRect rect) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nfloat CGRectGetMaxX (CGRect rect);

		// extern CGFloat CGRectGetMinY (CGRect rect) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nfloat CGRectGetMinY (CGRect rect);

		// extern CGFloat CGRectGetMidY (CGRect rect) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nfloat CGRectGetMidY (CGRect rect);

		// extern CGFloat CGRectGetMaxY (CGRect rect) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nfloat CGRectGetMaxY (CGRect rect);

		// extern CGFloat CGRectGetWidth (CGRect rect) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nfloat CGRectGetWidth (CGRect rect);

		// extern CGFloat CGRectGetHeight (CGRect rect) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nfloat CGRectGetHeight (CGRect rect);

		// extern _Bool CGPointEqualToPoint (CGPoint point1, CGPoint point2) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool CGPointEqualToPoint (CGPoint point1, CGPoint point2);

		// extern _Bool CGSizeEqualToSize (CGSize size1, CGSize size2) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool CGSizeEqualToSize (CGSize size1, CGSize size2);

		// extern _Bool CGRectEqualToRect (CGRect rect1, CGRect rect2) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool CGRectEqualToRect (CGRect rect1, CGRect rect2);

		// extern CGRect CGRectStandardize (CGRect rect) __attribute__((visibility("default"))) __attribute__((warn_unused_result)) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CGRect CGRectStandardize (CGRect rect);

		// extern _Bool CGRectIsEmpty (CGRect rect) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool CGRectIsEmpty (CGRect rect);

		// extern _Bool CGRectIsNull (CGRect rect) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool CGRectIsNull (CGRect rect);

		// extern _Bool CGRectIsInfinite (CGRect rect) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool CGRectIsInfinite (CGRect rect);

		// extern CGRect CGRectInset (CGRect rect, CGFloat dx, CGFloat dy) __attribute__((visibility("default"))) __attribute__((warn_unused_result)) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CGRect CGRectInset (CGRect rect, nfloat dx, nfloat dy);

		// extern CGRect CGRectIntegral (CGRect rect) __attribute__((visibility("default"))) __attribute__((warn_unused_result)) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CGRect CGRectIntegral (CGRect rect);

		// extern CGRect CGRectUnion (CGRect r1, CGRect r2) __attribute__((visibility("default"))) __attribute__((warn_unused_result)) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CGRect CGRectUnion (CGRect r1, CGRect r2);

		// extern CGRect CGRectIntersection (CGRect r1, CGRect r2) __attribute__((visibility("default"))) __attribute__((warn_unused_result)) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CGRect CGRectIntersection (CGRect r1, CGRect r2);

		// extern CGRect CGRectOffset (CGRect rect, CGFloat dx, CGFloat dy) __attribute__((visibility("default"))) __attribute__((warn_unused_result)) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CGRect CGRectOffset (CGRect rect, nfloat dx, nfloat dy);

		// extern void CGRectDivide (CGRect rect, CGRect * _Nonnull slice, CGRect * _Nonnull remainder, CGFloat amount, CGRectEdge edge) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGRectDivide (CGRect rect, CGRect* slice, CGRect* remainder, nfloat amount, CGRectEdge edge);

		// extern _Bool CGRectContainsPoint (CGRect rect, CGPoint point) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool CGRectContainsPoint (CGRect rect, CGPoint point);

		// extern _Bool CGRectContainsRect (CGRect rect1, CGRect rect2) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool CGRectContainsRect (CGRect rect1, CGRect rect2);

		// extern _Bool CGRectIntersectsRect (CGRect rect1, CGRect rect2) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool CGRectIntersectsRect (CGRect rect1, CGRect rect2);

		// extern CFDictionaryRef _Nonnull CGPointCreateDictionaryRepresentation (CGPoint point) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFDictionaryRef* CGPointCreateDictionaryRepresentation (CGPoint point);

		// extern _Bool CGPointMakeWithDictionaryRepresentation (CFDictionaryRef _Nullable dict, CGPoint * _Nullable point) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGPointMakeWithDictionaryRepresentation ([NullAllowed] CFDictionaryRef* dict, [NullAllowed] CGPoint* point);

		// extern CFDictionaryRef _Nonnull CGSizeCreateDictionaryRepresentation (CGSize size) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFDictionaryRef* CGSizeCreateDictionaryRepresentation (CGSize size);

		// extern _Bool CGSizeMakeWithDictionaryRepresentation (CFDictionaryRef _Nullable dict, CGSize * _Nullable size) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGSizeMakeWithDictionaryRepresentation ([NullAllowed] CFDictionaryRef* dict, [NullAllowed] CGSize* size);

		// extern CFDictionaryRef _Nonnull CGRectCreateDictionaryRepresentation (CGRect) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFDictionaryRef* CGRectCreateDictionaryRepresentation (CGRect);

		// extern _Bool CGRectMakeWithDictionaryRepresentation (CFDictionaryRef _Nullable dict, CGRect * _Nullable rect) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGRectMakeWithDictionaryRepresentation ([NullAllowed] CFDictionaryRef* dict, [NullAllowed] CGRect* rect);

		// CGPoint CGPointMake (CGFloat x, CGFloat y) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CGPoint CGPointMake (nfloat x, nfloat y);

		// CGSize CGSizeMake (CGFloat width, CGFloat height) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CGSize CGSizeMake (nfloat width, nfloat height);

		// CGVector CGVectorMake (CGFloat dx, CGFloat dy) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CGVector CGVectorMake (nfloat dx, nfloat dy);

		// CGRect CGRectMake (CGFloat x, CGFloat y, CGFloat width, CGFloat height) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CGRect CGRectMake (nfloat x, nfloat y, nfloat width, nfloat height);

		// _Bool __CGPointEqualToPoint (CGPoint point1, CGPoint point2) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool __CGPointEqualToPoint (CGPoint point1, CGPoint point2);

		// _Bool __CGSizeEqualToSize (CGSize size1, CGSize size2) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool __CGSizeEqualToSize (CGSize size1, CGSize size2);

		// extern CGAffineTransform CGAffineTransformMake (CGFloat a, CGFloat b, CGFloat c, CGFloat d, CGFloat tx, CGFloat ty) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CGAffineTransform CGAffineTransformMake (nfloat a, nfloat b, nfloat c, nfloat d, nfloat tx, nfloat ty);

		// extern CGAffineTransform CGAffineTransformMakeTranslation (CGFloat tx, CGFloat ty) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CGAffineTransform CGAffineTransformMakeTranslation (nfloat tx, nfloat ty);

		// extern CGAffineTransform CGAffineTransformMakeScale (CGFloat sx, CGFloat sy) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CGAffineTransform CGAffineTransformMakeScale (nfloat sx, nfloat sy);

		// extern CGAffineTransform CGAffineTransformMakeRotation (CGFloat angle) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CGAffineTransform CGAffineTransformMakeRotation (nfloat angle);

		// extern _Bool CGAffineTransformIsIdentity (CGAffineTransform t) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool CGAffineTransformIsIdentity (CGAffineTransform t);

		// extern CGAffineTransform CGAffineTransformTranslate (CGAffineTransform t, CGFloat tx, CGFloat ty) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CGAffineTransform CGAffineTransformTranslate (CGAffineTransform t, nfloat tx, nfloat ty);

		// extern CGAffineTransform CGAffineTransformScale (CGAffineTransform t, CGFloat sx, CGFloat sy) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CGAffineTransform CGAffineTransformScale (CGAffineTransform t, nfloat sx, nfloat sy);

		// extern CGAffineTransform CGAffineTransformRotate (CGAffineTransform t, CGFloat angle) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CGAffineTransform CGAffineTransformRotate (CGAffineTransform t, nfloat angle);

		// extern CGAffineTransform CGAffineTransformInvert (CGAffineTransform t) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CGAffineTransform CGAffineTransformInvert (CGAffineTransform t);

		// extern CGAffineTransform CGAffineTransformConcat (CGAffineTransform t1, CGAffineTransform t2) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CGAffineTransform CGAffineTransformConcat (CGAffineTransform t1, CGAffineTransform t2);

		// extern _Bool CGAffineTransformEqualToTransform (CGAffineTransform t1, CGAffineTransform t2) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool CGAffineTransformEqualToTransform (CGAffineTransform t1, CGAffineTransform t2);

		// extern CGPoint CGPointApplyAffineTransform (CGPoint point, CGAffineTransform t) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CGPoint CGPointApplyAffineTransform (CGPoint point, CGAffineTransform t);

		// extern CGSize CGSizeApplyAffineTransform (CGSize size, CGAffineTransform t) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CGSize CGSizeApplyAffineTransform (CGSize size, CGAffineTransform t);

		// extern CGRect CGRectApplyAffineTransform (CGRect rect, CGAffineTransform t) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CGRect CGRectApplyAffineTransform (CGRect rect, CGAffineTransform t);

		// CGAffineTransform __CGAffineTransformMake (CGFloat a, CGFloat b, CGFloat c, CGFloat d, CGFloat tx, CGFloat ty) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CGAffineTransform __CGAffineTransformMake (nfloat a, nfloat b, nfloat c, nfloat d, nfloat tx, nfloat ty);

		// CGPoint __CGPointApplyAffineTransform (CGPoint point, CGAffineTransform t) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CGPoint __CGPointApplyAffineTransform (CGPoint point, CGAffineTransform t);

		// CGSize __CGSizeApplyAffineTransform (CGSize size, CGAffineTransform t) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CGSize __CGSizeApplyAffineTransform (CGSize size, CGAffineTransform t);

		// extern CFTypeID CGDataProviderGetTypeID () __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CGDataProviderGetTypeID ();

		// extern CGDataProviderRef _Nullable CGDataProviderCreateSequential (void * _Nullable info, const CGDataProviderSequentialCallbacks * _Nullable callbacks) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGDataProviderRef* CGDataProviderCreateSequential ([NullAllowed] void* info, [NullAllowed] CGDataProviderSequentialCallbacks* callbacks);

		// extern CGDataProviderRef _Nullable CGDataProviderCreateDirect (void * _Nullable info, off_t size, const CGDataProviderDirectCallbacks * _Nullable callbacks) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGDataProviderRef* CGDataProviderCreateDirect ([NullAllowed] void* info, long size, [NullAllowed] CGDataProviderDirectCallbacks* callbacks);

		// extern CGDataProviderRef _Nullable CGDataProviderCreateWithData (void * _Nullable info, const void * _Nullable data, size_t size, CGDataProviderReleaseDataCallback _Nullable releaseData) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGDataProviderRef* CGDataProviderCreateWithData ([NullAllowed] void* info, [NullAllowed] void* data, nuint size, [NullAllowed] CGDataProviderReleaseDataCallback* releaseData);

		// extern CGDataProviderRef _Nullable CGDataProviderCreateWithCFData (CFDataRef _Nullable data) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGDataProviderRef* CGDataProviderCreateWithCFData ([NullAllowed] CFDataRef* data);

		// extern CGDataProviderRef _Nullable CGDataProviderCreateWithURL (CFURLRef _Nullable url) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGDataProviderRef* CGDataProviderCreateWithURL ([NullAllowed] CFURLRef* url);

		// extern CGDataProviderRef _Nullable CGDataProviderCreateWithFilename (const char * _Nullable filename) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGDataProviderRef* CGDataProviderCreateWithFilename ([NullAllowed] sbyte* filename);

		// extern CGDataProviderRef _Nullable CGDataProviderRetain (CGDataProviderRef _Nullable provider) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGDataProviderRef* CGDataProviderRetain ([NullAllowed] CGDataProviderRef* provider);

		// extern void CGDataProviderRelease (CGDataProviderRef _Nullable provider) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGDataProviderRelease ([NullAllowed] CGDataProviderRef* provider);

		// extern CFDataRef _Nullable CGDataProviderCopyData (CGDataProviderRef _Nullable provider) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFDataRef* CGDataProviderCopyData ([NullAllowed] CGDataProviderRef* provider);

		// extern void * _Nullable CGDataProviderGetInfo (CGDataProviderRef _Nullable provider) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((cf_audited_transfer));
		[Mac (10,13), iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe void* CGDataProviderGetInfo ([NullAllowed] CGDataProviderRef* provider);

		// extern CGColorSpaceRef _Nullable CGColorSpaceCreateDeviceGray () __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGColorSpaceRef* CGColorSpaceCreateDeviceGray ();

		// extern CGColorSpaceRef _Nullable CGColorSpaceCreateDeviceRGB () __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGColorSpaceRef* CGColorSpaceCreateDeviceRGB ();

		// extern CGColorSpaceRef _Nullable CGColorSpaceCreateDeviceCMYK () __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGColorSpaceRef* CGColorSpaceCreateDeviceCMYK ();

		// extern CGColorSpaceRef _Nullable CGColorSpaceCreateCalibratedGray (const CGFloat * _Nonnull whitePoint, const CGFloat * _Nullable blackPoint, CGFloat gamma) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGColorSpaceRef* CGColorSpaceCreateCalibratedGray (nfloat[] whitePoint, [NullAllowed] nfloat[] blackPoint, nfloat gamma);

		// extern CGColorSpaceRef _Nullable CGColorSpaceCreateCalibratedRGB (const CGFloat * _Nonnull whitePoint, const CGFloat * _Nullable blackPoint, const CGFloat * _Nullable gamma, const CGFloat * _Nullable matrix) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGColorSpaceRef* CGColorSpaceCreateCalibratedRGB (nfloat[] whitePoint, [NullAllowed] nfloat[] blackPoint, [NullAllowed] nfloat[] gamma, [NullAllowed] nfloat[] matrix);

		// extern CGColorSpaceRef _Nullable CGColorSpaceCreateLab (const CGFloat * _Nonnull whitePoint, const CGFloat * _Nullable blackPoint, const CGFloat * _Nullable range) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGColorSpaceRef* CGColorSpaceCreateLab (nfloat[] whitePoint, [NullAllowed] nfloat[] blackPoint, [NullAllowed] nfloat[] range);

		// extern CGColorSpaceRef _Nonnull CGColorSpaceCreateWithICCData (CFTypeRef _Nullable data) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((cf_audited_transfer));
		[Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGColorSpaceRef* CGColorSpaceCreateWithICCData ([NullAllowed] void* data);

		// extern CGColorSpaceRef _Nullable CGColorSpaceCreateICCBased (size_t nComponents, const CGFloat * _Nullable range, CGDataProviderRef _Nullable profile, CGColorSpaceRef _Nullable alternate) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGColorSpaceRef* CGColorSpaceCreateICCBased (nuint nComponents, [NullAllowed] nfloat* range, [NullAllowed] CGDataProviderRef* profile, [NullAllowed] CGColorSpaceRef* alternate);

		// extern CGColorSpaceRef _Nullable CGColorSpaceCreateIndexed (CGColorSpaceRef _Nullable baseSpace, size_t lastIndex, const unsigned char * _Nullable colorTable) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGColorSpaceRef* CGColorSpaceCreateIndexed ([NullAllowed] CGColorSpaceRef* baseSpace, nuint lastIndex, [NullAllowed] byte* colorTable);

		// extern CGColorSpaceRef _Nullable CGColorSpaceCreatePattern (CGColorSpaceRef _Nullable baseSpace) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGColorSpaceRef* CGColorSpaceCreatePattern ([NullAllowed] CGColorSpaceRef* baseSpace);

		// extern CGColorSpaceRef _Nullable CGColorSpaceCreateWithPlatformColorSpace (const void * _Nullable ref) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (9,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGColorSpaceRef* CGColorSpaceCreateWithPlatformColorSpace ([NullAllowed] void* @ref);

		// extern CGColorSpaceRef _Nullable CGColorSpaceCreateWithName (CFStringRef _Nullable name) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGColorSpaceRef* CGColorSpaceCreateWithName ([NullAllowed] CFStringRef* name);

		// extern CGColorSpaceRef _Nullable CGColorSpaceRetain (CGColorSpaceRef _Nullable space) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGColorSpaceRef* CGColorSpaceRetain ([NullAllowed] CGColorSpaceRef* space);

		// extern void CGColorSpaceRelease (CGColorSpaceRef _Nullable space) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGColorSpaceRelease ([NullAllowed] CGColorSpaceRef* space);

		// extern CFStringRef _Nullable CGColorSpaceGetName (CGColorSpaceRef _Nullable space) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((cf_audited_transfer));
		[Mac (10,13), iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFStringRef* CGColorSpaceGetName ([NullAllowed] CGColorSpaceRef* space);

		// extern CFStringRef _Nullable CGColorSpaceCopyName (CGColorSpaceRef _Nullable space) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=10.0))) __attribute__((cf_audited_transfer));
		[Mac (10,6), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFStringRef* CGColorSpaceCopyName ([NullAllowed] CGColorSpaceRef* space);

		// extern CFTypeID CGColorSpaceGetTypeID () __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CGColorSpaceGetTypeID ();

		// extern size_t CGColorSpaceGetNumberOfComponents (CGColorSpaceRef _Nullable space) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint CGColorSpaceGetNumberOfComponents ([NullAllowed] CGColorSpaceRef* space);

		// extern CGColorSpaceModel CGColorSpaceGetModel (CGColorSpaceRef _Nullable space) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGColorSpaceModel CGColorSpaceGetModel ([NullAllowed] CGColorSpaceRef* space);

		// extern CGColorSpaceRef _Nullable CGColorSpaceGetBaseColorSpace (CGColorSpaceRef _Nullable space) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGColorSpaceRef* CGColorSpaceGetBaseColorSpace ([NullAllowed] CGColorSpaceRef* space);

		// extern size_t CGColorSpaceGetColorTableCount (CGColorSpaceRef _Nullable space) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint CGColorSpaceGetColorTableCount ([NullAllowed] CGColorSpaceRef* space);

		// extern void CGColorSpaceGetColorTable (CGColorSpaceRef _Nullable space, uint8_t * _Nullable table) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGColorSpaceGetColorTable ([NullAllowed] CGColorSpaceRef* space, [NullAllowed] byte* table);

		// extern CFDataRef _Nullable CGColorSpaceCopyICCData (CGColorSpaceRef _Nullable space) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((cf_audited_transfer));
		[Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFDataRef* CGColorSpaceCopyICCData ([NullAllowed] CGColorSpaceRef* space);

		// extern _Bool CGColorSpaceIsWideGamutRGB (CGColorSpaceRef _Nonnull) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((cf_audited_transfer));
		[Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGColorSpaceIsWideGamutRGB (CGColorSpaceRef*);

		// extern _Bool CGColorSpaceIsHDR (CGColorSpaceRef _Nonnull) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((cf_audited_transfer));
		[Mac (10,15), iOS (13,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGColorSpaceIsHDR (CGColorSpaceRef*);

		// extern _Bool CGColorSpaceSupportsOutput (CGColorSpaceRef _Nonnull space) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((cf_audited_transfer));
		[Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGColorSpaceSupportsOutput (CGColorSpaceRef* space);

		// extern CFPropertyListRef _Nullable CGColorSpaceCopyPropertyList (CGColorSpaceRef _Nonnull space) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((cf_audited_transfer));
		[Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe void* CGColorSpaceCopyPropertyList (CGColorSpaceRef* space);

		// extern CGColorSpaceRef _Nullable CGColorSpaceCreateWithPropertyList (CFPropertyListRef _Nonnull plist) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((cf_audited_transfer));
		[Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGColorSpaceRef* CGColorSpaceCreateWithPropertyList (void* plist);

		// extern CGColorSpaceRef _Nullable CGColorSpaceCreateWithICCProfile (CFDataRef _Nullable data) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5, deprecated=10.13))) __attribute__((availability(ios, introduced=2.0, deprecated=11.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 5, message: "No longer supported")]
		[Deprecated (PlatformName.MacOSX, 10, 13, message: "No longer supported")]
		[Introduced (PlatformName.iOS, 2, 0, message: "No longer supported")]
		[Deprecated (PlatformName.iOS, 11, 0, message: "No longer supported")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGColorSpaceRef* CGColorSpaceCreateWithICCProfile ([NullAllowed] CFDataRef* data);

		// extern CFDataRef _Nullable CGColorSpaceCopyICCProfile (CGColorSpaceRef _Nullable space) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5, deprecated=10.13))) __attribute__((availability(ios, introduced=2.0, deprecated=11.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 5, message: "No longer supported")]
		[Deprecated (PlatformName.MacOSX, 10, 13, message: "No longer supported")]
		[Introduced (PlatformName.iOS, 2, 0, message: "No longer supported")]
		[Deprecated (PlatformName.iOS, 11, 0, message: "No longer supported")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFDataRef* CGColorSpaceCopyICCProfile ([NullAllowed] CGColorSpaceRef* space);

		// extern CFTypeID CGPatternGetTypeID () __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CGPatternGetTypeID ();

		// extern CGPatternRef _Nullable CGPatternCreate (void * _Nullable info, CGRect bounds, CGAffineTransform matrix, CGFloat xStep, CGFloat yStep, CGPatternTiling tiling, _Bool isColored, const CGPatternCallbacks * _Nullable callbacks) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGPatternRef* CGPatternCreate ([NullAllowed] void* info, CGRect bounds, CGAffineTransform matrix, nfloat xStep, nfloat yStep, CGPatternTiling tiling, bool isColored, [NullAllowed] CGPatternCallbacks* callbacks);

		// extern CGPatternRef _Nullable CGPatternRetain (CGPatternRef _Nullable pattern) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGPatternRef* CGPatternRetain ([NullAllowed] CGPatternRef* pattern);

		// extern void CGPatternRelease (CGPatternRef _Nullable pattern) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGPatternRelease ([NullAllowed] CGPatternRef* pattern);

		// extern CGColorRef _Nullable CGColorCreate (CGColorSpaceRef _Nullable space, const CGFloat * _Nullable components) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGColorRef* CGColorCreate ([NullAllowed] CGColorSpaceRef* space, [NullAllowed] nfloat* components);

		// extern CGColorRef _Nonnull CGColorCreateGenericGray (CGFloat gray, CGFloat alpha) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((cf_audited_transfer));
		[NoWatch, NoTV, NoiOS, Mac (10,5)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGColorRef* CGColorCreateGenericGray (nfloat gray, nfloat alpha);

		// extern CGColorRef _Nonnull CGColorCreateGenericRGB (CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((cf_audited_transfer));
		[NoWatch, NoTV, NoiOS, Mac (10,5)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGColorRef* CGColorCreateGenericRGB (nfloat red, nfloat green, nfloat blue, nfloat alpha);

		// extern CGColorRef _Nonnull CGColorCreateGenericCMYK (CGFloat cyan, CGFloat magenta, CGFloat yellow, CGFloat black, CGFloat alpha) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((cf_audited_transfer));
		[NoWatch, NoTV, NoiOS, Mac (10,5)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGColorRef* CGColorCreateGenericCMYK (nfloat cyan, nfloat magenta, nfloat yellow, nfloat black, nfloat alpha);

		// extern CGColorRef _Nonnull CGColorCreateGenericGrayGamma2_2 (CGFloat gray, CGFloat alpha) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((cf_audited_transfer));
		[Mac (10,15), iOS (13,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGColorRef* CGColorCreateGenericGrayGamma2_2 (nfloat gray, nfloat alpha);

		// extern CGColorRef _Nonnull CGColorCreateSRGB (CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((cf_audited_transfer));
		[Mac (10,15), iOS (13,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGColorRef* CGColorCreateSRGB (nfloat red, nfloat green, nfloat blue, nfloat alpha);

		// extern CGColorRef _Nullable CGColorGetConstantColor (CFStringRef _Nullable colorName) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((cf_audited_transfer));
		[NoWatch, NoTV, NoiOS, Mac (10,5)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGColorRef* CGColorGetConstantColor ([NullAllowed] CFStringRef* colorName);

		// extern CGColorRef _Nullable CGColorCreateWithPattern (CGColorSpaceRef _Nullable space, CGPatternRef _Nullable pattern, const CGFloat * _Nullable components) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGColorRef* CGColorCreateWithPattern ([NullAllowed] CGColorSpaceRef* space, [NullAllowed] CGPatternRef* pattern, [NullAllowed] nfloat* components);

		// extern CGColorRef _Nullable CGColorCreateCopy (CGColorRef _Nullable color) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGColorRef* CGColorCreateCopy ([NullAllowed] CGColorRef* color);

		// extern CGColorRef _Nullable CGColorCreateCopyWithAlpha (CGColorRef _Nullable color, CGFloat alpha) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGColorRef* CGColorCreateCopyWithAlpha ([NullAllowed] CGColorRef* color, nfloat alpha);

		// extern CGColorRef _Nullable CGColorCreateCopyByMatchingToColorSpace (CGColorSpaceRef _Nullable, CGColorRenderingIntent intent, CGColorRef _Nullable color, CFDictionaryRef _Nullable options) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Mac (10,11), iOS (9,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGColorRef* CGColorCreateCopyByMatchingToColorSpace ([NullAllowed] CGColorSpaceRef*, CGColorRenderingIntent intent, [NullAllowed] CGColorRef* color, [NullAllowed] CFDictionaryRef* options);

		// extern CGColorRef _Nullable CGColorRetain (CGColorRef _Nullable color) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGColorRef* CGColorRetain ([NullAllowed] CGColorRef* color);

		// extern void CGColorRelease (CGColorRef _Nullable color) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGColorRelease ([NullAllowed] CGColorRef* color);

		// extern _Bool CGColorEqualToColor (CGColorRef _Nullable color1, CGColorRef _Nullable color2) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGColorEqualToColor ([NullAllowed] CGColorRef* color1, [NullAllowed] CGColorRef* color2);

		// extern size_t CGColorGetNumberOfComponents (CGColorRef _Nullable color) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint CGColorGetNumberOfComponents ([NullAllowed] CGColorRef* color);

		// extern const CGFloat * _Nullable CGColorGetComponents (CGColorRef _Nullable color) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe nfloat* CGColorGetComponents ([NullAllowed] CGColorRef* color);

		// extern CGFloat CGColorGetAlpha (CGColorRef _Nullable color) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nfloat CGColorGetAlpha ([NullAllowed] CGColorRef* color);

		// extern CGColorSpaceRef _Nullable CGColorGetColorSpace (CGColorRef _Nullable color) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGColorSpaceRef* CGColorGetColorSpace ([NullAllowed] CGColorRef* color);

		// extern CGPatternRef _Nullable CGColorGetPattern (CGColorRef _Nullable color) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGPatternRef* CGColorGetPattern ([NullAllowed] CGColorRef* color);

		// extern CFTypeID CGColorGetTypeID () __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CGColorGetTypeID ();

		// extern CFTypeID CGFontGetTypeID () __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CGFontGetTypeID ();

		// extern CGFontRef _Nullable CGFontCreateWithPlatformFont (void * _Nullable platformFontReference) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0, deprecated=10.6))) __attribute__((availability(ios, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "No longer supported")]
		[Deprecated (PlatformName.MacOSX, 10, 6, message: "No longer supported")]
		[NoWatch, NoTV, NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGFontRef* CGFontCreateWithPlatformFont ([NullAllowed] void* platformFontReference);

		// extern CGFontRef _Nullable CGFontCreateWithDataProvider (CGDataProviderRef _Nullable provider) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGFontRef* CGFontCreateWithDataProvider ([NullAllowed] CGDataProviderRef* provider);

		// extern CGFontRef _Nullable CGFontCreateWithFontName (CFStringRef _Nullable name) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGFontRef* CGFontCreateWithFontName ([NullAllowed] CFStringRef* name);

		// extern CGFontRef _Nullable CGFontCreateCopyWithVariations (CGFontRef _Nullable font, CFDictionaryRef _Nullable variations) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGFontRef* CGFontCreateCopyWithVariations ([NullAllowed] CGFontRef* font, [NullAllowed] CFDictionaryRef* variations);

		// extern CGFontRef _Nullable CGFontRetain (CGFontRef _Nullable font) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGFontRef* CGFontRetain ([NullAllowed] CGFontRef* font);

		// extern void CGFontRelease (CGFontRef _Nullable font) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGFontRelease ([NullAllowed] CGFontRef* font);

		// extern size_t CGFontGetNumberOfGlyphs (CGFontRef _Nullable font) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint CGFontGetNumberOfGlyphs ([NullAllowed] CGFontRef* font);

		// extern int CGFontGetUnitsPerEm (CGFontRef _Nullable font) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int CGFontGetUnitsPerEm ([NullAllowed] CGFontRef* font);

		// extern CFStringRef _Nullable CGFontCopyPostScriptName (CGFontRef _Nullable font) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFStringRef* CGFontCopyPostScriptName ([NullAllowed] CGFontRef* font);

		// extern CFStringRef _Nullable CGFontCopyFullName (CGFontRef _Nullable font) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFStringRef* CGFontCopyFullName ([NullAllowed] CGFontRef* font);

		// extern int CGFontGetAscent (CGFontRef _Nullable font) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int CGFontGetAscent ([NullAllowed] CGFontRef* font);

		// extern int CGFontGetDescent (CGFontRef _Nullable font) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int CGFontGetDescent ([NullAllowed] CGFontRef* font);

		// extern int CGFontGetLeading (CGFontRef _Nullable font) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int CGFontGetLeading ([NullAllowed] CGFontRef* font);

		// extern int CGFontGetCapHeight (CGFontRef _Nullable font) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int CGFontGetCapHeight ([NullAllowed] CGFontRef* font);

		// extern int CGFontGetXHeight (CGFontRef _Nullable font) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int CGFontGetXHeight ([NullAllowed] CGFontRef* font);

		// extern CGRect CGFontGetFontBBox (CGFontRef _Nullable font) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGRect CGFontGetFontBBox ([NullAllowed] CGFontRef* font);

		// extern CGFloat CGFontGetItalicAngle (CGFontRef _Nullable font) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nfloat CGFontGetItalicAngle ([NullAllowed] CGFontRef* font);

		// extern CGFloat CGFontGetStemV (CGFontRef _Nullable font) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nfloat CGFontGetStemV ([NullAllowed] CGFontRef* font);

		// extern CFArrayRef _Nullable CGFontCopyVariationAxes (CGFontRef _Nullable font) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFArrayRef* CGFontCopyVariationAxes ([NullAllowed] CGFontRef* font);

		// extern CFDictionaryRef _Nullable CGFontCopyVariations (CGFontRef _Nullable font) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFDictionaryRef* CGFontCopyVariations ([NullAllowed] CGFontRef* font);

		// extern _Bool CGFontGetGlyphAdvances (CGFontRef _Nullable font, const CGGlyph * _Nonnull glyphs, size_t count, int * _Nonnull advances) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGFontGetGlyphAdvances ([NullAllowed] CGFontRef* font, ushort* glyphs, nuint count, int* advances);

		// extern _Bool CGFontGetGlyphBBoxes (CGFontRef _Nullable font, const CGGlyph * _Nonnull glyphs, size_t count, CGRect * _Nonnull bboxes) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGFontGetGlyphBBoxes ([NullAllowed] CGFontRef* font, ushort* glyphs, nuint count, CGRect* bboxes);

		// extern CGGlyph CGFontGetGlyphWithGlyphName (CGFontRef _Nullable font, CFStringRef _Nullable name) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe ushort CGFontGetGlyphWithGlyphName ([NullAllowed] CGFontRef* font, [NullAllowed] CFStringRef* name);

		// extern CFStringRef _Nullable CGFontCopyGlyphNameForGlyph (CGFontRef _Nullable font, CGGlyph glyph) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFStringRef* CGFontCopyGlyphNameForGlyph ([NullAllowed] CGFontRef* font, ushort glyph);

		// extern _Bool CGFontCanCreatePostScriptSubset (CGFontRef _Nullable font, CGFontPostScriptFormat format) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGFontCanCreatePostScriptSubset ([NullAllowed] CGFontRef* font, CGFontPostScriptFormat format);

		// extern CFDataRef _Nullable CGFontCreatePostScriptSubset (CGFontRef _Nullable font, CFStringRef _Nullable subsetName, CGFontPostScriptFormat format, const CGGlyph * _Nullable glyphs, size_t count, const CGGlyph * _Nullable encoding) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFDataRef* CGFontCreatePostScriptSubset ([NullAllowed] CGFontRef* font, [NullAllowed] CFStringRef* subsetName, CGFontPostScriptFormat format, [NullAllowed] ushort* glyphs, nuint count, [NullAllowed] ushort[] encoding);

		// extern CFDataRef _Nullable CGFontCreatePostScriptEncoding (CGFontRef _Nullable font, const CGGlyph * _Nullable encoding) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFDataRef* CGFontCreatePostScriptEncoding ([NullAllowed] CGFontRef* font, [NullAllowed] ushort[] encoding);

		// extern CFArrayRef _Nullable CGFontCopyTableTags (CGFontRef _Nullable font) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFArrayRef* CGFontCopyTableTags ([NullAllowed] CGFontRef* font);

		// extern CFDataRef _Nullable CGFontCopyTableForTag (CGFontRef _Nullable font, uint32_t tag) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFDataRef* CGFontCopyTableForTag ([NullAllowed] CGFontRef* font, uint tag);

		// extern CFTypeID CGGradientGetTypeID () __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CGGradientGetTypeID ();

		// extern CGGradientRef _Nullable CGGradientCreateWithColorComponents (CGColorSpaceRef _Nullable space, const CGFloat * _Nullable components, const CGFloat * _Nullable locations, size_t count) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGGradientRef* CGGradientCreateWithColorComponents ([NullAllowed] CGColorSpaceRef* space, [NullAllowed] nfloat* components, [NullAllowed] nfloat* locations, nuint count);

		// extern CGGradientRef _Nullable CGGradientCreateWithColors (CGColorSpaceRef _Nullable space, CFArrayRef _Nullable colors, const CGFloat * _Nullable locations) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGGradientRef* CGGradientCreateWithColors ([NullAllowed] CGColorSpaceRef* space, [NullAllowed] CFArrayRef* colors, [NullAllowed] nfloat* locations);

		// extern CGGradientRef _Nullable CGGradientRetain (CGGradientRef _Nullable gradient) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGGradientRef* CGGradientRetain ([NullAllowed] CGGradientRef* gradient);

		// extern void CGGradientRelease (CGGradientRef _Nullable gradient) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGGradientRelease ([NullAllowed] CGGradientRef* gradient);

		// extern CFTypeID CGImageGetTypeID () __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CGImageGetTypeID ();

		// extern CGImageRef _Nullable CGImageCreate (size_t width, size_t height, size_t bitsPerComponent, size_t bitsPerPixel, size_t bytesPerRow, CGColorSpaceRef _Nullable space, CGBitmapInfo bitmapInfo, CGDataProviderRef _Nullable provider, const CGFloat * _Nullable decode, _Bool shouldInterpolate, CGColorRenderingIntent intent) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGImageRef* CGImageCreate (nuint width, nuint height, nuint bitsPerComponent, nuint bitsPerPixel, nuint bytesPerRow, [NullAllowed] CGColorSpaceRef* space, CGBitmapInfo bitmapInfo, [NullAllowed] CGDataProviderRef* provider, [NullAllowed] nfloat* decode, bool shouldInterpolate, CGColorRenderingIntent intent);

		// extern CGImageRef _Nullable CGImageMaskCreate (size_t width, size_t height, size_t bitsPerComponent, size_t bitsPerPixel, size_t bytesPerRow, CGDataProviderRef _Nullable provider, const CGFloat * _Nullable decode, _Bool shouldInterpolate) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGImageRef* CGImageMaskCreate (nuint width, nuint height, nuint bitsPerComponent, nuint bitsPerPixel, nuint bytesPerRow, [NullAllowed] CGDataProviderRef* provider, [NullAllowed] nfloat* decode, bool shouldInterpolate);

		// extern CGImageRef _Nullable CGImageCreateCopy (CGImageRef _Nullable image) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGImageRef* CGImageCreateCopy ([NullAllowed] CGImageRef* image);

		// extern CGImageRef _Nullable CGImageCreateWithJPEGDataProvider (CGDataProviderRef _Nullable source, const CGFloat * _Nullable decode, _Bool shouldInterpolate, CGColorRenderingIntent intent) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.1))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,1), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGImageRef* CGImageCreateWithJPEGDataProvider ([NullAllowed] CGDataProviderRef* source, [NullAllowed] nfloat* decode, bool shouldInterpolate, CGColorRenderingIntent intent);

		// extern CGImageRef _Nullable CGImageCreateWithPNGDataProvider (CGDataProviderRef _Nullable source, const CGFloat * _Nullable decode, _Bool shouldInterpolate, CGColorRenderingIntent intent) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGImageRef* CGImageCreateWithPNGDataProvider ([NullAllowed] CGDataProviderRef* source, [NullAllowed] nfloat* decode, bool shouldInterpolate, CGColorRenderingIntent intent);

		// extern CGImageRef _Nullable CGImageCreateWithImageInRect (CGImageRef _Nullable image, CGRect rect) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGImageRef* CGImageCreateWithImageInRect ([NullAllowed] CGImageRef* image, CGRect rect);

		// extern CGImageRef _Nullable CGImageCreateWithMask (CGImageRef _Nullable image, CGImageRef _Nullable mask) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGImageRef* CGImageCreateWithMask ([NullAllowed] CGImageRef* image, [NullAllowed] CGImageRef* mask);

		// extern CGImageRef _Nullable CGImageCreateWithMaskingColors (CGImageRef _Nullable image, const CGFloat * _Nullable components) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGImageRef* CGImageCreateWithMaskingColors ([NullAllowed] CGImageRef* image, [NullAllowed] nfloat* components);

		// extern CGImageRef _Nullable CGImageCreateCopyWithColorSpace (CGImageRef _Nullable image, CGColorSpaceRef _Nullable space) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGImageRef* CGImageCreateCopyWithColorSpace ([NullAllowed] CGImageRef* image, [NullAllowed] CGColorSpaceRef* space);

		// extern CGImageRef _Nullable CGImageRetain (CGImageRef _Nullable image) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGImageRef* CGImageRetain ([NullAllowed] CGImageRef* image);

		// extern void CGImageRelease (CGImageRef _Nullable image) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGImageRelease ([NullAllowed] CGImageRef* image);

		// extern _Bool CGImageIsMask (CGImageRef _Nullable image) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGImageIsMask ([NullAllowed] CGImageRef* image);

		// extern size_t CGImageGetWidth (CGImageRef _Nullable image) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint CGImageGetWidth ([NullAllowed] CGImageRef* image);

		// extern size_t CGImageGetHeight (CGImageRef _Nullable image) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint CGImageGetHeight ([NullAllowed] CGImageRef* image);

		// extern size_t CGImageGetBitsPerComponent (CGImageRef _Nullable image) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint CGImageGetBitsPerComponent ([NullAllowed] CGImageRef* image);

		// extern size_t CGImageGetBitsPerPixel (CGImageRef _Nullable image) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint CGImageGetBitsPerPixel ([NullAllowed] CGImageRef* image);

		// extern size_t CGImageGetBytesPerRow (CGImageRef _Nullable image) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint CGImageGetBytesPerRow ([NullAllowed] CGImageRef* image);

		// extern CGColorSpaceRef _Nullable CGImageGetColorSpace (CGImageRef _Nullable image) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGColorSpaceRef* CGImageGetColorSpace ([NullAllowed] CGImageRef* image);

		// extern CGImageAlphaInfo CGImageGetAlphaInfo (CGImageRef _Nullable image) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGImageAlphaInfo CGImageGetAlphaInfo ([NullAllowed] CGImageRef* image);

		// extern CGDataProviderRef _Nullable CGImageGetDataProvider (CGImageRef _Nullable image) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGDataProviderRef* CGImageGetDataProvider ([NullAllowed] CGImageRef* image);

		// extern const CGFloat * _Nullable CGImageGetDecode (CGImageRef _Nullable image) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe nfloat* CGImageGetDecode ([NullAllowed] CGImageRef* image);

		// extern _Bool CGImageGetShouldInterpolate (CGImageRef _Nullable image) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGImageGetShouldInterpolate ([NullAllowed] CGImageRef* image);

		// extern CGColorRenderingIntent CGImageGetRenderingIntent (CGImageRef _Nullable image) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGColorRenderingIntent CGImageGetRenderingIntent ([NullAllowed] CGImageRef* image);

		// extern CGBitmapInfo CGImageGetBitmapInfo (CGImageRef _Nullable image) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGBitmapInfo CGImageGetBitmapInfo ([NullAllowed] CGImageRef* image);

		// extern CGImageByteOrderInfo CGImageGetByteOrderInfo (CGImageRef _Nullable image) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((cf_audited_transfer));
		[Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGImageByteOrderInfo CGImageGetByteOrderInfo ([NullAllowed] CGImageRef* image);

		// extern CGImagePixelFormatInfo CGImageGetPixelFormatInfo (CGImageRef _Nullable image) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((cf_audited_transfer));
		[Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGImagePixelFormatInfo CGImageGetPixelFormatInfo ([NullAllowed] CGImageRef* image);

		// extern CFStringRef _Nullable CGImageGetUTType (CGImageRef _Nullable image) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Mac (10,11), iOS (9,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFStringRef* CGImageGetUTType ([NullAllowed] CGImageRef* image);

		// extern CFTypeID CGPathGetTypeID () __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CGPathGetTypeID ();

		// extern CGMutablePathRef _Nonnull CGPathCreateMutable () __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGMutablePathRef* CGPathCreateMutable ();

		// extern CGPathRef _Nullable CGPathCreateCopy (CGPathRef _Nullable path) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGPathRef* CGPathCreateCopy ([NullAllowed] CGPathRef* path);

		// extern CGPathRef _Nullable CGPathCreateCopyByTransformingPath (CGPathRef _Nullable path, const CGAffineTransform * _Nullable transform) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((cf_audited_transfer));
		[Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGPathRef* CGPathCreateCopyByTransformingPath ([NullAllowed] CGPathRef* path, [NullAllowed] CGAffineTransform* transform);

		// extern CGMutablePathRef _Nullable CGPathCreateMutableCopy (CGPathRef _Nullable path) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGMutablePathRef* CGPathCreateMutableCopy ([NullAllowed] CGPathRef* path);

		// extern CGMutablePathRef _Nullable CGPathCreateMutableCopyByTransformingPath (CGPathRef _Nullable path, const CGAffineTransform * _Nullable transform) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((cf_audited_transfer));
		[Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGMutablePathRef* CGPathCreateMutableCopyByTransformingPath ([NullAllowed] CGPathRef* path, [NullAllowed] CGAffineTransform* transform);

		// extern CGPathRef _Nonnull CGPathCreateWithRect (CGRect rect, const CGAffineTransform * _Nullable transform) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=4.0))) __attribute__((cf_audited_transfer));
		[Mac (10,5), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGPathRef* CGPathCreateWithRect (CGRect rect, [NullAllowed] CGAffineTransform* transform);

		// extern CGPathRef _Nonnull CGPathCreateWithEllipseInRect (CGRect rect, const CGAffineTransform * _Nullable transform) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((cf_audited_transfer));
		[Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGPathRef* CGPathCreateWithEllipseInRect (CGRect rect, [NullAllowed] CGAffineTransform* transform);

		// extern CGPathRef _Nonnull CGPathCreateWithRoundedRect (CGRect rect, CGFloat cornerWidth, CGFloat cornerHeight, const CGAffineTransform * _Nullable transform) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((cf_audited_transfer));
		[Mac (10,9), iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGPathRef* CGPathCreateWithRoundedRect (CGRect rect, nfloat cornerWidth, nfloat cornerHeight, [NullAllowed] CGAffineTransform* transform);

		// extern void CGPathAddRoundedRect (CGMutablePathRef _Nullable path, const CGAffineTransform * _Nullable transform, CGRect rect, CGFloat cornerWidth, CGFloat cornerHeight) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((cf_audited_transfer));
		[Mac (10,9), iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGPathAddRoundedRect ([NullAllowed] CGMutablePathRef* path, [NullAllowed] CGAffineTransform* transform, CGRect rect, nfloat cornerWidth, nfloat cornerHeight);

		// extern CGPathRef _Nullable CGPathCreateCopyByDashingPath (CGPathRef _Nullable path, const CGAffineTransform * _Nullable transform, CGFloat phase, const CGFloat * _Nullable lengths, size_t count) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((cf_audited_transfer));
		[Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGPathRef* CGPathCreateCopyByDashingPath ([NullAllowed] CGPathRef* path, [NullAllowed] CGAffineTransform* transform, nfloat phase, [NullAllowed] nfloat* lengths, nuint count);

		// extern CGPathRef _Nullable CGPathCreateCopyByStrokingPath (CGPathRef _Nullable path, const CGAffineTransform * _Nullable transform, CGFloat lineWidth, CGLineCap lineCap, CGLineJoin lineJoin, CGFloat miterLimit) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((cf_audited_transfer));
		[Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGPathRef* CGPathCreateCopyByStrokingPath ([NullAllowed] CGPathRef* path, [NullAllowed] CGAffineTransform* transform, nfloat lineWidth, CGLineCap lineCap, CGLineJoin lineJoin, nfloat miterLimit);

		// extern CGPathRef _Nullable CGPathRetain (CGPathRef _Nullable path) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGPathRef* CGPathRetain ([NullAllowed] CGPathRef* path);

		// extern void CGPathRelease (CGPathRef _Nullable path) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGPathRelease ([NullAllowed] CGPathRef* path);

		// extern _Bool CGPathEqualToPath (CGPathRef _Nullable path1, CGPathRef _Nullable path2) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGPathEqualToPath ([NullAllowed] CGPathRef* path1, [NullAllowed] CGPathRef* path2);

		// extern void CGPathMoveToPoint (CGMutablePathRef _Nullable path, const CGAffineTransform * _Nullable m, CGFloat x, CGFloat y) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGPathMoveToPoint ([NullAllowed] CGMutablePathRef* path, [NullAllowed] CGAffineTransform* m, nfloat x, nfloat y);

		// extern void CGPathAddLineToPoint (CGMutablePathRef _Nullable path, const CGAffineTransform * _Nullable m, CGFloat x, CGFloat y) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGPathAddLineToPoint ([NullAllowed] CGMutablePathRef* path, [NullAllowed] CGAffineTransform* m, nfloat x, nfloat y);

		// extern void CGPathAddQuadCurveToPoint (CGMutablePathRef _Nullable path, const CGAffineTransform * _Nullable m, CGFloat cpx, CGFloat cpy, CGFloat x, CGFloat y) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGPathAddQuadCurveToPoint ([NullAllowed] CGMutablePathRef* path, [NullAllowed] CGAffineTransform* m, nfloat cpx, nfloat cpy, nfloat x, nfloat y);

		// extern void CGPathAddCurveToPoint (CGMutablePathRef _Nullable path, const CGAffineTransform * _Nullable m, CGFloat cp1x, CGFloat cp1y, CGFloat cp2x, CGFloat cp2y, CGFloat x, CGFloat y) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGPathAddCurveToPoint ([NullAllowed] CGMutablePathRef* path, [NullAllowed] CGAffineTransform* m, nfloat cp1x, nfloat cp1y, nfloat cp2x, nfloat cp2y, nfloat x, nfloat y);

		// extern void CGPathCloseSubpath (CGMutablePathRef _Nullable path) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGPathCloseSubpath ([NullAllowed] CGMutablePathRef* path);

		// extern void CGPathAddRect (CGMutablePathRef _Nullable path, const CGAffineTransform * _Nullable m, CGRect rect) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGPathAddRect ([NullAllowed] CGMutablePathRef* path, [NullAllowed] CGAffineTransform* m, CGRect rect);

		// extern void CGPathAddRects (CGMutablePathRef _Nullable path, const CGAffineTransform * _Nullable m, const CGRect * _Nullable rects, size_t count) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGPathAddRects ([NullAllowed] CGMutablePathRef* path, [NullAllowed] CGAffineTransform* m, [NullAllowed] CGRect* rects, nuint count);

		// extern void CGPathAddLines (CGMutablePathRef _Nullable path, const CGAffineTransform * _Nullable m, const CGPoint * _Nullable points, size_t count) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGPathAddLines ([NullAllowed] CGMutablePathRef* path, [NullAllowed] CGAffineTransform* m, [NullAllowed] CGPoint* points, nuint count);

		// extern void CGPathAddEllipseInRect (CGMutablePathRef _Nullable path, const CGAffineTransform * _Nullable m, CGRect rect) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGPathAddEllipseInRect ([NullAllowed] CGMutablePathRef* path, [NullAllowed] CGAffineTransform* m, CGRect rect);

		// extern void CGPathAddRelativeArc (CGMutablePathRef _Nullable path, const CGAffineTransform * _Nullable matrix, CGFloat x, CGFloat y, CGFloat radius, CGFloat startAngle, CGFloat delta) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((cf_audited_transfer));
		[Mac (10,7), iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGPathAddRelativeArc ([NullAllowed] CGMutablePathRef* path, [NullAllowed] CGAffineTransform* matrix, nfloat x, nfloat y, nfloat radius, nfloat startAngle, nfloat delta);

		// extern void CGPathAddArc (CGMutablePathRef _Nullable path, const CGAffineTransform * _Nullable m, CGFloat x, CGFloat y, CGFloat radius, CGFloat startAngle, CGFloat endAngle, _Bool clockwise) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGPathAddArc ([NullAllowed] CGMutablePathRef* path, [NullAllowed] CGAffineTransform* m, nfloat x, nfloat y, nfloat radius, nfloat startAngle, nfloat endAngle, bool clockwise);

		// extern void CGPathAddArcToPoint (CGMutablePathRef _Nullable path, const CGAffineTransform * _Nullable m, CGFloat x1, CGFloat y1, CGFloat x2, CGFloat y2, CGFloat radius) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGPathAddArcToPoint ([NullAllowed] CGMutablePathRef* path, [NullAllowed] CGAffineTransform* m, nfloat x1, nfloat y1, nfloat x2, nfloat y2, nfloat radius);

		// extern void CGPathAddPath (CGMutablePathRef _Nullable path1, const CGAffineTransform * _Nullable m, CGPathRef _Nullable path2) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGPathAddPath ([NullAllowed] CGMutablePathRef* path1, [NullAllowed] CGAffineTransform* m, [NullAllowed] CGPathRef* path2);

		// extern _Bool CGPathIsEmpty (CGPathRef _Nullable path) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGPathIsEmpty ([NullAllowed] CGPathRef* path);

		// extern _Bool CGPathIsRect (CGPathRef _Nullable path, CGRect * _Nullable rect) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGPathIsRect ([NullAllowed] CGPathRef* path, [NullAllowed] CGRect* rect);

		// extern CGPoint CGPathGetCurrentPoint (CGPathRef _Nullable path) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGPoint CGPathGetCurrentPoint ([NullAllowed] CGPathRef* path);

		// extern CGRect CGPathGetBoundingBox (CGPathRef _Nullable path) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGRect CGPathGetBoundingBox ([NullAllowed] CGPathRef* path);

		// extern CGRect CGPathGetPathBoundingBox (CGPathRef _Nullable path) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((cf_audited_transfer));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGRect CGPathGetPathBoundingBox ([NullAllowed] CGPathRef* path);

		// extern _Bool CGPathContainsPoint (CGPathRef _Nullable path, const CGAffineTransform * _Nullable m, CGPoint point, _Bool eoFill) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGPathContainsPoint ([NullAllowed] CGPathRef* path, [NullAllowed] CGAffineTransform* m, CGPoint point, bool eoFill);

		// extern void CGPathApply (CGPathRef _Nullable path, void * _Nullable info, CGPathApplierFunction _Nullable function) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGPathApply ([NullAllowed] CGPathRef* path, [NullAllowed] void* info, [NullAllowed] CGPathApplierFunction* function);

		// extern void CGPathApplyWithBlock (CGPathRef _Nonnull path, CGPathApplyBlock _Nonnull block) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((cf_audited_transfer));
		[Mac (10,13), iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGPathApplyWithBlock (CGPathRef* path, CGPathApplyBlock block);

		// extern CGPDFObjectType CGPDFObjectGetType (CGPDFObjectRef _Nullable object) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGPDFObjectType CGPDFObjectGetType ([NullAllowed] CGPDFObjectRef* @object);

		// extern _Bool CGPDFObjectGetValue (CGPDFObjectRef _Nullable object, CGPDFObjectType type, void * _Nullable value) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGPDFObjectGetValue ([NullAllowed] CGPDFObjectRef* @object, CGPDFObjectType type, [NullAllowed] void* value);

		// extern CGPDFDictionaryRef _Nullable CGPDFStreamGetDictionary (CGPDFStreamRef _Nullable stream) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGPDFDictionaryRef* CGPDFStreamGetDictionary ([NullAllowed] CGPDFStreamRef* stream);

		// extern CFDataRef _Nullable CGPDFStreamCopyData (CGPDFStreamRef _Nullable stream, CGPDFDataFormat * _Nullable format) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFDataRef* CGPDFStreamCopyData ([NullAllowed] CGPDFStreamRef* stream, [NullAllowed] CGPDFDataFormat* format);

		// extern size_t CGPDFStringGetLength (CGPDFStringRef _Nullable string) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint CGPDFStringGetLength ([NullAllowed] CGPDFStringRef* @string);

		// extern const unsigned char * _Nullable CGPDFStringGetBytePtr (CGPDFStringRef _Nullable string) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe byte* CGPDFStringGetBytePtr ([NullAllowed] CGPDFStringRef* @string);

		// extern CFStringRef _Nullable CGPDFStringCopyTextString (CGPDFStringRef _Nullable string) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFStringRef* CGPDFStringCopyTextString ([NullAllowed] CGPDFStringRef* @string);

		// extern CFDateRef _Nullable CGPDFStringCopyDate (CGPDFStringRef _Nullable string) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFDateRef* CGPDFStringCopyDate ([NullAllowed] CGPDFStringRef* @string);

		// extern size_t CGPDFArrayGetCount (CGPDFArrayRef _Nullable array) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint CGPDFArrayGetCount ([NullAllowed] CGPDFArrayRef* array);

		// extern _Bool CGPDFArrayGetObject (CGPDFArrayRef _Nullable array, size_t index, CGPDFObjectRef  _Nullable * _Nullable value) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGPDFArrayGetObject ([NullAllowed] CGPDFArrayRef* array, nuint index, [NullAllowed] CGPDFObjectRef** value);

		// extern _Bool CGPDFArrayGetNull (CGPDFArrayRef _Nullable array, size_t index) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGPDFArrayGetNull ([NullAllowed] CGPDFArrayRef* array, nuint index);

		// extern _Bool CGPDFArrayGetBoolean (CGPDFArrayRef _Nullable array, size_t index, CGPDFBoolean * _Nullable value) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGPDFArrayGetBoolean ([NullAllowed] CGPDFArrayRef* array, nuint index, [NullAllowed] byte* value);

		// extern _Bool CGPDFArrayGetInteger (CGPDFArrayRef _Nullable array, size_t index, CGPDFInteger * _Nullable value) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGPDFArrayGetInteger ([NullAllowed] CGPDFArrayRef* array, nuint index, [NullAllowed] nint* value);

		// extern _Bool CGPDFArrayGetNumber (CGPDFArrayRef _Nullable array, size_t index, CGPDFReal * _Nullable value) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGPDFArrayGetNumber ([NullAllowed] CGPDFArrayRef* array, nuint index, [NullAllowed] double* value);

		// extern _Bool CGPDFArrayGetName (CGPDFArrayRef _Nullable array, size_t index, const char * _Nullable * _Nullable value) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGPDFArrayGetName ([NullAllowed] CGPDFArrayRef* array, nuint index, [NullAllowed] sbyte** value);

		// extern _Bool CGPDFArrayGetString (CGPDFArrayRef _Nullable array, size_t index, CGPDFStringRef  _Nullable * _Nullable value) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGPDFArrayGetString ([NullAllowed] CGPDFArrayRef* array, nuint index, [NullAllowed] CGPDFStringRef** value);

		// extern _Bool CGPDFArrayGetArray (CGPDFArrayRef _Nullable array, size_t index, CGPDFArrayRef  _Nullable * _Nullable value) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGPDFArrayGetArray ([NullAllowed] CGPDFArrayRef* array, nuint index, [NullAllowed] CGPDFArrayRef** value);

		// extern _Bool CGPDFArrayGetDictionary (CGPDFArrayRef _Nullable array, size_t index, CGPDFDictionaryRef  _Nullable * _Nullable value) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGPDFArrayGetDictionary ([NullAllowed] CGPDFArrayRef* array, nuint index, [NullAllowed] CGPDFDictionaryRef** value);

		// extern _Bool CGPDFArrayGetStream (CGPDFArrayRef _Nullable array, size_t index, CGPDFStreamRef  _Nullable * _Nullable value) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGPDFArrayGetStream ([NullAllowed] CGPDFArrayRef* array, nuint index, [NullAllowed] CGPDFStreamRef** value);

		// extern void CGPDFArrayApplyBlock (CGPDFArrayRef _Nullable array, CGPDFArrayApplierBlock _Nullable block, void * _Nullable info) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((cf_audited_transfer));
		[Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGPDFArrayApplyBlock ([NullAllowed] CGPDFArrayRef* array, [NullAllowed] CGPDFArrayApplierBlock block, [NullAllowed] void* info);

		// extern size_t CGPDFDictionaryGetCount (CGPDFDictionaryRef _Nullable dict) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint CGPDFDictionaryGetCount ([NullAllowed] CGPDFDictionaryRef* dict);

		// extern _Bool CGPDFDictionaryGetObject (CGPDFDictionaryRef _Nullable dict, const char * _Nonnull key, CGPDFObjectRef  _Nullable * _Nullable value) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGPDFDictionaryGetObject ([NullAllowed] CGPDFDictionaryRef* dict, sbyte* key, [NullAllowed] CGPDFObjectRef** value);

		// extern _Bool CGPDFDictionaryGetBoolean (CGPDFDictionaryRef _Nullable dict, const char * _Nonnull key, CGPDFBoolean * _Nullable value) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGPDFDictionaryGetBoolean ([NullAllowed] CGPDFDictionaryRef* dict, sbyte* key, [NullAllowed] byte* value);

		// extern _Bool CGPDFDictionaryGetInteger (CGPDFDictionaryRef _Nullable dict, const char * _Nonnull key, CGPDFInteger * _Nullable value) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGPDFDictionaryGetInteger ([NullAllowed] CGPDFDictionaryRef* dict, sbyte* key, [NullAllowed] nint* value);

		// extern _Bool CGPDFDictionaryGetNumber (CGPDFDictionaryRef _Nullable dict, const char * _Nonnull key, CGPDFReal * _Nullable value) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGPDFDictionaryGetNumber ([NullAllowed] CGPDFDictionaryRef* dict, sbyte* key, [NullAllowed] double* value);

		// extern _Bool CGPDFDictionaryGetName (CGPDFDictionaryRef _Nullable dict, const char * _Nonnull key, const char * _Nullable * _Nullable value) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGPDFDictionaryGetName ([NullAllowed] CGPDFDictionaryRef* dict, sbyte* key, [NullAllowed] sbyte** value);

		// extern _Bool CGPDFDictionaryGetString (CGPDFDictionaryRef _Nullable dict, const char * _Nonnull key, CGPDFStringRef  _Nullable * _Nullable value) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGPDFDictionaryGetString ([NullAllowed] CGPDFDictionaryRef* dict, sbyte* key, [NullAllowed] CGPDFStringRef** value);

		// extern _Bool CGPDFDictionaryGetArray (CGPDFDictionaryRef _Nullable dict, const char * _Nonnull key, CGPDFArrayRef  _Nullable * _Nullable value) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGPDFDictionaryGetArray ([NullAllowed] CGPDFDictionaryRef* dict, sbyte* key, [NullAllowed] CGPDFArrayRef** value);

		// extern _Bool CGPDFDictionaryGetDictionary (CGPDFDictionaryRef _Nullable dict, const char * _Nonnull key, CGPDFDictionaryRef  _Nullable * _Nullable value) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGPDFDictionaryGetDictionary ([NullAllowed] CGPDFDictionaryRef* dict, sbyte* key, [NullAllowed] CGPDFDictionaryRef** value);

		// extern _Bool CGPDFDictionaryGetStream (CGPDFDictionaryRef _Nullable dict, const char * _Nonnull key, CGPDFStreamRef  _Nullable * _Nullable value) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGPDFDictionaryGetStream ([NullAllowed] CGPDFDictionaryRef* dict, sbyte* key, [NullAllowed] CGPDFStreamRef** value);

		// extern void CGPDFDictionaryApplyFunction (CGPDFDictionaryRef _Nullable dict, CGPDFDictionaryApplierFunction _Nullable function, void * _Nullable info) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGPDFDictionaryApplyFunction ([NullAllowed] CGPDFDictionaryRef* dict, [NullAllowed] CGPDFDictionaryApplierFunction* function, [NullAllowed] void* info);

		// extern void CGPDFDictionaryApplyBlock (CGPDFDictionaryRef _Nullable dict, CGPDFDictionaryApplierBlock _Nullable block, void * _Nullable info) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((cf_audited_transfer));
		[Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGPDFDictionaryApplyBlock ([NullAllowed] CGPDFDictionaryRef* dict, [NullAllowed] CGPDFDictionaryApplierBlock block, [NullAllowed] void* info);

		// extern CGPDFPageRef _Nullable CGPDFPageRetain (CGPDFPageRef _Nullable page) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGPDFPageRef* CGPDFPageRetain ([NullAllowed] CGPDFPageRef* page);

		// extern void CGPDFPageRelease (CGPDFPageRef _Nullable page) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGPDFPageRelease ([NullAllowed] CGPDFPageRef* page);

		// extern CGPDFDocumentRef _Nullable CGPDFPageGetDocument (CGPDFPageRef _Nullable page) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGPDFDocumentRef* CGPDFPageGetDocument ([NullAllowed] CGPDFPageRef* page);

		// extern size_t CGPDFPageGetPageNumber (CGPDFPageRef _Nullable page) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint CGPDFPageGetPageNumber ([NullAllowed] CGPDFPageRef* page);

		// extern CGRect CGPDFPageGetBoxRect (CGPDFPageRef _Nullable page, CGPDFBox box) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGRect CGPDFPageGetBoxRect ([NullAllowed] CGPDFPageRef* page, CGPDFBox box);

		// extern int CGPDFPageGetRotationAngle (CGPDFPageRef _Nullable page) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int CGPDFPageGetRotationAngle ([NullAllowed] CGPDFPageRef* page);

		// extern CGAffineTransform CGPDFPageGetDrawingTransform (CGPDFPageRef _Nullable page, CGPDFBox box, CGRect rect, int rotate, _Bool preserveAspectRatio) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGAffineTransform CGPDFPageGetDrawingTransform ([NullAllowed] CGPDFPageRef* page, CGPDFBox box, CGRect rect, int rotate, bool preserveAspectRatio);

		// extern CGPDFDictionaryRef _Nullable CGPDFPageGetDictionary (CGPDFPageRef _Nullable page) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGPDFDictionaryRef* CGPDFPageGetDictionary ([NullAllowed] CGPDFPageRef* page);

		// extern CFTypeID CGPDFPageGetTypeID () __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CGPDFPageGetTypeID ();

		// extern CGPDFDocumentRef _Nullable CGPDFDocumentCreateWithProvider (CGDataProviderRef _Nullable provider) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGPDFDocumentRef* CGPDFDocumentCreateWithProvider ([NullAllowed] CGDataProviderRef* provider);

		// extern CGPDFDocumentRef _Nullable CGPDFDocumentCreateWithURL (CFURLRef _Nullable url) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGPDFDocumentRef* CGPDFDocumentCreateWithURL ([NullAllowed] CFURLRef* url);

		// extern CGPDFDocumentRef _Nullable CGPDFDocumentRetain (CGPDFDocumentRef _Nullable document) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGPDFDocumentRef* CGPDFDocumentRetain ([NullAllowed] CGPDFDocumentRef* document);

		// extern void CGPDFDocumentRelease (CGPDFDocumentRef _Nullable document) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGPDFDocumentRelease ([NullAllowed] CGPDFDocumentRef* document);

		// extern void CGPDFDocumentGetVersion (CGPDFDocumentRef _Nullable document, int * _Nonnull majorVersion, int * _Nonnull minorVersion) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGPDFDocumentGetVersion ([NullAllowed] CGPDFDocumentRef* document, int* majorVersion, int* minorVersion);

		// extern _Bool CGPDFDocumentIsEncrypted (CGPDFDocumentRef _Nullable document) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGPDFDocumentIsEncrypted ([NullAllowed] CGPDFDocumentRef* document);

		// extern _Bool CGPDFDocumentUnlockWithPassword (CGPDFDocumentRef _Nullable document, const char * _Nonnull password) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGPDFDocumentUnlockWithPassword ([NullAllowed] CGPDFDocumentRef* document, sbyte* password);

		// extern _Bool CGPDFDocumentIsUnlocked (CGPDFDocumentRef _Nullable document) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGPDFDocumentIsUnlocked ([NullAllowed] CGPDFDocumentRef* document);

		// extern _Bool CGPDFDocumentAllowsPrinting (CGPDFDocumentRef _Nullable document) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGPDFDocumentAllowsPrinting ([NullAllowed] CGPDFDocumentRef* document);

		// extern _Bool CGPDFDocumentAllowsCopying (CGPDFDocumentRef _Nullable document) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGPDFDocumentAllowsCopying ([NullAllowed] CGPDFDocumentRef* document);

		// extern size_t CGPDFDocumentGetNumberOfPages (CGPDFDocumentRef _Nullable document) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint CGPDFDocumentGetNumberOfPages ([NullAllowed] CGPDFDocumentRef* document);

		// extern CGPDFPageRef _Nullable CGPDFDocumentGetPage (CGPDFDocumentRef _Nullable document, size_t pageNumber) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGPDFPageRef* CGPDFDocumentGetPage ([NullAllowed] CGPDFDocumentRef* document, nuint pageNumber);

		// extern CGPDFDictionaryRef _Nullable CGPDFDocumentGetCatalog (CGPDFDocumentRef _Nullable document) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGPDFDictionaryRef* CGPDFDocumentGetCatalog ([NullAllowed] CGPDFDocumentRef* document);

		// extern CGPDFDictionaryRef _Nullable CGPDFDocumentGetInfo (CGPDFDocumentRef _Nullable document) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGPDFDictionaryRef* CGPDFDocumentGetInfo ([NullAllowed] CGPDFDocumentRef* document);

		// extern CGPDFArrayRef _Nullable CGPDFDocumentGetID (CGPDFDocumentRef _Nullable document) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGPDFArrayRef* CGPDFDocumentGetID ([NullAllowed] CGPDFDocumentRef* document);

		// extern CFTypeID CGPDFDocumentGetTypeID () __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CGPDFDocumentGetTypeID ();

		// extern CFDictionaryRef _Nullable CGPDFDocumentGetOutline (CGPDFDocumentRef _Nonnull document) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((cf_audited_transfer));
		[Mac (10,13), iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFDictionaryRef* CGPDFDocumentGetOutline (CGPDFDocumentRef* document);

		// extern CGPDFAccessPermissions CGPDFDocumentGetAccessPermissions (CGPDFDocumentRef _Nonnull document) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((cf_audited_transfer));
		[Mac (10,13), iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGPDFAccessPermissions CGPDFDocumentGetAccessPermissions (CGPDFDocumentRef* document);

		// extern CGRect CGPDFDocumentGetMediaBox (CGPDFDocumentRef _Nullable document, int page) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0, deprecated=10.5))) __attribute__((availability(ios, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "No longer supported")]
		[Deprecated (PlatformName.MacOSX, 10, 5, message: "No longer supported")]
		[NoWatch, NoTV, NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGRect CGPDFDocumentGetMediaBox ([NullAllowed] CGPDFDocumentRef* document, int page);

		// extern CGRect CGPDFDocumentGetCropBox (CGPDFDocumentRef _Nullable document, int page) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0, deprecated=10.5))) __attribute__((availability(ios, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "No longer supported")]
		[Deprecated (PlatformName.MacOSX, 10, 5, message: "No longer supported")]
		[NoWatch, NoTV, NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGRect CGPDFDocumentGetCropBox ([NullAllowed] CGPDFDocumentRef* document, int page);

		// extern CGRect CGPDFDocumentGetBleedBox (CGPDFDocumentRef _Nullable document, int page) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0, deprecated=10.5))) __attribute__((availability(ios, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "No longer supported")]
		[Deprecated (PlatformName.MacOSX, 10, 5, message: "No longer supported")]
		[NoWatch, NoTV, NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGRect CGPDFDocumentGetBleedBox ([NullAllowed] CGPDFDocumentRef* document, int page);

		// extern CGRect CGPDFDocumentGetTrimBox (CGPDFDocumentRef _Nullable document, int page) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0, deprecated=10.5))) __attribute__((availability(ios, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "No longer supported")]
		[Deprecated (PlatformName.MacOSX, 10, 5, message: "No longer supported")]
		[NoWatch, NoTV, NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGRect CGPDFDocumentGetTrimBox ([NullAllowed] CGPDFDocumentRef* document, int page);

		// extern CGRect CGPDFDocumentGetArtBox (CGPDFDocumentRef _Nullable document, int page) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0, deprecated=10.5))) __attribute__((availability(ios, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "No longer supported")]
		[Deprecated (PlatformName.MacOSX, 10, 5, message: "No longer supported")]
		[NoWatch, NoTV, NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGRect CGPDFDocumentGetArtBox ([NullAllowed] CGPDFDocumentRef* document, int page);

		// extern int CGPDFDocumentGetRotationAngle (CGPDFDocumentRef _Nullable document, int page) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0, deprecated=10.5))) __attribute__((availability(ios, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "No longer supported")]
		[Deprecated (PlatformName.MacOSX, 10, 5, message: "No longer supported")]
		[NoWatch, NoTV, NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int CGPDFDocumentGetRotationAngle ([NullAllowed] CGPDFDocumentRef* document, int page);

		// extern CFTypeID CGFunctionGetTypeID () __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CGFunctionGetTypeID ();

		// extern CGFunctionRef _Nullable CGFunctionCreate (void * _Nullable info, size_t domainDimension, const CGFloat * _Nullable domain, size_t rangeDimension, const CGFloat * _Nullable range, const CGFunctionCallbacks * _Nullable callbacks) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGFunctionRef* CGFunctionCreate ([NullAllowed] void* info, nuint domainDimension, [NullAllowed] nfloat* domain, nuint rangeDimension, [NullAllowed] nfloat* range, [NullAllowed] CGFunctionCallbacks* callbacks);

		// extern CGFunctionRef _Nullable CGFunctionRetain (CGFunctionRef _Nullable function) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGFunctionRef* CGFunctionRetain ([NullAllowed] CGFunctionRef* function);

		// extern void CGFunctionRelease (CGFunctionRef _Nullable function) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGFunctionRelease ([NullAllowed] CGFunctionRef* function);

		// extern CFTypeID CGShadingGetTypeID () __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CGShadingGetTypeID ();

		// extern CGShadingRef _Nullable CGShadingCreateAxial (CGColorSpaceRef _Nullable space, CGPoint start, CGPoint end, CGFunctionRef _Nullable function, _Bool extendStart, _Bool extendEnd) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGShadingRef* CGShadingCreateAxial ([NullAllowed] CGColorSpaceRef* space, CGPoint start, CGPoint end, [NullAllowed] CGFunctionRef* function, bool extendStart, bool extendEnd);

		// extern CGShadingRef _Nullable CGShadingCreateRadial (CGColorSpaceRef _Nullable space, CGPoint start, CGFloat startRadius, CGPoint end, CGFloat endRadius, CGFunctionRef _Nullable function, _Bool extendStart, _Bool extendEnd) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGShadingRef* CGShadingCreateRadial ([NullAllowed] CGColorSpaceRef* space, CGPoint start, nfloat startRadius, CGPoint end, nfloat endRadius, [NullAllowed] CGFunctionRef* function, bool extendStart, bool extendEnd);

		// extern CGShadingRef _Nullable CGShadingRetain (CGShadingRef _Nullable shading) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGShadingRef* CGShadingRetain ([NullAllowed] CGShadingRef* shading);

		// extern void CGShadingRelease (CGShadingRef _Nullable shading) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGShadingRelease ([NullAllowed] CGShadingRef* shading);

		// extern CFTypeID CGContextGetTypeID () __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CGContextGetTypeID ();

		// extern void CGContextSaveGState (CGContextRef _Nullable c) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextSaveGState ([NullAllowed] CGContextRef* c);

		// extern void CGContextRestoreGState (CGContextRef _Nullable c) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextRestoreGState ([NullAllowed] CGContextRef* c);

		// extern void CGContextScaleCTM (CGContextRef _Nullable c, CGFloat sx, CGFloat sy) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextScaleCTM ([NullAllowed] CGContextRef* c, nfloat sx, nfloat sy);

		// extern void CGContextTranslateCTM (CGContextRef _Nullable c, CGFloat tx, CGFloat ty) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextTranslateCTM ([NullAllowed] CGContextRef* c, nfloat tx, nfloat ty);

		// extern void CGContextRotateCTM (CGContextRef _Nullable c, CGFloat angle) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextRotateCTM ([NullAllowed] CGContextRef* c, nfloat angle);

		// extern void CGContextConcatCTM (CGContextRef _Nullable c, CGAffineTransform transform) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextConcatCTM ([NullAllowed] CGContextRef* c, CGAffineTransform transform);

		// extern CGAffineTransform CGContextGetCTM (CGContextRef _Nullable c) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGAffineTransform CGContextGetCTM ([NullAllowed] CGContextRef* c);

		// extern void CGContextSetLineWidth (CGContextRef _Nullable c, CGFloat width) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextSetLineWidth ([NullAllowed] CGContextRef* c, nfloat width);

		// extern void CGContextSetLineCap (CGContextRef _Nullable c, CGLineCap cap) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextSetLineCap ([NullAllowed] CGContextRef* c, CGLineCap cap);

		// extern void CGContextSetLineJoin (CGContextRef _Nullable c, CGLineJoin join) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextSetLineJoin ([NullAllowed] CGContextRef* c, CGLineJoin join);

		// extern void CGContextSetMiterLimit (CGContextRef _Nullable c, CGFloat limit) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextSetMiterLimit ([NullAllowed] CGContextRef* c, nfloat limit);

		// extern void CGContextSetLineDash (CGContextRef _Nullable c, CGFloat phase, const CGFloat * _Nullable lengths, size_t count) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextSetLineDash ([NullAllowed] CGContextRef* c, nfloat phase, [NullAllowed] nfloat* lengths, nuint count);

		// extern void CGContextSetFlatness (CGContextRef _Nullable c, CGFloat flatness) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextSetFlatness ([NullAllowed] CGContextRef* c, nfloat flatness);

		// extern void CGContextSetAlpha (CGContextRef _Nullable c, CGFloat alpha) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextSetAlpha ([NullAllowed] CGContextRef* c, nfloat alpha);

		// extern void CGContextSetBlendMode (CGContextRef _Nullable c, CGBlendMode mode) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextSetBlendMode ([NullAllowed] CGContextRef* c, CGBlendMode mode);

		// extern void CGContextBeginPath (CGContextRef _Nullable c) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextBeginPath ([NullAllowed] CGContextRef* c);

		// extern void CGContextMoveToPoint (CGContextRef _Nullable c, CGFloat x, CGFloat y) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextMoveToPoint ([NullAllowed] CGContextRef* c, nfloat x, nfloat y);

		// extern void CGContextAddLineToPoint (CGContextRef _Nullable c, CGFloat x, CGFloat y) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextAddLineToPoint ([NullAllowed] CGContextRef* c, nfloat x, nfloat y);

		// extern void CGContextAddCurveToPoint (CGContextRef _Nullable c, CGFloat cp1x, CGFloat cp1y, CGFloat cp2x, CGFloat cp2y, CGFloat x, CGFloat y) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextAddCurveToPoint ([NullAllowed] CGContextRef* c, nfloat cp1x, nfloat cp1y, nfloat cp2x, nfloat cp2y, nfloat x, nfloat y);

		// extern void CGContextAddQuadCurveToPoint (CGContextRef _Nullable c, CGFloat cpx, CGFloat cpy, CGFloat x, CGFloat y) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextAddQuadCurveToPoint ([NullAllowed] CGContextRef* c, nfloat cpx, nfloat cpy, nfloat x, nfloat y);

		// extern void CGContextClosePath (CGContextRef _Nullable c) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextClosePath ([NullAllowed] CGContextRef* c);

		// extern void CGContextAddRect (CGContextRef _Nullable c, CGRect rect) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextAddRect ([NullAllowed] CGContextRef* c, CGRect rect);

		// extern void CGContextAddRects (CGContextRef _Nullable c, const CGRect * _Nullable rects, size_t count) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextAddRects ([NullAllowed] CGContextRef* c, [NullAllowed] CGRect* rects, nuint count);

		// extern void CGContextAddLines (CGContextRef _Nullable c, const CGPoint * _Nullable points, size_t count) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextAddLines ([NullAllowed] CGContextRef* c, [NullAllowed] CGPoint* points, nuint count);

		// extern void CGContextAddEllipseInRect (CGContextRef _Nullable c, CGRect rect) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextAddEllipseInRect ([NullAllowed] CGContextRef* c, CGRect rect);

		// extern void CGContextAddArc (CGContextRef _Nullable c, CGFloat x, CGFloat y, CGFloat radius, CGFloat startAngle, CGFloat endAngle, int clockwise) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextAddArc ([NullAllowed] CGContextRef* c, nfloat x, nfloat y, nfloat radius, nfloat startAngle, nfloat endAngle, int clockwise);

		// extern void CGContextAddArcToPoint (CGContextRef _Nullable c, CGFloat x1, CGFloat y1, CGFloat x2, CGFloat y2, CGFloat radius) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextAddArcToPoint ([NullAllowed] CGContextRef* c, nfloat x1, nfloat y1, nfloat x2, nfloat y2, nfloat radius);

		// extern void CGContextAddPath (CGContextRef _Nullable c, CGPathRef _Nullable path) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextAddPath ([NullAllowed] CGContextRef* c, [NullAllowed] CGPathRef* path);

		// extern void CGContextReplacePathWithStrokedPath (CGContextRef _Nullable c) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextReplacePathWithStrokedPath ([NullAllowed] CGContextRef* c);

		// extern _Bool CGContextIsPathEmpty (CGContextRef _Nullable c) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGContextIsPathEmpty ([NullAllowed] CGContextRef* c);

		// extern CGPoint CGContextGetPathCurrentPoint (CGContextRef _Nullable c) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGPoint CGContextGetPathCurrentPoint ([NullAllowed] CGContextRef* c);

		// extern CGRect CGContextGetPathBoundingBox (CGContextRef _Nullable c) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGRect CGContextGetPathBoundingBox ([NullAllowed] CGContextRef* c);

		// extern CGPathRef _Nullable CGContextCopyPath (CGContextRef _Nullable c) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGPathRef* CGContextCopyPath ([NullAllowed] CGContextRef* c);

		// extern _Bool CGContextPathContainsPoint (CGContextRef _Nullable c, CGPoint point, CGPathDrawingMode mode) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGContextPathContainsPoint ([NullAllowed] CGContextRef* c, CGPoint point, CGPathDrawingMode mode);

		// extern void CGContextDrawPath (CGContextRef _Nullable c, CGPathDrawingMode mode) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextDrawPath ([NullAllowed] CGContextRef* c, CGPathDrawingMode mode);

		// extern void CGContextFillPath (CGContextRef _Nullable c) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextFillPath ([NullAllowed] CGContextRef* c);

		// extern void CGContextEOFillPath (CGContextRef _Nullable c) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextEOFillPath ([NullAllowed] CGContextRef* c);

		// extern void CGContextStrokePath (CGContextRef _Nullable c) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextStrokePath ([NullAllowed] CGContextRef* c);

		// extern void CGContextFillRect (CGContextRef _Nullable c, CGRect rect) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextFillRect ([NullAllowed] CGContextRef* c, CGRect rect);

		// extern void CGContextFillRects (CGContextRef _Nullable c, const CGRect * _Nullable rects, size_t count) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextFillRects ([NullAllowed] CGContextRef* c, [NullAllowed] CGRect* rects, nuint count);

		// extern void CGContextStrokeRect (CGContextRef _Nullable c, CGRect rect) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextStrokeRect ([NullAllowed] CGContextRef* c, CGRect rect);

		// extern void CGContextStrokeRectWithWidth (CGContextRef _Nullable c, CGRect rect, CGFloat width) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextStrokeRectWithWidth ([NullAllowed] CGContextRef* c, CGRect rect, nfloat width);

		// extern void CGContextClearRect (CGContextRef _Nullable c, CGRect rect) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextClearRect ([NullAllowed] CGContextRef* c, CGRect rect);

		// extern void CGContextFillEllipseInRect (CGContextRef _Nullable c, CGRect rect) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextFillEllipseInRect ([NullAllowed] CGContextRef* c, CGRect rect);

		// extern void CGContextStrokeEllipseInRect (CGContextRef _Nullable c, CGRect rect) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextStrokeEllipseInRect ([NullAllowed] CGContextRef* c, CGRect rect);

		// extern void CGContextStrokeLineSegments (CGContextRef _Nullable c, const CGPoint * _Nullable points, size_t count) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextStrokeLineSegments ([NullAllowed] CGContextRef* c, [NullAllowed] CGPoint* points, nuint count);

		// extern void CGContextClip (CGContextRef _Nullable c) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextClip ([NullAllowed] CGContextRef* c);

		// extern void CGContextEOClip (CGContextRef _Nullable c) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextEOClip ([NullAllowed] CGContextRef* c);

		// extern void CGContextResetClip (CGContextRef _Nonnull c) __attribute__((visibility("default"))) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextResetClip (CGContextRef* c);

		// extern void CGContextClipToMask (CGContextRef _Nullable c, CGRect rect, CGImageRef _Nullable mask) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextClipToMask ([NullAllowed] CGContextRef* c, CGRect rect, [NullAllowed] CGImageRef* mask);

		// extern CGRect CGContextGetClipBoundingBox (CGContextRef _Nullable c) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGRect CGContextGetClipBoundingBox ([NullAllowed] CGContextRef* c);

		// extern void CGContextClipToRect (CGContextRef _Nullable c, CGRect rect) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextClipToRect ([NullAllowed] CGContextRef* c, CGRect rect);

		// extern void CGContextClipToRects (CGContextRef _Nullable c, const CGRect * _Nonnull rects, size_t count) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextClipToRects ([NullAllowed] CGContextRef* c, CGRect* rects, nuint count);

		// extern void CGContextSetFillColorWithColor (CGContextRef _Nullable c, CGColorRef _Nullable color) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextSetFillColorWithColor ([NullAllowed] CGContextRef* c, [NullAllowed] CGColorRef* color);

		// extern void CGContextSetStrokeColorWithColor (CGContextRef _Nullable c, CGColorRef _Nullable color) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextSetStrokeColorWithColor ([NullAllowed] CGContextRef* c, [NullAllowed] CGColorRef* color);

		// extern void CGContextSetFillColorSpace (CGContextRef _Nullable c, CGColorSpaceRef _Nullable space) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextSetFillColorSpace ([NullAllowed] CGContextRef* c, [NullAllowed] CGColorSpaceRef* space);

		// extern void CGContextSetStrokeColorSpace (CGContextRef _Nullable c, CGColorSpaceRef _Nullable space) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextSetStrokeColorSpace ([NullAllowed] CGContextRef* c, [NullAllowed] CGColorSpaceRef* space);

		// extern void CGContextSetFillColor (CGContextRef _Nullable c, const CGFloat * _Nullable components) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextSetFillColor ([NullAllowed] CGContextRef* c, [NullAllowed] nfloat* components);

		// extern void CGContextSetStrokeColor (CGContextRef _Nullable c, const CGFloat * _Nullable components) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextSetStrokeColor ([NullAllowed] CGContextRef* c, [NullAllowed] nfloat* components);

		// extern void CGContextSetFillPattern (CGContextRef _Nullable c, CGPatternRef _Nullable pattern, const CGFloat * _Nullable components) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextSetFillPattern ([NullAllowed] CGContextRef* c, [NullAllowed] CGPatternRef* pattern, [NullAllowed] nfloat* components);

		// extern void CGContextSetStrokePattern (CGContextRef _Nullable c, CGPatternRef _Nullable pattern, const CGFloat * _Nullable components) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextSetStrokePattern ([NullAllowed] CGContextRef* c, [NullAllowed] CGPatternRef* pattern, [NullAllowed] nfloat* components);

		// extern void CGContextSetPatternPhase (CGContextRef _Nullable c, CGSize phase) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextSetPatternPhase ([NullAllowed] CGContextRef* c, CGSize phase);

		// extern void CGContextSetGrayFillColor (CGContextRef _Nullable c, CGFloat gray, CGFloat alpha) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextSetGrayFillColor ([NullAllowed] CGContextRef* c, nfloat gray, nfloat alpha);

		// extern void CGContextSetGrayStrokeColor (CGContextRef _Nullable c, CGFloat gray, CGFloat alpha) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextSetGrayStrokeColor ([NullAllowed] CGContextRef* c, nfloat gray, nfloat alpha);

		// extern void CGContextSetRGBFillColor (CGContextRef _Nullable c, CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextSetRGBFillColor ([NullAllowed] CGContextRef* c, nfloat red, nfloat green, nfloat blue, nfloat alpha);

		// extern void CGContextSetRGBStrokeColor (CGContextRef _Nullable c, CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextSetRGBStrokeColor ([NullAllowed] CGContextRef* c, nfloat red, nfloat green, nfloat blue, nfloat alpha);

		// extern void CGContextSetCMYKFillColor (CGContextRef _Nullable c, CGFloat cyan, CGFloat magenta, CGFloat yellow, CGFloat black, CGFloat alpha) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextSetCMYKFillColor ([NullAllowed] CGContextRef* c, nfloat cyan, nfloat magenta, nfloat yellow, nfloat black, nfloat alpha);

		// extern void CGContextSetCMYKStrokeColor (CGContextRef _Nullable c, CGFloat cyan, CGFloat magenta, CGFloat yellow, CGFloat black, CGFloat alpha) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextSetCMYKStrokeColor ([NullAllowed] CGContextRef* c, nfloat cyan, nfloat magenta, nfloat yellow, nfloat black, nfloat alpha);

		// extern void CGContextSetRenderingIntent (CGContextRef _Nullable c, CGColorRenderingIntent intent) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextSetRenderingIntent ([NullAllowed] CGContextRef* c, CGColorRenderingIntent intent);

		// extern void CGContextDrawImage (CGContextRef _Nullable c, CGRect rect, CGImageRef _Nullable image) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextDrawImage ([NullAllowed] CGContextRef* c, CGRect rect, [NullAllowed] CGImageRef* image);

		// extern void CGContextDrawTiledImage (CGContextRef _Nullable c, CGRect rect, CGImageRef _Nullable image) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextDrawTiledImage ([NullAllowed] CGContextRef* c, CGRect rect, [NullAllowed] CGImageRef* image);

		// extern CGInterpolationQuality CGContextGetInterpolationQuality (CGContextRef _Nullable c) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGInterpolationQuality CGContextGetInterpolationQuality ([NullAllowed] CGContextRef* c);

		// extern void CGContextSetInterpolationQuality (CGContextRef _Nullable c, CGInterpolationQuality quality) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextSetInterpolationQuality ([NullAllowed] CGContextRef* c, CGInterpolationQuality quality);

		// extern void CGContextSetShadowWithColor (CGContextRef _Nullable c, CGSize offset, CGFloat blur, CGColorRef _Nullable color) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextSetShadowWithColor ([NullAllowed] CGContextRef* c, CGSize offset, nfloat blur, [NullAllowed] CGColorRef* color);

		// extern void CGContextSetShadow (CGContextRef _Nullable c, CGSize offset, CGFloat blur) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextSetShadow ([NullAllowed] CGContextRef* c, CGSize offset, nfloat blur);

		// extern void CGContextDrawLinearGradient (CGContextRef _Nullable c, CGGradientRef _Nullable gradient, CGPoint startPoint, CGPoint endPoint, CGGradientDrawingOptions options) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextDrawLinearGradient ([NullAllowed] CGContextRef* c, [NullAllowed] CGGradientRef* gradient, CGPoint startPoint, CGPoint endPoint, CGGradientDrawingOptions options);

		// extern void CGContextDrawRadialGradient (CGContextRef _Nullable c, CGGradientRef _Nullable gradient, CGPoint startCenter, CGFloat startRadius, CGPoint endCenter, CGFloat endRadius, CGGradientDrawingOptions options) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextDrawRadialGradient ([NullAllowed] CGContextRef* c, [NullAllowed] CGGradientRef* gradient, CGPoint startCenter, nfloat startRadius, CGPoint endCenter, nfloat endRadius, CGGradientDrawingOptions options);

		// extern void CGContextDrawShading (CGContextRef _Nullable c, CGShadingRef _Nullable shading) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextDrawShading ([NullAllowed] CGContextRef* c, [NullAllowed] CGShadingRef* shading);

		// extern void CGContextSetCharacterSpacing (CGContextRef _Nullable c, CGFloat spacing) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextSetCharacterSpacing ([NullAllowed] CGContextRef* c, nfloat spacing);

		// extern void CGContextSetTextPosition (CGContextRef _Nullable c, CGFloat x, CGFloat y) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextSetTextPosition ([NullAllowed] CGContextRef* c, nfloat x, nfloat y);

		// extern CGPoint CGContextGetTextPosition (CGContextRef _Nullable c) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGPoint CGContextGetTextPosition ([NullAllowed] CGContextRef* c);

		// extern void CGContextSetTextMatrix (CGContextRef _Nullable c, CGAffineTransform t) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextSetTextMatrix ([NullAllowed] CGContextRef* c, CGAffineTransform t);

		// extern CGAffineTransform CGContextGetTextMatrix (CGContextRef _Nullable c) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGAffineTransform CGContextGetTextMatrix ([NullAllowed] CGContextRef* c);

		// extern void CGContextSetTextDrawingMode (CGContextRef _Nullable c, CGTextDrawingMode mode) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextSetTextDrawingMode ([NullAllowed] CGContextRef* c, CGTextDrawingMode mode);

		// extern void CGContextSetFont (CGContextRef _Nullable c, CGFontRef _Nullable font) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextSetFont ([NullAllowed] CGContextRef* c, [NullAllowed] CGFontRef* font);

		// extern void CGContextSetFontSize (CGContextRef _Nullable c, CGFloat size) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextSetFontSize ([NullAllowed] CGContextRef* c, nfloat size);

		// extern void CGContextShowGlyphsAtPositions (CGContextRef _Nullable c, const CGGlyph * _Nullable glyphs, const CGPoint * _Nullable Lpositions, size_t count) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextShowGlyphsAtPositions ([NullAllowed] CGContextRef* c, [NullAllowed] ushort* glyphs, [NullAllowed] CGPoint* Lpositions, nuint count);

		// extern void CGContextDrawPDFPage (CGContextRef _Nullable c, CGPDFPageRef _Nullable page) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextDrawPDFPage ([NullAllowed] CGContextRef* c, [NullAllowed] CGPDFPageRef* page);

		// extern void CGContextBeginPage (CGContextRef _Nullable c, const CGRect * _Nullable mediaBox) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextBeginPage ([NullAllowed] CGContextRef* c, [NullAllowed] CGRect* mediaBox);

		// extern void CGContextEndPage (CGContextRef _Nullable c) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextEndPage ([NullAllowed] CGContextRef* c);

		// extern CGContextRef _Nullable CGContextRetain (CGContextRef _Nullable c) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGContextRef* CGContextRetain ([NullAllowed] CGContextRef* c);

		// extern void CGContextRelease (CGContextRef _Nullable c) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextRelease ([NullAllowed] CGContextRef* c);

		// extern void CGContextFlush (CGContextRef _Nullable c) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextFlush ([NullAllowed] CGContextRef* c);

		// extern void CGContextSynchronize (CGContextRef _Nullable c) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextSynchronize ([NullAllowed] CGContextRef* c);

		// extern void CGContextSetShouldAntialias (CGContextRef _Nullable c, _Bool shouldAntialias) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextSetShouldAntialias ([NullAllowed] CGContextRef* c, bool shouldAntialias);

		// extern void CGContextSetAllowsAntialiasing (CGContextRef _Nullable c, _Bool allowsAntialiasing) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextSetAllowsAntialiasing ([NullAllowed] CGContextRef* c, bool allowsAntialiasing);

		// extern void CGContextSetShouldSmoothFonts (CGContextRef _Nullable c, _Bool shouldSmoothFonts) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextSetShouldSmoothFonts ([NullAllowed] CGContextRef* c, bool shouldSmoothFonts);

		// extern void CGContextSetAllowsFontSmoothing (CGContextRef _Nullable c, _Bool allowsFontSmoothing) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextSetAllowsFontSmoothing ([NullAllowed] CGContextRef* c, bool allowsFontSmoothing);

		// extern void CGContextSetShouldSubpixelPositionFonts (CGContextRef _Nullable c, _Bool shouldSubpixelPositionFonts) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextSetShouldSubpixelPositionFonts ([NullAllowed] CGContextRef* c, bool shouldSubpixelPositionFonts);

		// extern void CGContextSetAllowsFontSubpixelPositioning (CGContextRef _Nullable c, _Bool allowsFontSubpixelPositioning) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextSetAllowsFontSubpixelPositioning ([NullAllowed] CGContextRef* c, bool allowsFontSubpixelPositioning);

		// extern void CGContextSetShouldSubpixelQuantizeFonts (CGContextRef _Nullable c, _Bool shouldSubpixelQuantizeFonts) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextSetShouldSubpixelQuantizeFonts ([NullAllowed] CGContextRef* c, bool shouldSubpixelQuantizeFonts);

		// extern void CGContextSetAllowsFontSubpixelQuantization (CGContextRef _Nullable c, _Bool allowsFontSubpixelQuantization) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextSetAllowsFontSubpixelQuantization ([NullAllowed] CGContextRef* c, bool allowsFontSubpixelQuantization);

		// extern void CGContextBeginTransparencyLayer (CGContextRef _Nullable c, CFDictionaryRef _Nullable auxiliaryInfo) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextBeginTransparencyLayer ([NullAllowed] CGContextRef* c, [NullAllowed] CFDictionaryRef* auxiliaryInfo);

		// extern void CGContextBeginTransparencyLayerWithRect (CGContextRef _Nullable c, CGRect rect, CFDictionaryRef _Nullable auxInfo) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextBeginTransparencyLayerWithRect ([NullAllowed] CGContextRef* c, CGRect rect, [NullAllowed] CFDictionaryRef* auxInfo);

		// extern void CGContextEndTransparencyLayer (CGContextRef _Nullable c) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,3), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextEndTransparencyLayer ([NullAllowed] CGContextRef* c);

		// extern CGAffineTransform CGContextGetUserSpaceToDeviceSpaceTransform (CGContextRef _Nullable c) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGAffineTransform CGContextGetUserSpaceToDeviceSpaceTransform ([NullAllowed] CGContextRef* c);

		// extern CGPoint CGContextConvertPointToDeviceSpace (CGContextRef _Nullable c, CGPoint point) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGPoint CGContextConvertPointToDeviceSpace ([NullAllowed] CGContextRef* c, CGPoint point);

		// extern CGPoint CGContextConvertPointToUserSpace (CGContextRef _Nullable c, CGPoint point) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGPoint CGContextConvertPointToUserSpace ([NullAllowed] CGContextRef* c, CGPoint point);

		// extern CGSize CGContextConvertSizeToDeviceSpace (CGContextRef _Nullable c, CGSize size) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGSize CGContextConvertSizeToDeviceSpace ([NullAllowed] CGContextRef* c, CGSize size);

		// extern CGSize CGContextConvertSizeToUserSpace (CGContextRef _Nullable c, CGSize size) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGSize CGContextConvertSizeToUserSpace ([NullAllowed] CGContextRef* c, CGSize size);

		// extern CGRect CGContextConvertRectToDeviceSpace (CGContextRef _Nullable c, CGRect rect) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGRect CGContextConvertRectToDeviceSpace ([NullAllowed] CGContextRef* c, CGRect rect);

		// extern CGRect CGContextConvertRectToUserSpace (CGContextRef _Nullable c, CGRect rect) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGRect CGContextConvertRectToUserSpace ([NullAllowed] CGContextRef* c, CGRect rect);

		// extern void CGContextSelectFont (CGContextRef _Nullable c, const char * _Nullable name, CGFloat size, CGTextEncoding textEncoding) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0, deprecated=10.9))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "No longer supported")]
		[Deprecated (PlatformName.MacOSX, 10, 9, message: "No longer supported")]
		[Introduced (PlatformName.iOS, 2, 0, message: "No longer supported")]
		[Deprecated (PlatformName.iOS, 7, 0, message: "No longer supported")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextSelectFont ([NullAllowed] CGContextRef* c, [NullAllowed] sbyte* name, nfloat size, CGTextEncoding textEncoding);

		// extern void CGContextShowText (CGContextRef _Nullable c, const char * _Nullable string, size_t length) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0, deprecated=10.9))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "No longer supported")]
		[Deprecated (PlatformName.MacOSX, 10, 9, message: "No longer supported")]
		[Introduced (PlatformName.iOS, 2, 0, message: "No longer supported")]
		[Deprecated (PlatformName.iOS, 7, 0, message: "No longer supported")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextShowText ([NullAllowed] CGContextRef* c, [NullAllowed] sbyte* @string, nuint length);

		// extern void CGContextShowTextAtPoint (CGContextRef _Nullable c, CGFloat x, CGFloat y, const char * _Nullable string, size_t length) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0, deprecated=10.9))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "No longer supported")]
		[Deprecated (PlatformName.MacOSX, 10, 9, message: "No longer supported")]
		[Introduced (PlatformName.iOS, 2, 0, message: "No longer supported")]
		[Deprecated (PlatformName.iOS, 7, 0, message: "No longer supported")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextShowTextAtPoint ([NullAllowed] CGContextRef* c, nfloat x, nfloat y, [NullAllowed] sbyte* @string, nuint length);

		// extern void CGContextShowGlyphs (CGContextRef _Nullable c, const CGGlyph * _Nullable g, size_t count) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0, deprecated=10.9))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "No longer supported")]
		[Deprecated (PlatformName.MacOSX, 10, 9, message: "No longer supported")]
		[Introduced (PlatformName.iOS, 2, 0, message: "No longer supported")]
		[Deprecated (PlatformName.iOS, 7, 0, message: "No longer supported")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextShowGlyphs ([NullAllowed] CGContextRef* c, [NullAllowed] ushort* g, nuint count);

		// extern void CGContextShowGlyphsAtPoint (CGContextRef _Nullable c, CGFloat x, CGFloat y, const CGGlyph * _Nullable glyphs, size_t count) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0, deprecated=10.9))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "No longer supported")]
		[Deprecated (PlatformName.MacOSX, 10, 9, message: "No longer supported")]
		[Introduced (PlatformName.iOS, 2, 0, message: "No longer supported")]
		[Deprecated (PlatformName.iOS, 7, 0, message: "No longer supported")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextShowGlyphsAtPoint ([NullAllowed] CGContextRef* c, nfloat x, nfloat y, [NullAllowed] ushort* glyphs, nuint count);

		// extern void CGContextShowGlyphsWithAdvances (CGContextRef _Nullable c, const CGGlyph * _Nullable glyphs, const CGSize * _Nullable advances, size_t count) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.3, deprecated=10.9))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 3, message: "No longer supported")]
		[Deprecated (PlatformName.MacOSX, 10, 9, message: "No longer supported")]
		[Introduced (PlatformName.iOS, 2, 0, message: "No longer supported")]
		[Deprecated (PlatformName.iOS, 7, 0, message: "No longer supported")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextShowGlyphsWithAdvances ([NullAllowed] CGContextRef* c, [NullAllowed] ushort* glyphs, [NullAllowed] CGSize* advances, nuint count);

		// extern void CGContextDrawPDFDocument (CGContextRef _Nullable c, CGRect rect, CGPDFDocumentRef _Nullable document, int page) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0, deprecated=10.5))) __attribute__((availability(ios, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((cf_audited_transfer));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "No longer supported")]
		[Deprecated (PlatformName.MacOSX, 10, 5, message: "No longer supported")]
		[NoWatch, NoTV, NoiOS]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextDrawPDFDocument ([NullAllowed] CGContextRef* c, CGRect rect, [NullAllowed] CGPDFDocumentRef* document, int page);

		// extern CGContextRef _Nullable CGBitmapContextCreateWithData (void * _Nullable data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef _Nullable space, uint32_t bitmapInfo, CGBitmapContextReleaseDataCallback _Nullable releaseCallback, void * _Nullable releaseInfo) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((cf_audited_transfer));
		[Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGContextRef* CGBitmapContextCreateWithData ([NullAllowed] void* data, nuint width, nuint height, nuint bitsPerComponent, nuint bytesPerRow, [NullAllowed] CGColorSpaceRef* space, uint bitmapInfo, [NullAllowed] CGBitmapContextReleaseDataCallback* releaseCallback, [NullAllowed] void* releaseInfo);

		// extern CGContextRef _Nullable CGBitmapContextCreate (void * _Nullable data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef _Nullable space, uint32_t bitmapInfo) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGContextRef* CGBitmapContextCreate ([NullAllowed] void* data, nuint width, nuint height, nuint bitsPerComponent, nuint bytesPerRow, [NullAllowed] CGColorSpaceRef* space, uint bitmapInfo);

		// extern void * _Nullable CGBitmapContextGetData (CGContextRef _Nullable context) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe void* CGBitmapContextGetData ([NullAllowed] CGContextRef* context);

		// extern size_t CGBitmapContextGetWidth (CGContextRef _Nullable context) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint CGBitmapContextGetWidth ([NullAllowed] CGContextRef* context);

		// extern size_t CGBitmapContextGetHeight (CGContextRef _Nullable context) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint CGBitmapContextGetHeight ([NullAllowed] CGContextRef* context);

		// extern size_t CGBitmapContextGetBitsPerComponent (CGContextRef _Nullable context) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint CGBitmapContextGetBitsPerComponent ([NullAllowed] CGContextRef* context);

		// extern size_t CGBitmapContextGetBitsPerPixel (CGContextRef _Nullable context) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint CGBitmapContextGetBitsPerPixel ([NullAllowed] CGContextRef* context);

		// extern size_t CGBitmapContextGetBytesPerRow (CGContextRef _Nullable context) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint CGBitmapContextGetBytesPerRow ([NullAllowed] CGContextRef* context);

		// extern CGColorSpaceRef _Nullable CGBitmapContextGetColorSpace (CGContextRef _Nullable context) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGColorSpaceRef* CGBitmapContextGetColorSpace ([NullAllowed] CGContextRef* context);

		// extern CGImageAlphaInfo CGBitmapContextGetAlphaInfo (CGContextRef _Nullable context) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGImageAlphaInfo CGBitmapContextGetAlphaInfo ([NullAllowed] CGContextRef* context);

		// extern CGBitmapInfo CGBitmapContextGetBitmapInfo (CGContextRef _Nullable context) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGBitmapInfo CGBitmapContextGetBitmapInfo ([NullAllowed] CGContextRef* context);

		// extern CGImageRef _Nullable CGBitmapContextCreateImage (CGContextRef _Nullable context) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGImageRef* CGBitmapContextCreateImage ([NullAllowed] CGContextRef* context);

		// extern CFTypeID CGColorConversionInfoGetTypeID () __attribute__((visibility("default"))) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CGColorConversionInfoGetTypeID ();

		// extern CGColorConversionInfoRef _Nullable CGColorConversionInfoCreate (CGColorSpaceRef _Nullable src, CGColorSpaceRef _Nullable dst) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((cf_audited_transfer));
		[Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGColorConversionInfoRef* CGColorConversionInfoCreate ([NullAllowed] CGColorSpaceRef* src, [NullAllowed] CGColorSpaceRef* dst);

		// extern CGColorConversionInfoRef _Nullable CGColorConversionInfoCreateWithOptions (CGColorSpaceRef _Nonnull src, CGColorSpaceRef _Nonnull dst, CFDictionaryRef _Nullable options) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.14.6))) __attribute__((availability(ios, introduced=13))) __attribute__((cf_audited_transfer));
		[Mac (10,14,6), iOS (13,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGColorConversionInfoRef* CGColorConversionInfoCreateWithOptions (CGColorSpaceRef* src, CGColorSpaceRef* dst, [NullAllowed] CFDictionaryRef* options);

		// extern CGColorConversionInfoRef _Nullable CGColorConversionInfoCreateFromList (CFDictionaryRef _Nullable options, CGColorSpaceRef _Nullable, CGColorConversionInfoTransformType, CGColorRenderingIntent, ...) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((cf_audited_transfer));
		[Mac (10,12), iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGColorConversionInfoRef* CGColorConversionInfoCreateFromList ([NullAllowed] CFDictionaryRef* options, [NullAllowed] CGColorSpaceRef*, CGColorConversionInfoTransformType, CGColorRenderingIntent, IntPtr varArgs);

		// extern CGColorConversionInfoRef _Nullable CGColorConversionInfoCreateFromListWithArguments (CFDictionaryRef _Nullable options, CGColorSpaceRef _Nullable, CGColorConversionInfoTransformType, CGColorRenderingIntent, va_list) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((cf_audited_transfer));
		[Mac (10,13), iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGColorConversionInfoRef* CGColorConversionInfoCreateFromListWithArguments ([NullAllowed] CFDictionaryRef* options, [NullAllowed] CGColorSpaceRef*, CGColorConversionInfoTransformType, CGColorRenderingIntent, sbyte*);

		// extern CFTypeID CGDataConsumerGetTypeID () __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,2), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CGDataConsumerGetTypeID ();

		// extern CGDataConsumerRef _Nullable CGDataConsumerCreate (void * _Nullable info, const CGDataConsumerCallbacks * _Nullable cbks) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGDataConsumerRef* CGDataConsumerCreate ([NullAllowed] void* info, [NullAllowed] CGDataConsumerCallbacks* cbks);

		// extern CGDataConsumerRef _Nullable CGDataConsumerCreateWithURL (CFURLRef _Nullable url) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGDataConsumerRef* CGDataConsumerCreateWithURL ([NullAllowed] CFURLRef* url);

		// extern CGDataConsumerRef _Nullable CGDataConsumerCreateWithCFData (CFMutableDataRef _Nullable data) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGDataConsumerRef* CGDataConsumerCreateWithCFData ([NullAllowed] CFMutableDataRef* data);

		// extern CGDataConsumerRef _Nullable CGDataConsumerRetain (CGDataConsumerRef _Nullable consumer) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGDataConsumerRef* CGDataConsumerRetain ([NullAllowed] CGDataConsumerRef* consumer);

		// extern void CGDataConsumerRelease (CGDataConsumerRef _Nullable consumer) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGDataConsumerRelease ([NullAllowed] CGDataConsumerRef* consumer);

		// extern CGLayerRef _Nullable CGLayerCreateWithContext (CGContextRef _Nullable context, CGSize size, CFDictionaryRef _Nullable auxiliaryInfo) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGLayerRef* CGLayerCreateWithContext ([NullAllowed] CGContextRef* context, CGSize size, [NullAllowed] CFDictionaryRef* auxiliaryInfo);

		// extern CGLayerRef _Nullable CGLayerRetain (CGLayerRef _Nullable layer) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGLayerRef* CGLayerRetain ([NullAllowed] CGLayerRef* layer);

		// extern void CGLayerRelease (CGLayerRef _Nullable layer) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGLayerRelease ([NullAllowed] CGLayerRef* layer);

		// extern CGSize CGLayerGetSize (CGLayerRef _Nullable layer) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGSize CGLayerGetSize ([NullAllowed] CGLayerRef* layer);

		// extern CGContextRef _Nullable CGLayerGetContext (CGLayerRef _Nullable layer) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGContextRef* CGLayerGetContext ([NullAllowed] CGLayerRef* layer);

		// extern void CGContextDrawLayerInRect (CGContextRef _Nullable context, CGRect rect, CGLayerRef _Nullable layer) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextDrawLayerInRect ([NullAllowed] CGContextRef* context, CGRect rect, [NullAllowed] CGLayerRef* layer);

		// extern void CGContextDrawLayerAtPoint (CGContextRef _Nullable context, CGPoint point, CGLayerRef _Nullable layer) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGContextDrawLayerAtPoint ([NullAllowed] CGContextRef* context, CGPoint point, [NullAllowed] CGLayerRef* layer);

		// extern CFTypeID CGLayerGetTypeID () __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CGLayerGetTypeID ();

		// extern CGPDFContentStreamRef _Nonnull CGPDFContentStreamCreateWithPage (CGPDFPageRef _Nonnull page) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGPDFContentStreamRef* CGPDFContentStreamCreateWithPage (CGPDFPageRef* page);

		// extern CGPDFContentStreamRef _Nonnull CGPDFContentStreamCreateWithStream (CGPDFStreamRef _Nonnull stream, CGPDFDictionaryRef _Nonnull streamResources, CGPDFContentStreamRef _Nullable parent) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGPDFContentStreamRef* CGPDFContentStreamCreateWithStream (CGPDFStreamRef* stream, CGPDFDictionaryRef* streamResources, [NullAllowed] CGPDFContentStreamRef* parent);

		// extern CGPDFContentStreamRef _Nonnull CGPDFContentStreamRetain (CGPDFContentStreamRef _Nonnull cs) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGPDFContentStreamRef* CGPDFContentStreamRetain (CGPDFContentStreamRef* cs);

		// extern void CGPDFContentStreamRelease (CGPDFContentStreamRef _Nonnull cs) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGPDFContentStreamRelease (CGPDFContentStreamRef* cs);

		// extern CFArrayRef _Nullable CGPDFContentStreamGetStreams (CGPDFContentStreamRef _Nonnull cs) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFArrayRef* CGPDFContentStreamGetStreams (CGPDFContentStreamRef* cs);

		// extern CGPDFObjectRef _Nullable CGPDFContentStreamGetResource (CGPDFContentStreamRef _Nonnull cs, const char * _Nonnull category, const char * _Nonnull name) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGPDFObjectRef* CGPDFContentStreamGetResource (CGPDFContentStreamRef* cs, sbyte* category, sbyte* name);

		// extern CGContextRef _Nullable CGPDFContextCreate (CGDataConsumerRef _Nullable consumer, const CGRect * _Nullable mediaBox, CFDictionaryRef _Nullable auxiliaryInfo) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGContextRef* CGPDFContextCreate ([NullAllowed] CGDataConsumerRef* consumer, [NullAllowed] CGRect* mediaBox, [NullAllowed] CFDictionaryRef* auxiliaryInfo);

		// extern CGContextRef _Nullable CGPDFContextCreateWithURL (CFURLRef _Nullable url, const CGRect * _Nullable mediaBox, CFDictionaryRef _Nullable auxiliaryInfo) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,0), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGContextRef* CGPDFContextCreateWithURL ([NullAllowed] CFURLRef* url, [NullAllowed] CGRect* mediaBox, [NullAllowed] CFDictionaryRef* auxiliaryInfo);

		// extern void CGPDFContextClose (CGContextRef _Nullable context) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGPDFContextClose ([NullAllowed] CGContextRef* context);

		// extern void CGPDFContextBeginPage (CGContextRef _Nullable context, CFDictionaryRef _Nullable pageInfo) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGPDFContextBeginPage ([NullAllowed] CGContextRef* context, [NullAllowed] CFDictionaryRef* pageInfo);

		// extern void CGPDFContextEndPage (CGContextRef _Nullable context) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGPDFContextEndPage ([NullAllowed] CGContextRef* context);

		// extern void CGPDFContextAddDocumentMetadata (CGContextRef _Nullable context, CFDataRef _Nullable metadata) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=4.0))) __attribute__((cf_audited_transfer));
		[Mac (10,7), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGPDFContextAddDocumentMetadata ([NullAllowed] CGContextRef* context, [NullAllowed] CFDataRef* metadata);

		// extern void CGPDFContextSetURLForRect (CGContextRef _Nullable context, CFURLRef _Nonnull url, CGRect rect) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGPDFContextSetURLForRect ([NullAllowed] CGContextRef* context, CFURLRef* url, CGRect rect);

		// extern void CGPDFContextAddDestinationAtPoint (CGContextRef _Nullable context, CFStringRef _Nonnull name, CGPoint point) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGPDFContextAddDestinationAtPoint ([NullAllowed] CGContextRef* context, CFStringRef* name, CGPoint point);

		// extern void CGPDFContextSetDestinationForRect (CGContextRef _Nullable context, CFStringRef _Nonnull name, CGRect rect) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGPDFContextSetDestinationForRect ([NullAllowed] CGContextRef* context, CFStringRef* name, CGRect rect);

		// extern void CGPDFContextSetOutline (CGContextRef _Nonnull context, CFDictionaryRef _Nullable outline) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((cf_audited_transfer));
		[Mac (10,13), iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGPDFContextSetOutline (CGContextRef* context, [NullAllowed] CFDictionaryRef* outline);

		// extern const char * _Nullable CGPDFTagTypeGetName (CGPDFTagType tagType) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((cf_audited_transfer));
		[Mac (10,15), iOS (13,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe sbyte* CGPDFTagTypeGetName (CGPDFTagType tagType);

		// extern void CGPDFContextBeginTag (CGContextRef _Nonnull context, CGPDFTagType tagType, CFDictionaryRef _Nullable tagProperties) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((cf_audited_transfer));
		[Mac (10,15), iOS (13,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGPDFContextBeginTag (CGContextRef* context, CGPDFTagType tagType, [NullAllowed] CFDictionaryRef* tagProperties);

		// extern void CGPDFContextEndTag (CGContextRef _Nonnull context) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((cf_audited_transfer));
		[Mac (10,15), iOS (13,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGPDFContextEndTag (CGContextRef* context);

		// extern CGPDFScannerRef _Nonnull CGPDFScannerCreate (CGPDFContentStreamRef _Nonnull cs, CGPDFOperatorTableRef _Nullable table, void * _Nullable info) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGPDFScannerRef* CGPDFScannerCreate (CGPDFContentStreamRef* cs, [NullAllowed] CGPDFOperatorTableRef* table, [NullAllowed] void* info);

		// extern CGPDFScannerRef _Nullable CGPDFScannerRetain (CGPDFScannerRef _Nullable scanner) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGPDFScannerRef* CGPDFScannerRetain ([NullAllowed] CGPDFScannerRef* scanner);

		// extern void CGPDFScannerRelease (CGPDFScannerRef _Nullable scanner) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGPDFScannerRelease ([NullAllowed] CGPDFScannerRef* scanner);

		// extern _Bool CGPDFScannerScan (CGPDFScannerRef _Nullable scanner) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGPDFScannerScan ([NullAllowed] CGPDFScannerRef* scanner);

		// extern CGPDFContentStreamRef _Nonnull CGPDFScannerGetContentStream (CGPDFScannerRef _Nonnull scanner) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGPDFContentStreamRef* CGPDFScannerGetContentStream (CGPDFScannerRef* scanner);

		// extern _Bool CGPDFScannerPopObject (CGPDFScannerRef _Nonnull scanner, CGPDFObjectRef  _Nullable * _Nullable value) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGPDFScannerPopObject (CGPDFScannerRef* scanner, [NullAllowed] CGPDFObjectRef** value);

		// extern _Bool CGPDFScannerPopBoolean (CGPDFScannerRef _Nonnull scanner, CGPDFBoolean * _Nullable value) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGPDFScannerPopBoolean (CGPDFScannerRef* scanner, [NullAllowed] byte* value);

		// extern _Bool CGPDFScannerPopInteger (CGPDFScannerRef _Nonnull scanner, CGPDFInteger * _Nullable value) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGPDFScannerPopInteger (CGPDFScannerRef* scanner, [NullAllowed] nint* value);

		// extern _Bool CGPDFScannerPopNumber (CGPDFScannerRef _Nonnull scanner, CGPDFReal * _Nullable value) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGPDFScannerPopNumber (CGPDFScannerRef* scanner, [NullAllowed] double* value);

		// extern _Bool CGPDFScannerPopName (CGPDFScannerRef _Nonnull scanner, const char * _Nullable * _Nullable value) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGPDFScannerPopName (CGPDFScannerRef* scanner, [NullAllowed] sbyte** value);

		// extern _Bool CGPDFScannerPopString (CGPDFScannerRef _Nonnull scanner, CGPDFStringRef  _Nullable * _Nullable value) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGPDFScannerPopString (CGPDFScannerRef* scanner, [NullAllowed] CGPDFStringRef** value);

		// extern _Bool CGPDFScannerPopArray (CGPDFScannerRef _Nonnull scanner, CGPDFArrayRef  _Nullable * _Nullable value) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGPDFScannerPopArray (CGPDFScannerRef* scanner, [NullAllowed] CGPDFArrayRef** value);

		// extern _Bool CGPDFScannerPopDictionary (CGPDFScannerRef _Nonnull scanner, CGPDFDictionaryRef  _Nullable * _Nullable value) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGPDFScannerPopDictionary (CGPDFScannerRef* scanner, [NullAllowed] CGPDFDictionaryRef** value);

		// extern _Bool CGPDFScannerPopStream (CGPDFScannerRef _Nonnull scanner, CGPDFStreamRef  _Nullable * _Nullable value) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGPDFScannerPopStream (CGPDFScannerRef* scanner, [NullAllowed] CGPDFStreamRef** value);

		// extern CGPDFOperatorTableRef _Nullable CGPDFOperatorTableCreate () __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGPDFOperatorTableRef* CGPDFOperatorTableCreate ();

		// extern CGPDFOperatorTableRef _Nullable CGPDFOperatorTableRetain (CGPDFOperatorTableRef _Nullable table) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGPDFOperatorTableRef* CGPDFOperatorTableRetain ([NullAllowed] CGPDFOperatorTableRef* table);

		// extern void CGPDFOperatorTableRelease (CGPDFOperatorTableRef _Nullable table) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGPDFOperatorTableRelease ([NullAllowed] CGPDFOperatorTableRef* table);

		// extern void CGPDFOperatorTableSetCallback (CGPDFOperatorTableRef _Nullable table, const char * _Nullable name, CGPDFOperatorCallback _Nullable callback) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=2.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGPDFOperatorTableSetCallback ([NullAllowed] CGPDFOperatorTableRef* table, [NullAllowed] sbyte* name, [NullAllowed] CGPDFOperatorCallback* callback);

		// UIEdgeInsets UIEdgeInsetsMake (CGFloat top, CGFloat left, CGFloat bottom, CGFloat right);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern UIEdgeInsets UIEdgeInsetsMake (nfloat top, nfloat left, nfloat bottom, nfloat right);

		// NSDirectionalEdgeInsets NSDirectionalEdgeInsetsMake (CGFloat top, CGFloat leading, CGFloat bottom, CGFloat trailing) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0)));
		[Watch (4,0), TV (11,0), iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSDirectionalEdgeInsets NSDirectionalEdgeInsetsMake (nfloat top, nfloat leading, nfloat bottom, nfloat trailing);

		// CGRect UIEdgeInsetsInsetRect (CGRect rect, UIEdgeInsets insets);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CGRect UIEdgeInsetsInsetRect (CGRect rect, UIEdgeInsets insets);

		// UIOffset UIOffsetMake (CGFloat horizontal, CGFloat vertical);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern UIOffset UIOffsetMake (nfloat horizontal, nfloat vertical);

		// int UIEdgeInsetsEqualToEdgeInsets (UIEdgeInsets insets1, UIEdgeInsets insets2);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int UIEdgeInsetsEqualToEdgeInsets (UIEdgeInsets insets1, UIEdgeInsets insets2);

		// int NSDirectionalEdgeInsetsEqualToDirectionalEdgeInsets (NSDirectionalEdgeInsets insets1, NSDirectionalEdgeInsets insets2) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0)));
		[Watch (4,0), TV (11,0), iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int NSDirectionalEdgeInsetsEqualToDirectionalEdgeInsets (NSDirectionalEdgeInsets insets1, NSDirectionalEdgeInsets insets2);

		// int UIOffsetEqualToOffset (UIOffset offset1, UIOffset offset2);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int UIOffsetEqualToOffset (UIOffset offset1, UIOffset offset2);

		// extern NSString * _Nonnull NSStringFromCGPoint (CGPoint point) __attribute__((visibility("default")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSString NSStringFromCGPoint (CGPoint point);

		// extern NSString * _Nonnull NSStringFromCGVector (CGVector vector) __attribute__((visibility("default")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSString NSStringFromCGVector (CGVector vector);

		// extern NSString * _Nonnull NSStringFromCGSize (CGSize size) __attribute__((visibility("default")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSString NSStringFromCGSize (CGSize size);

		// extern NSString * _Nonnull NSStringFromCGRect (CGRect rect) __attribute__((visibility("default")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSString NSStringFromCGRect (CGRect rect);

		// extern NSString * _Nonnull NSStringFromCGAffineTransform (CGAffineTransform transform) __attribute__((visibility("default")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSString NSStringFromCGAffineTransform (CGAffineTransform transform);

		// extern NSString * _Nonnull NSStringFromUIEdgeInsets (UIEdgeInsets insets) __attribute__((visibility("default")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSString NSStringFromUIEdgeInsets (UIEdgeInsets insets);

		// extern NSString * _Nonnull NSStringFromDirectionalEdgeInsets (NSDirectionalEdgeInsets insets) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0)));
		[Watch (4,0), TV (11,0), iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSString NSStringFromDirectionalEdgeInsets (NSDirectionalEdgeInsets insets);

		// extern NSString * _Nonnull NSStringFromUIOffset (UIOffset offset) __attribute__((visibility("default")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSString NSStringFromUIOffset (UIOffset offset);

		// extern CGPoint CGPointFromString (NSString * _Nonnull string) __attribute__((visibility("default")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CGPoint CGPointFromString (NSString @string);

		// extern CGVector CGVectorFromString (NSString * _Nonnull string) __attribute__((visibility("default")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CGVector CGVectorFromString (NSString @string);

		// extern CGSize CGSizeFromString (NSString * _Nonnull string) __attribute__((visibility("default")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CGSize CGSizeFromString (NSString @string);

		// extern CGRect CGRectFromString (NSString * _Nonnull string) __attribute__((visibility("default")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CGRect CGRectFromString (NSString @string);

		// extern CGAffineTransform CGAffineTransformFromString (NSString * _Nonnull string) __attribute__((visibility("default")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CGAffineTransform CGAffineTransformFromString (NSString @string);

		// extern UIEdgeInsets UIEdgeInsetsFromString (NSString * _Nonnull string) __attribute__((visibility("default")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern UIEdgeInsets UIEdgeInsetsFromString (NSString @string);

		// extern NSDirectionalEdgeInsets NSDirectionalEdgeInsetsFromString (NSString * _Nonnull string) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0)));
		[Watch (4,0), TV (11,0), iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSDirectionalEdgeInsets NSDirectionalEdgeInsetsFromString (NSString @string);

		// extern UIOffset UIOffsetFromString (NSString * _Nonnull string) __attribute__((visibility("default")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern UIOffset UIOffsetFromString (NSString @string);

		// extern CFTimeInterval CACurrentMediaTime () __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double CACurrentMediaTime ();

		// extern _Bool CATransform3DIsIdentity (CATransform3D t) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool CATransform3DIsIdentity (CATransform3D t);

		// extern _Bool CATransform3DEqualToTransform (CATransform3D a, CATransform3D b) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool CATransform3DEqualToTransform (CATransform3D a, CATransform3D b);

		// extern CATransform3D CATransform3DMakeTranslation (CGFloat tx, CGFloat ty, CGFloat tz) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CATransform3D CATransform3DMakeTranslation (nfloat tx, nfloat ty, nfloat tz);

		// extern CATransform3D CATransform3DMakeScale (CGFloat sx, CGFloat sy, CGFloat sz) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CATransform3D CATransform3DMakeScale (nfloat sx, nfloat sy, nfloat sz);

		// extern CATransform3D CATransform3DMakeRotation (CGFloat angle, CGFloat x, CGFloat y, CGFloat z) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CATransform3D CATransform3DMakeRotation (nfloat angle, nfloat x, nfloat y, nfloat z);

		// extern CATransform3D CATransform3DTranslate (CATransform3D t, CGFloat tx, CGFloat ty, CGFloat tz) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CATransform3D CATransform3DTranslate (CATransform3D t, nfloat tx, nfloat ty, nfloat tz);

		// extern CATransform3D CATransform3DScale (CATransform3D t, CGFloat sx, CGFloat sy, CGFloat sz) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CATransform3D CATransform3DScale (CATransform3D t, nfloat sx, nfloat sy, nfloat sz);

		// extern CATransform3D CATransform3DRotate (CATransform3D t, CGFloat angle, CGFloat x, CGFloat y, CGFloat z) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CATransform3D CATransform3DRotate (CATransform3D t, nfloat angle, nfloat x, nfloat y, nfloat z);

		// extern CATransform3D CATransform3DConcat (CATransform3D a, CATransform3D b) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CATransform3D CATransform3DConcat (CATransform3D a, CATransform3D b);

		// extern CATransform3D CATransform3DInvert (CATransform3D t) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CATransform3D CATransform3DInvert (CATransform3D t);

		// extern CATransform3D CATransform3DMakeAffineTransform (CGAffineTransform m) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CATransform3D CATransform3DMakeAffineTransform (CGAffineTransform m);

		// extern _Bool CATransform3DIsAffine (CATransform3D t) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern bool CATransform3DIsAffine (CATransform3D t);

		// extern CGAffineTransform CATransform3DGetAffineTransform (CATransform3D t) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CGAffineTransform CATransform3DGetAffineTransform (CATransform3D t);

		// extern void EAGLGetVersion (unsigned int * _Nonnull major, unsigned int * _Nonnull minor) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0, deprecated=12.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=12.0)));
		[Introduced (PlatformName.iOS, 2, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
		[Deprecated (PlatformName.iOS, 12, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
		[Deprecated (PlatformName.TvOS, 12, 0, message: "OpenGLES API deprecated. (Define GLES_SILENCE_DEPRECATION to silence these warnings)")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void EAGLGetVersion (uint* major, uint* minor);

		// extern CVBufferRef _Nullable CVBufferRetain (CVBufferRef _Nullable buffer) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CVBufferRef* CVBufferRetain ([NullAllowed] CVBufferRef* buffer);

		// extern void CVBufferRelease (CVBufferRef _Nullable buffer) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CVBufferRelease ([NullAllowed] CVBufferRef* buffer);

		// extern void CVBufferSetAttachment (CVBufferRef _Nonnull buffer, CFStringRef _Nonnull key, CFTypeRef _Nonnull value, CVAttachmentMode attachmentMode) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CVBufferSetAttachment (CVBufferRef* buffer, CFStringRef* key, void* value, CVAttachmentMode attachmentMode);

		// extern CFTypeRef _Nullable CVBufferGetAttachment (CVBufferRef _Nonnull buffer, CFStringRef _Nonnull key, CVAttachmentMode * _Nullable attachmentMode) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe void* CVBufferGetAttachment (CVBufferRef* buffer, CFStringRef* key, [NullAllowed] CVAttachmentMode* attachmentMode);

		// extern void CVBufferRemoveAttachment (CVBufferRef _Nonnull buffer, CFStringRef _Nonnull key) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CVBufferRemoveAttachment (CVBufferRef* buffer, CFStringRef* key);

		// extern void CVBufferRemoveAllAttachments (CVBufferRef _Nonnull buffer) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CVBufferRemoveAllAttachments (CVBufferRef* buffer);

		// extern CFDictionaryRef _Nullable CVBufferGetAttachments (CVBufferRef _Nonnull buffer, CVAttachmentMode attachmentMode) __attribute__((visibility("default"))) __attribute__((cf_returns_not_retained)) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFDictionaryRef* CVBufferGetAttachments (CVBufferRef* buffer, CVAttachmentMode attachmentMode);

		// extern void CVBufferSetAttachments (CVBufferRef _Nonnull buffer, CFDictionaryRef _Nonnull theAttachments, CVAttachmentMode attachmentMode) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CVBufferSetAttachments (CVBufferRef* buffer, CFDictionaryRef* theAttachments, CVAttachmentMode attachmentMode);

		// extern void CVBufferPropagateAttachments (CVBufferRef _Nonnull sourceBuffer, CVBufferRef _Nonnull destinationBuffer) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CVBufferPropagateAttachments (CVBufferRef* sourceBuffer, CVBufferRef* destinationBuffer);

		// extern int CVYCbCrMatrixGetIntegerCodePointForString (CFStringRef _Nullable yCbCrMatrixString) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int CVYCbCrMatrixGetIntegerCodePointForString ([NullAllowed] CFStringRef* yCbCrMatrixString);

		// extern int CVColorPrimariesGetIntegerCodePointForString (CFStringRef _Nullable colorPrimariesString) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int CVColorPrimariesGetIntegerCodePointForString ([NullAllowed] CFStringRef* colorPrimariesString);

		// extern int CVTransferFunctionGetIntegerCodePointForString (CFStringRef _Nullable transferFunctionString) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int CVTransferFunctionGetIntegerCodePointForString ([NullAllowed] CFStringRef* transferFunctionString);

		// extern CFStringRef _Nullable CVYCbCrMatrixGetStringForIntegerCodePoint (int yCbCrMatrixCodePoint) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFStringRef* CVYCbCrMatrixGetStringForIntegerCodePoint (int yCbCrMatrixCodePoint);

		// extern CFStringRef _Nullable CVColorPrimariesGetStringForIntegerCodePoint (int colorPrimariesCodePoint) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFStringRef* CVColorPrimariesGetStringForIntegerCodePoint (int colorPrimariesCodePoint);

		// extern CFStringRef _Nullable CVTransferFunctionGetStringForIntegerCodePoint (int transferFunctionCodePoint) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFStringRef* CVTransferFunctionGetStringForIntegerCodePoint (int transferFunctionCodePoint);

		// extern CGSize CVImageBufferGetEncodedSize (CVImageBufferRef _Nonnull imageBuffer) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGSize CVImageBufferGetEncodedSize (CVImageBufferRef* imageBuffer);

		// extern CGSize CVImageBufferGetDisplaySize (CVImageBufferRef _Nonnull imageBuffer) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGSize CVImageBufferGetDisplaySize (CVImageBufferRef* imageBuffer);

		// extern CGRect CVImageBufferGetCleanRect (CVImageBufferRef _Nonnull imageBuffer) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGRect CVImageBufferGetCleanRect (CVImageBufferRef* imageBuffer);

		// extern Boolean CVImageBufferIsFlipped (CVImageBufferRef _Nonnull imageBuffer) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CVImageBufferIsFlipped (CVImageBufferRef* imageBuffer);

		// extern CGColorSpaceRef _Nullable CVImageBufferCreateColorSpaceFromAttachments (CFDictionaryRef _Nonnull attachments) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10.0)));
		[iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGColorSpaceRef* CVImageBufferCreateColorSpaceFromAttachments (CFDictionaryRef* attachments);

		// extern CFTypeID CVPixelBufferGetTypeID () __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CVPixelBufferGetTypeID ();

		// extern CVPixelBufferRef _Nullable CVPixelBufferRetain (CVPixelBufferRef _Nullable texture) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CVPixelBufferRef* CVPixelBufferRetain ([NullAllowed] CVPixelBufferRef* texture);

		// extern void CVPixelBufferRelease (CVPixelBufferRef _Nullable texture) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CVPixelBufferRelease ([NullAllowed] CVPixelBufferRef* texture);

		// extern CVReturn CVPixelBufferCreateResolvedAttributesDictionary (CFAllocatorRef _Nullable allocator, CFArrayRef _Nullable attributes, CFDictionaryRef  _Nullable * _Nonnull resolvedDictionaryOut) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int CVPixelBufferCreateResolvedAttributesDictionary ([NullAllowed] CFAllocatorRef* allocator, [NullAllowed] CFArrayRef* attributes, [NullAllowed] CFDictionaryRef** resolvedDictionaryOut);

		// extern CVReturn CVPixelBufferCreate (CFAllocatorRef _Nullable allocator, size_t width, size_t height, OSType pixelFormatType, CFDictionaryRef _Nullable pixelBufferAttributes, CVPixelBufferRef  _Nullable * _Nonnull pixelBufferOut) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int CVPixelBufferCreate ([NullAllowed] CFAllocatorRef* allocator, nuint width, nuint height, uint pixelFormatType, [NullAllowed] CFDictionaryRef* pixelBufferAttributes, [NullAllowed] CVPixelBufferRef** pixelBufferOut);

		// extern CVReturn CVPixelBufferCreateWithBytes (CFAllocatorRef _Nullable allocator, size_t width, size_t height, OSType pixelFormatType, void * _Nonnull baseAddress, size_t bytesPerRow, CVPixelBufferReleaseBytesCallback _Nullable releaseCallback, void * _Nullable releaseRefCon, CFDictionaryRef _Nullable pixelBufferAttributes, CVPixelBufferRef  _Nullable * _Nonnull pixelBufferOut) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int CVPixelBufferCreateWithBytes ([NullAllowed] CFAllocatorRef* allocator, nuint width, nuint height, uint pixelFormatType, void* baseAddress, nuint bytesPerRow, [NullAllowed] CVPixelBufferReleaseBytesCallback* releaseCallback, [NullAllowed] void* releaseRefCon, [NullAllowed] CFDictionaryRef* pixelBufferAttributes, [NullAllowed] CVPixelBufferRef** pixelBufferOut);

		// extern CVReturn CVPixelBufferCreateWithPlanarBytes (CFAllocatorRef _Nullable allocator, size_t width, size_t height, OSType pixelFormatType, void * _Nullable dataPtr, size_t dataSize, size_t numberOfPlanes, void * _Nullable * _Nonnull planeBaseAddress, size_t * _Nonnull planeWidth, size_t * _Nonnull planeHeight, size_t * _Nonnull planeBytesPerRow, CVPixelBufferReleasePlanarBytesCallback _Nullable releaseCallback, void * _Nullable releaseRefCon, CFDictionaryRef _Nullable pixelBufferAttributes, CVPixelBufferRef  _Nullable * _Nonnull pixelBufferOut) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int CVPixelBufferCreateWithPlanarBytes ([NullAllowed] CFAllocatorRef* allocator, nuint width, nuint height, uint pixelFormatType, [NullAllowed] void* dataPtr, nuint dataSize, nuint numberOfPlanes, [NullAllowed] void*[] planeBaseAddress, nuint[] planeWidth, nuint[] planeHeight, nuint[] planeBytesPerRow, [NullAllowed] CVPixelBufferReleasePlanarBytesCallback* releaseCallback, [NullAllowed] void* releaseRefCon, [NullAllowed] CFDictionaryRef* pixelBufferAttributes, [NullAllowed] CVPixelBufferRef** pixelBufferOut);

		// extern CVReturn CVPixelBufferLockBaseAddress (CVPixelBufferRef _Nonnull pixelBuffer, CVPixelBufferLockFlags lockFlags) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int CVPixelBufferLockBaseAddress (CVPixelBufferRef* pixelBuffer, CVPixelBufferLockFlags lockFlags);

		// extern CVReturn CVPixelBufferUnlockBaseAddress (CVPixelBufferRef _Nonnull pixelBuffer, CVPixelBufferLockFlags unlockFlags) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int CVPixelBufferUnlockBaseAddress (CVPixelBufferRef* pixelBuffer, CVPixelBufferLockFlags unlockFlags);

		// extern size_t CVPixelBufferGetWidth (CVPixelBufferRef _Nonnull pixelBuffer) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint CVPixelBufferGetWidth (CVPixelBufferRef* pixelBuffer);

		// extern size_t CVPixelBufferGetHeight (CVPixelBufferRef _Nonnull pixelBuffer) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint CVPixelBufferGetHeight (CVPixelBufferRef* pixelBuffer);

		// extern OSType CVPixelBufferGetPixelFormatType (CVPixelBufferRef _Nonnull pixelBuffer) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe uint CVPixelBufferGetPixelFormatType (CVPixelBufferRef* pixelBuffer);

		// extern void * _Nullable CVPixelBufferGetBaseAddress (CVPixelBufferRef _Nonnull pixelBuffer) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe void* CVPixelBufferGetBaseAddress (CVPixelBufferRef* pixelBuffer);

		// extern size_t CVPixelBufferGetBytesPerRow (CVPixelBufferRef _Nonnull pixelBuffer) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint CVPixelBufferGetBytesPerRow (CVPixelBufferRef* pixelBuffer);

		// extern size_t CVPixelBufferGetDataSize (CVPixelBufferRef _Nonnull pixelBuffer) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint CVPixelBufferGetDataSize (CVPixelBufferRef* pixelBuffer);

		// extern Boolean CVPixelBufferIsPlanar (CVPixelBufferRef _Nonnull pixelBuffer) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CVPixelBufferIsPlanar (CVPixelBufferRef* pixelBuffer);

		// extern size_t CVPixelBufferGetPlaneCount (CVPixelBufferRef _Nonnull pixelBuffer) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint CVPixelBufferGetPlaneCount (CVPixelBufferRef* pixelBuffer);

		// extern size_t CVPixelBufferGetWidthOfPlane (CVPixelBufferRef _Nonnull pixelBuffer, size_t planeIndex) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint CVPixelBufferGetWidthOfPlane (CVPixelBufferRef* pixelBuffer, nuint planeIndex);

		// extern size_t CVPixelBufferGetHeightOfPlane (CVPixelBufferRef _Nonnull pixelBuffer, size_t planeIndex) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint CVPixelBufferGetHeightOfPlane (CVPixelBufferRef* pixelBuffer, nuint planeIndex);

		// extern void * _Nullable CVPixelBufferGetBaseAddressOfPlane (CVPixelBufferRef _Nonnull pixelBuffer, size_t planeIndex) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe void* CVPixelBufferGetBaseAddressOfPlane (CVPixelBufferRef* pixelBuffer, nuint planeIndex);

		// extern size_t CVPixelBufferGetBytesPerRowOfPlane (CVPixelBufferRef _Nonnull pixelBuffer, size_t planeIndex) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint CVPixelBufferGetBytesPerRowOfPlane (CVPixelBufferRef* pixelBuffer, nuint planeIndex);

		// extern void CVPixelBufferGetExtendedPixels (CVPixelBufferRef _Nonnull pixelBuffer, size_t * _Nullable extraColumnsOnLeft, size_t * _Nullable extraColumnsOnRight, size_t * _Nullable extraRowsOnTop, size_t * _Nullable extraRowsOnBottom) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CVPixelBufferGetExtendedPixels (CVPixelBufferRef* pixelBuffer, [NullAllowed] nuint* extraColumnsOnLeft, [NullAllowed] nuint* extraColumnsOnRight, [NullAllowed] nuint* extraRowsOnTop, [NullAllowed] nuint* extraRowsOnBottom);

		// extern CVReturn CVPixelBufferFillExtendedPixels (CVPixelBufferRef _Nonnull pixelBuffer) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int CVPixelBufferFillExtendedPixels (CVPixelBufferRef* pixelBuffer);

		// extern CFTypeID IOSurfaceGetTypeID () __attribute__((availability(ios, introduced=3.0))) __attribute__((cf_audited_transfer));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint IOSurfaceGetTypeID ();

		// extern IOSurfaceRef _Nullable IOSurfaceCreate (CFDictionaryRef _Nonnull properties) __attribute__((availability(ios, introduced=3.0))) __attribute__((cf_audited_transfer));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe IOSurfaceRef* IOSurfaceCreate (CFDictionaryRef* properties);

		// extern IOSurfaceRef _Nullable IOSurfaceLookup (IOSurfaceID csid) __attribute__((cf_returns_retained)) __attribute__((availability(ios, introduced=3.0))) __attribute__((cf_audited_transfer));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe IOSurfaceRef* IOSurfaceLookup (uint csid);

		// extern IOSurfaceID IOSurfaceGetID (IOSurfaceRef _Nonnull buffer) __attribute__((availability(ios, introduced=3.0))) __attribute__((cf_audited_transfer));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe uint IOSurfaceGetID (IOSurfaceRef* buffer);

		// extern kern_return_t IOSurfaceLock (IOSurfaceRef _Nonnull buffer, IOSurfaceLockOptions options, uint32_t * _Nullable seed) __attribute__((availability(ios, introduced=3.0))) __attribute__((cf_audited_transfer));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int IOSurfaceLock (IOSurfaceRef* buffer, IOSurfaceLockOptions options, [NullAllowed] uint* seed);

		// extern kern_return_t IOSurfaceUnlock (IOSurfaceRef _Nonnull buffer, IOSurfaceLockOptions options, uint32_t * _Nullable seed) __attribute__((availability(ios, introduced=3.0))) __attribute__((cf_audited_transfer));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int IOSurfaceUnlock (IOSurfaceRef* buffer, IOSurfaceLockOptions options, [NullAllowed] uint* seed);

		// extern size_t IOSurfaceGetAllocSize (IOSurfaceRef _Nonnull buffer) __attribute__((availability(ios, introduced=3.0))) __attribute__((cf_audited_transfer));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint IOSurfaceGetAllocSize (IOSurfaceRef* buffer);

		// extern size_t IOSurfaceGetWidth (IOSurfaceRef _Nonnull buffer) __attribute__((availability(ios, introduced=3.0))) __attribute__((cf_audited_transfer));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint IOSurfaceGetWidth (IOSurfaceRef* buffer);

		// extern size_t IOSurfaceGetHeight (IOSurfaceRef _Nonnull buffer) __attribute__((availability(ios, introduced=3.0))) __attribute__((cf_audited_transfer));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint IOSurfaceGetHeight (IOSurfaceRef* buffer);

		// extern size_t IOSurfaceGetBytesPerElement (IOSurfaceRef _Nonnull buffer) __attribute__((availability(ios, introduced=3.0))) __attribute__((cf_audited_transfer));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint IOSurfaceGetBytesPerElement (IOSurfaceRef* buffer);

		// extern size_t IOSurfaceGetBytesPerRow (IOSurfaceRef _Nonnull buffer) __attribute__((availability(ios, introduced=3.0))) __attribute__((cf_audited_transfer));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint IOSurfaceGetBytesPerRow (IOSurfaceRef* buffer);

		// extern void * _Nonnull IOSurfaceGetBaseAddress (IOSurfaceRef _Nonnull buffer) __attribute__((availability(ios, introduced=3.0))) __attribute__((cf_audited_transfer));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* IOSurfaceGetBaseAddress (IOSurfaceRef* buffer);

		// extern size_t IOSurfaceGetElementWidth (IOSurfaceRef _Nonnull buffer) __attribute__((availability(ios, introduced=3.0))) __attribute__((cf_audited_transfer));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint IOSurfaceGetElementWidth (IOSurfaceRef* buffer);

		// extern size_t IOSurfaceGetElementHeight (IOSurfaceRef _Nonnull buffer) __attribute__((availability(ios, introduced=3.0))) __attribute__((cf_audited_transfer));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint IOSurfaceGetElementHeight (IOSurfaceRef* buffer);

		// extern OSType IOSurfaceGetPixelFormat (IOSurfaceRef _Nonnull buffer) __attribute__((availability(ios, introduced=3.0))) __attribute__((cf_audited_transfer));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe uint IOSurfaceGetPixelFormat (IOSurfaceRef* buffer);

		// extern uint32_t IOSurfaceGetSeed (IOSurfaceRef _Nonnull buffer) __attribute__((availability(ios, introduced=3.0))) __attribute__((cf_audited_transfer));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe uint IOSurfaceGetSeed (IOSurfaceRef* buffer);

		// extern size_t IOSurfaceGetPlaneCount (IOSurfaceRef _Nonnull buffer) __attribute__((availability(ios, introduced=3.0))) __attribute__((cf_audited_transfer));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint IOSurfaceGetPlaneCount (IOSurfaceRef* buffer);

		// extern size_t IOSurfaceGetWidthOfPlane (IOSurfaceRef _Nonnull buffer, size_t planeIndex) __attribute__((availability(ios, introduced=3.0))) __attribute__((cf_audited_transfer));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint IOSurfaceGetWidthOfPlane (IOSurfaceRef* buffer, nuint planeIndex);

		// extern size_t IOSurfaceGetHeightOfPlane (IOSurfaceRef _Nonnull buffer, size_t planeIndex) __attribute__((availability(ios, introduced=3.0))) __attribute__((cf_audited_transfer));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint IOSurfaceGetHeightOfPlane (IOSurfaceRef* buffer, nuint planeIndex);

		// extern size_t IOSurfaceGetBytesPerElementOfPlane (IOSurfaceRef _Nonnull buffer, size_t planeIndex) __attribute__((availability(ios, introduced=3.0))) __attribute__((cf_audited_transfer));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint IOSurfaceGetBytesPerElementOfPlane (IOSurfaceRef* buffer, nuint planeIndex);

		// extern size_t IOSurfaceGetBytesPerRowOfPlane (IOSurfaceRef _Nonnull buffer, size_t planeIndex) __attribute__((availability(ios, introduced=3.0))) __attribute__((cf_audited_transfer));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint IOSurfaceGetBytesPerRowOfPlane (IOSurfaceRef* buffer, nuint planeIndex);

		// extern void * _Nonnull IOSurfaceGetBaseAddressOfPlane (IOSurfaceRef _Nonnull buffer, size_t planeIndex) __attribute__((availability(ios, introduced=3.0))) __attribute__((cf_audited_transfer));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void* IOSurfaceGetBaseAddressOfPlane (IOSurfaceRef* buffer, nuint planeIndex);

		// extern size_t IOSurfaceGetElementWidthOfPlane (IOSurfaceRef _Nonnull buffer, size_t planeIndex) __attribute__((availability(ios, introduced=3.0))) __attribute__((cf_audited_transfer));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint IOSurfaceGetElementWidthOfPlane (IOSurfaceRef* buffer, nuint planeIndex);

		// extern size_t IOSurfaceGetElementHeightOfPlane (IOSurfaceRef _Nonnull buffer, size_t planeIndex) __attribute__((availability(ios, introduced=3.0))) __attribute__((cf_audited_transfer));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint IOSurfaceGetElementHeightOfPlane (IOSurfaceRef* buffer, nuint planeIndex);

		// extern size_t IOSurfaceGetNumberOfComponentsOfPlane (IOSurfaceRef _Nonnull buffer, size_t planeIndex) __attribute__((availability(ios, introduced=11.0))) __attribute__((cf_audited_transfer));
		[iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint IOSurfaceGetNumberOfComponentsOfPlane (IOSurfaceRef* buffer, nuint planeIndex);

		// extern IOSurfaceComponentName IOSurfaceGetNameOfComponentOfPlane (IOSurfaceRef _Nonnull buffer, size_t planeIndex, size_t componentIndex) __attribute__((availability(ios, introduced=11.0))) __attribute__((cf_audited_transfer));
		[iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe IOSurfaceComponentName IOSurfaceGetNameOfComponentOfPlane (IOSurfaceRef* buffer, nuint planeIndex, nuint componentIndex);

		// extern IOSurfaceComponentType IOSurfaceGetTypeOfComponentOfPlane (IOSurfaceRef _Nonnull buffer, size_t planeIndex, size_t componentIndex) __attribute__((availability(ios, introduced=11.0))) __attribute__((cf_audited_transfer));
		[iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe IOSurfaceComponentType IOSurfaceGetTypeOfComponentOfPlane (IOSurfaceRef* buffer, nuint planeIndex, nuint componentIndex);

		// extern IOSurfaceComponentRange IOSurfaceGetRangeOfComponentOfPlane (IOSurfaceRef _Nonnull buffer, size_t planeIndex, size_t componentIndex) __attribute__((availability(ios, introduced=11.0))) __attribute__((cf_audited_transfer));
		[iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe IOSurfaceComponentRange IOSurfaceGetRangeOfComponentOfPlane (IOSurfaceRef* buffer, nuint planeIndex, nuint componentIndex);

		// extern size_t IOSurfaceGetBitDepthOfComponentOfPlane (IOSurfaceRef _Nonnull buffer, size_t planeIndex, size_t componentIndex) __attribute__((availability(ios, introduced=11.0))) __attribute__((cf_audited_transfer));
		[iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint IOSurfaceGetBitDepthOfComponentOfPlane (IOSurfaceRef* buffer, nuint planeIndex, nuint componentIndex);

		// extern size_t IOSurfaceGetBitOffsetOfComponentOfPlane (IOSurfaceRef _Nonnull buffer, size_t planeIndex, size_t componentIndex) __attribute__((availability(ios, introduced=11.0))) __attribute__((cf_audited_transfer));
		[iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint IOSurfaceGetBitOffsetOfComponentOfPlane (IOSurfaceRef* buffer, nuint planeIndex, nuint componentIndex);

		// extern IOSurfaceSubsampling IOSurfaceGetSubsampling (IOSurfaceRef _Nonnull buffer) __attribute__((availability(ios, introduced=11.0))) __attribute__((cf_audited_transfer));
		[iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe IOSurfaceSubsampling IOSurfaceGetSubsampling (IOSurfaceRef* buffer);

		// extern void IOSurfaceSetValue (IOSurfaceRef _Nonnull buffer, CFStringRef _Nonnull key, CFTypeRef _Nonnull value) __attribute__((availability(ios, introduced=3.0))) __attribute__((cf_audited_transfer));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void IOSurfaceSetValue (IOSurfaceRef* buffer, CFStringRef* key, void* value);

		// extern CFTypeRef _Nullable IOSurfaceCopyValue (IOSurfaceRef _Nonnull buffer, CFStringRef _Nonnull key) __attribute__((availability(ios, introduced=3.0))) __attribute__((cf_audited_transfer));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe void* IOSurfaceCopyValue (IOSurfaceRef* buffer, CFStringRef* key);

		// extern void IOSurfaceRemoveValue (IOSurfaceRef _Nonnull buffer, CFStringRef _Nonnull key) __attribute__((availability(ios, introduced=3.0))) __attribute__((cf_audited_transfer));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void IOSurfaceRemoveValue (IOSurfaceRef* buffer, CFStringRef* key);

		// extern void IOSurfaceSetValues (IOSurfaceRef _Nonnull buffer, CFDictionaryRef _Nonnull keysAndValues) __attribute__((availability(ios, introduced=3.0))) __attribute__((cf_audited_transfer));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void IOSurfaceSetValues (IOSurfaceRef* buffer, CFDictionaryRef* keysAndValues);

		// extern CFDictionaryRef _Nullable IOSurfaceCopyAllValues (IOSurfaceRef _Nonnull buffer) __attribute__((availability(ios, introduced=3.0))) __attribute__((cf_audited_transfer));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFDictionaryRef* IOSurfaceCopyAllValues (IOSurfaceRef* buffer);

		// extern void IOSurfaceRemoveAllValues (IOSurfaceRef _Nonnull buffer) __attribute__((availability(ios, introduced=3.0))) __attribute__((cf_audited_transfer));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void IOSurfaceRemoveAllValues (IOSurfaceRef* buffer);

		// extern mach_port_t IOSurfaceCreateMachPort (IOSurfaceRef _Nonnull buffer) __attribute__((availability(ios, introduced=3.0))) __attribute__((cf_audited_transfer));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe uint IOSurfaceCreateMachPort (IOSurfaceRef* buffer);

		// extern IOSurfaceRef _Nullable IOSurfaceLookupFromMachPort (mach_port_t port) __attribute__((cf_returns_retained)) __attribute__((availability(ios, introduced=3.0))) __attribute__((cf_audited_transfer));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe IOSurfaceRef* IOSurfaceLookupFromMachPort (uint port);

		// extern size_t IOSurfaceGetPropertyMaximum (CFStringRef _Nonnull property) __attribute__((availability(ios, introduced=3.0))) __attribute__((cf_audited_transfer));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint IOSurfaceGetPropertyMaximum (CFStringRef* property);

		// extern size_t IOSurfaceGetPropertyAlignment (CFStringRef _Nonnull property) __attribute__((availability(ios, introduced=3.0))) __attribute__((cf_audited_transfer));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint IOSurfaceGetPropertyAlignment (CFStringRef* property);

		// extern size_t IOSurfaceAlignProperty (CFStringRef _Nonnull property, size_t value) __attribute__((availability(ios, introduced=3.0))) __attribute__((cf_audited_transfer));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint IOSurfaceAlignProperty (CFStringRef* property, nuint value);

		// extern void IOSurfaceIncrementUseCount (IOSurfaceRef _Nonnull buffer) __attribute__((availability(ios, introduced=3.0))) __attribute__((cf_audited_transfer));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void IOSurfaceIncrementUseCount (IOSurfaceRef* buffer);

		// extern void IOSurfaceDecrementUseCount (IOSurfaceRef _Nonnull buffer) __attribute__((availability(ios, introduced=3.0))) __attribute__((cf_audited_transfer));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void IOSurfaceDecrementUseCount (IOSurfaceRef* buffer);

		// extern int32_t IOSurfaceGetUseCount (IOSurfaceRef _Nonnull buffer) __attribute__((availability(ios, introduced=3.0))) __attribute__((cf_audited_transfer));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int IOSurfaceGetUseCount (IOSurfaceRef* buffer);

		// extern Boolean IOSurfaceIsInUse (IOSurfaceRef _Nonnull buffer) __attribute__((availability(ios, introduced=3.0))) __attribute__((cf_audited_transfer));
		[iOS (3,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte IOSurfaceIsInUse (IOSurfaceRef* buffer);

		// extern Boolean IOSurfaceAllowsPixelSizeCasting (IOSurfaceRef _Nonnull buffer) __attribute__((availability(ios, introduced=10.0))) __attribute__((cf_audited_transfer));
		[iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte IOSurfaceAllowsPixelSizeCasting (IOSurfaceRef* buffer);

		// extern kern_return_t IOSurfaceSetPurgeable (IOSurfaceRef _Nonnull buffer, uint32_t newState, uint32_t * _Nullable oldState) __attribute__((availability(ios, introduced=10.0))) __attribute__((cf_audited_transfer));
		[iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int IOSurfaceSetPurgeable (IOSurfaceRef* buffer, uint newState, [NullAllowed] uint* oldState);

		// extern IOSurfaceRef _Nullable CVPixelBufferGetIOSurface (CVPixelBufferRef _Nullable pixelBuffer) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=4.0)));
		[Watch (4,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe IOSurfaceRef* CVPixelBufferGetIOSurface ([NullAllowed] CVPixelBufferRef* pixelBuffer);

		// extern CVReturn CVPixelBufferCreateWithIOSurface (CFAllocatorRef _Nullable allocator, IOSurfaceRef _Nonnull surface, CFDictionaryRef _Nullable pixelBufferAttributes, CVPixelBufferRef  _Nullable * _Nonnull pixelBufferOut) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int CVPixelBufferCreateWithIOSurface ([NullAllowed] CFAllocatorRef* allocator, IOSurfaceRef* surface, [NullAllowed] CFDictionaryRef* pixelBufferAttributes, [NullAllowed] CVPixelBufferRef** pixelBufferOut);

		// extern CFTypeID CVPixelBufferPoolGetTypeID () __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CVPixelBufferPoolGetTypeID ();

		// extern CVPixelBufferPoolRef _Nullable CVPixelBufferPoolRetain (CVPixelBufferPoolRef _Nullable pixelBufferPool) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CVPixelBufferPoolRef* CVPixelBufferPoolRetain ([NullAllowed] CVPixelBufferPoolRef* pixelBufferPool);

		// extern void CVPixelBufferPoolRelease (CVPixelBufferPoolRef _Nullable pixelBufferPool) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CVPixelBufferPoolRelease ([NullAllowed] CVPixelBufferPoolRef* pixelBufferPool);

		// extern CVReturn CVPixelBufferPoolCreate (CFAllocatorRef _Nullable allocator, CFDictionaryRef _Nullable poolAttributes, CFDictionaryRef _Nullable pixelBufferAttributes, CVPixelBufferPoolRef  _Nullable * _Nonnull poolOut) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int CVPixelBufferPoolCreate ([NullAllowed] CFAllocatorRef* allocator, [NullAllowed] CFDictionaryRef* poolAttributes, [NullAllowed] CFDictionaryRef* pixelBufferAttributes, [NullAllowed] CVPixelBufferPoolRef** poolOut);

		// extern CFDictionaryRef _Nullable CVPixelBufferPoolGetAttributes (CVPixelBufferPoolRef _Nonnull pool) __attribute__((visibility("default"))) __attribute__((cf_returns_not_retained)) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFDictionaryRef* CVPixelBufferPoolGetAttributes (CVPixelBufferPoolRef* pool);

		// extern CFDictionaryRef _Nullable CVPixelBufferPoolGetPixelBufferAttributes (CVPixelBufferPoolRef _Nonnull pool) __attribute__((visibility("default"))) __attribute__((cf_returns_not_retained)) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFDictionaryRef* CVPixelBufferPoolGetPixelBufferAttributes (CVPixelBufferPoolRef* pool);

		// extern CVReturn CVPixelBufferPoolCreatePixelBuffer (CFAllocatorRef _Nullable allocator, CVPixelBufferPoolRef _Nonnull pixelBufferPool, CVPixelBufferRef  _Nullable * _Nonnull pixelBufferOut) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int CVPixelBufferPoolCreatePixelBuffer ([NullAllowed] CFAllocatorRef* allocator, CVPixelBufferPoolRef* pixelBufferPool, [NullAllowed] CVPixelBufferRef** pixelBufferOut);

		// extern CVReturn CVPixelBufferPoolCreatePixelBufferWithAuxAttributes (CFAllocatorRef _Nullable allocator, CVPixelBufferPoolRef _Nonnull pixelBufferPool, CFDictionaryRef _Nullable auxAttributes, CVPixelBufferRef  _Nullable * _Nonnull pixelBufferOut) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int CVPixelBufferPoolCreatePixelBufferWithAuxAttributes ([NullAllowed] CFAllocatorRef* allocator, CVPixelBufferPoolRef* pixelBufferPool, [NullAllowed] CFDictionaryRef* auxAttributes, [NullAllowed] CVPixelBufferRef** pixelBufferOut);

		// extern void CVPixelBufferPoolFlush (CVPixelBufferPoolRef _Nonnull pool, CVPixelBufferPoolFlushFlags options) __attribute__((visibility("default")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CVPixelBufferPoolFlush (CVPixelBufferPoolRef* pool, CVPixelBufferPoolFlushFlags options);

		// extern CFTypeID CVOpenGLESTextureGetTypeID () __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=5.0, deprecated=12.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=12.0))) __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[Introduced (PlatformName.iOS, 5, 0, message: "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)")]
		[Deprecated (PlatformName.iOS, 12, 0, message: "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)")]
		[Deprecated (PlatformName.TvOS, 12, 0, message: "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)")]
		[NoWatch, NoMac]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CVOpenGLESTextureGetTypeID ();

		// extern GLenum CVOpenGLESTextureGetTarget (CVOpenGLESTextureRef _Nonnull image) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=5.0, deprecated=12.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=12.0))) __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[Introduced (PlatformName.iOS, 5, 0, message: "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)")]
		[Deprecated (PlatformName.iOS, 12, 0, message: "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)")]
		[Deprecated (PlatformName.TvOS, 12, 0, message: "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)")]
		[NoWatch, NoMac]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe uint CVOpenGLESTextureGetTarget (CVOpenGLESTextureRef* image);

		// extern GLuint CVOpenGLESTextureGetName (CVOpenGLESTextureRef _Nonnull image) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=5.0, deprecated=12.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=12.0))) __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[Introduced (PlatformName.iOS, 5, 0, message: "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)")]
		[Deprecated (PlatformName.iOS, 12, 0, message: "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)")]
		[Deprecated (PlatformName.TvOS, 12, 0, message: "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)")]
		[NoWatch, NoMac]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe uint CVOpenGLESTextureGetName (CVOpenGLESTextureRef* image);

		// extern Boolean CVOpenGLESTextureIsFlipped (CVOpenGLESTextureRef _Nonnull image) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=5.0, deprecated=12.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=12.0))) __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[Introduced (PlatformName.iOS, 5, 0, message: "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)")]
		[Deprecated (PlatformName.iOS, 12, 0, message: "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)")]
		[Deprecated (PlatformName.TvOS, 12, 0, message: "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)")]
		[NoWatch, NoMac]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CVOpenGLESTextureIsFlipped (CVOpenGLESTextureRef* image);

		// extern void CVOpenGLESTextureGetCleanTexCoords (CVOpenGLESTextureRef _Nonnull image, GLfloat * _Nonnull lowerLeft, GLfloat * _Nonnull lowerRight, GLfloat * _Nonnull upperRight, GLfloat * _Nonnull upperLeft) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=5.0, deprecated=12.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=12.0))) __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[Introduced (PlatformName.iOS, 5, 0, message: "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)")]
		[Deprecated (PlatformName.iOS, 12, 0, message: "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)")]
		[Deprecated (PlatformName.TvOS, 12, 0, message: "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)")]
		[NoWatch, NoMac]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CVOpenGLESTextureGetCleanTexCoords (CVOpenGLESTextureRef* image, float[] lowerLeft, float[] lowerRight, float[] upperRight, float[] upperLeft);

		// extern CFTypeID CVOpenGLESTextureCacheGetTypeID () __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=5.0, deprecated=12.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=12.0))) __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[Introduced (PlatformName.iOS, 5, 0, message: "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)")]
		[Deprecated (PlatformName.iOS, 12, 0, message: "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)")]
		[Deprecated (PlatformName.TvOS, 12, 0, message: "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)")]
		[NoWatch, NoMac]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CVOpenGLESTextureCacheGetTypeID ();

		// extern CVReturn CVOpenGLESTextureCacheCreate (CFAllocatorRef _Nullable allocator, CFDictionaryRef _Nullable cacheAttributes, CVEAGLContext _Nonnull eaglContext, CFDictionaryRef _Nullable textureAttributes, CVOpenGLESTextureCacheRef  _Nullable * _Nonnull cacheOut) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=5.0, deprecated=12.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=12.0))) __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[Introduced (PlatformName.iOS, 5, 0, message: "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)")]
		[Deprecated (PlatformName.iOS, 12, 0, message: "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)")]
		[Deprecated (PlatformName.TvOS, 12, 0, message: "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)")]
		[NoWatch, NoMac]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int CVOpenGLESTextureCacheCreate ([NullAllowed] CFAllocatorRef* allocator, [NullAllowed] CFDictionaryRef* cacheAttributes, EAGLContext eaglContext, [NullAllowed] CFDictionaryRef* textureAttributes, [NullAllowed] CVOpenGLESTextureCacheRef** cacheOut);

		// extern CVReturn CVOpenGLESTextureCacheCreateTextureFromImage (CFAllocatorRef _Nullable allocator, CVOpenGLESTextureCacheRef _Nonnull textureCache, CVImageBufferRef _Nonnull sourceImage, CFDictionaryRef _Nullable textureAttributes, GLenum target, GLint internalFormat, GLsizei width, GLsizei height, GLenum format, GLenum type, size_t planeIndex, CVOpenGLESTextureRef  _Nullable * _Nonnull textureOut) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=5.0, deprecated=12.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=12.0))) __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[Introduced (PlatformName.iOS, 5, 0, message: "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)")]
		[Deprecated (PlatformName.iOS, 12, 0, message: "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)")]
		[Deprecated (PlatformName.TvOS, 12, 0, message: "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)")]
		[NoWatch, NoMac]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int CVOpenGLESTextureCacheCreateTextureFromImage ([NullAllowed] CFAllocatorRef* allocator, CVOpenGLESTextureCacheRef* textureCache, CVImageBufferRef* sourceImage, [NullAllowed] CFDictionaryRef* textureAttributes, uint target, int internalFormat, int width, int height, uint format, uint type, nuint planeIndex, [NullAllowed] CVOpenGLESTextureRef** textureOut);

		// extern void CVOpenGLESTextureCacheFlush (CVOpenGLESTextureCacheRef _Nonnull textureCache, CVOptionFlags options) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=5.0, deprecated=12.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=12.0))) __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[Introduced (PlatformName.iOS, 5, 0, message: "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)")]
		[Deprecated (PlatformName.iOS, 12, 0, message: "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)")]
		[Deprecated (PlatformName.TvOS, 12, 0, message: "OpenGL/OpenGLES is no longer supported. Use Metal APIs instead. (Define COREVIDEO_SILENCE_GL_DEPRECATION to silence these warnings)")]
		[NoWatch, NoMac]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CVOpenGLESTextureCacheFlush (CVOpenGLESTextureCacheRef* textureCache, ulong options);

		// extern CFDictionaryRef _Nullable CVPixelFormatDescriptionCreateWithPixelFormatType (CFAllocatorRef _Nullable allocator, OSType pixelFormat) __attribute__((visibility("default"))) __attribute__((cf_returns_retained)) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFDictionaryRef* CVPixelFormatDescriptionCreateWithPixelFormatType ([NullAllowed] CFAllocatorRef* allocator, uint pixelFormat);

		// extern CFArrayRef _Nullable CVPixelFormatDescriptionArrayCreateWithAllPixelFormatTypes (CFAllocatorRef _Nullable allocator) __attribute__((visibility("default"))) __attribute__((cf_returns_retained)) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFArrayRef* CVPixelFormatDescriptionArrayCreateWithAllPixelFormatTypes ([NullAllowed] CFAllocatorRef* allocator);

		// extern void CVPixelFormatDescriptionRegisterDescriptionWithPixelFormatType (CFDictionaryRef _Nonnull description, OSType pixelFormat) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CVPixelFormatDescriptionRegisterDescriptionWithPixelFormatType (CFDictionaryRef* description, uint pixelFormat);

		// extern CFTypeID CVMetalTextureGetTypeID () __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, unavailable)));
		[TV (9,0), NoWatch, Mac (10,11), iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CVMetalTextureGetTypeID ();

		// extern id<MTLTexture> _Nullable CVMetalTextureGetTexture (CVMetalTextureRef _Nonnull image) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, unavailable)));
		[TV (9,0), NoWatch, Mac (10,11), iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe MTLTexture CVMetalTextureGetTexture (CVMetalTextureRef* image);

		// extern Boolean CVMetalTextureIsFlipped (CVMetalTextureRef _Nonnull image) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, unavailable)));
		[TV (9,0), NoWatch, Mac (10,11), iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe byte CVMetalTextureIsFlipped (CVMetalTextureRef* image);

		// extern void CVMetalTextureGetCleanTexCoords (CVMetalTextureRef _Nonnull image, float * _Nonnull lowerLeft, float * _Nonnull lowerRight, float * _Nonnull upperRight, float * _Nonnull upperLeft) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, unavailable)));
		[TV (9,0), NoWatch, Mac (10,11), iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CVMetalTextureGetCleanTexCoords (CVMetalTextureRef* image, float[] lowerLeft, float[] lowerRight, float[] upperRight, float[] upperLeft);

		// extern CFTypeID CVMetalTextureCacheGetTypeID () __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, unavailable)));
		[TV (9,0), NoWatch, Mac (10,11), iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CVMetalTextureCacheGetTypeID ();

		// extern CVReturn CVMetalTextureCacheCreate (CFAllocatorRef _Nullable allocator, CFDictionaryRef _Nullable cacheAttributes, id<MTLDevice> _Nonnull metalDevice, CFDictionaryRef _Nullable textureAttributes, CVMetalTextureCacheRef  _Nullable * _Nonnull cacheOut) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, unavailable)));
		[TV (9,0), NoWatch, Mac (10,11), iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int CVMetalTextureCacheCreate ([NullAllowed] CFAllocatorRef* allocator, [NullAllowed] CFDictionaryRef* cacheAttributes, MTLDevice metalDevice, [NullAllowed] CFDictionaryRef* textureAttributes, [NullAllowed] CVMetalTextureCacheRef** cacheOut);

		// extern CVReturn CVMetalTextureCacheCreateTextureFromImage (CFAllocatorRef _Nullable allocator, CVMetalTextureCacheRef _Nonnull textureCache, CVImageBufferRef _Nonnull sourceImage, CFDictionaryRef _Nullable textureAttributes, MTLPixelFormat pixelFormat, size_t width, size_t height, size_t planeIndex, CVMetalTextureRef  _Nullable * _Nonnull textureOut) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, unavailable)));
		[TV (9,0), NoWatch, Mac (10,11), iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int CVMetalTextureCacheCreateTextureFromImage ([NullAllowed] CFAllocatorRef* allocator, CVMetalTextureCacheRef* textureCache, CVImageBufferRef* sourceImage, [NullAllowed] CFDictionaryRef* textureAttributes, MTLPixelFormat pixelFormat, nuint width, nuint height, nuint planeIndex, [NullAllowed] CVMetalTextureRef** textureOut);

		// extern void CVMetalTextureCacheFlush (CVMetalTextureCacheRef _Nonnull textureCache, CVOptionFlags options) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, unavailable)));
		[TV (9,0), NoWatch, Mac (10,11), iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CVMetalTextureCacheFlush (CVMetalTextureCacheRef* textureCache, ulong options);

		// extern CFTypeID CGImageMetadataGetTypeID () __attribute__((visibility("default"))) __attribute__((cf_audited_transfer));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CGImageMetadataGetTypeID ();

		// extern CGMutableImageMetadataRef _Nonnull CGImageMetadataCreateMutable () __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=7.0))) __attribute__((cf_audited_transfer));
		[Mac (10,8), iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGMutableImageMetadataRef* CGImageMetadataCreateMutable ();

		// extern CGMutableImageMetadataRef _Nullable CGImageMetadataCreateMutableCopy (CGImageMetadataRef _Nonnull metadata) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=7.0))) __attribute__((cf_audited_transfer));
		[Mac (10,8), iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGMutableImageMetadataRef* CGImageMetadataCreateMutableCopy (CGImageMetadataRef* metadata);

		// extern CFTypeID CGImageMetadataTagGetTypeID () __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=7.0))) __attribute__((cf_audited_transfer));
		[Mac (10,8), iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CGImageMetadataTagGetTypeID ();

		// extern CGImageMetadataTagRef _Nullable CGImageMetadataTagCreate (CFStringRef _Nonnull xmlns, CFStringRef _Nullable prefix, CFStringRef _Nonnull name, CGImageMetadataType type, CFTypeRef _Nonnull value) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=7.0))) __attribute__((cf_audited_transfer));
		[Mac (10,8), iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGImageMetadataTagRef* CGImageMetadataTagCreate (CFStringRef* xmlns, [NullAllowed] CFStringRef* prefix, CFStringRef* name, CGImageMetadataType type, void* value);

		// extern CFStringRef _Nullable CGImageMetadataTagCopyNamespace (CGImageMetadataTagRef _Nonnull tag) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=7.0))) __attribute__((cf_audited_transfer));
		[Mac (10,8), iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFStringRef* CGImageMetadataTagCopyNamespace (CGImageMetadataTagRef* tag);

		// extern CFStringRef _Nullable CGImageMetadataTagCopyPrefix (CGImageMetadataTagRef _Nonnull tag) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=7.0))) __attribute__((cf_audited_transfer));
		[Mac (10,8), iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFStringRef* CGImageMetadataTagCopyPrefix (CGImageMetadataTagRef* tag);

		// extern CFStringRef _Nullable CGImageMetadataTagCopyName (CGImageMetadataTagRef _Nonnull tag) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=7.0))) __attribute__((cf_audited_transfer));
		[Mac (10,8), iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFStringRef* CGImageMetadataTagCopyName (CGImageMetadataTagRef* tag);

		// extern CFTypeRef _Nullable CGImageMetadataTagCopyValue (CGImageMetadataTagRef _Nonnull tag) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=7.0))) __attribute__((cf_audited_transfer));
		[Mac (10,8), iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe void* CGImageMetadataTagCopyValue (CGImageMetadataTagRef* tag);

		// extern CGImageMetadataType CGImageMetadataTagGetType (CGImageMetadataTagRef _Nonnull tag) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=7.0))) __attribute__((cf_audited_transfer));
		[Mac (10,8), iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGImageMetadataType CGImageMetadataTagGetType (CGImageMetadataTagRef* tag);

		// extern CFArrayRef _Nullable CGImageMetadataTagCopyQualifiers (CGImageMetadataTagRef _Nonnull tag) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=7.0))) __attribute__((cf_audited_transfer));
		[Mac (10,8), iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFArrayRef* CGImageMetadataTagCopyQualifiers (CGImageMetadataTagRef* tag);

		// extern CFArrayRef _Nullable CGImageMetadataCopyTags (CGImageMetadataRef _Nonnull metadata) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=7.0))) __attribute__((cf_audited_transfer));
		[Mac (10,8), iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFArrayRef* CGImageMetadataCopyTags (CGImageMetadataRef* metadata);

		// extern CGImageMetadataTagRef _Nullable CGImageMetadataCopyTagWithPath (CGImageMetadataRef _Nonnull metadata, CGImageMetadataTagRef _Nullable parent, CFStringRef _Nonnull path) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=7.0))) __attribute__((cf_audited_transfer));
		[Mac (10,8), iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGImageMetadataTagRef* CGImageMetadataCopyTagWithPath (CGImageMetadataRef* metadata, [NullAllowed] CGImageMetadataTagRef* parent, CFStringRef* path);

		// extern CFStringRef _Nullable CGImageMetadataCopyStringValueWithPath (CGImageMetadataRef _Nonnull metadata, CGImageMetadataTagRef _Nullable parent, CFStringRef _Nonnull path) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=7.0))) __attribute__((cf_audited_transfer));
		[Mac (10,8), iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFStringRef* CGImageMetadataCopyStringValueWithPath (CGImageMetadataRef* metadata, [NullAllowed] CGImageMetadataTagRef* parent, CFStringRef* path);

		// extern _Bool CGImageMetadataRegisterNamespaceForPrefix (CGMutableImageMetadataRef _Nonnull metadata, CFStringRef _Nonnull xmlns, CFStringRef _Nonnull prefix, CFErrorRef  _Nullable * _Nullable err) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=7.0))) __attribute__((cf_audited_transfer));
		[Mac (10,8), iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGImageMetadataRegisterNamespaceForPrefix (CGMutableImageMetadataRef* metadata, CFStringRef* xmlns, CFStringRef* prefix, [NullAllowed] CFErrorRef** err);

		// extern _Bool CGImageMetadataSetTagWithPath (CGMutableImageMetadataRef _Nonnull metadata, CGImageMetadataTagRef _Nullable parent, CFStringRef _Nonnull path, CGImageMetadataTagRef _Nonnull tag) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=7.0))) __attribute__((cf_audited_transfer));
		[Mac (10,8), iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGImageMetadataSetTagWithPath (CGMutableImageMetadataRef* metadata, [NullAllowed] CGImageMetadataTagRef* parent, CFStringRef* path, CGImageMetadataTagRef* tag);

		// extern _Bool CGImageMetadataSetValueWithPath (CGMutableImageMetadataRef _Nonnull metadata, CGImageMetadataTagRef _Nullable parent, CFStringRef _Nonnull path, CFTypeRef _Nonnull value) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=7.0))) __attribute__((cf_audited_transfer));
		[Mac (10,8), iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGImageMetadataSetValueWithPath (CGMutableImageMetadataRef* metadata, [NullAllowed] CGImageMetadataTagRef* parent, CFStringRef* path, void* value);

		// extern _Bool CGImageMetadataRemoveTagWithPath (CGMutableImageMetadataRef _Nonnull metadata, CGImageMetadataTagRef _Nullable parent, CFStringRef _Nonnull path) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=7.0))) __attribute__((cf_audited_transfer));
		[Mac (10,8), iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGImageMetadataRemoveTagWithPath (CGMutableImageMetadataRef* metadata, [NullAllowed] CGImageMetadataTagRef* parent, CFStringRef* path);

		// extern void CGImageMetadataEnumerateTagsUsingBlock (CGImageMetadataRef _Nonnull metadata, CFStringRef _Nullable rootPath, CFDictionaryRef _Nullable options, CGImageMetadataTagBlock _Nonnull block) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=7.0))) __attribute__((cf_audited_transfer));
		[Mac (10,8), iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGImageMetadataEnumerateTagsUsingBlock (CGImageMetadataRef* metadata, [NullAllowed] CFStringRef* rootPath, [NullAllowed] CFDictionaryRef* options, CGImageMetadataTagBlock block);

		// extern CGImageMetadataTagRef _Nullable CGImageMetadataCopyTagMatchingImageProperty (CGImageMetadataRef _Nonnull metadata, CFStringRef _Nonnull dictionaryName, CFStringRef _Nonnull propertyName) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=7.0))) __attribute__((cf_audited_transfer));
		[Mac (10,8), iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGImageMetadataTagRef* CGImageMetadataCopyTagMatchingImageProperty (CGImageMetadataRef* metadata, CFStringRef* dictionaryName, CFStringRef* propertyName);

		// extern _Bool CGImageMetadataSetValueMatchingImageProperty (CGMutableImageMetadataRef _Nonnull metadata, CFStringRef _Nonnull dictionaryName, CFStringRef _Nonnull propertyName, CFTypeRef _Nonnull value) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=7.0))) __attribute__((cf_audited_transfer));
		[Mac (10,8), iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGImageMetadataSetValueMatchingImageProperty (CGMutableImageMetadataRef* metadata, CFStringRef* dictionaryName, CFStringRef* propertyName, void* value);

		// extern CFDataRef _Nullable CGImageMetadataCreateXMPData (CGImageMetadataRef _Nonnull metadata, CFDictionaryRef _Nullable options) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=7.0))) __attribute__((cf_audited_transfer));
		[Mac (10,8), iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFDataRef* CGImageMetadataCreateXMPData (CGImageMetadataRef* metadata, [NullAllowed] CFDictionaryRef* options);

		// extern CGImageMetadataRef _Nullable CGImageMetadataCreateFromXMPData (CFDataRef _Nonnull data) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=7.0))) __attribute__((cf_audited_transfer));
		[Mac (10,8), iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGImageMetadataRef* CGImageMetadataCreateFromXMPData (CFDataRef* data);

		// extern CFTypeID CGImageSourceGetTypeID () __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=4.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CGImageSourceGetTypeID ();

		// extern CFArrayRef _Nonnull CGImageSourceCopyTypeIdentifiers () __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=4.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFArrayRef* CGImageSourceCopyTypeIdentifiers ();

		// extern CGImageSourceRef _Nullable CGImageSourceCreateWithDataProvider (CGDataProviderRef _Nonnull provider, CFDictionaryRef _Nullable options) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=4.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGImageSourceRef* CGImageSourceCreateWithDataProvider (CGDataProviderRef* provider, [NullAllowed] CFDictionaryRef* options);

		// extern CGImageSourceRef _Nullable CGImageSourceCreateWithData (CFDataRef _Nonnull data, CFDictionaryRef _Nullable options) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=4.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGImageSourceRef* CGImageSourceCreateWithData (CFDataRef* data, [NullAllowed] CFDictionaryRef* options);

		// extern CGImageSourceRef _Nullable CGImageSourceCreateWithURL (CFURLRef _Nonnull url, CFDictionaryRef _Nullable options) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=4.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGImageSourceRef* CGImageSourceCreateWithURL (CFURLRef* url, [NullAllowed] CFDictionaryRef* options);

		// extern CFStringRef _Nullable CGImageSourceGetType (CGImageSourceRef _Nonnull isrc) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=4.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFStringRef* CGImageSourceGetType (CGImageSourceRef* isrc);

		// extern size_t CGImageSourceGetCount (CGImageSourceRef _Nonnull isrc) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=4.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint CGImageSourceGetCount (CGImageSourceRef* isrc);

		// extern CFDictionaryRef _Nullable CGImageSourceCopyProperties (CGImageSourceRef _Nonnull isrc, CFDictionaryRef _Nullable options) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=4.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFDictionaryRef* CGImageSourceCopyProperties (CGImageSourceRef* isrc, [NullAllowed] CFDictionaryRef* options);

		// extern CFDictionaryRef _Nullable CGImageSourceCopyPropertiesAtIndex (CGImageSourceRef _Nonnull isrc, size_t index, CFDictionaryRef _Nullable options) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=4.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFDictionaryRef* CGImageSourceCopyPropertiesAtIndex (CGImageSourceRef* isrc, nuint index, [NullAllowed] CFDictionaryRef* options);

		// extern CGImageMetadataRef _Nullable CGImageSourceCopyMetadataAtIndex (CGImageSourceRef _Nonnull isrc, size_t index, CFDictionaryRef _Nullable options) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=7.0))) __attribute__((cf_audited_transfer));
		[Mac (10,8), iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGImageMetadataRef* CGImageSourceCopyMetadataAtIndex (CGImageSourceRef* isrc, nuint index, [NullAllowed] CFDictionaryRef* options);

		// extern CGImageRef _Nullable CGImageSourceCreateImageAtIndex (CGImageSourceRef _Nonnull isrc, size_t index, CFDictionaryRef _Nullable options) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=4.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGImageRef* CGImageSourceCreateImageAtIndex (CGImageSourceRef* isrc, nuint index, [NullAllowed] CFDictionaryRef* options);

		// extern void CGImageSourceRemoveCacheAtIndex (CGImageSourceRef _Nonnull isrc, size_t index) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((cf_audited_transfer));
		[Mac (10,9), iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGImageSourceRemoveCacheAtIndex (CGImageSourceRef* isrc, nuint index);

		// extern CGImageRef _Nullable CGImageSourceCreateThumbnailAtIndex (CGImageSourceRef _Nonnull isrc, size_t index, CFDictionaryRef _Nullable options) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=4.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGImageRef* CGImageSourceCreateThumbnailAtIndex (CGImageSourceRef* isrc, nuint index, [NullAllowed] CFDictionaryRef* options);

		// extern CGImageSourceRef _Nonnull CGImageSourceCreateIncremental (CFDictionaryRef _Nullable options) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=4.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGImageSourceRef* CGImageSourceCreateIncremental ([NullAllowed] CFDictionaryRef* options);

		// extern void CGImageSourceUpdateData (CGImageSourceRef _Nonnull isrc, CFDataRef _Nonnull data, _Bool final) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=4.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGImageSourceUpdateData (CGImageSourceRef* isrc, CFDataRef* data, bool final);

		// extern void CGImageSourceUpdateDataProvider (CGImageSourceRef _Nonnull isrc, CGDataProviderRef _Nonnull provider, _Bool final) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=4.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGImageSourceUpdateDataProvider (CGImageSourceRef* isrc, CGDataProviderRef* provider, bool final);

		// extern CGImageSourceStatus CGImageSourceGetStatus (CGImageSourceRef _Nonnull isrc) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=4.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGImageSourceStatus CGImageSourceGetStatus (CGImageSourceRef* isrc);

		// extern CGImageSourceStatus CGImageSourceGetStatusAtIndex (CGImageSourceRef _Nonnull isrc, size_t index) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=4.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CGImageSourceStatus CGImageSourceGetStatusAtIndex (CGImageSourceRef* isrc, nuint index);

		// extern size_t CGImageSourceGetPrimaryImageIndex (CGImageSourceRef _Nonnull isrc) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((cf_audited_transfer));
		[Mac (10,14), iOS (12,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe nuint CGImageSourceGetPrimaryImageIndex (CGImageSourceRef* isrc);

		// extern CFDictionaryRef _Nullable CGImageSourceCopyAuxiliaryDataInfoAtIndex (CGImageSourceRef _Nonnull isrc, size_t index, CFStringRef _Nonnull auxiliaryImageDataType) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((cf_audited_transfer));
		[Mac (10,13), iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CFDictionaryRef* CGImageSourceCopyAuxiliaryDataInfoAtIndex (CGImageSourceRef* isrc, nuint index, CFStringRef* auxiliaryImageDataType);

		// extern CFTypeID CGImageDestinationGetTypeID () __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=4.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CGImageDestinationGetTypeID ();

		// extern CFArrayRef _Nonnull CGImageDestinationCopyTypeIdentifiers () __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=4.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CFArrayRef* CGImageDestinationCopyTypeIdentifiers ();

		// extern CGImageDestinationRef _Nullable CGImageDestinationCreateWithDataConsumer (CGDataConsumerRef _Nonnull consumer, CFStringRef _Nonnull type, size_t count, CFDictionaryRef _Nullable options) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=4.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGImageDestinationRef* CGImageDestinationCreateWithDataConsumer (CGDataConsumerRef* consumer, CFStringRef* type, nuint count, [NullAllowed] CFDictionaryRef* options);

		// extern CGImageDestinationRef _Nullable CGImageDestinationCreateWithData (CFMutableDataRef _Nonnull data, CFStringRef _Nonnull type, size_t count, CFDictionaryRef _Nullable options) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=4.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGImageDestinationRef* CGImageDestinationCreateWithData (CFMutableDataRef* data, CFStringRef* type, nuint count, [NullAllowed] CFDictionaryRef* options);

		// extern CGImageDestinationRef _Nullable CGImageDestinationCreateWithURL (CFURLRef _Nonnull url, CFStringRef _Nonnull type, size_t count, CFDictionaryRef _Nullable options) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=4.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGImageDestinationRef* CGImageDestinationCreateWithURL (CFURLRef* url, CFStringRef* type, nuint count, [NullAllowed] CFDictionaryRef* options);

		// extern void CGImageDestinationSetProperties (CGImageDestinationRef _Nonnull idst, CFDictionaryRef _Nullable properties) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=4.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGImageDestinationSetProperties (CGImageDestinationRef* idst, [NullAllowed] CFDictionaryRef* properties);

		// extern void CGImageDestinationAddImage (CGImageDestinationRef _Nonnull idst, CGImageRef _Nonnull image, CFDictionaryRef _Nullable properties) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=4.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGImageDestinationAddImage (CGImageDestinationRef* idst, CGImageRef* image, [NullAllowed] CFDictionaryRef* properties);

		// extern void CGImageDestinationAddImageFromSource (CGImageDestinationRef _Nonnull idst, CGImageSourceRef _Nonnull isrc, size_t index, CFDictionaryRef _Nullable properties) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=4.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGImageDestinationAddImageFromSource (CGImageDestinationRef* idst, CGImageSourceRef* isrc, nuint index, [NullAllowed] CFDictionaryRef* properties);

		// extern _Bool CGImageDestinationFinalize (CGImageDestinationRef _Nonnull idst) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=4.0))) __attribute__((cf_audited_transfer));
		[Mac (10,4), iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGImageDestinationFinalize (CGImageDestinationRef* idst);

		// extern void CGImageDestinationAddImageAndMetadata (CGImageDestinationRef _Nonnull idst, CGImageRef _Nonnull image, CGImageMetadataRef _Nullable metadata, CFDictionaryRef _Nullable options) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=7.0))) __attribute__((cf_audited_transfer));
		[Mac (10,8), iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGImageDestinationAddImageAndMetadata (CGImageDestinationRef* idst, CGImageRef* image, [NullAllowed] CGImageMetadataRef* metadata, [NullAllowed] CFDictionaryRef* options);

		// extern _Bool CGImageDestinationCopyImageSource (CGImageDestinationRef _Nonnull idst, CGImageSourceRef _Nonnull isrc, CFDictionaryRef _Nullable options, CFErrorRef  _Nullable * _Nullable err) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=7.0))) __attribute__((cf_audited_transfer));
		[Mac (10,8), iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CGImageDestinationCopyImageSource (CGImageDestinationRef* idst, CGImageSourceRef* isrc, [NullAllowed] CFDictionaryRef* options, [NullAllowed] CFErrorRef** err);

		// extern void CGImageDestinationAddAuxiliaryDataInfo (CGImageDestinationRef _Nonnull idst, CFStringRef _Nonnull auxiliaryImageDataType, CFDictionaryRef _Nonnull auxiliaryDataInfoDictionary) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((cf_audited_transfer));
		[Mac (10,13), iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void CGImageDestinationAddAuxiliaryDataInfo (CGImageDestinationRef* idst, CFStringRef* auxiliaryImageDataType, CFDictionaryRef* auxiliaryDataInfoDictionary);

		// extern NSDictionary<NSString *,id> * _Nonnull _NSDictionaryOfVariableBindings (NSString * _Nonnull commaSeparatedKeysString, id _Nullable firstValue, ...) __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=6.0)));
		[Mac (10,7), iOS (6,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSDictionary<NSString, NSObject> _NSDictionaryOfVariableBindings (NSString commaSeparatedKeysString, [NullAllowed] NSObject firstValue, IntPtr varArgs);

		// int UIDeviceOrientationIsPortrait (UIDeviceOrientation orientation) __attribute__((availability(tvos, unavailable)));
		[NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int UIDeviceOrientationIsPortrait (UIDeviceOrientation orientation);

		// int UIDeviceOrientationIsLandscape (UIDeviceOrientation orientation) __attribute__((availability(tvos, unavailable)));
		[NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int UIDeviceOrientationIsLandscape (UIDeviceOrientation orientation);

		// int UIDeviceOrientationIsFlat (UIDeviceOrientation orientation) __attribute__((always_inline)) __attribute__((availability(tvos, unavailable)));
		[NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int UIDeviceOrientationIsFlat (UIDeviceOrientation orientation);

		// int UIDeviceOrientationIsValidInterfaceOrientation (UIDeviceOrientation orientation) __attribute__((always_inline)) __attribute__((availability(tvos, unavailable)));
		[NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int UIDeviceOrientationIsValidInterfaceOrientation (UIDeviceOrientation orientation);

		// UIUserInterfaceIdiom UI_USER_INTERFACE_IDIOM () __attribute__((availability(ios, introduced=2.0, deprecated=13.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=11.0)));
		[Introduced (PlatformName.iOS, 2, 0, message: "Use -[UIDevice userInterfaceIdiom] directly.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "Use -[UIDevice userInterfaceIdiom] directly.")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use -[UIDevice userInterfaceIdiom] directly.")]
		[Deprecated (PlatformName.TvOS, 11, 0, message: "Use -[UIDevice userInterfaceIdiom] directly.")]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern UIUserInterfaceIdiom UI_USER_INTERFACE_IDIOM ();

		// extern int UIContentSizeCategoryIsAccessibilityCategory (UIContentSizeCategory _Nonnull category) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((swift_private));
		[Watch (4,0), TV (11,0), iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int UIContentSizeCategoryIsAccessibilityCategory (NSString category);

		// extern NSComparisonResult UIContentSizeCategoryCompareToCategory (UIContentSizeCategory _Nonnull lhs, UIContentSizeCategory _Nonnull rhs) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((swift_private));
		[Watch (4,0), TV (11,0), iOS (11,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSComparisonResult UIContentSizeCategoryCompareToCategory (NSString lhs, NSString rhs);

		// extern CFTypeID CTParagraphStyleGetTypeID () __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=3.2))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern nuint CTParagraphStyleGetTypeID ();

		// extern CTParagraphStyleRef _Nonnull CTParagraphStyleCreate (const CTParagraphStyleSetting * _Nullable settings, size_t settingCount) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=3.2))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CTParagraphStyleRef* CTParagraphStyleCreate ([NullAllowed] CTParagraphStyleSetting* settings, nuint settingCount);

		// extern CTParagraphStyleRef _Nonnull CTParagraphStyleCreateCopy (CTParagraphStyleRef _Nonnull paragraphStyle) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=3.2))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe CTParagraphStyleRef* CTParagraphStyleCreateCopy (CTParagraphStyleRef* paragraphStyle);

		// extern _Bool CTParagraphStyleGetValueForSpecifier (CTParagraphStyleRef _Nonnull paragraphStyle, CTParagraphStyleSpecifier spec, size_t valueBufferSize, void * _Nonnull valueBuffer) __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=3.2))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((cf_audited_transfer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe bool CTParagraphStyleGetValueForSpecifier (CTParagraphStyleRef* paragraphStyle, CTParagraphStyleSpecifier spec, nuint valueBufferSize, void* valueBuffer);

		// extern CTTextAlignment NSTextAlignmentToCTTextAlignment (NSTextAlignment nsTextAlignment) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=6.0)));
		[iOS (6,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CTTextAlignment NSTextAlignmentToCTTextAlignment (NSTextAlignment nsTextAlignment);

		// extern NSTextAlignment NSTextAlignmentFromCTTextAlignment (CTTextAlignment ctTextAlignment) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=6.0)));
		[iOS (6,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern NSTextAlignment NSTextAlignmentFromCTTextAlignment (CTTextAlignment ctTextAlignment);

		// extern NSData * _Nullable UIImagePNGRepresentation (UIImage * _Nonnull image) __attribute__((visibility("default")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern NSData UIImagePNGRepresentation (UIImage image);

		// extern NSData * _Nullable UIImageJPEGRepresentation (UIImage * _Nonnull image, CGFloat compressionQuality) __attribute__((visibility("default")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern NSData UIImageJPEGRepresentation (UIImage image, nfloat compressionQuality);

		// extern void UIAccessibilityZoomFocusChanged (UIAccessibilityZoomType type, CGRect frame, UIView * _Nonnull view) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=5.0)));
		[iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void UIAccessibilityZoomFocusChanged (UIAccessibilityZoomType type, CGRect frame, UIView view);

		// extern void UIAccessibilityRegisterGestureConflictWithZoom () __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=5.0)));
		[iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void UIAccessibilityRegisterGestureConflictWithZoom ();

		// extern UIGuidedAccessRestrictionState UIGuidedAccessRestrictionStateForIdentifier (NSString * _Nonnull restrictionIdentifier) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7.0)));
		[iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern UIGuidedAccessRestrictionState UIGuidedAccessRestrictionStateForIdentifier (NSString restrictionIdentifier);

		// extern void UIGuidedAccessConfigureAccessibilityFeatures (UIGuidedAccessAccessibilityFeature features, int enabled, void (^ _Nonnull)(int, NSError * _Nonnull) completion) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=12.2))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, iOS (12,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void UIGuidedAccessConfigureAccessibilityFeatures (UIGuidedAccessAccessibilityFeature features, int enabled, Action<int, NSError> completion);

		// extern CGRect UIAccessibilityConvertFrameToScreenCoordinates (CGRect rect, UIView * _Nonnull view) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7.0)));
		[iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CGRect UIAccessibilityConvertFrameToScreenCoordinates (CGRect rect, UIView view);

		// extern UIBezierPath * _Nonnull UIAccessibilityConvertPathToScreenCoordinates (UIBezierPath * _Nonnull path, UIView * _Nonnull view) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7.0)));
		[iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern UIBezierPath UIAccessibilityConvertPathToScreenCoordinates (UIBezierPath path, UIView view);

		// extern id _Nullable UIAccessibilityFocusedElement (UIAccessibilityAssistiveTechnologyIdentifier _Nullable assistiveTechnologyIdentifier) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9.0)));
		[iOS (9,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern NSObject UIAccessibilityFocusedElement ([NullAllowed] NSString assistiveTechnologyIdentifier);

		// extern void UIAccessibilityPostNotification (UIAccessibilityNotifications notification, id _Nullable argument) __attribute__((visibility("default")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void UIAccessibilityPostNotification (uint notification, [NullAllowed] NSObject argument);

		// extern int UIAccessibilityIsVoiceOverRunning () __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int UIAccessibilityIsVoiceOverRunning ();

		// extern int UIAccessibilityIsMonoAudioEnabled () __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=5.0)));
		[iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int UIAccessibilityIsMonoAudioEnabled ();

		// extern int UIAccessibilityIsClosedCaptioningEnabled () __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=5.0)));
		[iOS (5,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int UIAccessibilityIsClosedCaptioningEnabled ();

		// extern int UIAccessibilityIsInvertColorsEnabled () __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=6.0)));
		[iOS (6,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int UIAccessibilityIsInvertColorsEnabled ();

		// extern int UIAccessibilityIsGuidedAccessEnabled () __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=6.0)));
		[iOS (6,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int UIAccessibilityIsGuidedAccessEnabled ();

		// extern int UIAccessibilityIsBoldTextEnabled () __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8.0)));
		[iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int UIAccessibilityIsBoldTextEnabled ();

		// extern int UIAccessibilityIsGrayscaleEnabled () __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8.0)));
		[iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int UIAccessibilityIsGrayscaleEnabled ();

		// extern int UIAccessibilityIsReduceTransparencyEnabled () __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8.0)));
		[iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int UIAccessibilityIsReduceTransparencyEnabled ();

		// extern int UIAccessibilityIsReduceMotionEnabled () __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8.0)));
		[iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int UIAccessibilityIsReduceMotionEnabled ();

		// extern int UIAccessibilityIsVideoAutoplayEnabled () __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(tvos, introduced=13.0)));
		[TV (13,0), iOS (13,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int UIAccessibilityIsVideoAutoplayEnabled ();

		// extern int UIAccessibilityDarkerSystemColorsEnabled () __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8.0)));
		[iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int UIAccessibilityDarkerSystemColorsEnabled ();

		// extern int UIAccessibilityIsSwitchControlRunning () __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8.0)));
		[iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int UIAccessibilityIsSwitchControlRunning ();

		// extern int UIAccessibilityIsSpeakSelectionEnabled () __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8.0)));
		[iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int UIAccessibilityIsSpeakSelectionEnabled ();

		// extern int UIAccessibilityIsSpeakScreenEnabled () __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8.0)));
		[iOS (8,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int UIAccessibilityIsSpeakScreenEnabled ();

		// extern int UIAccessibilityIsShakeToUndoEnabled () __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9.0)));
		[iOS (9,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int UIAccessibilityIsShakeToUndoEnabled ();

		// extern int UIAccessibilityIsAssistiveTouchRunning () __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10.0)));
		[iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int UIAccessibilityIsAssistiveTouchRunning ();

		// extern int UIAccessibilityShouldDifferentiateWithoutColor () __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(tvos, introduced=13.0)));
		[TV (13,0), iOS (13,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int UIAccessibilityShouldDifferentiateWithoutColor ();

		// extern int UIAccessibilityIsOnOffSwitchLabelsEnabled () __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=13.0)));
		[iOS (13,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int UIAccessibilityIsOnOffSwitchLabelsEnabled ();

		// extern void UIAccessibilityRequestGuidedAccessSession (int enable, void (^ _Nonnull)(int) completionHandler) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=7.0)));
		[iOS (7,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void UIAccessibilityRequestGuidedAccessSession (int enable, Action<int> completionHandler);

		// extern UIAccessibilityHearingDeviceEar UIAccessibilityHearingDevicePairedEar () __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, unavailable)));
		[NoTV, iOS (10,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern UIAccessibilityHearingDeviceEar UIAccessibilityHearingDevicePairedEar ();

		// int UIInterfaceOrientationIsPortrait (UIInterfaceOrientation orientation) __attribute__((availability(tvos, unavailable)));
		[NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int UIInterfaceOrientationIsPortrait (UIInterfaceOrientation orientation);

		// int UIInterfaceOrientationIsLandscape (UIInterfaceOrientation orientation) __attribute__((availability(tvos, unavailable)));
		[NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int UIInterfaceOrientationIsLandscape (UIInterfaceOrientation orientation);

		// extern int UIApplicationMain (int argc, char * _Nullable * _Nonnull argv, NSString * _Nullable principalClassName, NSString * _Nullable delegateClassName) __attribute__((visibility("default")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe int UIApplicationMain (int argc, [NullAllowed] sbyte*[] argv, [NullAllowed] NSString principalClassName, [NullAllowed] NSString delegateClassName);

		// extern CGContextRef _Nullable UIGraphicsGetCurrentContext () __attribute__((visibility("default"))) __attribute__((cf_returns_not_retained));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern unsafe CGContextRef* UIGraphicsGetCurrentContext ();

		// extern void UIGraphicsPushContext (CGContextRef _Nonnull context) __attribute__((visibility("default")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void UIGraphicsPushContext (CGContextRef* context);

		// extern void UIGraphicsPopContext () __attribute__((visibility("default")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void UIGraphicsPopContext ();

		// extern void UIRectFillUsingBlendMode (CGRect rect, CGBlendMode blendMode) __attribute__((visibility("default")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void UIRectFillUsingBlendMode (CGRect rect, CGBlendMode blendMode);

		// extern void UIRectFill (CGRect rect) __attribute__((visibility("default")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void UIRectFill (CGRect rect);

		// extern void UIRectFrameUsingBlendMode (CGRect rect, CGBlendMode blendMode) __attribute__((visibility("default")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void UIRectFrameUsingBlendMode (CGRect rect, CGBlendMode blendMode);

		// extern void UIRectFrame (CGRect rect) __attribute__((visibility("default")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void UIRectFrame (CGRect rect);

		// extern void UIRectClip (CGRect rect) __attribute__((visibility("default")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void UIRectClip (CGRect rect);

		// extern void UIGraphicsBeginImageContext (CGSize size) __attribute__((visibility("default")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void UIGraphicsBeginImageContext (CGSize size);

		// extern void UIGraphicsBeginImageContextWithOptions (CGSize size, int opaque, CGFloat scale) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void UIGraphicsBeginImageContextWithOptions (CGSize size, int opaque, nfloat scale);

		// extern UIImage * _Nullable UIGraphicsGetImageFromCurrentImageContext () __attribute__((visibility("default")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		[return: NullAllowed]
		static extern UIImage UIGraphicsGetImageFromCurrentImageContext ();

		// extern void UIGraphicsEndImageContext () __attribute__((visibility("default")));
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void UIGraphicsEndImageContext ();

		// extern int UIGraphicsBeginPDFContextToFile (NSString * _Nonnull path, CGRect bounds, NSDictionary * _Nullable documentInfo) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=3.2)));
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int UIGraphicsBeginPDFContextToFile (NSString path, CGRect bounds, [NullAllowed] NSDictionary documentInfo);

		// extern void UIGraphicsBeginPDFContextToData (NSMutableData * _Nonnull data, CGRect bounds, NSDictionary * _Nullable documentInfo) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=3.2)));
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void UIGraphicsBeginPDFContextToData (NSMutableData data, CGRect bounds, [NullAllowed] NSDictionary documentInfo);

		// extern void UIGraphicsEndPDFContext () __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=3.2)));
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void UIGraphicsEndPDFContext ();

		// extern void UIGraphicsBeginPDFPage () __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=3.2)));
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void UIGraphicsBeginPDFPage ();

		// extern void UIGraphicsBeginPDFPageWithInfo (CGRect bounds, NSDictionary * _Nullable pageInfo) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=3.2)));
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void UIGraphicsBeginPDFPageWithInfo (CGRect bounds, [NullAllowed] NSDictionary pageInfo);

		// extern CGRect UIGraphicsGetPDFContextBounds () __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=3.2)));
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern CGRect UIGraphicsGetPDFContextBounds ();

		// extern void UIGraphicsSetPDFContextURLForRect (NSURL * _Nonnull url, CGRect rect) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=3.2)));
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void UIGraphicsSetPDFContextURLForRect (NSUrl url, CGRect rect);

		// extern void UIGraphicsAddPDFContextDestinationAtPoint (NSString * _Nonnull name, CGPoint point) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=3.2)));
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void UIGraphicsAddPDFContextDestinationAtPoint (NSString name, CGPoint point);

		// extern void UIGraphicsSetPDFContextDestinationForRect (NSString * _Nonnull name, CGRect rect) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=3.2)));
		[iOS (3,2)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void UIGraphicsSetPDFContextDestinationForRect (NSString name, CGRect rect);

		// extern UIFontWeight UIFontWeightForImageSymbolWeight (UIImageSymbolWeight symbolWeight) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(tvos, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0)));
		[Watch (6,0), TV (13,0), iOS (13,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern double UIFontWeightForImageSymbolWeight (UIImageSymbolWeight symbolWeight);

		// extern UIImageSymbolWeight UIImageSymbolWeightForFontWeight (UIFontWeight fontWeight) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(tvos, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0)));
		[Watch (6,0), TV (13,0), iOS (13,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern UIImageSymbolWeight UIImageSymbolWeightForFontWeight (double fontWeight);

		// extern void UIImageWriteToSavedPhotosAlbum (UIImage * _Nonnull image, id _Nullable completionTarget, SEL _Nullable completionSelector, void * _Nullable contextInfo) __attribute__((visibility("default"))) __attribute__((availability(tvos, unavailable)));
		[NoTV]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void UIImageWriteToSavedPhotosAlbum (UIImage image, [NullAllowed] NSObject completionTarget, [NullAllowed] Selector completionSelector, [NullAllowed] void* contextInfo);

		// extern int UIVideoAtPathIsCompatibleWithSavedPhotosAlbum (NSString * _Nonnull videoPath) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=3.1))) __attribute__((availability(tvos, unavailable)));
		[NoTV, iOS (3,1)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int UIVideoAtPathIsCompatibleWithSavedPhotosAlbum (NSString videoPath);

		// extern void UISaveVideoAtPathToSavedPhotosAlbum (NSString * _Nonnull videoPath, id _Nullable completionTarget, SEL _Nullable completionSelector, void * _Nullable contextInfo) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=3.1))) __attribute__((availability(tvos, unavailable)));
		[NoTV, iOS (3,1)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void UISaveVideoAtPathToSavedPhotosAlbum (NSString videoPath, [NullAllowed] NSObject completionTarget, [NullAllowed] Selector completionSelector, [NullAllowed] void* contextInfo);

		// extern int UIFloatRangeIsInfinite (UIFloatRange range) __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9.0)));
		[iOS (9,0)]
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int UIFloatRangeIsInfinite (UIFloatRange range);

		// UIFloatRange UIFloatRangeMake (CGFloat minimum, CGFloat maximum);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern UIFloatRange UIFloatRangeMake (nfloat minimum, nfloat maximum);

		// int UIFloatRangeIsEqualToRange (UIFloatRange range, UIFloatRange otherRange);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int UIFloatRangeIsEqualToRange (UIFloatRange range, UIFloatRange otherRange);

		// extern void TEST_Manage (int iUserID, int iChan);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void TEST_Manage (int iUserID, int iChan);

		// extern void TEST_PTZ (int iPreviewID, int iUserID, int iChan);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void TEST_PTZ (int iPreviewID, int iUserID, int iChan);

		// extern void TEST_Config (int iPreviewID, int iUserID, int iChan);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void TEST_Config (int iPreviewID, int iUserID, int iChan);

		// extern void TEST_Other (int iPreviewID, int iUserID, int iChan, int iPlaybackID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void TEST_Other (int iPreviewID, int iUserID, int iChan, int iPlaybackID);

		// extern void TEST_Alarm (int iUserID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void TEST_Alarm (int iUserID);

		// extern void g_GetFileName (char *pFileName, char *pExtend);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern unsafe void g_GetFileName (sbyte* pFileName, sbyte* pExtend);

		// extern void Test_PTZTrack (int iPreviewID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_PTZTrack (int iPreviewID);

		// extern void Test_PTZTrack_Other (int iUserID, int iChan);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_PTZTrack_Other (int iUserID, int iChan);

		// extern void Test_PTZCruise (int iPreviewID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_PTZCruise (int iPreviewID);

		// extern void Test_PTZCruise_Other (int iUserID, int iChan);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_PTZCruise_Other (int iUserID, int iChan);

		// extern void Test_PTZPreset (int iPreviewID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_PTZPreset (int iPreviewID);

		// extern void Test_PTZPreset_Other (int iUserID, int iChan);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_PTZPreset_Other (int iUserID, int iChan);

		// extern void Test_PTZControl (int iPreviewID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_PTZControl (int iPreviewID);

		// extern void Test_PTZControl_Other (int iUserID, int iChan);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_PTZControl_Other (int iUserID, int iChan);

		// extern void Test_PTZControlWithSpeed (int iPreviewID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_PTZControlWithSpeed (int iPreviewID);

		// extern void Test_PTZControlWithSpeed_Other (int iUserID, int iChan);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_PTZControlWithSpeed_Other (int iUserID, int iChan);

		// extern void Test_PTZSelZoomIn (int iPreviewID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_PTZSelZoomIn (int iPreviewID);

		// extern void Test_PTZSelZoomIn_EX (int iUserID, int iChan);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_PTZSelZoomIn_EX (int iUserID, int iChan);

		// extern void Test_GetDeviceAbility (int iUserID, int iChan);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_GetDeviceAbility (int iUserID, int iChan);

		// extern void Test_GetPTZProtocol (int iUserID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_GetPTZProtocol (int iUserID);

		// extern void Test_DeviceCfg_V40 (int iUserID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_DeviceCfg_V40 (int iUserID);

		// extern void Test_NetCfg_V30 (int iUserID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_NetCfg_V30 (int iUserID);

		// extern void Test_PicCfg_V30 (int iUserID, int iChan);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_PicCfg_V30 (int iUserID, int iChan);

		// extern void Test_CompressionCfg_V30 (int iUserID, int iChan);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_CompressionCfg_V30 (int iUserID, int iChan);

		// extern void Test_CompressAudio (int iUserID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_CompressAudio (int iUserID);

		// extern void Test_IPAlarmoutCfg (int iUserID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_IPAlarmoutCfg (int iUserID);

		// extern void Test_IPParaCfg_V40 (int iUserID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_IPParaCfg_V40 (int iUserID);

		// extern void Test_AlarminCfg_V30 (int iUserID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_AlarminCfg_V30 (int iUserID);

		// extern void Test_AlarmOutCfg_V30 (int iUserID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_AlarmOutCfg_V30 (int iUserID);

		// extern void Test_NTPPara (int iUserID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_NTPPara (int iUserID);

		// extern void Test_DecoderCfg_V30 (int iUserID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_DecoderCfg_V30 (int iUserID);

		// extern void Test_AuxAlarmCfg (int iUserID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_AuxAlarmCfg (int iUserID);

		// extern void Test_Record_V30 (int iUserID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_Record_V30 (int iUserID);

		// extern void Test_ZeroChanCfg (int iUserID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_ZeroChanCfg (int iUserID);

		// extern void Test_APInfoList (int iUserID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_APInfoList (int iUserID);

		// extern void Test_WifiCfg (int iUserID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_WifiCfg (int iUserID);

		// extern void Test_WifiConnectStatus (int iUserID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_WifiConnectStatus (int iUserID);

		// extern void Test_Time (int iUserID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_Time (int iUserID);

		// extern void Test_User_V30 (int iUserID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_User_V30 (int iUserID);

		// extern void Test_DDNSPara_V30 (int iUserID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_DDNSPara_V30 (int iUserID);

		// extern void Test_ShowString_V30 (int iUserID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_ShowString_V30 (int iUserID);

		// extern void Test_DigitalChannelState (int iUserID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_DigitalChannelState (int iUserID);

		// extern void Test_VideoEffect (int iPreviewID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_VideoEffect (int iPreviewID);

		// extern void Test_AlarmoutStatus_V30 (int iUserID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_AlarmoutStatus_V30 (int iUserID);

		// extern void Test_CurrentAudioCompress (int iUserID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_CurrentAudioCompress (int iUserID);

		// extern void Test_WorkState_V30 (int iUserID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_WorkState_V30 (int iUserID);

		// extern void Test_UpnpNatState (int iUserID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_UpnpNatState (int iUserID);

		// extern void Test_GetCurrentAudioCompression_V50 (int iUserID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_GetCurrentAudioCompression_V50 (int iUserID);

		// extern void Test_Upgrade (int iUserID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_Upgrade (int iUserID);

		// extern void Test_RebootDVR (int iUserID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_RebootDVR (int iUserID);

		// extern void Test_ShutDownDVR (int iUserID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_ShutDownDVR (int iUserID);

		// extern void Test_ClickKey (int iUserID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_ClickKey (int iUserID);

		// extern void Test_GetDiskList (int iUserID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_GetDiskList (int iUserID);

		// extern void Test_BackupByTime (int iUserID, int iChan);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_BackupByTime (int iUserID, int iChan);

		// extern void Test_FindFile_V30 (int iUserID, int iChan);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_FindFile_V30 (int iUserID, int iChan);

		// extern void Test_FormatDisk (int iUserID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_FormatDisk (int iUserID);

		// extern void Test_UpdateRecordIndex (int iUserID, int iChan);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_UpdateRecordIndex (int iUserID, int iChan);

		// extern void Test_GetFileByName (int iUserID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_GetFileByName (int iUserID);

		// extern void Test_GetFileByTime (int iUserID, int iChan);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_GetFileByTime (int iUserID, int iChan);

		// extern void Test_FindFileByEvent (int iUserID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_FindFileByEvent (int iUserID);

		// extern void Test_SetupAlarm (int iUserID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_SetupAlarm (int iUserID);

		// extern void Test_SetDVRMessageCallback ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_SetDVRMessageCallback ();

		// extern void Test_HikOnline ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_HikOnline ();

		// extern void Test_IPServer ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_IPServer ();

		// extern void Test_Activate ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_Activate ();

		// extern void Test_CaptureJPEGPicture (int iUserID, int iChan);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_CaptureJPEGPicture (int iUserID, int iChan);

		// extern void Test_CaptureJPEGPicture_NEW (int iUserID, int iChan);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_CaptureJPEGPicture_NEW (int iUserID, int iChan);

		// extern void Test_ZeroChanPreview (int iUserID, int iChan);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_ZeroChanPreview (int iUserID, int iChan);

		// extern void Test_TransChannel (int iUserID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_TransChannel (int iUserID);

		// extern void Test_Serial (int iUserID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_Serial (int iUserID);

		// extern void Test_PlaybackSaveData (int iPlaybackID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void Test_PlaybackSaveData (int iPlaybackID);

		// extern int startPreview (int iUserID, int iStartChan, UIView *pView, int iIndex);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int startPreview (int iUserID, int iStartChan, UIView pView, int iIndex);

		// extern void stopPreview (int iIndex);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void stopPreview (int iIndex);

		// extern int startVoiceTalk (int iUserID);
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern int startVoiceTalk (int iUserID);

		// extern void stopVoiceTalk ();
		[DllImport ("__Internal")]
		[Verify (PlatformInvoke)]
		static extern void stopVoiceTalk ();
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __sbuf
	{
		public unsafe byte* _base;

		public int _size;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct FILE
	{
		public unsafe byte* _p;

		public int _r;

		public int _w;

		public short _flags;

		public short _file;

		public __sbuf _bf;

		public int _lbfsize;

		public unsafe void* _cookie;

		public unsafe Func<void*, int>* _close;

		public unsafe Func<void*, sbyte*, int, int>* _read;

		public unsafe Func<void*, long, int, long>* _seek;

		public unsafe Func<void*, sbyte*, int, int>* _write;

		public __sbuf _ub;

		public unsafe __sFILEX* _extra;

		public int _ur;

		public byte[] _ubuf;

		public byte[] _nbuf;

		public __sbuf _lb;

		public int _blksize;

		public long _offset;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct sched_param
	{
		public int sched_priority;

		public sbyte[] __opaque;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct timespec
	{
		public nint tv_sec;

		public nint tv_nsec;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct tm
	{
		public int tm_sec;

		public int tm_min;

		public int tm_hour;

		public int tm_mday;

		public int tm_mon;

		public int tm_year;

		public int tm_wday;

		public int tm_yday;

		public int tm_isdst;

		public nint tm_gmtoff;

		public unsafe sbyte* tm_zone;
	}

	public enum clockid_t : uint
	{
		Realtime = 0,
		Monotonic = 6,
		MonotonicRaw = 4,
		MonotonicRawApprox = 5,
		UptimeRaw = 8,
		UptimeRawApprox = 9,
		ProcessCputimeId = 12,
		ThreadCputimeId = 16
	}

	public enum dispatch_qos_class_t : uint
	{
		UserInteractive = 33,
		UserInitiated = 25,
		Default = 21,
		Utility = 17,
		Background = 9,
		Unspecified = 0
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct AudioPackage
	{
		public sbyte[] szDataBuf;

		public uint nDataLen;
	}

	[Verify (InferredFromMemberPrefix)]
	public enum AudioSampleRate : uint
	{
		Default = 0,
		AudioSampleRate16 = 1,
		AudioSampleRate32 = 2,
		AudioSampleRate48 = 3,
		AudioSampleRate44 = 4,
		AudioSampleRate8 = 5
	}

	[Verify (InferredFromMemberPrefix)]
	public enum AudioSampleRate : uint
	{
		DefaultKHZ = 16000,
		AudioSampleRate16KHZ = 16000,
		AudioSampleRate32KHZ = 32000,
		AudioSampleRate48KHZ = 48000,
		AudioSampleRate44KHZ = 44100,
		AudioSampleRate8KHZ = 8000
	}

	[Verify (InferredFromMemberPrefix)]
	public enum BitRateEncode : uint
	{
		Default = 16000,
		BitRateEncode8Kps = 8000,
		BitRateEncode16Kps = 16000,
		BitRateEncode32Kps = 32000,
		BitRateEncode64Kps = 64000,
		BitRateEncode128Kps = 128000,
		BitRateEncode192Kps = 192000,
		BitRateEncode40Kps = 40000,
		BitRateEncode48Kps = 48000,
		BitRateEncode56Kps = 56000,
		BitRateEncode80Kps = 80000,
		BitRateEncode96Kps = 96000,
		BitRateEncode112Kps = 112000,
		BitRateEncode144Kps = 144000,
		BitRateEncode160Kps = 160000
	}

	public enum Caemode : uint
	{
		Play = 1,
		Record = 2,
		Intercom = 3
	}

	public enum AudioEncodeType : uint
	{
		Pcm = 0,
		G711a = 1,
		G711u = 2,
		G722 = 3,
		G726 = 4,
		Mpeg2 = 5,
		Aac = 6
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct AudioCodecParam
	{
		public AudioEncodeType enAudioEncodeType;

		public int nBitWidth;

		public int nSampleRate;

		public int nChannel;

		public int nBitRate;

		public int[] reserved;
	}

	public enum Parammode : uint
	{
		Play = 1,
		Record = 2
	}

	public enum Callbacktype : uint
	{
		PlayDataCallback = 1,
		RecordDataCallback = 2,
		RecordPcmdataCallback = 3
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct OutputDataInfo
	{
		public unsafe byte* pData;

		public uint dwDataLen;

		public AudioEncodeType enDataType;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct ullc
	{
		[FieldOffset (0)]
		public ulong ull;

		[FieldOffset (0)]
		public uint[] ul;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct fd_set
	{
		public int[] fds_bits;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct _RuneEntry
	{
		public int __min;

		public int __max;

		public int __map;

		public unsafe uint* __types;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct _RuneRange
	{
		public int __nranges;

		public unsafe _RuneEntry* __ranges;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct _RuneCharClass
	{
		public sbyte[] __name;

		public uint __mask;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct _RuneLocale
	{
		public sbyte[] __magic;

		public sbyte[] __encoding;

		public unsafe Func<sbyte*, nuint, sbyte**, int>* __sgetrune;

		public unsafe Func<int, sbyte*, nuint, sbyte**, int>* __sputrune;

		public int __invalid_rune;

		public uint[] __runetype;

		public int[] __maplower;

		public int[] __mapupper;

		public _RuneRange __runetype_ext;

		public _RuneRange __maplower_ext;

		public _RuneRange __mapupper_ext;

		public unsafe void* __variable;

		public int __variable_len;

		public int __ncharclasses;

		public unsafe _RuneCharClass* __charclasses;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct lconv
	{
		public unsafe sbyte* decimal_point;

		public unsafe sbyte* thousands_sep;

		public unsafe sbyte* grouping;

		public unsafe sbyte* int_curr_symbol;

		public unsafe sbyte* currency_symbol;

		public unsafe sbyte* mon_decimal_point;

		public unsafe sbyte* mon_thousands_sep;

		public unsafe sbyte* mon_grouping;

		public unsafe sbyte* positive_sign;

		public unsafe sbyte* negative_sign;

		public sbyte int_frac_digits;

		public sbyte frac_digits;

		public sbyte p_cs_precedes;

		public sbyte p_sep_by_space;

		public sbyte n_cs_precedes;

		public sbyte n_sep_by_space;

		public sbyte p_sign_posn;

		public sbyte n_sign_posn;

		public sbyte int_p_cs_precedes;

		public sbyte int_n_cs_precedes;

		public sbyte int_p_sep_by_space;

		public sbyte int_n_sep_by_space;

		public sbyte int_p_sign_posn;

		public sbyte int_n_sign_posn;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct 
	{
		[FieldOffset (0)]
		public float __f;

		[FieldOffset (0)]
		public uint __u;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct 
	{
		[FieldOffset (0)]
		public double __f;

		[FieldOffset (0)]
		public ulong __u;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct 
	{
		[FieldOffset (0)]
		public [unsupported Builtin: long double] __f;

		[FieldOffset (0)]
		public ulong __u;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __float2
	{
		public float __sinval;

		public float __cosval;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __double2
	{
		public double __sinval;

		public double __cosval;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct exception
	{
		public int type;

		public unsafe sbyte* name;

		public double arg1;

		public double arg2;

		public double retval;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __darwin_arm_exception_state
	{
		public uint __exception;

		public uint __fsr;

		public uint __far;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __darwin_arm_exception_state64
	{
		public ulong __far;

		public uint __esr;

		public uint __exception;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __darwin_arm_thread_state
	{
		public uint[] __r;

		public uint __sp;

		public uint __lr;

		public uint __pc;

		public uint __cpsr;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __darwin_arm_thread_state64
	{
		public ulong[] __x;

		public ulong __fp;

		public ulong __lr;

		public ulong __sp;

		public ulong __pc;

		public uint __cpsr;

		public uint __pad;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __darwin_arm_vfp_state
	{
		public uint[] __r;

		public uint __fpscr;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __darwin_arm_neon_state64
	{
		public [unsupported Builtin: unsigned __int128][] __v;

		public uint __fpsr;

		public uint __fpcr;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __darwin_arm_neon_state
	{
		public [unsupported Builtin: unsigned __int128][] __v;

		public uint __fpsr;

		public uint __fpcr;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __darwin_arm_amx_state_v1
	{
		public byte[][] __x;

		public byte[][] __y;

		public byte[][] __z;

		public ulong __amx_state_t_el1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __arm_pagein_state
	{
		public int __pagein_error;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct arm_legacy_debug_state
	{
		public uint[] __bvr;

		public uint[] __bcr;

		public uint[] __wvr;

		public uint[] __wcr;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __darwin_arm_debug_state32
	{
		public uint[] __bvr;

		public uint[] __bcr;

		public uint[] __wvr;

		public uint[] __wcr;

		public ulong __mdscr_el1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __darwin_arm_debug_state64
	{
		public ulong[] __bvr;

		public ulong[] __bcr;

		public ulong[] __wvr;

		public ulong[] __wcr;

		public ulong __mdscr_el1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __darwin_arm_cpmu_state64
	{
		public ulong[] __ctrs;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __darwin_mcontext32
	{
		public __darwin_arm_exception_state __es;

		public __darwin_arm_thread_state __ss;

		public __darwin_arm_vfp_state __fs;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __darwin_mcontext64
	{
		public __darwin_arm_exception_state64 __es;

		public __darwin_arm_thread_state64 __ss;

		public __darwin_arm_neon_state64 __ns;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct stack_t
	{
		public unsafe void* ss_sp;

		public nuint ss_size;

		public int ss_flags;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct ucontext_t
	{
		public int uc_onstack;

		public uint uc_sigmask;

		public __darwin_sigaltstack uc_stack;

		public unsafe __darwin_ucontext* uc_link;

		public nuint uc_mcsize;

		public unsafe __darwin_mcontext64* uc_mcontext;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct sigval
	{
		[FieldOffset (0)]
		public int sival_int;

		[FieldOffset (0)]
		public unsafe void* sival_ptr;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct sigevent
	{
		public int sigev_notify;

		public int sigev_signo;

		public sigval sigev_value;

		public unsafe Action<sigval>* sigev_notify_function;

		public unsafe pthread_attr_t* sigev_notify_attributes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct siginfo_t
	{
		public int si_signo;

		public int si_errno;

		public int si_code;

		public int si_pid;

		public uint si_uid;

		public int si_status;

		public unsafe void* si_addr;

		public sigval si_value;

		public nint si_band;

		public nuint[] __pad;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct __sigaction_u
	{
		[FieldOffset (0)]
		public unsafe Action<int>* __sa_handler;

		[FieldOffset (0)]
		public unsafe Action<int, __siginfo*, void*>* __sa_sigaction;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct __sigaction
	{
		public __sigaction_u __sigaction_u;

		public unsafe Action<void*, int, int, siginfo_t*, void*>* sa_tramp;

		public uint sa_mask;

		public int sa_flags;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct sigaction
	{
		public __sigaction_u __sigaction_u;

		public uint sa_mask;

		public int sa_flags;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct sigvec
	{
		public unsafe Action<int>* sv_handler;

		public int sv_mask;

		public int sv_flags;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct sigstack
	{
		public unsafe sbyte* ss_sp;

		public int ss_onstack;
	}

	public enum idtype_t : uint
	{
		All,
		Pid,
		Pgid
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct timeval
	{
		public nint tv_sec;

		public int tv_usec;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct rusage
	{
		public timeval ru_utime;

		public timeval ru_stime;

		public nint ru_maxrss;

		public nint ru_ixrss;

		public nint ru_idrss;

		public nint ru_isrss;

		public nint ru_minflt;

		public nint ru_majflt;

		public nint ru_nswap;

		public nint ru_inblock;

		public nint ru_oublock;

		public nint ru_msgsnd;

		public nint ru_msgrcv;

		public nint ru_nsignals;

		public nint ru_nvcsw;

		public nint ru_nivcsw;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct rusage_info_v0
	{
		public byte[] ri_uuid;

		public ulong ri_user_time;

		public ulong ri_system_time;

		public ulong ri_pkg_idle_wkups;

		public ulong ri_interrupt_wkups;

		public ulong ri_pageins;

		public ulong ri_wired_size;

		public ulong ri_resident_size;

		public ulong ri_phys_footprint;

		public ulong ri_proc_start_abstime;

		public ulong ri_proc_exit_abstime;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct rusage_info_v1
	{
		public byte[] ri_uuid;

		public ulong ri_user_time;

		public ulong ri_system_time;

		public ulong ri_pkg_idle_wkups;

		public ulong ri_interrupt_wkups;

		public ulong ri_pageins;

		public ulong ri_wired_size;

		public ulong ri_resident_size;

		public ulong ri_phys_footprint;

		public ulong ri_proc_start_abstime;

		public ulong ri_proc_exit_abstime;

		public ulong ri_child_user_time;

		public ulong ri_child_system_time;

		public ulong ri_child_pkg_idle_wkups;

		public ulong ri_child_interrupt_wkups;

		public ulong ri_child_pageins;

		public ulong ri_child_elapsed_abstime;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct rusage_info_v2
	{
		public byte[] ri_uuid;

		public ulong ri_user_time;

		public ulong ri_system_time;

		public ulong ri_pkg_idle_wkups;

		public ulong ri_interrupt_wkups;

		public ulong ri_pageins;

		public ulong ri_wired_size;

		public ulong ri_resident_size;

		public ulong ri_phys_footprint;

		public ulong ri_proc_start_abstime;

		public ulong ri_proc_exit_abstime;

		public ulong ri_child_user_time;

		public ulong ri_child_system_time;

		public ulong ri_child_pkg_idle_wkups;

		public ulong ri_child_interrupt_wkups;

		public ulong ri_child_pageins;

		public ulong ri_child_elapsed_abstime;

		public ulong ri_diskio_bytesread;

		public ulong ri_diskio_byteswritten;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct rusage_info_v3
	{
		public byte[] ri_uuid;

		public ulong ri_user_time;

		public ulong ri_system_time;

		public ulong ri_pkg_idle_wkups;

		public ulong ri_interrupt_wkups;

		public ulong ri_pageins;

		public ulong ri_wired_size;

		public ulong ri_resident_size;

		public ulong ri_phys_footprint;

		public ulong ri_proc_start_abstime;

		public ulong ri_proc_exit_abstime;

		public ulong ri_child_user_time;

		public ulong ri_child_system_time;

		public ulong ri_child_pkg_idle_wkups;

		public ulong ri_child_interrupt_wkups;

		public ulong ri_child_pageins;

		public ulong ri_child_elapsed_abstime;

		public ulong ri_diskio_bytesread;

		public ulong ri_diskio_byteswritten;

		public ulong ri_cpu_time_qos_default;

		public ulong ri_cpu_time_qos_maintenance;

		public ulong ri_cpu_time_qos_background;

		public ulong ri_cpu_time_qos_utility;

		public ulong ri_cpu_time_qos_legacy;

		public ulong ri_cpu_time_qos_user_initiated;

		public ulong ri_cpu_time_qos_user_interactive;

		public ulong ri_billed_system_time;

		public ulong ri_serviced_system_time;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct rusage_info_current
	{
		public byte[] ri_uuid;

		public ulong ri_user_time;

		public ulong ri_system_time;

		public ulong ri_pkg_idle_wkups;

		public ulong ri_interrupt_wkups;

		public ulong ri_pageins;

		public ulong ri_wired_size;

		public ulong ri_resident_size;

		public ulong ri_phys_footprint;

		public ulong ri_proc_start_abstime;

		public ulong ri_proc_exit_abstime;

		public ulong ri_child_user_time;

		public ulong ri_child_system_time;

		public ulong ri_child_pkg_idle_wkups;

		public ulong ri_child_interrupt_wkups;

		public ulong ri_child_pageins;

		public ulong ri_child_elapsed_abstime;

		public ulong ri_diskio_bytesread;

		public ulong ri_diskio_byteswritten;

		public ulong ri_cpu_time_qos_default;

		public ulong ri_cpu_time_qos_maintenance;

		public ulong ri_cpu_time_qos_background;

		public ulong ri_cpu_time_qos_utility;

		public ulong ri_cpu_time_qos_legacy;

		public ulong ri_cpu_time_qos_user_initiated;

		public ulong ri_cpu_time_qos_user_interactive;

		public ulong ri_billed_system_time;

		public ulong ri_serviced_system_time;

		public ulong ri_logical_writes;

		public ulong ri_lifetime_max_phys_footprint;

		public ulong ri_instructions;

		public ulong ri_cycles;

		public ulong ri_billed_energy;

		public ulong ri_serviced_energy;

		public ulong ri_interval_max_phys_footprint;

		public ulong ri_runnable_time;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct rlimit
	{
		public ulong rlim_cur;

		public ulong rlim_max;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct proc_rlimit_control_wakeupmon
	{
		public uint wm_flags;

		public int wm_rate;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct wait
	{
		[FieldOffset (0)]
		public int w_status;

		[StructLayout (LayoutKind.Sequential)]
		public struct W_T
		{
			public uint w_Termsig;

			public uint w_Coredump;

			public uint w_Retcode;

			public uint w_Filler;
		}


		[FieldOffset (0)]
		public W_T w_T;

		[StructLayout (LayoutKind.Sequential)]
		public struct W_S
		{
			public uint w_Stopval;

			public uint w_Stopsig;

			public uint w_Filler;
		}


		[FieldOffset (0)]
		public W_S w_S;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct div_t
	{
		public int quot;

		public int rem;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct ldiv_t
	{
		public nint quot;

		public nint rem;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct lldiv_t
	{
		public long quot;

		public long rem;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct imaxdiv_t
	{
		public nint quot;

		public nint rem;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CompTimeValue
	{
		public uint lo;

		public int hi;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct AbsoluteTime
	{
		public uint lo;

		public uint hi;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct extended80
	{
		public short exp;

		public ushort[] man;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct extended96
	{
		public short[] exp;

		public ushort[] man;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct Float32Point
	{
		public float x;

		public float y;
	}

	public enum  : uint
	{
		noErr = 0
	}

	public enum  : uint
	{
		NilOptions = 0
	}

	public enum  : uint
	{
		VariableLengthArray = 1
	}

	public enum  : uint
	{
		UnknownType = 1061109567
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct ProcessSerialNumber
	{
		public uint highLongOfPSN;

		public uint lowLongOfPSN;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct Point
	{
		public short v;

		public short h;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct Rect
	{
		public short top;

		public short left;

		public short bottom;

		public short right;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct FixedPoint
	{
		public int x;

		public int y;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct FixedRect
	{
		public int left;

		public int top;

		public int right;

		public int bottom;
	}

	public enum  : uint
	{
		normal = 0,
		bold = 1,
		italic = 2,
		underline = 4,
		outline = 8,
		shadow = 16,
		condense = 32,
		extend = 64
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct TimeRecord
	{
		public CompTimeValue value;

		public int scale;

		public unsafe TimeBase* @base;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NumVersion
	{
		public byte nonRelRev;

		public byte stage;

		public byte minorAndBugRev;

		public byte majorRev;
	}

	public enum  : uint
	{
		developStage = 32,
		alphaStage = 64,
		betaStage = 96,
		finalStage = 128
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NumVersionVariant
	{
		[FieldOffset (0)]
		public NumVersion parts;

		[FieldOffset (0)]
		public uint whole;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct VersRec
	{
		public NumVersion numericVersion;

		public short countryCode;

		public byte[] shortVersion;

		public byte[] reserved;
	}

	[Native]
	public enum CFComparisonResult : long
	{
		LessThan = -1,
		EqualTo = 0,
		GreaterThan = 1
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CFRange
	{
		public nint location;

		public nint length;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CFAllocatorContext
	{
		public nint version;

		public unsafe void* info;

		public unsafe CFAllocatorRetainCallBack* retain;

		public unsafe CFAllocatorReleaseCallBack* release;

		public unsafe CFAllocatorCopyDescriptionCallBack* copyDescription;

		public unsafe CFAllocatorAllocateCallBack* allocate;

		public unsafe CFAllocatorReallocateCallBack* reallocate;

		public unsafe CFAllocatorDeallocateCallBack* deallocate;

		public unsafe CFAllocatorPreferredSizeCallBack* preferredSize;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CFArrayCallBacks
	{
		public nint version;

		public unsafe CFArrayRetainCallBack* retain;

		public unsafe CFArrayReleaseCallBack* release;

		public unsafe CFArrayCopyDescriptionCallBack* copyDescription;

		public unsafe CFArrayEqualCallBack* equal;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CFBagCallBacks
	{
		public nint version;

		public unsafe CFBagRetainCallBack* retain;

		public unsafe CFBagReleaseCallBack* release;

		public unsafe CFBagCopyDescriptionCallBack* copyDescription;

		public unsafe CFBagEqualCallBack* equal;

		public unsafe CFBagHashCallBack* hash;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CFBinaryHeapCompareContext
	{
		public nint version;

		public unsafe void* info;

		public unsafe Func<void*, void*>* retain;

		public unsafe Action<void*>* release;

		public unsafe Func<void*, CoreFoundation.CFStringRef*>* copyDescription;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CFBinaryHeapCallBacks
	{
		public nint version;

		public unsafe Func<CoreFoundation.CFAllocatorRef*, void*, void*>* retain;

		public unsafe Action<CoreFoundation.CFAllocatorRef*, void*>* release;

		public unsafe Func<void*, CoreFoundation.CFStringRef*>* copyDescription;

		public unsafe Func<void*, void*, void*, CFComparisonResult>* compare;
	}

	[Verify (InferredFromMemberPrefix)]
	public enum Os : uint
	{
		UnknownByteOrder,
		LittleEndian,
		BigEndian
	}

	public enum __CFByteOrder : uint
	{
		Unknown,
		LittleEndian,
		BigEndian
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CFSwappedFloat32
	{
		public uint v;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CFSwappedFloat64
	{
		public ulong v;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct CFSwap
	{
		[FieldOffset (0)]
		public float v;

		[FieldOffset (0)]
		public CFSwappedFloat32 sv;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct CFSwap
	{
		[FieldOffset (0)]
		public float v;

		[FieldOffset (0)]
		public CFSwappedFloat32 sv;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct CFSwap
	{
		[FieldOffset (0)]
		public double v;

		[FieldOffset (0)]
		public CFSwappedFloat64 sv;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct CFSwap
	{
		[FieldOffset (0)]
		public double v;

		[FieldOffset (0)]
		public CFSwappedFloat64 sv;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct CFSwap
	{
		[FieldOffset (0)]
		public float v;

		[FieldOffset (0)]
		public CFSwappedFloat32 sv;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct CFSwap
	{
		[FieldOffset (0)]
		public float v;

		[FieldOffset (0)]
		public CFSwappedFloat32 sv;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct CFSwap
	{
		[FieldOffset (0)]
		public double v;

		[FieldOffset (0)]
		public CFSwappedFloat64 sv;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct CFSwap
	{
		[FieldOffset (0)]
		public double v;

		[FieldOffset (0)]
		public CFSwappedFloat64 sv;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CFDictionaryKeyCallBacks
	{
		public nint version;

		public unsafe CFDictionaryRetainCallBack* retain;

		public unsafe CFDictionaryReleaseCallBack* release;

		public unsafe CFDictionaryCopyDescriptionCallBack* copyDescription;

		public unsafe CFDictionaryEqualCallBack* equal;

		public unsafe CFDictionaryHashCallBack* hash;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CFDictionaryValueCallBacks
	{
		public nint version;

		public unsafe CFDictionaryRetainCallBack* retain;

		public unsafe CFDictionaryReleaseCallBack* release;

		public unsafe CFDictionaryCopyDescriptionCallBack* copyDescription;

		public unsafe CFDictionaryEqualCallBack* equal;
	}

	[Native]
	public enum CFNotificationSuspensionBehavior : long
	{
		Drop = 1,
		Coalesce = 2,
		Hold = 3,
		DeliverImmediately = 4
	}

	[Native]
	[Verify (InferredFromMemberPrefix)]
	public enum kCFNotification : ulong
	{
		DeliverImmediately = (1uL << 0),
		PostToAllSessions = (1uL << 1)
	}

	[Native]
	public enum CFLocaleLanguageDirection : long
	{
		Unknown = 0,
		LeftToRight = 1,
		RightToLeft = 2,
		TopToBottom = 3,
		BottomToTop = 4
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CFGregorianDate
	{
		public int year;

		public sbyte month;

		public sbyte day;

		public sbyte hour;

		public sbyte minute;

		public double second;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CFGregorianUnits
	{
		public int years;

		public int months;

		public int days;

		public int hours;

		public int minutes;

		public double seconds;
	}

	[Flags]
	[Native]
	public enum CFGregorianUnitFlags : ulong
	{
		UnitsYears = (1uL << 0),
		UnitsMonths = (1uL << 1),
		UnitsDays = (1uL << 2),
		UnitsHours = (1uL << 3),
		UnitsMinutes = (1uL << 4),
		UnitsSeconds = (1uL << 5),
		AllUnits = 0xffffff
	}

	[Watch (0x2,0x0), TV (0x9,0x0), Flags, Mac (0xa,0x6), iOS (0x4,0x0)]
	[Native]
	public enum CFDataSearchFlags : ulong
	{
		Backwards = 1uL << 0,
		Anchored = 1uL << 1
	}

	[Native]
	public enum CFCharacterSetPredefinedSet : long
	{
		Control = 1,
		Whitespace,
		WhitespaceAndNewline,
		DecimalDigit,
		Letter,
		LowercaseLetter,
		UppercaseLetter,
		NonBase,
		Decomposable,
		AlphaNumeric,
		Punctuation,
		CapitalizedLetter = 13,
		Symbol = 14,
		Newline = 15,
		Illegal = 12
	}

	public enum CFStringBuiltInEncodings : uint
	{
		MacRoman = 0,
		WindowsLatin1 = 1280,
		ISOLatin1 = 513,
		NextStepLatin = 2817,
		Ascii = 1536,
		Unicode = 256,
		Utf8 = 134217984,
		NonLossyASCII = 3071,
		Utf16 = 256,
		Utf16be = 268435712,
		Utf16le = 335544576,
		Utf32 = 201326848,
		Utf32be = 402653440,
		Utf32le = 469762304
	}

	[Flags]
	[Native]
	public enum CFStringCompareFlags : ulong
	{
		CaseInsensitive = 0x1,
		Backwards = 0x4,
		Anchored = 0x8,
		Nonliteral = 0x10,
		Localized = 0x20,
		Numerically = 0x40,
		DiacriticInsensitive = 0x80,
		WidthInsensitive = 0x100,
		ForcedOrdering = 0x200
	}

	[Native]
	public enum CFStringNormalizationForm : long
	{
		D = 0,
		Kd,
		C,
		Kc
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CFStringInlineBuffer
	{
		public ushort[] buffer;

		public unsafe CFStringRef* theString;

		public unsafe ushort* directUniCharBuffer;

		public unsafe sbyte* directCStringBuffer;

		public CFRange rangeToBuffer;

		public nint bufferedRangeStart;

		public nint bufferedRangeEnd;
	}

	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	[Native]
	public enum CFTimeZoneNameStyle : long
	{
		Standard,
		ShortStandard,
		DaylightSaving,
		ShortDaylightSaving,
		Generic,
		ShortGeneric
	}

	[Flags]
	[Native]
	public enum CFCalendarUnit : ulong
	{
		Era = (1uL << 1),
		Year = (1uL << 2),
		Month = (1uL << 3),
		Day = (1uL << 4),
		Hour = (1uL << 5),
		Minute = (1uL << 6),
		Second = (1uL << 7),
		Week = (1uL << 8),
		Weekday = (1uL << 9),
		WeekdayOrdinal = (1uL << 10),
		Quarter = (1uL << 11),
		WeekOfMonth = (1uL << 12),
		WeekOfYear = (1uL << 13),
		YearForWeekOfYear = (1uL << 14)
	}

	[Native]
	public enum  : ulong
	{
		CFCalendarComponentsWrap = (1uL << 0)
	}

	[Native]
	public enum CFDateFormatterStyle : long
	{
		NoStyle = 0,
		ShortStyle = 1,
		MediumStyle = 2,
		LongStyle = 3,
		FullStyle = 4
	}

	[Flags]
	[Native]
	public enum CFISO8601DateFormatOptions : ulong
	{
		Year = (1uL << 0),
		Month = (1uL << 1),
		WeekOfYear = (1uL << 2),
		Day = (1uL << 4),
		Time = (1uL << 5),
		TimeZone = (1uL << 6),
		SpaceBetweenDateAndTime = (1uL << 7),
		DashSeparatorInDate = (1uL << 8),
		ColonSeparatorInTime = (1uL << 9),
		ColonSeparatorInTimeZone = (1uL << 10),
		FractionalSeconds = (1uL << 11),
		FullDate = Year | Month | Day | DashSeparatorInDate,
		FullTime = Time | ColonSeparatorInTime | TimeZone | ColonSeparatorInTimeZone,
		InternetDateTime = FullDate | FullTime
	}

	[Native]
	public enum CFNumberType : long
	{
		SInt8Type = 1,
		SInt16Type = 2,
		SInt32Type = 3,
		SInt64Type = 4,
		Float32Type = 5,
		Float64Type = 6,
		CharType = 7,
		ShortType = 8,
		IntType = 9,
		LongType = 10,
		LongLongType = 11,
		FloatType = 12,
		DoubleType = 13,
		CFIndexType = 14,
		NSIntegerType = 15,
		CGFloatType = 16,
		MaxType = 16
	}

	[Native]
	public enum CFNumberFormatterStyle : long
	{
		NoStyle = 0,
		DecimalStyle = 1,
		CurrencyStyle = 2,
		PercentStyle = 3,
		ScientificStyle = 4,
		SpellOutStyle = 5,
		OrdinalStyle = 6,
		CurrencyISOCodeStyle = 8,
		CurrencyPluralStyle = 9,
		CurrencyAccountingStyle = 10
	}

	[Flags]
	[Native]
	public enum CFNumberFormatterOptionFlags : ulong
	{
		CFNumberFormatterParseIntegersOnly = 0x1
	}

	[Native]
	public enum CFNumberFormatterRoundingMode : long
	{
		Ceiling = 0,
		Floor = 1,
		Down = 2,
		Up = 3,
		HalfEven = 4,
		HalfDown = 5,
		HalfUp = 6
	}

	[Native]
	public enum CFNumberFormatterPadPosition : long
	{
		BeforePrefix = 0,
		AfterPrefix = 1,
		BeforeSuffix = 2,
		AfterSuffix = 3
	}

	[Native]
	public enum CFURLPathStyle : long
	{
		POSIXPathStyle = 0,
		HFSPathStyle,
		WindowsPathStyle
	}

	[Native]
	public enum CFURLComponentType : long
	{
		Scheme = 1,
		NetLocation = 2,
		Path = 3,
		ResourceSpecifier = 4,
		User = 5,
		Password = 6,
		UserInfo = 7,
		Host = 8,
		Port = 9,
		ParameterString = 10,
		Query = 11,
		Fragment = 12
	}

	[Watch (0x2,0x0), TV (0x9,0x0), Flags, Mac (0xa,0x6), iOS (0x4,0x0)]
	[Native]
	public enum CFURLBookmarkCreationOptions : ulong
	{
		MinimalBookmarkMask = (1uL << 9),
		SuitableForBookmarkFile = (1uL << 10),
		WithSecurityScope = (1uL << 11),
		SecurityScopeAllowOnlyReadAccess = (1uL << 12),
		PreferFileIDResolutionMask = (1uL << 8)
	}

	[Watch (0x2,0x0), TV (0x9,0x0), Flags, Mac (0xa,0x6), iOS (0x4,0x0)]
	[Native]
	public enum CFURLBookmarkResolutionOptions : ulong
	{
		URLBookmarkResolutionWithoutUIMask = (1uL << 8),
		URLBookmarkResolutionWithoutMountingMask = (1uL << 9),
		URLBookmarkResolutionWithSecurityScope = (1uL << 10),
		BookmarkResolutionWithoutUIMask = URLBookmarkResolutionWithoutUIMask,
		BookmarkResolutionWithoutMountingMask = URLBookmarkResolutionWithoutMountingMask
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_port_status_t
	{
		public uint mps_pset;

		public uint mps_seqno;

		public uint mps_mscount;

		public uint mps_qlimit;

		public uint mps_msgcount;

		public uint mps_sorights;

		public int mps_srights;

		public int mps_pdrequest;

		public int mps_nsrequest;

		public uint mps_flags;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_port_limits_t
	{
		public uint mpl_qlimit;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_port_info_ext_t
	{
		public mach_port_status_t mpie_status;

		public uint mpie_boost_cnt;

		public uint[] reserved;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_port_qos_t
	{
		public uint name;

		public uint prealloc;

		public int pad1;

		public uint len;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_port_options_t
	{
		public uint flags;

		public mach_port_limits_t mpl;

		public ulong[] reserved;
	}

	public enum mach_port_guard_exception_codes : uint
	{
		Destroy = 1 << 0,
		ModRefs = 1 << 1,
		SetContext = 1 << 2,
		Unguarded = 1 << 3,
		IncorrectGuard = 1 << 4,
		Immovable = 1 << 5,
		StrictReply = 1 << 6,
		InvalidRight = 1 << 8,
		InvalidName = 1 << 9,
		InvalidValue = 1 << 10,
		InvalidArgument = 1 << 11,
		RightExists = 1 << 12,
		KernNoSpace = 1 << 13,
		KernFailure = 1 << 14,
		KernResource = 1 << 15,
		SendInvalidReply = 1 << 16,
		SendInvalidVoucher = 1 << 17,
		SendInvalidRight = 1 << 18,
		RcvInvalidName = 1 << 19,
		RcvGuardedDesc = 1 << 20
	}

	public enum CFRunLoopRunResult
	{
		Finished = 1,
		Stopped = 2,
		TimedOut = 3,
		HandledSource = 4
	}

	[Flags]
	[Native]
	public enum CFRunLoopActivity : ulong
	{
		Entry = (1uL << 0),
		BeforeTimers = (1uL << 1),
		BeforeSources = (1uL << 2),
		BeforeWaiting = (1uL << 5),
		AfterWaiting = (1uL << 6),
		Exit = (1uL << 7),
		AllActivities = 0xfffffff
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CFRunLoopSourceContext
	{
		public nint version;

		public unsafe void* info;

		public unsafe Func<void*, void*>* retain;

		public unsafe Action<void*>* release;

		public unsafe Func<void*, CoreFoundation.CFStringRef*>* copyDescription;

		public unsafe Func<void*, void*, byte>* equal;

		public unsafe Func<void*, nuint>* hash;

		public unsafe Action<void*, CoreFoundation.CFRunLoopRef*, CoreFoundation.CFRunLoopMode*>* schedule;

		public unsafe Action<void*, CoreFoundation.CFRunLoopRef*, CoreFoundation.CFRunLoopMode*>* cancel;

		public unsafe Action<void*>* perform;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CFRunLoopSourceContext1
	{
		public nint version;

		public unsafe void* info;

		public unsafe Func<void*, void*>* retain;

		public unsafe Action<void*>* release;

		public unsafe Func<void*, CoreFoundation.CFStringRef*>* copyDescription;

		public unsafe Func<void*, void*, byte>* equal;

		public unsafe Func<void*, nuint>* hash;

		public unsafe Func<void*, uint>* getPort;

		public unsafe Func<void*, nint, CoreFoundation.CFAllocatorRef*, void*, void*>* perform;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CFRunLoopObserverContext
	{
		public nint version;

		public unsafe void* info;

		public unsafe Func<void*, void*>* retain;

		public unsafe Action<void*>* release;

		public unsafe Func<void*, CoreFoundation.CFStringRef*>* copyDescription;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CFRunLoopTimerContext
	{
		public nint version;

		public unsafe void* info;

		public unsafe Func<void*, void*>* retain;

		public unsafe Action<void*>* release;

		public unsafe Func<void*, CoreFoundation.CFStringRef*>* copyDescription;
	}

	[Native]
	public enum CFSocketError : long
	{
		Success = 0,
		Error = -1,
		Timeout = -2
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CFSocketSignature
	{
		public int protocolFamily;

		public int socketType;

		public int protocol;

		public unsafe CFDataRef* address;
	}

	[Flags]
	[Native]
	public enum CFSocketCallBackType : ulong
	{
		NoCallBack = 0x0,
		ReadCallBack = 0x1,
		AcceptCallBack = 0x2,
		DataCallBack = 0x3,
		ConnectCallBack = 0x4,
		WriteCallBack = 0x8
	}

	[Native]
	[Verify (InferredFromMemberPrefix)]
	public enum kCFSocket : ulong
	{
		AutomaticallyReenableReadCallBack = 1,
		AutomaticallyReenableAcceptCallBack = 2,
		AutomaticallyReenableDataCallBack = 3,
		AutomaticallyReenableWriteCallBack = 8,
		LeaveErrors = 64,
		CloseOnInvalidate = 128
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CFSocketContext
	{
		public nint version;

		public unsafe void* info;

		public unsafe Func<void*, void*>* retain;

		public unsafe Action<void*>* release;

		public unsafe Func<void*, CoreFoundation.CFStringRef*>* copyDescription;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct accessx_descriptor
	{
		public uint ad_name_offset;

		public int ad_flags;

		public int[] ad_pad;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct flock
	{
		public long l_start;

		public long l_len;

		public int l_pid;

		public short l_type;

		public short l_whence;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct flocktimeout
	{
		public flock fl;

		public timespec timeout;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct radvisory
	{
		public long ra_offset;

		public int ra_count;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct fcodeblobs_t
	{
		public unsafe void* f_cd_hash;

		public nuint f_hash_size;

		public unsafe void* f_cd_buffer;

		public nuint f_cd_size;

		public unsafe uint* f_out_size;

		public int f_arch;

		public int __padding;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct fsignatures_t
	{
		public long fs_file_start;

		public unsafe void* fs_blob_start;

		public nuint fs_blob_size;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct fchecklv_t
	{
		public long lv_file_start;

		public nuint lv_error_message_size;

		public unsafe void* lv_error_message;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct fstore_t
	{
		public uint fst_flags;

		public int fst_posmode;

		public long fst_offset;

		public long fst_length;

		public long fst_bytesalloc;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct fpunchhole_t
	{
		public uint fp_flags;

		public uint reserved;

		public long fp_offset;

		public long fp_length;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct ftrimactivefile_t
	{
		public long fta_offset;

		public long fta_length;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct fspecread_t
	{
		public uint fsr_flags;

		public uint reserved;

		public long fsr_offset;

		public long fsr_length;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct fbootstraptransfer_t
	{
		public long fbt_offset;

		public nuint fbt_length;

		public unsafe void* fbt_buffer;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct log2phys
	{
		public uint l2p_flags;

		public long l2p_contigbytes;

		public long l2p_devoffset;
	}

	public enum filesec_property_t : uint
	{
		Owner = 1,
		Group = 2,
		Uuid = 3,
		Mode = 4,
		Acl = 5,
		Grpuuid = 6,
		AclRaw = 100,
		AclAllocsize = 101
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct objc_object
	{
		public Class isa;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct time_value_t
	{
		public int seconds;

		public int microseconds;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_timespec_t
	{
		public uint tv_sec;

		public int tv_nsec;
	}

	[Native]
	public enum  : ulong
	{
		DispatchWalltimeNow = ~1
	}

	[Native]
	public enum dispatch_autorelease_frequency_t : ulong
	{
		Inherit = 0,
		WorkItem = 1,
		Never = 2
	}

	[Flags]
	[Native]
	public enum dispatch_block_flags_t : ulong
	{
		Barrier = 0x1,
		Detached = 0x2,
		AssignCurrent = 0x4,
		NoQosClass = 0x8,
		InheritQosClass = 0x10,
		EnforceQosClass = 0x20
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_msg_type_descriptor_t
	{
		public uint pad1;

		public uint pad2;

		public uint pad3;

		public uint type;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_msg_port_descriptor_t
	{
		public uint name;

		public uint pad1;

		public uint pad2;

		public uint disposition;

		public uint type;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_msg_ool_descriptor32_t
	{
		public uint address;

		public uint size;

		public int deallocate;

		public uint copy;

		public uint pad1;

		public uint type;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_msg_ool_descriptor64_t
	{
		public ulong address;

		public int deallocate;

		public uint copy;

		public uint pad1;

		public uint type;

		public uint size;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_msg_ool_descriptor_t
	{
		public unsafe void* address;

		public int deallocate;

		public uint copy;

		public uint pad1;

		public uint type;

		public uint size;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_msg_ool_ports_descriptor32_t
	{
		public uint address;

		public uint count;

		public int deallocate;

		public uint copy;

		public uint disposition;

		public uint type;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_msg_ool_ports_descriptor64_t
	{
		public ulong address;

		public int deallocate;

		public uint copy;

		public uint disposition;

		public uint type;

		public uint count;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_msg_ool_ports_descriptor_t
	{
		public unsafe void* address;

		public int deallocate;

		public uint copy;

		public uint disposition;

		public uint type;

		public uint count;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_msg_guarded_port_descriptor32_t
	{
		public uint context;

		public uint name;

		public uint flags;

		public uint disposition;

		public uint type;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_msg_guarded_port_descriptor64_t
	{
		public ulong context;

		public uint flags;

		public uint disposition;

		public uint type;

		public uint name;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_msg_guarded_port_descriptor_t
	{
		public UIntPtr context;

		public uint flags;

		public uint disposition;

		public uint type;

		public uint name;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct mach_msg_descriptor_t
	{
		[FieldOffset (0)]
		public mach_msg_port_descriptor_t port;

		[FieldOffset (0)]
		public mach_msg_ool_descriptor_t out_of_line;

		[FieldOffset (0)]
		public mach_msg_ool_ports_descriptor_t ool_ports;

		[FieldOffset (0)]
		public mach_msg_type_descriptor_t type;

		[FieldOffset (0)]
		public mach_msg_guarded_port_descriptor_t guarded_port;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_msg_body_t
	{
		public uint msgh_descriptor_count;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_msg_header_t
	{
		public uint msgh_bits;

		public uint msgh_size;

		public uint msgh_remote_port;

		public uint msgh_local_port;

		public uint msgh_voucher_port;

		public int msgh_id;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_msg_base_t
	{
		public mach_msg_header_t header;

		public mach_msg_body_t body;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_msg_trailer_t
	{
		public uint msgh_trailer_type;

		public uint msgh_trailer_size;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_msg_seqno_trailer_t
	{
		public uint msgh_trailer_type;

		public uint msgh_trailer_size;

		public uint msgh_seqno;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct security_token_t
	{
		public uint[] val;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_msg_format_0_trailer_t
	{
		public uint msgh_trailer_type;

		public uint msgh_trailer_size;

		public uint msgh_seqno;

		public security_token_t msgh_sender;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct audit_token_t
	{
		public uint[] val;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_msg_audit_trailer_t
	{
		public uint msgh_trailer_type;

		public uint msgh_trailer_size;

		public uint msgh_seqno;

		public security_token_t msgh_sender;

		public audit_token_t msgh_audit;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_msg_context_trailer_t
	{
		public uint msgh_trailer_type;

		public uint msgh_trailer_size;

		public uint msgh_seqno;

		public security_token_t msgh_sender;

		public audit_token_t msgh_audit;

		public UIntPtr msgh_context;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct msg_labels_t
	{
		public uint sender;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_msg_max_trailer_t
	{
		public uint msgh_trailer_type;

		public uint msgh_trailer_size;

		public uint msgh_seqno;

		public security_token_t msgh_sender;

		public audit_token_t msgh_audit;

		public UIntPtr msgh_context;

		public int msgh_ad;

		public msg_labels_t msgh_labels;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_msg_empty_send_t
	{
		public mach_msg_header_t header;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct mach_msg_empty_rcv_t
	{
		public mach_msg_header_t header;

		public mach_msg_trailer_t trailer;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct mach_msg_empty_t
	{
		[FieldOffset (0)]
		public mach_msg_empty_send_t send;

		[FieldOffset (0)]
		public mach_msg_empty_rcv_t rcv;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CFStreamError
	{
		public nint domain;

		public int error;
	}

	[Native]
	public enum CFStreamStatus : long
	{
		NotOpen = 0,
		Opening,
		Open,
		Reading,
		Writing,
		AtEnd,
		Closed,
		Error
	}

	[Flags]
	[Native]
	public enum CFStreamEventType : ulong
	{
		None = 0x0,
		OpenCompleted = 0x1,
		HasBytesAvailable = 0x2,
		CanAcceptBytes = 0x4,
		ErrorOccurred = 0x8,
		EndEncountered = 0x10
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CFStreamClientContext
	{
		public nint version;

		public unsafe void* info;

		public unsafe Func<void*, void*>* retain;

		public unsafe Action<void*>* release;

		public unsafe Func<void*, CoreFoundation.CFStringRef*>* copyDescription;
	}

	[Native]
	public enum CFStreamErrorDomain : long
	{
		Custom = -1,
		Posix = 1,
		MacOSStatus
	}

	[Flags]
	[Native]
	public enum CFPropertyListMutabilityOptions : ulong
	{
		Immutable = 0x0,
		MutableContainers = 1uL << 0,
		MutableContainersAndLeaves = 1uL << 1
	}

	[Native]
	public enum CFPropertyListFormat : long
	{
		OpenStepFormat = 1,
		XMLFormat_v1_0 = 100,
		BinaryFormat_v1_0 = 200
	}

	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	[Native]
	[Verify (InferredFromMemberPrefix)]
	public enum kCFPropertyList : long
	{
		ReadCorruptError = 3840,
		ReadUnknownVersionError = 3841,
		ReadStreamError = 3842,
		WriteStreamError = 3851
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CFSetCallBacks
	{
		public nint version;

		public unsafe CFSetRetainCallBack* retain;

		public unsafe CFSetReleaseCallBack* release;

		public unsafe CFSetCopyDescriptionCallBack* copyDescription;

		public unsafe CFSetEqualCallBack* equal;

		public unsafe CFSetHashCallBack* hash;
	}

	[Native]
	public enum CFStringEncodings : long
	{
		MacJapanese = 1,
		MacChineseTrad = 2,
		MacKorean = 3,
		MacArabic = 4,
		MacHebrew = 5,
		MacGreek = 6,
		MacCyrillic = 7,
		MacDevanagari = 9,
		MacGurmukhi = 10,
		MacGujarati = 11,
		MacOriya = 12,
		MacBengali = 13,
		MacTamil = 14,
		MacTelugu = 15,
		MacKannada = 16,
		MacMalayalam = 17,
		MacSinhalese = 18,
		MacBurmese = 19,
		MacKhmer = 20,
		MacThai = 21,
		MacLaotian = 22,
		MacGeorgian = 23,
		MacArmenian = 24,
		MacChineseSimp = 25,
		MacTibetan = 26,
		MacMongolian = 27,
		MacEthiopic = 28,
		MacCentralEurRoman = 29,
		MacVietnamese = 30,
		MacExtArabic = 31,
		MacSymbol = 33,
		MacDingbats = 34,
		MacTurkish = 35,
		MacCroatian = 36,
		MacIcelandic = 37,
		MacRomanian = 38,
		MacCeltic = 39,
		MacGaelic = 40,
		MacFarsi = 140,
		MacUkrainian = 152,
		MacInuit = 236,
		MacVT100 = 252,
		MacHFS = 255,
		ISOLatin2 = 514,
		ISOLatin3 = 515,
		ISOLatin4 = 516,
		ISOLatinCyrillic = 517,
		ISOLatinArabic = 518,
		ISOLatinGreek = 519,
		ISOLatinHebrew = 520,
		ISOLatin5 = 521,
		ISOLatin6 = 522,
		ISOLatinThai = 523,
		ISOLatin7 = 525,
		ISOLatin8 = 526,
		ISOLatin9 = 527,
		ISOLatin10 = 528,
		DOSLatinUS = 1024,
		DOSGreek = 1029,
		DOSBalticRim = 1030,
		DOSLatin1 = 1040,
		DOSGreek1 = 1041,
		DOSLatin2 = 1042,
		DOSCyrillic = 1043,
		DOSTurkish = 1044,
		DOSPortuguese = 1045,
		DOSIcelandic = 1046,
		DOSHebrew = 1047,
		DOSCanadianFrench = 1048,
		DOSArabic = 1049,
		DOSNordic = 1050,
		DOSRussian = 1051,
		DOSGreek2 = 1052,
		DOSThai = 1053,
		DOSJapanese = 1056,
		DOSChineseSimplif = 1057,
		DOSKorean = 1058,
		DOSChineseTrad = 1059,
		WindowsLatin2 = 1281,
		WindowsCyrillic = 1282,
		WindowsGreek = 1283,
		WindowsLatin5 = 1284,
		WindowsHebrew = 1285,
		WindowsArabic = 1286,
		WindowsBalticRim = 1287,
		WindowsVietnamese = 1288,
		WindowsKoreanJohab = 1296,
		Ansel = 1537,
		JisX020176 = 1568,
		JisX020883 = 1569,
		JisX020890 = 1570,
		JisX021290 = 1571,
		JisC622678 = 1572,
		ShiftJIS_X0213 = 1576,
		ShiftJIS_X0213_MenKuTen = 1577,
		Gb231280 = 1584,
		Gbk95 = 1585,
		Gb180302000 = 1586,
		Ksc560187 = 1600,
		KSC_5601_92_Johab = 1601,
		Cns1164392P1 = 1617,
		Cns1164392P2 = 1618,
		Cns1164392P3 = 1619,
		Iso2022Jp = 2080,
		Iso2022Jp2 = 2081,
		Iso2022Jp1 = 2082,
		Iso2022Jp3 = 2083,
		Iso2022Cn = 2096,
		Iso2022CnExt = 2097,
		Iso2022Kr = 2112,
		EucJp = 2336,
		EucCn = 2352,
		EucTw = 2353,
		EucKr = 2368,
		ShiftJIS = 2561,
		Koi8R = 2562,
		Big5 = 2563,
		MacRomanLatin1 = 2564,
		HzGb2312 = 2565,
		Big5_HKSCS_1999 = 2566,
		Viscii = 2567,
		Koi8U = 2568,
		Big5_E = 2569,
		NextStepJapanese = 2818,
		EbcdicUs = 3073,
		EbcdicCp037 = 3074,
		Utf7 = 67109120,
		Utf7Imap = 2576,
		ShiftJIS_X0213_00 = 1576
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CFTreeContext
	{
		public nint version;

		public unsafe void* info;

		public unsafe CFTreeRetainCallBack* retain;

		public unsafe CFTreeReleaseCallBack* release;

		public unsafe CFTreeCopyDescriptionCallBack* copyDescription;
	}

	[Introduced (PlatformName.MacOSX, 10, 0, message: "Use CFError codes instead")]
	[Deprecated (PlatformName.MacOSX, 10, 9, message: "Use CFError codes instead")]
	[Introduced (PlatformName.iOS, 2, 0, message: "Use CFError codes instead")]
	[Deprecated (PlatformName.iOS, 7, 0, message: "Use CFError codes instead")]
	[Introduced (PlatformName.WatchOS, 2, 0, message: "Use CFError codes instead")]
	[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use CFError codes instead")]
	[Introduced (PlatformName.TvOS, 9, 0, message: "Use CFError codes instead")]
	[Deprecated (PlatformName.TvOS, 9, 0, message: "Use CFError codes instead")]
	[Native]
	public enum CFURLError : long
	{
		UnknownError = -10,
		UnknownSchemeError = -11,
		ResourceNotFoundError = -12,
		ResourceAccessViolationError = -13,
		RemoteHostUnavailableError = -14,
		ImproperArgumentsError = -15,
		UnknownPropertyKeyError = -16,
		PropertyKeyUnavailableError = -17,
		TimeoutError = -18
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CFUUIDBytes
	{
		public byte byte0;

		public byte byte1;

		public byte byte2;

		public byte byte3;

		public byte byte4;

		public byte byte5;

		public byte byte6;

		public byte byte7;

		public byte byte8;

		public byte byte9;

		public byte byte10;

		public byte byte11;

		public byte byte12;

		public byte byte13;

		public byte byte14;

		public byte byte15;
	}

	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	[Verify (InferredFromMemberPrefix)]
	public enum kCFBundleExecutableArchitecture : uint
	{
		I386 = 7,
		Ppc = 18,
		X8664 = 16777223,
		Ppc64 = 16777234
	}

	[Verify (InferredFromMemberPrefix)]
	public enum kCFMessagePort
	{
		Success = 0,
		SendTimeout = -1,
		ReceiveTimeout = -2,
		IsInvalid = -3,
		TransportError = -4,
		BecameInvalidError = -5
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CFMessagePortContext
	{
		public nint version;

		public unsafe void* info;

		public unsafe Func<void*, void*>* retain;

		public unsafe Action<void*>* release;

		public unsafe Func<void*, CoreFoundation.CFStringRef*>* copyDescription;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CFMachPortContext
	{
		public nint version;

		public unsafe void* info;

		public unsafe Func<void*, void*>* retain;

		public unsafe Action<void*>* release;

		public unsafe Func<void*, CoreFoundation.CFStringRef*>* copyDescription;
	}

	[Flags]
	[Native]
	public enum CFURLEnumeratorOptions : ulong
	{
		DefaultBehavior = 0x0,
		DescendRecursively = 1uL << 0,
		SkipInvisibles = 1uL << 1,
		GenerateFileReferenceURLs = 1uL << 2,
		SkipPackageContents = 1uL << 3,
		IncludeDirectoriesPreOrder = 1uL << 4,
		IncludeDirectoriesPostOrder = 1uL << 5,
		GenerateRelativePathURLs = 1uL << 6
	}

	[Native]
	public enum CFURLEnumeratorResult : long
	{
		Success = 1,
		End = 2,
		Error = 3,
		DirectoryPostOrderSuccess = 4
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct guid_t
	{
		[FieldOffset (0)]
		public byte[] g_guid;

		[FieldOffset (0)]
		public uint[] g_guid_asint;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct ntsid_t
	{
		public byte sid_kind;

		public byte sid_authcount;

		public byte[] sid_authority;

		public uint[] sid_authorities;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct kauth_identity_extlookup
	{
		public uint el_seqno;

		public uint el_result;

		public uint el_flags;

		public int el_info_pid;

		public ulong el_extend;

		public uint el_info_reserved_1;

		public uint el_uid;

		public guid_t el_uguid;

		public uint el_uguid_valid;

		public ntsid_t el_usid;

		public uint el_usid_valid;

		public uint el_gid;

		public guid_t el_gguid;

		public uint el_gguid_valid;

		public ntsid_t el_gsid;

		public uint el_gsid_valid;

		public uint el_member_valid;

		public uint el_sup_grp_cnt;

		public uint[] el_sup_groups;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct kauth_cache_sizes
	{
		public uint kcs_group_size;

		public uint kcs_id_size;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct kauth_ace
	{
		public guid_t ace_applicable;

		public uint ace_flags;

		public uint ace_rights;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct kauth_acl
	{
		public uint acl_entrycount;

		public uint acl_flags;

		public kauth_ace[] acl_ace;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct kauth_filesec
	{
		public uint fsec_magic;

		public guid_t fsec_owner;

		public guid_t fsec_group;

		public kauth_acl fsec_acl;
	}

	public enum acl_perm_t : uint
	{
		ReadData = (1 << 1),
		ListDirectory = (1 << 1),
		WriteData = (1 << 2),
		AddFile = (1 << 2),
		Execute = (1 << 3),
		Search = (1 << 3),
		Delete = (1 << 4),
		AppendData = (1 << 5),
		AddSubdirectory = (1 << 5),
		DeleteChild = (1 << 6),
		ReadAttributes = (1 << 7),
		WriteAttributes = (1 << 8),
		ReadExtattributes = (1 << 9),
		WriteExtattributes = (1 << 10),
		ReadSecurity = (1 << 11),
		WriteSecurity = (1 << 12),
		ChangeOwner = (1 << 13),
		Synchronize = (1 << 20)
	}

	public enum acl_tag_t : uint
	{
		UndefinedTag = 0,
		ExtendedAllow = 1,
		ExtendedDeny = 2
	}

	public enum acl_type_t : uint
	{
		Extended = 256,
		Access = 0,
		Default = 1,
		Afs = 2,
		Coda = 3,
		Ntfs = 4,
		Nwfs = 5
	}

	public enum acl_entry_id_t
	{
		FirstEntry = 0,
		NextEntry = -1,
		LastEntry = -2
	}

	public enum acl_flag_t : uint
	{
		FlagDeferInherit = (1 << 0),
		FlagNoInherit = (1 << 17),
		EntryInherited = (1 << 4),
		EntryFileInherit = (1 << 5),
		EntryDirectoryInherit = (1 << 6),
		EntryLimitInherit = (1 << 7),
		EntryOnlyInherit = (1 << 8)
	}

	[Watch (0x2,0x0), TV (0x9,0x0), Flags, Mac (0xa,0x8), iOS (0x6,0x0)]
	[Native]
	public enum CFFileSecurityClearOptions : ulong
	{
		Owner = 1uL << 0,
		Group = 1uL << 1,
		Mode = 1uL << 2,
		OwnerUUID = 1uL << 3,
		GroupUUID = 1uL << 4,
		AccessControlList = 1uL << 5
	}

	[Native]
	[Verify (InferredFromMemberPrefix)]
	public enum kCFStringTokenizer : ulong
	{
		UnitWord = 0,
		UnitSentence = 1,
		UnitParagraph = 2,
		UnitLineBreak = 3,
		UnitWordBoundary = 4,
		AttributeLatinTranscription = 1uL << 16,
		AttributeLanguage = 1uL << 17
	}

	[Flags]
	[Native]
	public enum CFStringTokenizerTokenType : ulong
	{
		None = 0x0,
		Normal = 1uL << 0,
		HasSubTokensMask = 1uL << 1,
		HasDerivedSubTokensMask = 1uL << 2,
		HasHasNumbersMask = 1uL << 3,
		HasNonLettersMask = 1uL << 4,
		IsCJWordMask = 1uL << 5
	}

	[Native]
	[Verify (InferredFromMemberPrefix)]
	public enum kCFFileDescriptor : ulong
	{
		ReadCallBack = 1uL << 0,
		WriteCallBack = 1uL << 1
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CFFileDescriptorContext
	{
		public nint version;

		public unsafe void* info;

		public unsafe Func<void*, void*>* retain;

		public unsafe Action<void*>* release;

		public unsafe Func<void*, CoreFoundation.CFStringRef*>* copyDescription;
	}

	[Native]
	[Verify (InferredFromMemberPrefix)]
	public enum kCFUserNotification : ulong
	{
		StopAlertLevel = 0,
		NoteAlertLevel = 1,
		CautionAlertLevel = 2,
		PlainAlertLevel = 3
	}

	[Native]
	[Verify (InferredFromMemberPrefix)]
	public enum kCFUserNotification : ulong
	{
		DefaultResponse = 0,
		AlternateResponse = 1,
		OtherResponse = 2,
		CancelResponse = 3
	}

	[Native]
	[Verify (InferredFromMemberPrefix)]
	public enum kCFUserNotification : ulong
	{
		NoDefaultButtonFlag = (1uL << 5),
		UseRadioButtonsFlag = (1uL << 6)
	}

	[Native]
	public enum NSComparisonResult : long
	{
		Ascending = -1,
		Same,
		Descending
	}

	[Flags]
	[Native]
	public enum NSEnumerationOptions : ulong
	{
		Concurrent = (1uL << 0),
		Reverse = (1uL << 1)
	}

	[Flags]
	[Native]
	public enum NSSortOptions : ulong
	{
		Concurrent = (1uL << 0),
		Stable = (1uL << 4)
	}

	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	[Native]
	public enum NSQualityOfService : long
	{
		UserInteractive = 33,
		UserInitiated = 25,
		Utility = 17,
		Background = 9,
		Default = -1
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NSFastEnumerationState
	{
		public nuint state;

		public unsafe NSObject* itemsPtr;

		public unsafe nuint* mutationsPtr;

		public nuint[] extra;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NSRange
	{
		public nuint location;

		public nuint length;
	}

	[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
	[Native]
	public enum NSCollectionChangeType : long
	{
		Insert,
		Remove
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct 
	{
		public nuint _isEmpty;

		public nuint _hasSingleRange;

		public nuint _cacheValid;

		public nuint _reservedArrayBinderController;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct 
	{
		[StructLayout (LayoutKind.Sequential)]
		public struct __singleRange
		{
			public NSRange _range;
		}


		[FieldOffset (0)]
		public __singleRange _singleRange;

		[StructLayout (LayoutKind.Sequential)]
		public struct __multipleRanges
		{
			public unsafe void* _data;

			public unsafe void* _reserved;
		}


		[FieldOffset (0)]
		public __multipleRanges _multipleRanges;
	}

	[Watch (0x6,0x0), TV (0xd,0x0), Flags, Mac (0xa,0xf), iOS (0xd,0x0)]
	[Native]
	public enum NSOrderedCollectionDifferenceCalculationOptions : ulong
	{
		OmitInsertedObjects = (1uL << 0),
		OmitRemovedObjects = (1uL << 1),
		InferMoves = (1uL << 2)
	}

	[Flags]
	[Native]
	public enum NSBinarySearchingOptions : ulong
	{
		FirstEqual = (1uL << 8),
		LastEqual = (1uL << 9),
		InsertionIndex = (1uL << 10)
	}

	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	[Native]
	public enum NSItemProviderRepresentationVisibility : long
	{
		All = 0,
		Team = 1,
		Group = 2,
		OwnProcess = 3
	}

	[Watch (0x4,0x0), TV (0xb,0x0), Flags, Mac (0xa,0xd), iOS (0xb,0x0)]
	[Native]
	public enum NSItemProviderFileOptions : long
	{
		NSItemProviderFileOptionOpenInPlace = 0x1
	}

	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	[Native]
	public enum NSItemProviderErrorCode : long
	{
		UnknownError = -1,
		ItemUnavailableError = -1000,
		UnexpectedValueClassError = -1100,
		UnavailableCoercionError = -1200
	}

	[Flags]
	[Native]
	public enum NSStringCompareOptions : ulong
	{
		CaseInsensitiveSearch = 0x1,
		LiteralSearch = 0x2,
		BackwardsSearch = 0x4,
		AnchoredSearch = 0x8,
		NumericSearch = 0x40,
		DiacriticInsensitiveSearch = 0x80,
		WidthInsensitiveSearch = 0x100,
		ForcedOrderingSearch = 0x200,
		RegularExpressionSearch = 0x400
	}

	[Native]
	[Verify (InferredFromMemberPrefix)]
	public enum Ns : ulong
	{
		ASCIIStringEncoding = 1,
		NEXTSTEPStringEncoding = 2,
		JapaneseEUCStringEncoding = 3,
		UTF8StringEncoding = 4,
		ISOLatin1StringEncoding = 5,
		SymbolStringEncoding = 6,
		NonLossyASCIIStringEncoding = 7,
		ShiftJISStringEncoding = 8,
		ISOLatin2StringEncoding = 9,
		UnicodeStringEncoding = 10,
		WindowsCP1251StringEncoding = 11,
		WindowsCP1252StringEncoding = 12,
		WindowsCP1253StringEncoding = 13,
		WindowsCP1254StringEncoding = 14,
		WindowsCP1250StringEncoding = 15,
		ISO2022JPStringEncoding = 21,
		MacOSRomanStringEncoding = 30,
		UTF16StringEncoding = UnicodeStringEncoding,
		UTF16BigEndianStringEncoding = 2415919360L,
		UTF16LittleEndianStringEncoding = 2483028224L,
		UTF32StringEncoding = 2348810496L,
		UTF32BigEndianStringEncoding = 2550137088L,
		UTF32LittleEndianStringEncoding = 2617245952L
	}

	[Flags]
	[Native]
	public enum NSStringEncodingConversionOptions : ulong
	{
		AllowLossy = 0x1,
		ExternalRepresentation = 0x2
	}

	[Flags]
	[Native]
	public enum NSStringEnumerationOptions : ulong
	{
		ByLines = 0x0,
		ByParagraphs = 0x1,
		ByComposedCharacterSequences = 0x2,
		ByWords = 0x3,
		BySentences = 0x4,
		Reverse = 1uL << 8,
		SubstringNotRequired = 1uL << 9,
		Localized = 1uL << 10
	}

	[Native]
	public enum  : ulong
	{
		NSProprietaryStringEncoding = 65536
	}

	[Verify (InferredFromMemberPrefix)]
	public enum NSBundleExecutableArchitecture : uint
	{
		I386 = 7,
		Ppc = 18,
		X8664 = 16777223,
		Ppc64 = 16777234
	}

	[Verify (InferredFromMemberPrefix)]
	public enum Ns : uint
	{
		UnknownByteOrder = CFByteOrderUnknown,
		LittleEndian = CFByteOrderLittleEndian,
		BigEndian = CFByteOrderBigEndian
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NSSwappedFloat
	{
		public uint v;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NSSwappedDouble
	{
		public ulong v;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct fconv
	{
		[FieldOffset (0)]
		public float number;

		[FieldOffset (0)]
		public NSSwappedFloat sf;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct fconv
	{
		[FieldOffset (0)]
		public float number;

		[FieldOffset (0)]
		public NSSwappedFloat sf;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct dconv
	{
		[FieldOffset (0)]
		public double number;

		[FieldOffset (0)]
		public NSSwappedDouble sd;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct dconv
	{
		[FieldOffset (0)]
		public double number;

		[FieldOffset (0)]
		public NSSwappedDouble sd;
	}

	[Flags]
	[Native]
	public enum NSCalendarUnit : ulong
	{
		CalendarUnitEra = kCFCalendarUnitEra,
		CalendarUnitYear = kCFCalendarUnitYear,
		CalendarUnitMonth = kCFCalendarUnitMonth,
		CalendarUnitDay = kCFCalendarUnitDay,
		CalendarUnitHour = kCFCalendarUnitHour,
		CalendarUnitMinute = kCFCalendarUnitMinute,
		CalendarUnitSecond = kCFCalendarUnitSecond,
		CalendarUnitWeekday = kCFCalendarUnitWeekday,
		CalendarUnitWeekdayOrdinal = kCFCalendarUnitWeekdayOrdinal,
		CalendarUnitQuarter = kCFCalendarUnitQuarter,
		CalendarUnitWeekOfMonth = kCFCalendarUnitWeekOfMonth,
		CalendarUnitWeekOfYear = kCFCalendarUnitWeekOfYear,
		CalendarUnitYearForWeekOfYear = kCFCalendarUnitYearForWeekOfYear,
		CalendarUnitNanosecond = (1uL << 15),
		CalendarUnitCalendar = (1uL << 20),
		CalendarUnitTimeZone = (1uL << 21),
		EraCalendarUnit = CalendarUnitEra,
		YearCalendarUnit = CalendarUnitYear,
		MonthCalendarUnit = CalendarUnitMonth,
		DayCalendarUnit = CalendarUnitDay,
		HourCalendarUnit = CalendarUnitHour,
		MinuteCalendarUnit = CalendarUnitMinute,
		SecondCalendarUnit = CalendarUnitSecond,
		WeekCalendarUnit = kCFCalendarUnitWeek,
		WeekdayCalendarUnit = CalendarUnitWeekday,
		WeekdayOrdinalCalendarUnit = CalendarUnitWeekdayOrdinal,
		QuarterCalendarUnit = CalendarUnitQuarter,
		WeekOfMonthCalendarUnit = CalendarUnitWeekOfMonth,
		WeekOfYearCalendarUnit = CalendarUnitWeekOfYear,
		YearForWeekOfYearCalendarUnit = CalendarUnitYearForWeekOfYear,
		CalendarCalendarUnit = CalendarUnitCalendar,
		TimeZoneCalendarUnit = CalendarUnitTimeZone
	}

	[Flags]
	[Native]
	public enum NSCalendarOptions : ulong
	{
		WrapComponents = (1uL << 0),
		MatchStrictly = (1uL << 1),
		SearchBackwards = (1uL << 2),
		MatchPreviousTimePreservingSmallerUnits = (1uL << 8),
		MatchNextTimePreservingSmallerUnits = (1uL << 9),
		MatchNextTime = (1uL << 10),
		MatchFirst = (1uL << 12),
		MatchLast = (1uL << 13)
	}

	public enum  : uint
	{
		NSWrapCalendarComponents = NSCalendarWrapComponents
	}

	[Native]
	[Verify (InferredFromMemberPrefix)]
	public enum Ns : long
	{
		DateComponentUndefined = 9223372036854775807L,
		UndefinedDateComponent = DateComponentUndefined
	}

	public enum  : uint
	{
		NSOpenStepUnicodeReservedBase = 62464
	}

	[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	[Native]
	public enum NSDecodingFailurePolicy : long
	{
		RaiseException,
		SetErrorAndReturn
	}

	[Flags]
	[Native]
	public enum NSDataReadingOptions : ulong
	{
		DataReadingMappedIfSafe = 1uL << 0,
		DataReadingUncached = 1uL << 1,
		DataReadingMappedAlways = 1uL << 3,
		DataReadingMapped = DataReadingMappedIfSafe,
		MappedRead = DataReadingMapped,
		UncachedRead = DataReadingUncached
	}

	[Flags]
	[Native]
	public enum NSDataWritingOptions : ulong
	{
		DataWritingAtomic = 1uL << 0,
		DataWritingWithoutOverwriting = 1uL << 1,
		DataWritingFileProtectionNone = 0x10000000,
		DataWritingFileProtectionComplete = 0x20000000,
		DataWritingFileProtectionCompleteUnlessOpen = 0x30000000,
		DataWritingFileProtectionCompleteUntilFirstUserAuthentication = 0x40000000,
		DataWritingFileProtectionMask = 0xf0000000L,
		AtomicWrite = DataWritingAtomic
	}

	[Watch (0x2,0x0), TV (0x9,0x0), Flags, Mac (0xa,0x6), iOS (0x4,0x0)]
	[Native]
	public enum NSDataSearchOptions : ulong
	{
		Backwards = 1uL << 0,
		Anchored = 1uL << 1
	}

	[Watch (0x2,0x0), TV (0x9,0x0), Flags, Mac (0xa,0x9), iOS (0x7,0x0)]
	[Native]
	public enum NSDataBase64EncodingOptions : ulong
	{
		NSDataBase64Encoding64CharacterLineLength = 1uL << 0,
		NSDataBase64Encoding76CharacterLineLength = 1uL << 1,
		EndLineWithCarriageReturn = 1uL << 4,
		EndLineWithLineFeed = 1uL << 5
	}

	[Watch (0x2,0x0), TV (0x9,0x0), Flags, Mac (0xa,0x9), iOS (0x7,0x0)]
	[Native]
	public enum NSDataBase64DecodingOptions : ulong
	{
		NSDataBase64DecodingIgnoreUnknownCharacters = 1uL << 0
	}

	[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
	[Native]
	public enum NSDataCompressionAlgorithm : long
	{
		Lzfse = 0,
		Lz4,
		Lzma,
		Zlib
	}

	[Flags]
	[Native]
	public enum NSAttributedStringEnumerationOptions : ulong
	{
		Reverse = (1uL << 1),
		LongestEffectiveRangeNotRequired = (1uL << 20)
	}

	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	[Native]
	public enum NSFormattingContext : long
	{
		Unknown = 0,
		Dynamic = 1,
		Standalone = 2,
		ListItem = 3,
		BeginningOfSentence = 4,
		MiddleOfSentence = 5
	}

	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	[Native]
	public enum NSFormattingUnitStyle : long
	{
		Short = 1,
		Medium,
		Long
	}

	[Native]
	public enum NSDateFormatterStyle : ulong
	{
		NoStyle = kCFDateFormatterNoStyle,
		ShortStyle = kCFDateFormatterShortStyle,
		MediumStyle = kCFDateFormatterMediumStyle,
		LongStyle = kCFDateFormatterLongStyle,
		FullStyle = kCFDateFormatterFullStyle
	}

	[Native]
	public enum NSDateFormatterBehavior : ulong
	{
		Default = 0,
		NSDateFormatterBehavior10_4 = 1040
	}

	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	[Native]
	public enum NSDateIntervalFormatterStyle : ulong
	{
		NoStyle = 0,
		ShortStyle = 1,
		MediumStyle = 2,
		LongStyle = 3,
		FullStyle = 4
	}

	[Flags]
	[Native]
	public enum NSISO8601DateFormatOptions : ulong
	{
		Year = kCFISO8601DateFormatWithYear,
		Month = kCFISO8601DateFormatWithMonth,
		WeekOfYear = kCFISO8601DateFormatWithWeekOfYear,
		Day = kCFISO8601DateFormatWithDay,
		Time = kCFISO8601DateFormatWithTime,
		TimeZone = kCFISO8601DateFormatWithTimeZone,
		SpaceBetweenDateAndTime = kCFISO8601DateFormatWithSpaceBetweenDateAndTime,
		DashSeparatorInDate = kCFISO8601DateFormatWithDashSeparatorInDate,
		ColonSeparatorInTime = kCFISO8601DateFormatWithColonSeparatorInTime,
		ColonSeparatorInTimeZone = kCFISO8601DateFormatWithColonSeparatorInTimeZone,
		FractionalSeconds = kCFISO8601DateFormatWithFractionalSeconds,
		FullDate = kCFISO8601DateFormatWithFullDate,
		FullTime = kCFISO8601DateFormatWithFullTime,
		InternetDateTime = kCFISO8601DateFormatWithInternetDateTime
	}

	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	[Native]
	public enum NSMassFormatterUnit : long
	{
		Gram = 11,
		Kilogram = 14,
		Ounce = (6L << 8) + 1,
		Pound = (6L << 8) + 2,
		Stone = (6L << 8) + 3
	}

	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	[Native]
	public enum NSLengthFormatterUnit : long
	{
		Millimeter = 8,
		Centimeter = 9,
		Meter = 11,
		Kilometer = 14,
		Inch = (5L << 8) + 1,
		Foot = (5L << 8) + 2,
		Yard = (5L << 8) + 3,
		Mile = (5L << 8) + 4
	}

	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	[Native]
	public enum NSEnergyFormatterUnit : long
	{
		Joule = 11,
		Kilojoule = 14,
		Calorie = (7L << 8) + 1,
		Kilocalorie = (7L << 8) + 2
	}

	[Native]
	public enum NSNumberFormatterBehavior : ulong
	{
		Default = 0,
		NSNumberFormatterBehavior10_4 = 1040
	}

	[Native]
	public enum NSNumberFormatterStyle : ulong
	{
		NoStyle = kCFNumberFormatterNoStyle,
		DecimalStyle = kCFNumberFormatterDecimalStyle,
		CurrencyStyle = kCFNumberFormatterCurrencyStyle,
		PercentStyle = kCFNumberFormatterPercentStyle,
		ScientificStyle = kCFNumberFormatterScientificStyle,
		SpellOutStyle = kCFNumberFormatterSpellOutStyle,
		OrdinalStyle = kCFNumberFormatterOrdinalStyle,
		CurrencyISOCodeStyle = kCFNumberFormatterCurrencyISOCodeStyle,
		CurrencyPluralStyle = kCFNumberFormatterCurrencyPluralStyle,
		CurrencyAccountingStyle = kCFNumberFormatterCurrencyAccountingStyle
	}

	[Native]
	public enum NSNumberFormatterPadPosition : ulong
	{
		BeforePrefix = kCFNumberFormatterPadBeforePrefix,
		AfterPrefix = kCFNumberFormatterPadAfterPrefix,
		BeforeSuffix = kCFNumberFormatterPadBeforeSuffix,
		AfterSuffix = kCFNumberFormatterPadAfterSuffix
	}

	[Native]
	public enum NSNumberFormatterRoundingMode : ulong
	{
		Ceiling = kCFNumberFormatterRoundCeiling,
		Floor = kCFNumberFormatterRoundFloor,
		Down = kCFNumberFormatterRoundDown,
		Up = kCFNumberFormatterRoundUp,
		HalfEven = kCFNumberFormatterRoundHalfEven,
		HalfDown = kCFNumberFormatterRoundHalfDown,
		HalfUp = kCFNumberFormatterRoundHalfUp
	}

	[Native]
	public enum NSLocaleLanguageDirection : ulong
	{
		Unknown = kCFLocaleLanguageDirectionUnknown,
		LeftToRight = kCFLocaleLanguageDirectionLeftToRight,
		RightToLeft = kCFLocaleLanguageDirectionRightToLeft,
		TopToBottom = kCFLocaleLanguageDirectionTopToBottom,
		BottomToTop = kCFLocaleLanguageDirectionBottomToTop
	}

	[Watch (0x3,0x0), TV (0xa,0x0), Flags, Mac (0xa,0xc), iOS (0xa,0x0)]
	[Native]
	public enum NSMeasurementFormatterUnitOptions : ulong
	{
		ProvidedUnit = (1uL << 0),
		NaturalScale = (1uL << 1),
		TemperatureWithoutUnit = (1uL << 2)
	}

	[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	[Native]
	public enum NSPersonNameComponentsFormatterStyle : long
	{
		Default = 0,
		Short,
		Medium,
		Long,
		Abbreviated
	}

	[Watch (0x2,0x0), TV (0x9,0x0), Flags, Mac (0xa,0xb), iOS (0x9,0x0)]
	[Native]
	public enum NSPersonNameComponentsFormatterOptions : ulong
	{
		NSPersonNameComponentsFormatterPhonetic = (1uL << 1)
	}

	[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
	[Native]
	public enum NSRelativeDateTimeFormatterStyle : long
	{
		umeric = 0,
		amed
	}

	[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
	[Native]
	public enum NSRelativeDateTimeFormatterUnitsStyle : long
	{
		Full = 0,
		SpellOut,
		Short,
		Abbreviated
	}

	[Native]
	public enum NSRoundingMode : ulong
	{
		Plain,
		Down,
		Up,
		Bankers
	}

	[Native]
	public enum NSCalculationError : ulong
	{
		NoError = 0,
		LossOfPrecision,
		Underflow,
		Overflow,
		DivideByZero
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NSDecimal
	{
		public int _exponent;

		public uint _length;

		public uint _isNegative;

		public uint _isCompact;

		public uint _reserved;

		public ushort[] _mantissa;
	}

	[Native]
	public enum NSSearchPathDirectory : ulong
	{
		ApplicationDirectory = 1,
		DemoApplicationDirectory,
		DeveloperApplicationDirectory,
		AdminApplicationDirectory,
		LibraryDirectory,
		DeveloperDirectory,
		UserDirectory,
		DocumentationDirectory,
		DocumentDirectory,
		CoreServiceDirectory,
		AutosavedInformationDirectory = 11,
		DesktopDirectory = 12,
		CachesDirectory = 13,
		ApplicationSupportDirectory = 14,
		DownloadsDirectory = 15,
		InputMethodsDirectory = 16,
		MoviesDirectory = 17,
		MusicDirectory = 18,
		PicturesDirectory = 19,
		PrinterDescriptionDirectory = 20,
		SharedPublicDirectory = 21,
		PreferencePanesDirectory = 22,
		ApplicationScriptsDirectory = 23,
		ItemReplacementDirectory = 99,
		AllApplicationsDirectory = 100,
		AllLibrariesDirectory = 101,
		TrashDirectory = 102
	}

	[Flags]
	[Native]
	public enum NSSearchPathDomainMask : ulong
	{
		UserDomainMask = 0x1,
		LocalDomainMask = 0x2,
		NetworkDomainMask = 0x4,
		SystemDomainMask = 0x8,
		AllDomainsMask = 0xffff
	}

	[Watch (0x2,0x0), TV (0x9,0x0), Flags, Mac (0xa,0x6), iOS (0x4,0x0)]
	[Native]
	public enum NSURLBookmarkCreationOptions : ulong
	{
		PreferFileIDResolution = (1uL << 8),
		MinimalBookmark = (1uL << 9),
		SuitableForBookmarkFile = (1uL << 10),
		WithSecurityScope = (1uL << 11),
		SecurityScopeAllowOnlyReadAccess = (1uL << 12)
	}

	[Watch (0x2,0x0), TV (0x9,0x0), Flags, Mac (0xa,0x6), iOS (0x4,0x0)]
	[Native]
	public enum NSURLBookmarkResolutionOptions : ulong
	{
		outUI = (1uL << 8),
		outMounting = (1uL << 9),
		SecurityScope = (1uL << 10)
	}

	[Watch (0x2,0x0), TV (0x9,0x0), Flags, Mac (0xa,0x6), iOS (0x4,0x0)]
	[Native]
	public enum NSVolumeEnumerationOptions : ulong
	{
		SkipHiddenVolumes = 1uL << 1,
		ProduceFileReferenceURLs = 1uL << 2
	}

	[Watch (0x2,0x0), TV (0x9,0x0), Flags, Mac (0xa,0x6), iOS (0x4,0x0)]
	[Native]
	public enum NSDirectoryEnumerationOptions : ulong
	{
		SkipsSubdirectoryDescendants = 1uL << 0,
		SkipsPackageDescendants = 1uL << 1,
		SkipsHiddenFiles = 1uL << 2,
		IncludesDirectoriesPostOrder = 1uL << 3,
		ProducesRelativePathURLs = 1uL << 4
	}

	[Watch (0x2,0x0), TV (0x9,0x0), Flags, Mac (0xa,0x6), iOS (0x4,0x0)]
	[Native]
	public enum NSFileManagerItemReplacementOptions : ulong
	{
		UsingNewMetadataOnly = 1uL << 0,
		WithoutDeletingBackupItem = 1uL << 1
	}

	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	[Native]
	public enum NSURLRelationship : long
	{
		Contains,
		Same,
		Other
	}

	[Flags, NoWatch, NoTV, NoiOS, Mac (0xa,0xb)]
	[Native]
	public enum NSFileManagerUnmountOptions : ulong
	{
		AllPartitionsAndEjectDisk = 1uL << 0,
		WithoutUI = 1uL << 1
	}

	[Flags]
	[Native]
	public enum NSPointerFunctionsOptions : ulong
	{
		StrongMemory = (0uL << 0),
		ZeroingWeakMemory = (1uL << 0),
		OpaqueMemory = (2uL << 0),
		MallocMemory = (3uL << 0),
		MachVirtualMemory = (4uL << 0),
		WeakMemory = (5uL << 0),
		ObjectPersonality = (0uL << 8),
		OpaquePersonality = (1uL << 8),
		ObjectPointerPersonality = (2uL << 8),
		CStringPersonality = (3uL << 8),
		StructPersonality = (4uL << 8),
		IntegerPersonality = (5uL << 8),
		CopyIn = (1uL << 16)
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NSHashEnumerator
	{
		public nuint _pi;

		public nuint _si;

		public unsafe void* _bs;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NSHashTableCallBacks
	{
		public unsafe Func<NSHashTable, void*, nuint>* hash;

		public unsafe Func<NSHashTable, void*, void*, bool>* isEqual;

		public unsafe Action<NSHashTable, void*>* retain;

		public unsafe Action<NSHashTable, void*>* release;

		public unsafe Func<NSHashTable, void*, NSString>* describe;
	}

	[Native]
	public enum NSHTTPCookieAcceptPolicy : ulong
	{
		Always,
		Never,
		OnlyFromMainDocumentDomain
	}

	[Watch (0x2,0x0), TV (0x9,0x0), Flags, Mac (0xa,0x7), iOS (0x5,0x0)]
	[Native]
	public enum NSJSONReadingOptions : ulong
	{
		MutableContainers = (1uL << 0),
		MutableLeaves = (1uL << 1),
		FragmentsAllowed = (1uL << 2),
		AllowFragments = FragmentsAllowed
	}

	[Watch (0x2,0x0), TV (0x9,0x0), Flags, Mac (0xa,0x7), iOS (0x5,0x0)]
	[Native]
	public enum NSJSONWritingOptions : ulong
	{
		PrettyPrinted = (1uL << 0),
		SortedKeys = (1uL << 1),
		FragmentsAllowed = (1uL << 2),
		WithoutEscapingSlashes = (1uL << 3)
	}

	[Flags]
	[Native]
	public enum NSKeyValueObservingOptions : ulong
	{
		New = 0x1,
		Old = 0x2,
		Initial = 0x4,
		Prior = 0x8
	}

	[Native]
	public enum NSKeyValueChange : ulong
	{
		Setting = 1,
		Insertion = 2,
		Removal = 3,
		Replacement = 4
	}

	[Native]
	public enum NSKeyValueSetMutationKind : ulong
	{
		UnionSetMutation = 1,
		MinusSetMutation = 2,
		IntersectSetMutation = 3,
		SetSetMutation = 4
	}

	[Flags]
	[Native]
	public enum NSPropertyListReadOptions : ulong
	{
		Immutable = kCFPropertyListImmutable,
		MutableContainers = kCFPropertyListMutableContainers,
		MutableContainersAndLeaves = kCFPropertyListMutableContainersAndLeaves
	}

	[Native]
	public enum NSPropertyListFormat : ulong
	{
		OpenStepFormat = kCFPropertyListOpenStepFormat,
		XMLFormat_v1_0 = kCFPropertyListXMLFormat_v1_0,
		BinaryFormat_v1_0 = kCFPropertyListBinaryFormat_v1_0
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NSMapEnumerator
	{
		public nuint _pi;

		public nuint _si;

		public unsafe void* _bs;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NSMapTableKeyCallBacks
	{
		public unsafe Func<NSMapTable, void*, nuint>* hash;

		public unsafe Func<NSMapTable, void*, void*, bool>* isEqual;

		public unsafe Action<NSMapTable, void*>* retain;

		public unsafe Action<NSMapTable, void*>* release;

		public unsafe Func<NSMapTable, void*, NSString>* describe;

		public unsafe void* notAKeyMarker;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NSMapTableValueCallBacks
	{
		public unsafe Action<NSMapTable, void*>* retain;

		public unsafe Action<NSMapTable, void*>* release;

		public unsafe Func<NSMapTable, void*, NSString>* describe;
	}

	[Native]
	public enum NSPostingStyle : ulong
	{
		WhenIdle = 1,
		Asap = 2,
		Now = 3
	}

	[Flags]
	[Native]
	public enum NSNotificationCoalescing : ulong
	{
		NoCoalescing = 0x0,
		CoalescingOnName = 0x1,
		CoalescingOnSender = 0x2
	}

	[Native]
	public enum NSOperationQueuePriority : long
	{
		VeryLow = -8,
		Low = -4,
		Normal = 0,
		High = 4,
		VeryHigh = 8
	}

	[Watch (0x2,0x0), TV (0x9,0x0), Flags, Mac (0xa,0x5), iOS (0x2,0x0)]
	[Native]
	public enum NSMachPortOptions : ulong
	{
		None = 0x0,
		SendRight = (1uL << 0),
		ReceiveRight = (1uL << 1)
	}

	[Introduced (PlatformName.MacOSX, 10, 0, message: "Not supported")]
	[Deprecated (PlatformName.MacOSX, 10, 10, message: "Not supported")]
	[Introduced (PlatformName.iOS, 2, 0, message: "Not supported")]
	[Deprecated (PlatformName.iOS, 8, 0, message: "Not supported")]
	[Introduced (PlatformName.WatchOS, 2, 0, message: "Not supported")]
	[Deprecated (PlatformName.WatchOS, 2, 0, message: "Not supported")]
	[Introduced (PlatformName.TvOS, 9, 0, message: "Not supported")]
	[Deprecated (PlatformName.TvOS, 9, 0, message: "Not supported")]
	[Verify (InferredFromMemberPrefix)]
	public enum Ns : uint
	{
		WindowsNTOperatingSystem = 1,
		Windows95OperatingSystem,
		SolarisOperatingSystem,
		HPUXOperatingSystem,
		MACHOperatingSystem,
		SunOSOperatingSystem,
		OSF1OperatingSystem
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NSOperatingSystemVersion
	{
		public nint majorVersion;

		public nint minorVersion;

		public nint patchVersion;
	}

	[Watch (0x2,0x0), TV (0x9,0x0), Flags, Mac (0xa,0x9), iOS (0x7,0x0)]
	public enum NSActivityOptions : ulong
	{
		IdleDisplaySleepDisabled = (1uL << 40),
		IdleSystemSleepDisabled = (1uL << 20),
		SuddenTerminationDisabled = (1uL << 14),
		AutomaticTerminationDisabled = (1uL << 15),
		UserInitiated = (0xffffff | IdleSystemSleepDisabled),
		UserInitiatedAllowingIdleSystemSleep = (UserInitiated & ~IdleSystemSleepDisabled),
		Background = 0xff,
		LatencyCritical = 0xff00000000L
	}

	[Watch (4,0), TV (11,0), Mac (10,10,3), iOS (11,0)]
	[Native]
	public enum NSProcessInfoThermalState : long
	{
		Nominal,
		Fair,
		Serious,
		Critical
	}

	[Flags]
	public enum NSTextCheckingType : ulong
	{
		Orthography = 1uL << 0,
		Spelling = 1uL << 1,
		Grammar = 1uL << 2,
		Date = 1uL << 3,
		Address = 1uL << 4,
		Link = 1uL << 5,
		Quote = 1uL << 6,
		Dash = 1uL << 7,
		Replacement = 1uL << 8,
		Correction = 1uL << 9,
		RegularExpression = 1uL << 10,
		PhoneNumber = 1uL << 11,
		TransitInformation = 1uL << 12
	}

	[Verify (InferredFromMemberPrefix)]
	public enum NSTextCheckingAll : ulong
	{
		SystemTypes = 4294967295L,
		CustomTypes = 4294967295uL << 32,
		Types = (SystemTypes | CustomTypes)
	}

	[Flags]
	[Native]
	public enum NSRegularExpressionOptions : ulong
	{
		CaseInsensitive = 1uL << 0,
		AllowCommentsAndWhitespace = 1uL << 1,
		IgnoreMetacharacters = 1uL << 2,
		DotMatchesLineSeparators = 1uL << 3,
		AnchorsMatchLines = 1uL << 4,
		UseUnixLineSeparators = 1uL << 5,
		UseUnicodeWordBoundaries = 1uL << 6
	}

	[Flags]
	[Native]
	public enum NSMatchingOptions : ulong
	{
		ReportProgress = 1uL << 0,
		ReportCompletion = 1uL << 1,
		Anchored = 1uL << 2,
		WithTransparentBounds = 1uL << 3,
		WithoutAnchoringBounds = 1uL << 4
	}

	[Flags]
	[Native]
	public enum NSMatchingFlags : ulong
	{
		Progress = 1uL << 0,
		Completed = 1uL << 1,
		HitEnd = 1uL << 2,
		RequiredEnd = 1uL << 3,
		InternalError = 1uL << 4
	}

	[Native]
	public enum NSStreamStatus : ulong
	{
		NotOpen = 0,
		Opening = 1,
		Open = 2,
		Reading = 3,
		Writing = 4,
		AtEnd = 5,
		Closed = 6,
		Error = 7
	}

	[Flags]
	[Native]
	public enum NSStreamEvent : ulong
	{
		None = 0x0,
		OpenCompleted = 1uL << 0,
		HasBytesAvailable = 1uL << 1,
		HasSpaceAvailable = 1uL << 2,
		ErrorOccurred = 1uL << 3,
		EndEncountered = 1uL << 4
	}

	[Native]
	public enum NSTimeZoneNameStyle : long
	{
		Standard,
		ShortStandard,
		DaylightSaving,
		ShortDaylightSaving,
		Generic,
		ShortGeneric
	}

	[Native]
	public enum NSURLCacheStoragePolicy : ulong
	{
		Allowed,
		AllowedInMemoryOnly,
		NotAllowed
	}

	[Unavailable (PlatformName.MacCatalyst)]
	[NoWatch, NoTV, NoiOS]
	[StructLayout (LayoutKind.Sequential), Advice ("This API is not available when using UIKit on macOS.")]
	public struct SecKeychainAttribute
	{
		public uint tag;

		public uint length;

		public unsafe void* data;
	}

	[Unavailable (PlatformName.MacCatalyst)]
	[NoWatch, NoTV, NoiOS]
	[StructLayout (LayoutKind.Sequential), Advice ("This API is not available when using UIKit on macOS.")]
	public struct SecKeychainAttributeList
	{
		public uint count;

		public unsafe SecKeychainAttribute* attr;
	}

	[Unavailable (PlatformName.MacCatalyst)]
	[NoWatch, NoTV, NoiOS]
	[StructLayout (LayoutKind.Sequential), Advice ("This API is not available when using UIKit on macOS.")]
	public struct SecKeychainAttributeInfo
	{
		public uint count;

		public unsafe uint* tag;

		public unsafe uint* format;
	}

	[Verify (InferredFromMemberPrefix)]
	public enum errSec
	{
		Success = 0,
		Unimplemented = -4,
		DiskFull = -34,
		DskFull = DiskFull,
		Io = -36,
		OpWr = -49,
		Param = -50,
		WrPerm = -61,
		Allocate = -108,
		UserCanceled = -128,
		BadReq = -909,
		InternalComponent = -2070,
		CoreFoundationUnknown = -4960,
		MissingEntitlement = -34018,
		NotAvailable = -25291,
		ReadOnly = -25292,
		AuthFailed = -25293,
		NoSuchKeychain = -25294,
		InvalidKeychain = -25295,
		DuplicateKeychain = -25296,
		DuplicateCallback = -25297,
		InvalidCallback = -25298,
		DuplicateItem = -25299,
		ItemNotFound = -25300,
		BufferTooSmall = -25301,
		DataTooLarge = -25302,
		NoSuchAttr = -25303,
		InvalidItemRef = -25304,
		InvalidSearchRef = -25305,
		NoSuchClass = -25306,
		NoDefaultKeychain = -25307,
		InteractionNotAllowed = -25308,
		ReadOnlyAttr = -25309,
		WrongSecVersion = -25310,
		KeySizeNotAllowed = -25311,
		NoStorageModule = -25312,
		NoCertificateModule = -25313,
		NoPolicyModule = -25314,
		InteractionRequired = -25315,
		DataNotAvailable = -25316,
		DataNotModifiable = -25317,
		CreateChainFailed = -25318,
		InvalidPrefsDomain = -25319,
		InDarkWake = -25320,
		ACLNotSimple = -25240,
		PolicyNotFound = -25241,
		InvalidTrustSetting = -25242,
		NoAccessForItem = -25243,
		InvalidOwnerEdit = -25244,
		TrustNotAvailable = -25245,
		UnsupportedFormat = -25256,
		UnknownFormat = -25257,
		KeyIsSensitive = -25258,
		MultiplePrivKeys = -25259,
		PassphraseRequired = -25260,
		InvalidPasswordRef = -25261,
		InvalidTrustSettings = -25262,
		NoTrustSettings = -25263,
		Pkcs12VerifyFailure = -25264,
		NotSigner = -26267,
		Decode = -26275,
		ServiceNotAvailable = -67585,
		InsufficientClientID = -67586,
		DeviceReset = -67587,
		DeviceFailed = -67588,
		AppleAddAppACLSubject = -67589,
		ApplePublicKeyIncomplete = -67590,
		AppleSignatureMismatch = -67591,
		AppleInvalidKeyStartDate = -67592,
		AppleInvalidKeyEndDate = -67593,
		ConversionError = -67594,
		AppleSSLv2Rollback = -67595,
		QuotaExceeded = -67596,
		FileTooBig = -67597,
		InvalidDatabaseBlob = -67598,
		InvalidKeyBlob = -67599,
		IncompatibleDatabaseBlob = -67600,
		IncompatibleKeyBlob = -67601,
		HostNameMismatch = -67602,
		UnknownCriticalExtensionFlag = -67603,
		NoBasicConstraints = -67604,
		NoBasicConstraintsCA = -67605,
		InvalidAuthorityKeyID = -67606,
		InvalidSubjectKeyID = -67607,
		InvalidKeyUsageForPolicy = -67608,
		InvalidExtendedKeyUsage = -67609,
		InvalidIDLinkage = -67610,
		PathLengthConstraintExceeded = -67611,
		InvalidRoot = -67612,
		CRLExpired = -67613,
		CRLNotValidYet = -67614,
		CRLNotFound = -67615,
		CRLServerDown = -67616,
		CRLBadURI = -67617,
		UnknownCertExtension = -67618,
		UnknownCRLExtension = -67619,
		CRLNotTrusted = -67620,
		CRLPolicyFailed = -67621,
		IDPFailure = -67622,
		SMIMEEmailAddressesNotFound = -67623,
		SMIMEBadExtendedKeyUsage = -67624,
		SMIMEBadKeyUsage = -67625,
		SMIMEKeyUsageNotCritical = -67626,
		SMIMENoEmailAddress = -67627,
		SMIMESubjAltNameNotCritical = -67628,
		SSLBadExtendedKeyUsage = -67629,
		OCSPBadResponse = -67630,
		OCSPBadRequest = -67631,
		OCSPUnavailable = -67632,
		OCSPStatusUnrecognized = -67633,
		EndOfData = -67634,
		IncompleteCertRevocationCheck = -67635,
		NetworkFailure = -67636,
		OCSPNotTrustedToAnchor = -67637,
		RecordModified = -67638,
		OCSPSignatureError = -67639,
		OCSPNoSigner = -67640,
		OCSPResponderMalformedReq = -67641,
		OCSPResponderInternalError = -67642,
		OCSPResponderTryLater = -67643,
		OCSPResponderSignatureRequired = -67644,
		OCSPResponderUnauthorized = -67645,
		OCSPResponseNonceMismatch = -67646,
		CodeSigningBadCertChainLength = -67647,
		CodeSigningNoBasicConstraints = -67648,
		CodeSigningBadPathLengthConstraint = -67649,
		CodeSigningNoExtendedKeyUsage = -67650,
		CodeSigningDevelopment = -67651,
		ResourceSignBadCertChainLength = -67652,
		ResourceSignBadExtKeyUsage = -67653,
		TrustSettingDeny = -67654,
		InvalidSubjectName = -67655,
		UnknownQualifiedCertStatement = -67656,
		MobileMeRequestQueued = -67657,
		MobileMeRequestRedirected = -67658,
		MobileMeServerError = -67659,
		MobileMeServerNotAvailable = -67660,
		MobileMeServerAlreadyExists = -67661,
		MobileMeServerServiceErr = -67662,
		MobileMeRequestAlreadyPending = -67663,
		MobileMeNoRequestPending = -67664,
		MobileMeCSRVerifyFailure = -67665,
		MobileMeFailedConsistencyCheck = -67666,
		NotInitialized = -67667,
		InvalidHandleUsage = -67668,
		PVCReferentNotFound = -67669,
		FunctionIntegrityFail = -67670,
		InternalError = -67671,
		MemoryError = -67672,
		InvalidData = -67673,
		MDSError = -67674,
		InvalidPointer = -67675,
		SelfCheckFailed = -67676,
		FunctionFailed = -67677,
		ModuleManifestVerifyFailed = -67678,
		InvalidGUID = -67679,
		InvalidHandle = -67680,
		InvalidDBList = -67681,
		InvalidPassthroughID = -67682,
		InvalidNetworkAddress = -67683,
		CRLAlreadySigned = -67684,
		InvalidNumberOfFields = -67685,
		VerificationFailure = -67686,
		UnknownTag = -67687,
		InvalidSignature = -67688,
		InvalidName = -67689,
		InvalidCertificateRef = -67690,
		InvalidCertificateGroup = -67691,
		TagNotFound = -67692,
		InvalidQuery = -67693,
		InvalidValue = -67694,
		CallbackFailed = -67695,
		ACLDeleteFailed = -67696,
		ACLReplaceFailed = -67697,
		ACLAddFailed = -67698,
		ACLChangeFailed = -67699,
		InvalidAccessCredentials = -67700,
		InvalidRecord = -67701,
		InvalidACL = -67702,
		InvalidSampleValue = -67703,
		IncompatibleVersion = -67704,
		PrivilegeNotGranted = -67705,
		InvalidScope = -67706,
		PVCAlreadyConfigured = -67707,
		InvalidPVC = -67708,
		EMMLoadFailed = -67709,
		EMMUnloadFailed = -67710,
		AddinLoadFailed = -67711,
		InvalidKeyRef = -67712,
		InvalidKeyHierarchy = -67713,
		AddinUnloadFailed = -67714,
		LibraryReferenceNotFound = -67715,
		InvalidAddinFunctionTable = -67716,
		InvalidServiceMask = -67717,
		ModuleNotLoaded = -67718,
		InvalidSubServiceID = -67719,
		AttributeNotInContext = -67720,
		ModuleManagerInitializeFailed = -67721,
		ModuleManagerNotFound = -67722,
		EventNotificationCallbackNotFound = -67723,
		InputLengthError = -67724,
		OutputLengthError = -67725,
		PrivilegeNotSupported = -67726,
		DeviceError = -67727,
		AttachHandleBusy = -67728,
		NotLoggedIn = -67729,
		AlgorithmMismatch = -67730,
		KeyUsageIncorrect = -67731,
		KeyBlobTypeIncorrect = -67732,
		KeyHeaderInconsistent = -67733,
		UnsupportedKeyFormat = -67734,
		UnsupportedKeySize = -67735,
		InvalidKeyUsageMask = -67736,
		UnsupportedKeyUsageMask = -67737,
		InvalidKeyAttributeMask = -67738,
		UnsupportedKeyAttributeMask = -67739,
		InvalidKeyLabel = -67740,
		UnsupportedKeyLabel = -67741,
		InvalidKeyFormat = -67742,
		UnsupportedVectorOfBuffers = -67743,
		InvalidInputVector = -67744,
		InvalidOutputVector = -67745,
		InvalidContext = -67746,
		InvalidAlgorithm = -67747,
		InvalidAttributeKey = -67748,
		MissingAttributeKey = -67749,
		InvalidAttributeInitVector = -67750,
		MissingAttributeInitVector = -67751,
		InvalidAttributeSalt = -67752,
		MissingAttributeSalt = -67753,
		InvalidAttributePadding = -67754,
		MissingAttributePadding = -67755,
		InvalidAttributeRandom = -67756,
		MissingAttributeRandom = -67757,
		InvalidAttributeSeed = -67758,
		MissingAttributeSeed = -67759,
		InvalidAttributePassphrase = -67760,
		MissingAttributePassphrase = -67761,
		InvalidAttributeKeyLength = -67762,
		MissingAttributeKeyLength = -67763,
		InvalidAttributeBlockSize = -67764,
		MissingAttributeBlockSize = -67765,
		InvalidAttributeOutputSize = -67766,
		MissingAttributeOutputSize = -67767,
		InvalidAttributeRounds = -67768,
		MissingAttributeRounds = -67769,
		InvalidAlgorithmParms = -67770,
		MissingAlgorithmParms = -67771,
		InvalidAttributeLabel = -67772,
		MissingAttributeLabel = -67773,
		InvalidAttributeKeyType = -67774,
		MissingAttributeKeyType = -67775,
		InvalidAttributeMode = -67776,
		MissingAttributeMode = -67777,
		InvalidAttributeEffectiveBits = -67778,
		MissingAttributeEffectiveBits = -67779,
		InvalidAttributeStartDate = -67780,
		MissingAttributeStartDate = -67781,
		InvalidAttributeEndDate = -67782,
		MissingAttributeEndDate = -67783,
		InvalidAttributeVersion = -67784,
		MissingAttributeVersion = -67785,
		InvalidAttributePrime = -67786,
		MissingAttributePrime = -67787,
		InvalidAttributeBase = -67788,
		MissingAttributeBase = -67789,
		InvalidAttributeSubprime = -67790,
		MissingAttributeSubprime = -67791,
		InvalidAttributeIterationCount = -67792,
		MissingAttributeIterationCount = -67793,
		InvalidAttributeDLDBHandle = -67794,
		MissingAttributeDLDBHandle = -67795,
		InvalidAttributeAccessCredentials = -67796,
		MissingAttributeAccessCredentials = -67797,
		InvalidAttributePublicKeyFormat = -67798,
		MissingAttributePublicKeyFormat = -67799,
		InvalidAttributePrivateKeyFormat = -67800,
		MissingAttributePrivateKeyFormat = -67801,
		InvalidAttributeSymmetricKeyFormat = -67802,
		MissingAttributeSymmetricKeyFormat = -67803,
		InvalidAttributeWrappedKeyFormat = -67804,
		MissingAttributeWrappedKeyFormat = -67805,
		StagedOperationInProgress = -67806,
		StagedOperationNotStarted = -67807,
		VerifyFailed = -67808,
		QuerySizeUnknown = -67809,
		BlockSizeMismatch = -67810,
		PublicKeyInconsistent = -67811,
		DeviceVerifyFailed = -67812,
		InvalidLoginName = -67813,
		AlreadyLoggedIn = -67814,
		InvalidDigestAlgorithm = -67815,
		InvalidCRLGroup = -67816,
		CertificateCannotOperate = -67817,
		CertificateExpired = -67818,
		CertificateNotValidYet = -67819,
		CertificateRevoked = -67820,
		CertificateSuspended = -67821,
		InsufficientCredentials = -67822,
		InvalidAction = -67823,
		InvalidAuthority = -67824,
		VerifyActionFailed = -67825,
		InvalidCertAuthority = -67826,
		InvaldCRLAuthority = -67827,
		InvalidCRLEncoding = -67828,
		InvalidCRLType = -67829,
		InvalidCRL = -67830,
		InvalidFormType = -67831,
		InvalidID = -67832,
		InvalidIdentifier = -67833,
		InvalidIndex = -67834,
		InvalidPolicyIdentifiers = -67835,
		InvalidTimeString = -67836,
		InvalidReason = -67837,
		InvalidRequestInputs = -67838,
		InvalidResponseVector = -67839,
		InvalidStopOnPolicy = -67840,
		InvalidTuple = -67841,
		MultipleValuesUnsupported = -67842,
		NotTrusted = -67843,
		NoDefaultAuthority = -67844,
		RejectedForm = -67845,
		RequestLost = -67846,
		RequestRejected = -67847,
		UnsupportedAddressType = -67848,
		UnsupportedService = -67849,
		InvalidTupleGroup = -67850,
		InvalidBaseACLs = -67851,
		InvalidTupleCredendtials = -67852,
		InvalidEncoding = -67853,
		InvalidValidityPeriod = -67854,
		InvalidRequestor = -67855,
		RequestDescriptor = -67856,
		InvalidBundleInfo = -67857,
		InvalidCRLIndex = -67858,
		NoFieldValues = -67859,
		UnsupportedFieldFormat = -67860,
		UnsupportedIndexInfo = -67861,
		UnsupportedLocality = -67862,
		UnsupportedNumAttributes = -67863,
		UnsupportedNumIndexes = -67864,
		UnsupportedNumRecordTypes = -67865,
		FieldSpecifiedMultiple = -67866,
		IncompatibleFieldFormat = -67867,
		InvalidParsingModule = -67868,
		DatabaseLocked = -67869,
		DatastoreIsOpen = -67870,
		MissingValue = -67871,
		UnsupportedQueryLimits = -67872,
		UnsupportedNumSelectionPreds = -67873,
		UnsupportedOperator = -67874,
		InvalidDBLocation = -67875,
		InvalidAccessRequest = -67876,
		InvalidIndexInfo = -67877,
		InvalidNewOwner = -67878,
		InvalidModifyMode = -67879,
		MissingRequiredExtension = -67880,
		ExtendedKeyUsageNotCritical = -67881,
		TimestampMissing = -67882,
		TimestampInvalid = -67883,
		TimestampNotTrusted = -67884,
		TimestampServiceNotAvailable = -67885,
		TimestampBadAlg = -67886,
		TimestampBadRequest = -67887,
		TimestampBadDataFormat = -67888,
		TimestampTimeNotAvailable = -67889,
		TimestampUnacceptedPolicy = -67890,
		TimestampUnacceptedExtension = -67891,
		TimestampAddInfoNotAvailable = -67892,
		TimestampSystemFailure = -67893,
		SigningTimeMissing = -67894,
		TimestampRejection = -67895,
		TimestampWaiting = -67896,
		TimestampRevocationWarning = -67897,
		TimestampRevocationNotification = -67898,
		CertificatePolicyNotAllowed = -67899,
		CertificateNameNotAllowed = -67900,
		CertificateValidityPeriodTooLong = -67901
	}

	[Verify (InferredFromMemberPrefix)]
	public enum errSSL
	{
		Protocol = -9800,
		Negotiation = -9801,
		FatalAlert = -9802,
		WouldBlock = -9803,
		SessionNotFound = -9804,
		ClosedGraceful = -9805,
		ClosedAbort = -9806,
		XCertChainInvalid = -9807,
		BadCert = -9808,
		Crypto = -9809,
		Internal = -9810,
		ModuleAttach = -9811,
		UnknownRootCert = -9812,
		NoRootCert = -9813,
		CertExpired = -9814,
		CertNotYetValid = -9815,
		ClosedNoNotify = -9816,
		BufferOverflow = -9817,
		BadCipherSuite = -9818,
		PeerUnexpectedMsg = -9819,
		PeerBadRecordMac = -9820,
		PeerDecryptionFail = -9821,
		PeerRecordOverflow = -9822,
		PeerDecompressFail = -9823,
		PeerHandshakeFail = -9824,
		PeerBadCert = -9825,
		PeerUnsupportedCert = -9826,
		PeerCertRevoked = -9827,
		PeerCertExpired = -9828,
		PeerCertUnknown = -9829,
		IllegalParam = -9830,
		PeerUnknownCA = -9831,
		PeerAccessDenied = -9832,
		PeerDecodeError = -9833,
		PeerDecryptError = -9834,
		PeerExportRestriction = -9835,
		PeerProtocolVersion = -9836,
		PeerInsufficientSecurity = -9837,
		PeerInternalError = -9838,
		PeerUserCancelled = -9839,
		PeerNoRenegotiation = -9840,
		PeerAuthCompleted = -9841,
		ClientCertRequested = -9842,
		HostNameMismatch = -9843,
		ConnectionRefused = -9844,
		DecryptionFail = -9845,
		BadRecordMac = -9846,
		RecordOverflow = -9847,
		BadConfiguration = -9848,
		UnexpectedRecord = -9849,
		WeakPeerEphemeralDHKey = -9850,
		ClientHelloReceived = -9851,
		TransportReset = -9852,
		NetworkTimeout = -9853,
		ConfigurationFailed = -9854,
		UnsupportedExtension = -9855,
		UnexpectedMessage = -9856,
		DecompressFail = -9857,
		HandshakeFail = -9858,
		DecodeError = -9859,
		InappropriateFallback = -9860,
		MissingExtension = -9861,
		BadCertificateStatusResponse = -9862,
		CertificateRequired = -9863,
		UnknownPSKIdentity = -9864,
		UnrecognizedName = -9865,
		ATSViolation = -9880,
		ATSMinimumVersionViolation = -9881,
		ATSCiphersuiteViolation = -9882,
		ATSMinimumKeySizeViolation = -9883,
		ATSLeafCertificateHashAlgorithmViolation = -9884,
		ATSCertificateHashAlgorithmViolation = -9885,
		ATSCertificateTrustViolation = -9886
	}

	[Flags, iOS (0x8,0x0)]
	[Native]
	public enum SecAccessControlCreateFlags : ulong
	{
		UserPresence = 1uL << 0,
		BiometryAny = 1uL << 1,
		TouchIDAny = 1uL << 1,
		BiometryCurrentSet = 1uL << 3,
		TouchIDCurrentSet = 1uL << 3,
		DevicePasscode = 1uL << 4,
		Watch = 1uL << 5,
		Or = 1uL << 14,
		And = 1uL << 15,
		PrivateKeyUsage = 1uL << 30,
		ApplicationPassword = 1uL << 31
	}

	[Flags]
	public enum SecPadding : uint
	{
		None = 0x0,
		Pkcs1 = 0x1,
		Oaep = 0x2,
		SigRaw = 0x4000,
		Pkcs1md2 = 0x8000,
		Pkcs1md5 = 0x8001,
		Pkcs1sha1 = 0x8002,
		Pkcs1sha224 = 0x8003,
		Pkcs1sha256 = 0x8004,
		Pkcs1sha384 = 0x8005,
		Pkcs1sha512 = 0x8006
	}

	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	[Native]
	public enum SecKeyOperationType : long
	{
		Sign = 0,
		Verify = 1,
		Encrypt = 2,
		Decrypt = 3,
		KeyExchange = 4
	}

	[Native]
	[Verify (InferredFromMemberPrefix)]
	public enum kSecRevocation : ulong
	{
		OCSPMethod = (1uL << 0),
		CRLMethod = (1uL << 1),
		PreferCRL = (1uL << 2),
		RequirePositiveResponse = (1uL << 3),
		NetworkAccessDisabled = (1uL << 4),
		UseAnyAvailableMethod = (OCSPMethod | CRLMethod)
	}

	public enum SecTrustResultType : uint
	{
		Invalid = 0,
		Proceed = 1,
		Confirm = 2,
		Deny = 3,
		Unspecified = 4,
		RecoverableTrustFailure = 5,
		FatalTrustFailure = 6,
		OtherError = 7
	}

	public enum  : ushort
	{
		SslNullWithNullNull = 0,
		SslRsaWithNullMd5 = 1,
		SslRsaWithNullSha = 2,
		SslRsaExportWithRc440Md5 = 3,
		SslRsaWithRc4128Md5 = 4,
		SslRsaWithRc4128Sha = 5,
		SslRsaExportWithRc2Cbc40Md5 = 6,
		SslRsaWithIdeaCbcSha = 7,
		SslRsaExportWithDes40CbcSha = 8,
		SslRsaWithDesCbcSha = 9,
		SslRsaWith3desEdeCbcSha = 10,
		SslDhDssExportWithDes40CbcSha = 11,
		SslDhDssWithDesCbcSha = 12,
		SslDhDssWith3desEdeCbcSha = 13,
		SslDhRsaExportWithDes40CbcSha = 14,
		SslDhRsaWithDesCbcSha = 15,
		SslDhRsaWith3desEdeCbcSha = 16,
		SslDheDssExportWithDes40CbcSha = 17,
		SslDheDssWithDesCbcSha = 18,
		SslDheDssWith3desEdeCbcSha = 19,
		SslDheRsaExportWithDes40CbcSha = 20,
		SslDheRsaWithDesCbcSha = 21,
		SslDheRsaWith3desEdeCbcSha = 22,
		SSL_DH_anon_EXPORT_WITH_RC4_40_MD5 = 23,
		SSL_DH_anon_WITH_RC4_128_MD5 = 24,
		SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA = 25,
		SSL_DH_anon_WITH_DES_CBC_SHA = 26,
		SSL_DH_anon_WITH_3DES_EDE_CBC_SHA = 27,
		SslFortezzaDmsWithNullSha = 28,
		SslFortezzaDmsWithFortezzaCbcSha = 29,
		TlsRsaWithAes128CbcSha = 47,
		TlsDhDssWithAes128CbcSha = 48,
		TlsDhRsaWithAes128CbcSha = 49,
		TlsDheDssWithAes128CbcSha = 50,
		TlsDheRsaWithAes128CbcSha = 51,
		TLS_DH_anon_WITH_AES_128_CBC_SHA = 52,
		TlsRsaWithAes256CbcSha = 53,
		TlsDhDssWithAes256CbcSha = 54,
		TlsDhRsaWithAes256CbcSha = 55,
		TlsDheDssWithAes256CbcSha = 56,
		TlsDheRsaWithAes256CbcSha = 57,
		TLS_DH_anon_WITH_AES_256_CBC_SHA = 58,
		TlsEcdhEcdsaWithNullSha = 49153,
		TlsEcdhEcdsaWithRc4128Sha = 49154,
		TlsEcdhEcdsaWith3desEdeCbcSha = 49155,
		TlsEcdhEcdsaWithAes128CbcSha = 49156,
		TlsEcdhEcdsaWithAes256CbcSha = 49157,
		TlsEcdheEcdsaWithNullSha = 49158,
		TlsEcdheEcdsaWithRc4128Sha = 49159,
		TlsEcdheEcdsaWith3desEdeCbcSha = 49160,
		TlsEcdheEcdsaWithAes128CbcSha = 49161,
		TlsEcdheEcdsaWithAes256CbcSha = 49162,
		TlsEcdhRsaWithNullSha = 49163,
		TlsEcdhRsaWithRc4128Sha = 49164,
		TlsEcdhRsaWith3desEdeCbcSha = 49165,
		TlsEcdhRsaWithAes128CbcSha = 49166,
		TlsEcdhRsaWithAes256CbcSha = 49167,
		TlsEcdheRsaWithNullSha = 49168,
		TlsEcdheRsaWithRc4128Sha = 49169,
		TlsEcdheRsaWith3desEdeCbcSha = 49170,
		TlsEcdheRsaWithAes128CbcSha = 49171,
		TlsEcdheRsaWithAes256CbcSha = 49172,
		TLS_ECDH_anon_WITH_NULL_SHA = 49173,
		TLS_ECDH_anon_WITH_RC4_128_SHA = 49174,
		TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA = 49175,
		TLS_ECDH_anon_WITH_AES_128_CBC_SHA = 49176,
		TLS_ECDH_anon_WITH_AES_256_CBC_SHA = 49177,
		TlsEcdhePskWithAes128CbcSha = 49205,
		TlsEcdhePskWithAes256CbcSha = 49206,
		TlsPskWithChacha20Poly1305Sha256 = 52395,
		TlsNullWithNullNull = 0,
		TlsRsaWithNullMd5 = 1,
		TlsRsaWithNullSha = 2,
		TlsRsaWithRc4128Md5 = 4,
		TlsRsaWithRc4128Sha = 5,
		TlsRsaWith3desEdeCbcSha = 10,
		TlsRsaWithNullSha256 = 59,
		TlsRsaWithAes128CbcSha256 = 60,
		TlsRsaWithAes256CbcSha256 = 61,
		TlsDhDssWith3desEdeCbcSha = 13,
		TlsDhRsaWith3desEdeCbcSha = 16,
		TlsDheDssWith3desEdeCbcSha = 19,
		TlsDheRsaWith3desEdeCbcSha = 22,
		TlsDhDssWithAes128CbcSha256 = 62,
		TlsDhRsaWithAes128CbcSha256 = 63,
		TlsDheDssWithAes128CbcSha256 = 64,
		TlsDheRsaWithAes128CbcSha256 = 103,
		TlsDhDssWithAes256CbcSha256 = 104,
		TlsDhRsaWithAes256CbcSha256 = 105,
		TlsDheDssWithAes256CbcSha256 = 106,
		TlsDheRsaWithAes256CbcSha256 = 107,
		TLS_DH_anon_WITH_RC4_128_MD5 = 24,
		TLS_DH_anon_WITH_3DES_EDE_CBC_SHA = 27,
		TLS_DH_anon_WITH_AES_128_CBC_SHA256 = 108,
		TLS_DH_anon_WITH_AES_256_CBC_SHA256 = 109,
		TlsPskWithRc4128Sha = 138,
		TlsPskWith3desEdeCbcSha = 139,
		TlsPskWithAes128CbcSha = 140,
		TlsPskWithAes256CbcSha = 141,
		TlsDhePskWithRc4128Sha = 142,
		TlsDhePskWith3desEdeCbcSha = 143,
		TlsDhePskWithAes128CbcSha = 144,
		TlsDhePskWithAes256CbcSha = 145,
		TlsRsaPskWithRc4128Sha = 146,
		TlsRsaPskWith3desEdeCbcSha = 147,
		TlsRsaPskWithAes128CbcSha = 148,
		TlsRsaPskWithAes256CbcSha = 149,
		TlsPskWithNullSha = 44,
		TlsDhePskWithNullSha = 45,
		TlsRsaPskWithNullSha = 46,
		TlsRsaWithAes128GcmSha256 = 156,
		TlsRsaWithAes256GcmSha384 = 157,
		TlsDheRsaWithAes128GcmSha256 = 158,
		TlsDheRsaWithAes256GcmSha384 = 159,
		TlsDhRsaWithAes128GcmSha256 = 160,
		TlsDhRsaWithAes256GcmSha384 = 161,
		TlsDheDssWithAes128GcmSha256 = 162,
		TlsDheDssWithAes256GcmSha384 = 163,
		TlsDhDssWithAes128GcmSha256 = 164,
		TlsDhDssWithAes256GcmSha384 = 165,
		TLS_DH_anon_WITH_AES_128_GCM_SHA256 = 166,
		TLS_DH_anon_WITH_AES_256_GCM_SHA384 = 167,
		TlsPskWithAes128GcmSha256 = 168,
		TlsPskWithAes256GcmSha384 = 169,
		TlsDhePskWithAes128GcmSha256 = 170,
		TlsDhePskWithAes256GcmSha384 = 171,
		TlsRsaPskWithAes128GcmSha256 = 172,
		TlsRsaPskWithAes256GcmSha384 = 173,
		TlsPskWithAes128CbcSha256 = 174,
		TlsPskWithAes256CbcSha384 = 175,
		TlsPskWithNullSha256 = 176,
		TlsPskWithNullSha384 = 177,
		TlsDhePskWithAes128CbcSha256 = 178,
		TlsDhePskWithAes256CbcSha384 = 179,
		TlsDhePskWithNullSha256 = 180,
		TlsDhePskWithNullSha384 = 181,
		TlsRsaPskWithAes128CbcSha256 = 182,
		TlsRsaPskWithAes256CbcSha384 = 183,
		TlsRsaPskWithNullSha256 = 184,
		TlsRsaPskWithNullSha384 = 185,
		TlsAes128GcmSha256 = 4865,
		TlsAes256GcmSha384 = 4866,
		TlsChacha20Poly1305Sha256 = 4867,
		TlsAes128CcmSha256 = 4868,
		TlsAes128Ccm8Sha256 = 4869,
		TlsEcdheEcdsaWithAes128CbcSha256 = 49187,
		TlsEcdheEcdsaWithAes256CbcSha384 = 49188,
		TlsEcdhEcdsaWithAes128CbcSha256 = 49189,
		TlsEcdhEcdsaWithAes256CbcSha384 = 49190,
		TlsEcdheRsaWithAes128CbcSha256 = 49191,
		TlsEcdheRsaWithAes256CbcSha384 = 49192,
		TlsEcdhRsaWithAes128CbcSha256 = 49193,
		TlsEcdhRsaWithAes256CbcSha384 = 49194,
		TlsEcdheEcdsaWithAes128GcmSha256 = 49195,
		TlsEcdheEcdsaWithAes256GcmSha384 = 49196,
		TlsEcdhEcdsaWithAes128GcmSha256 = 49197,
		TlsEcdhEcdsaWithAes256GcmSha384 = 49198,
		TlsEcdheRsaWithAes128GcmSha256 = 49199,
		TlsEcdheRsaWithAes256GcmSha384 = 49200,
		TlsEcdhRsaWithAes128GcmSha256 = 49201,
		TlsEcdhRsaWithAes256GcmSha384 = 49202,
		TlsEcdheRsaWithChacha20Poly1305Sha256 = 52392,
		TlsEcdheEcdsaWithChacha20Poly1305Sha256 = 52393,
		TlsEmptyRenegotiationInfoScsv = 255,
		SslRsaWithRc2CbcMd5 = 65408,
		SslRsaWithIdeaCbcMd5 = 65409,
		SslRsaWithDesCbcMd5 = 65410,
		SslRsaWith3desEdeCbcMd5 = 65411,
		SslNoSuchCiphersuite = 65535
	}

	public enum SSLCiphersuiteGroup
	{
		Default,
		Compatibility,
		Legacy,
		Ats,
		ATSCompatibility
	}

	public enum tls_protocol_version_t : ushort
	{
		TLSv10 = 769,
		TLSv11 = 770,
		TLSv12 = 771,
		TLSv13 = 772,
		DTLSv10 = 65279,
		DTLSv12 = 65277
	}

	public enum tls_ciphersuite_t : ushort
	{
		RsaWith3desEdeCbcSha = 10,
		RsaWithAes128CbcSha = 47,
		RsaWithAes256CbcSha = 53,
		RsaWithAes128GcmSha256 = 156,
		RsaWithAes256GcmSha384 = 157,
		RsaWithAes128CbcSha256 = 60,
		RsaWithAes256CbcSha256 = 61,
		EcdheEcdsaWith3desEdeCbcSha = 49160,
		EcdheEcdsaWithAes128CbcSha = 49161,
		EcdheEcdsaWithAes256CbcSha = 49162,
		EcdheRsaWith3desEdeCbcSha = 49170,
		EcdheRsaWithAes128CbcSha = 49171,
		EcdheRsaWithAes256CbcSha = 49172,
		EcdheEcdsaWithAes128CbcSha256 = 49187,
		EcdheEcdsaWithAes256CbcSha384 = 49188,
		EcdheRsaWithAes128CbcSha256 = 49191,
		EcdheRsaWithAes256CbcSha384 = 49192,
		EcdheEcdsaWithAes128GcmSha256 = 49195,
		EcdheEcdsaWithAes256GcmSha384 = 49196,
		EcdheRsaWithAes128GcmSha256 = 49199,
		EcdheRsaWithAes256GcmSha384 = 49200,
		EcdheRsaWithChacha20Poly1305Sha256 = 52392,
		EcdheEcdsaWithChacha20Poly1305Sha256 = 52393,
		Aes128GcmSha256 = 4865,
		Aes256GcmSha384 = 4866,
		Chacha20Poly1305Sha256 = 4867
	}

	public enum tls_ciphersuite_group_t : ushort
	{
		@default,
		compatibility,
		legacy,
		ats,
		ats_compatibility
	}

	public enum SSLProtocol
	{
		SSLProtocolUnknown = 0,
		TLSProtocol1 = 4,
		TLSProtocol11 = 7,
		TLSProtocol12 = 8,
		DTLSProtocol1 = 9,
		TLSProtocol13 = 10,
		DTLSProtocol12 = 11,
		TLSProtocolMaxSupported = 999,
		SSLProtocol2 = 1,
		SSLProtocol3 = 2,
		SSLProtocol3Only = 3,
		TLSProtocol1Only = 5,
		SSLProtocolAll = 6
	}

	[Native]
	public enum NSURLCredentialPersistence : ulong
	{
		None,
		ForSession,
		Permanent,
		Synchronizable
	}

	public enum CFNetworkErrors
	{
		HostErrorHostNotFound = 1,
		HostErrorUnknown = 2,
		SOCKSErrorUnknownClientVersion = 100,
		SOCKSErrorUnsupportedServerVersion = 101,
		SOCKS4ErrorRequestFailed = 110,
		SOCKS4ErrorIdentdFailed = 111,
		SOCKS4ErrorIdConflict = 112,
		SOCKS4ErrorUnknownStatusCode = 113,
		SOCKS5ErrorBadState = 120,
		SOCKS5ErrorBadResponseAddr = 121,
		SOCKS5ErrorBadCredentials = 122,
		SOCKS5ErrorUnsupportedNegotiationMethod = 123,
		SOCKS5ErrorNoAcceptableMethod = 124,
		FTPErrorUnexpectedStatusCode = 200,
		ErrorHTTPAuthenticationTypeUnsupported = 300,
		ErrorHTTPBadCredentials = 301,
		ErrorHTTPConnectionLost = 302,
		ErrorHTTPParseFailure = 303,
		ErrorHTTPRedirectionLoopDetected = 304,
		ErrorHTTPBadURL = 305,
		ErrorHTTPProxyConnectionFailure = 306,
		ErrorHTTPBadProxyCredentials = 307,
		ErrorPACFileError = 308,
		ErrorPACFileAuth = 309,
		ErrorHTTPSProxyConnectionFailure = 310,
		StreamErrorHTTPSProxyFailureUnexpectedResponseToCONNECTMethod = 311,
		URLErrorBackgroundSessionInUseByAnotherProcess = -996,
		URLErrorBackgroundSessionWasDisconnected = -997,
		URLErrorUnknown = -998,
		URLErrorCancelled = -999,
		URLErrorBadURL = -1000,
		URLErrorTimedOut = -1001,
		URLErrorUnsupportedURL = -1002,
		URLErrorCannotFindHost = -1003,
		URLErrorCannotConnectToHost = -1004,
		URLErrorNetworkConnectionLost = -1005,
		URLErrorDNSLookupFailed = -1006,
		URLErrorHTTPTooManyRedirects = -1007,
		URLErrorResourceUnavailable = -1008,
		URLErrorNotConnectedToInternet = -1009,
		URLErrorRedirectToNonExistentLocation = -1010,
		URLErrorBadServerResponse = -1011,
		URLErrorUserCancelledAuthentication = -1012,
		URLErrorUserAuthenticationRequired = -1013,
		URLErrorZeroByteResource = -1014,
		URLErrorCannotDecodeRawData = -1015,
		URLErrorCannotDecodeContentData = -1016,
		URLErrorCannotParseResponse = -1017,
		URLErrorInternationalRoamingOff = -1018,
		URLErrorCallIsActive = -1019,
		URLErrorDataNotAllowed = -1020,
		URLErrorRequestBodyStreamExhausted = -1021,
		URLErrorAppTransportSecurityRequiresSecureConnection = -1022,
		URLErrorFileDoesNotExist = -1100,
		URLErrorFileIsDirectory = -1101,
		URLErrorNoPermissionsToReadFile = -1102,
		URLErrorDataLengthExceedsMaximum = -1103,
		URLErrorFileOutsideSafeArea = -1104,
		URLErrorSecureConnectionFailed = -1200,
		URLErrorServerCertificateHasBadDate = -1201,
		URLErrorServerCertificateUntrusted = -1202,
		URLErrorServerCertificateHasUnknownRoot = -1203,
		URLErrorServerCertificateNotYetValid = -1204,
		URLErrorClientCertificateRejected = -1205,
		URLErrorClientCertificateRequired = -1206,
		URLErrorCannotLoadFromNetwork = -2000,
		URLErrorCannotCreateFile = -3000,
		URLErrorCannotOpenFile = -3001,
		URLErrorCannotCloseFile = -3002,
		URLErrorCannotWriteToFile = -3003,
		URLErrorCannotRemoveFile = -3004,
		URLErrorCannotMoveFile = -3005,
		URLErrorDownloadDecodingFailedMidStream = -3006,
		URLErrorDownloadDecodingFailedToComplete = -3007,
		HTTPCookieCannotParseCookieFile = -4000,
		NetServiceErrorUnknown = -72000,
		NetServiceErrorCollision = -72001,
		NetServiceErrorNotFound = -72002,
		NetServiceErrorInProgress = -72003,
		NetServiceErrorBadArgument = -72004,
		NetServiceErrorCancel = -72005,
		NetServiceErrorInvalid = -72006,
		NetServiceErrorTimeout = -72007,
		NetServiceErrorDNSServiceFailure = -73000
	}

	public enum CFHostInfoType
	{
		Addresses = 0,
		Names = 1,
		Reachability = 2
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CFHostClientContext
	{
		public nint version;

		public unsafe void* info;

		public unsafe CFAllocatorRetainCallBack* retain;

		public unsafe CFAllocatorReleaseCallBack* release;

		public unsafe CFAllocatorCopyDescriptionCallBack* copyDescription;
	}

	public enum CFNetServicesError
	{
		Unknown = -72000,
		Collision = -72001,
		NotFound = -72002,
		InProgress = -72003,
		BadArgument = -72004,
		Cancel = -72005,
		Invalid = -72006,
		Timeout = -72007
	}

	public enum CFNetServiceMonitorType
	{
		CFNetServiceMonitorTXT = 1
	}

	[Flags]
	[Native]
	public enum CFNetServiceRegisterFlags : ulong
	{
		CFNetServiceFlagNoAutoRename = 0x1
	}

	[Flags]
	[Native]
	public enum CFNetServiceBrowserFlags : ulong
	{
		MoreComing = 0x1,
		IsDomain = 0x2,
		IsDefault = 0x4,
		IsRegistrationDomain = 0x4,
		Remove = 0x8
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CFNetServiceClientContext
	{
		public nint version;

		public unsafe void* info;

		public unsafe CFAllocatorRetainCallBack* retain;

		public unsafe CFAllocatorReleaseCallBack* release;

		public unsafe CFAllocatorCopyDescriptionCallBack* copyDescription;
	}

	[Verify (InferredFromMemberPrefix)]
	public enum kCFStreamErrorSOCKS : uint
	{
		SubDomainNone = 0,
		SubDomainVersionCode = 1,
		kCFStreamErrorSOCKS4SubDomainResponse = 2,
		kCFStreamErrorSOCKS5SubDomainUserPass = 3,
		kCFStreamErrorSOCKS5SubDomainMethod = 4,
		kCFStreamErrorSOCKS5SubDomainResponse = 5
	}

	[Verify (InferredFromMemberPrefix)]
	public enum kCFStreamErrorSOCKS : uint
	{
		kCFStreamErrorSOCKS5BadResponseAddr = 1,
		kCFStreamErrorSOCKS5BadState = 2,
		UnknownClientVersion = 3
	}

	[Verify (InferredFromMemberPrefix)]
	public enum kCFStreamErrorSOCKS4 : uint
	{
		RequestFailed = 91,
		IdentdFailed = 92,
		IdConflict = 93
	}

	public enum  : uint
	{
		SOCKS5NoAcceptableMethod = 255
	}

	public enum CFStreamErrorHTTP
	{
		ParseFailure = -1,
		RedirectionLoop = -2,
		BadURL = -3
	}

	public enum CFStreamErrorHTTPAuthentication
	{
		TypeUnsupported = -1000,
		BadUserName = -1001,
		BadPassword = -1002
	}

	[Introduced (PlatformName.iOS, 2, 0)]
	[Deprecated (PlatformName.iOS, 11, 0)]
	public enum CFNetDiagnosticStatusValues
	{
		NoErr = 0,
		Err = -66560,
		ConnectionUp = -66559,
		ConnectionIndeterminate = -66558,
		ConnectionDown = -66557
	}

	[Watch (2,0), TV (9,0), Mac (10,10), iOS (7,0)]
	[Native]
	[Verify (InferredFromMemberPrefix)]
	public enum NSURLErrorCancelledReason : long
	{
		UserForceQuitApplication = 0,
		BackgroundUpdatesDisabled = 1,
		InsufficientSystemResources = 2
	}

	[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
	[Native]
	public enum NSURLErrorNetworkUnavailableReason : long
	{
		Cellular = 0,
		Expensive = 1,
		Constrained = 2
	}

	[Native]
	[Verify (InferredFromMemberPrefix)]
	public enum NSURLError : long
	{
		Unknown = -1,
		Cancelled = -999,
		BadURL = -1000,
		TimedOut = -1001,
		UnsupportedURL = -1002,
		CannotFindHost = -1003,
		CannotConnectToHost = -1004,
		NetworkConnectionLost = -1005,
		DNSLookupFailed = -1006,
		HTTPTooManyRedirects = -1007,
		ResourceUnavailable = -1008,
		NotConnectedToInternet = -1009,
		RedirectToNonExistentLocation = -1010,
		BadServerResponse = -1011,
		UserCancelledAuthentication = -1012,
		UserAuthenticationRequired = -1013,
		ZeroByteResource = -1014,
		CannotDecodeRawData = -1015,
		CannotDecodeContentData = -1016,
		CannotParseResponse = -1017,
		AppTransportSecurityRequiresSecureConnection = -1022,
		FileDoesNotExist = -1100,
		FileIsDirectory = -1101,
		NoPermissionsToReadFile = -1102,
		DataLengthExceedsMaximum = -1103,
		FileOutsideSafeArea = -1104,
		SecureConnectionFailed = -1200,
		ServerCertificateHasBadDate = -1201,
		ServerCertificateUntrusted = -1202,
		ServerCertificateHasUnknownRoot = -1203,
		ServerCertificateNotYetValid = -1204,
		ClientCertificateRejected = -1205,
		ClientCertificateRequired = -1206,
		CannotLoadFromNetwork = -2000,
		CannotCreateFile = -3000,
		CannotOpenFile = -3001,
		CannotCloseFile = -3002,
		CannotWriteToFile = -3003,
		CannotRemoveFile = -3004,
		CannotMoveFile = -3005,
		DownloadDecodingFailedMidStream = -3006,
		DownloadDecodingFailedToComplete = -3007,
		InternationalRoamingOff = -1018,
		CallIsActive = -1019,
		DataNotAllowed = -1020,
		RequestBodyStreamExhausted = -1021,
		BackgroundSessionRequiresSharedContainer = -995,
		BackgroundSessionInUseByAnotherProcess = -996,
		BackgroundSessionWasDisconnected = -997
	}

	[Native]
	public enum NSURLRequestCachePolicy : ulong
	{
		UseProtocolCachePolicy = 0,
		ReloadIgnoringLocalCacheData = 1,
		ReloadIgnoringLocalAndRemoteCacheData = 4,
		ReloadIgnoringCacheData = ReloadIgnoringLocalCacheData,
		ReturnCacheDataElseLoad = 2,
		ReturnCacheDataDontLoad = 3,
		ReloadRevalidatingCacheData = 5
	}

	[Native]
	public enum NSURLRequestNetworkServiceType : ulong
	{
		Default = 0,
		VoIP = 1,
		Video = 2,
		Background = 3,
		Voice = 4,
		ResponsiveData = 6,
		AVStreaming = 8,
		ResponsiveAV = 9,
		CallSignaling = 11
	}

	[Native]
	public enum NSXMLParserExternalEntityResolvingPolicy : ulong
	{
		Never = 0,
		NoNetwork,
		SameOriginOnly,
		Always
	}

	[Native]
	public enum NSXMLParserError : long
	{
		InternalError = 1,
		OutOfMemoryError = 2,
		DocumentStartError = 3,
		EmptyDocumentError = 4,
		PrematureDocumentEndError = 5,
		InvalidHexCharacterRefError = 6,
		InvalidDecimalCharacterRefError = 7,
		InvalidCharacterRefError = 8,
		InvalidCharacterError = 9,
		CharacterRefAtEOFError = 10,
		CharacterRefInPrologError = 11,
		CharacterRefInEpilogError = 12,
		CharacterRefInDTDError = 13,
		EntityRefAtEOFError = 14,
		EntityRefInPrologError = 15,
		EntityRefInEpilogError = 16,
		EntityRefInDTDError = 17,
		ParsedEntityRefAtEOFError = 18,
		ParsedEntityRefInPrologError = 19,
		ParsedEntityRefInEpilogError = 20,
		ParsedEntityRefInInternalSubsetError = 21,
		EntityReferenceWithoutNameError = 22,
		EntityReferenceMissingSemiError = 23,
		ParsedEntityRefNoNameError = 24,
		ParsedEntityRefMissingSemiError = 25,
		UndeclaredEntityError = 26,
		UnparsedEntityError = 28,
		EntityIsExternalError = 29,
		EntityIsParameterError = 30,
		UnknownEncodingError = 31,
		EncodingNotSupportedError = 32,
		StringNotStartedError = 33,
		StringNotClosedError = 34,
		NamespaceDeclarationError = 35,
		EntityNotStartedError = 36,
		EntityNotFinishedError = 37,
		LessThanSymbolInAttributeError = 38,
		AttributeNotStartedError = 39,
		AttributeNotFinishedError = 40,
		AttributeHasNoValueError = 41,
		AttributeRedefinedError = 42,
		LiteralNotStartedError = 43,
		LiteralNotFinishedError = 44,
		CommentNotFinishedError = 45,
		ProcessingInstructionNotStartedError = 46,
		ProcessingInstructionNotFinishedError = 47,
		NotationNotStartedError = 48,
		NotationNotFinishedError = 49,
		AttributeListNotStartedError = 50,
		AttributeListNotFinishedError = 51,
		MixedContentDeclNotStartedError = 52,
		MixedContentDeclNotFinishedError = 53,
		ElementContentDeclNotStartedError = 54,
		ElementContentDeclNotFinishedError = 55,
		XMLDeclNotStartedError = 56,
		XMLDeclNotFinishedError = 57,
		ConditionalSectionNotStartedError = 58,
		ConditionalSectionNotFinishedError = 59,
		ExternalSubsetNotFinishedError = 60,
		DOCTYPEDeclNotFinishedError = 61,
		MisplacedCDATAEndStringError = 62,
		CDATANotFinishedError = 63,
		MisplacedXMLDeclarationError = 64,
		SpaceRequiredError = 65,
		SeparatorRequiredError = 66,
		NMTOKENRequiredError = 67,
		NAMERequiredError = 68,
		PCDATARequiredError = 69,
		URIRequiredError = 70,
		PublicIdentifierRequiredError = 71,
		LTRequiredError = 72,
		GTRequiredError = 73,
		LTSlashRequiredError = 74,
		EqualExpectedError = 75,
		TagNameMismatchError = 76,
		UnfinishedTagError = 77,
		StandaloneValueError = 78,
		InvalidEncodingNameError = 79,
		CommentContainsDoubleHyphenError = 80,
		InvalidEncodingError = 81,
		ExternalStandaloneEntityError = 82,
		InvalidConditionalSectionError = 83,
		EntityValueRequiredError = 84,
		NotWellBalancedError = 85,
		ExtraContentError = 86,
		InvalidCharacterInEntityError = 87,
		ParsedEntityRefInInternalError = 88,
		EntityRefLoopError = 89,
		EntityBoundaryError = 90,
		InvalidURIError = 91,
		URIFragmentError = 92,
		NoDTDError = 94,
		DelegateAbortedParseError = 512
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct au_tid_t
	{
		public int port;

		public uint machine;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct au_tid_addr_t
	{
		public int at_port;

		public uint at_type;

		public uint[] at_addr;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct au_mask_t
	{
		public uint am_success;

		public uint am_failure;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct auditinfo_t
	{
		public uint ai_auid;

		public au_mask_t ai_mask;

		public au_tid_t ai_termid;

		public int ai_asid;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct auditinfo_addr_t
	{
		public uint ai_auid;

		public au_mask_t ai_mask;

		public au_tid_addr_t ai_termid;

		public int ai_asid;

		public ulong ai_flags;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct auditpinfo_t
	{
		public int ap_pid;

		public uint ap_auid;

		public au_mask_t ap_mask;

		public au_tid_t ap_termid;

		public int ap_asid;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct auditpinfo_addr_t
	{
		public int ap_pid;

		public uint ap_auid;

		public au_mask_t ap_mask;

		public au_tid_addr_t ap_termid;

		public int ap_asid;

		public ulong ap_flags;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct au_session_t
	{
		public unsafe auditinfo_addr_t* as_aia_p;

		public au_mask_t as_mask;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct au_expire_after_t
	{
		public nint age;

		public nuint size;

		public byte op_type;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct au_qctrl_t
	{
		public int aq_hiwater;

		public int aq_lowater;

		public int aq_bufsz;

		public int aq_delay;

		public int aq_minfree;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct au_stat_t
	{
		public uint as_version;

		public uint as_numevent;

		public int as_generated;

		public int as_nonattrib;

		public int as_kernel;

		public int as_audit;

		public int as_auditctl;

		public int as_enqueue;

		public int as_written;

		public int as_wblocked;

		public int as_rblocked;

		public int as_dropped;

		public int as_totalsize;

		public uint as_memused;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct au_fstat_t
	{
		public ulong af_filesz;

		public ulong af_currsz;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct au_evclass_map_t
	{
		public ushort ec_number;

		public uint ec_class;
	}

	[Watch (0x2,0x0), TV (0x9,0x0), Flags, Mac (0xa,0x8), iOS (0x6,0x0)]
	[Native]
	public enum NSXPCConnectionOptions : ulong
	{
		NSXPCConnectionPrivileged = (1uL << 12)
	}

	[Native]
	[Verify (InferredFromMemberPrefix)]
	public enum Ns : long
	{
		FileNoSuchFileError = 4,
		FileLockingError = 255,
		FileReadUnknownError = 256,
		FileReadNoPermissionError = 257,
		FileReadInvalidFileNameError = 258,
		FileReadCorruptFileError = 259,
		FileReadNoSuchFileError = 260,
		FileReadInapplicableStringEncodingError = 261,
		FileReadUnsupportedSchemeError = 262,
		FileReadTooLargeError = 263,
		FileReadUnknownStringEncodingError = 264,
		FileWriteUnknownError = 512,
		FileWriteNoPermissionError = 513,
		FileWriteInvalidFileNameError = 514,
		FileWriteFileExistsError = 516,
		FileWriteInapplicableStringEncodingError = 517,
		FileWriteUnsupportedSchemeError = 518,
		FileWriteOutOfSpaceError = 640,
		FileWriteVolumeReadOnlyError = 642,
		FileManagerUnmountUnknownError = 768,
		FileManagerUnmountBusyError = 769,
		KeyValueValidationError = 1024,
		FormattingError = 2048,
		UserCancelledError = 3072,
		FeatureUnsupportedError = 3328,
		ExecutableNotLoadableError = 3584,
		ExecutableArchitectureMismatchError = 3585,
		ExecutableRuntimeMismatchError = 3586,
		ExecutableLoadError = 3587,
		ExecutableLinkError = 3588,
		FileErrorMinimum = 0,
		FileErrorMaximum = 1023,
		ValidationErrorMinimum = 1024,
		ValidationErrorMaximum = 2047,
		ExecutableErrorMinimum = 3584,
		ExecutableErrorMaximum = 3839,
		FormattingErrorMinimum = 2048,
		FormattingErrorMaximum = 2559,
		PropertyListReadCorruptError = 3840,
		PropertyListReadUnknownVersionError = 3841,
		PropertyListReadStreamError = 3842,
		PropertyListWriteStreamError = 3851,
		PropertyListWriteInvalidError = 3852,
		PropertyListErrorMinimum = 3840,
		PropertyListErrorMaximum = 4095,
		XPCConnectionInterrupted = 4097,
		XPCConnectionInvalid = 4099,
		XPCConnectionReplyInvalid = 4101,
		XPCConnectionErrorMinimum = 4096,
		XPCConnectionErrorMaximum = 4224,
		UbiquitousFileUnavailableError = 4353,
		UbiquitousFileNotUploadedDueToQuotaError = 4354,
		UbiquitousFileUbiquityServerNotAvailable = 4355,
		UbiquitousFileErrorMinimum = 4352,
		UbiquitousFileErrorMaximum = 4607,
		UserActivityHandoffFailedError = 4608,
		UserActivityConnectionUnavailableError = 4609,
		UserActivityRemoteApplicationTimedOutError = 4610,
		UserActivityHandoffUserInfoTooLargeError = 4611,
		UserActivityErrorMinimum = 4608,
		UserActivityErrorMaximum = 4863,
		CoderReadCorruptError = 4864,
		CoderValueNotFoundError = 4865,
		CoderInvalidValueError = 4866,
		CoderErrorMinimum = 4864,
		CoderErrorMaximum = 4991,
		BundleErrorMinimum = 4992,
		BundleErrorMaximum = 5119,
		BundleOnDemandResourceOutOfSpaceError = 4992,
		BundleOnDemandResourceExceededMaximumSizeError = 4993,
		BundleOnDemandResourceInvalidTagError = 4994,
		CloudSharingNetworkFailureError = 5120,
		CloudSharingQuotaExceededError = 5121,
		CloudSharingTooManyParticipantsError = 5122,
		CloudSharingConflictError = 5123,
		CloudSharingNoPermissionError = 5124,
		CloudSharingOtherError = 5375,
		CloudSharingErrorMinimum = 5120,
		CloudSharingErrorMaximum = 5375,
		CompressionFailedError = 5376,
		DecompressionFailedError = 5377,
		CompressionErrorMinimum = 5376,
		CompressionErrorMaximum = 5503
	}

	[Flags]
	[Native]
	public enum NSByteCountFormatterUnits : ulong
	{
		Default = 0x0,
		Bytes = 1uL << 0,
		Kb = 1uL << 1,
		Mb = 1uL << 2,
		Gb = 1uL << 3,
		Tb = 1uL << 4,
		Pb = 1uL << 5,
		Eb = 1uL << 6,
		Zb = 1uL << 7,
		YBOrHigher = 255uL << 8,
		All = 0xffff
	}

	[Native]
	public enum NSByteCountFormatterCountStyle : long
	{
		File = 0,
		Memory = 1,
		Decimal = 2,
		Binary = 3
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct _predicateFlags
	{
		public uint _evaluationBlocked;

		public uint _reservedPredicateFlags;
	}

	[Flags]
	[Native]
	public enum NSComparisonPredicateOptions : ulong
	{
		CaseInsensitivePredicateOption = 0x1,
		DiacriticInsensitivePredicateOption = 0x2,
		NormalizedPredicateOption = 0x4
	}

	[Native]
	public enum NSComparisonPredicateModifier : ulong
	{
		DirectPredicateModifier = 0,
		AllPredicateModifier,
		AnyPredicateModifier
	}

	[Native]
	public enum NSPredicateOperatorType : ulong
	{
		LessThanPredicateOperatorType = 0,
		LessThanOrEqualToPredicateOperatorType,
		GreaterThanPredicateOperatorType,
		GreaterThanOrEqualToPredicateOperatorType,
		EqualToPredicateOperatorType,
		NotEqualToPredicateOperatorType,
		MatchesPredicateOperatorType,
		LikePredicateOperatorType,
		BeginsWithPredicateOperatorType,
		EndsWithPredicateOperatorType,
		InPredicateOperatorType,
		CustomSelectorPredicateOperatorType,
		ContainsPredicateOperatorType = 99,
		BetweenPredicateOperatorType
	}

	[Native]
	public enum NSCompoundPredicateType : ulong
	{
		NotPredicateType = 0,
		AndPredicateType,
		OrPredicateType
	}

	[Native]
	public enum NSDateComponentsFormatterUnitsStyle : long
	{
		Positional = 0,
		Abbreviated,
		Short,
		Full,
		SpellOut,
		Brief
	}

	[Flags]
	[Native]
	public enum NSDateComponentsFormatterZeroFormattingBehavior : ulong
	{
		None = (0x0),
		Default = (1uL << 0),
		DropLeading = (1uL << 1),
		DropMiddle = (1uL << 2),
		DropTrailing = (1uL << 3),
		DropAll = (DropLeading | DropMiddle | DropTrailing),
		Pad = (1uL << 16)
	}

	[Native]
	public enum NSExpressionType : ulong
	{
		ConstantValueExpressionType = 0,
		EvaluatedObjectExpressionType,
		VariableExpressionType,
		KeyPathExpressionType,
		FunctionExpressionType,
		UnionSetExpressionType,
		IntersectSetExpressionType,
		MinusSetExpressionType,
		SubqueryExpressionType = 13,
		AggregateExpressionType = 14,
		AnyKeyExpressionType = 15,
		BlockExpressionType = 19,
		ConditionalExpressionType = 20
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct _expressionFlags
	{
		public uint _evaluationBlocked;

		public uint _reservedExpressionFlags;
	}

	[Flags]
	[Native]
	public enum NSFileCoordinatorReadingOptions : ulong
	{
		WithoutChanges = 1uL << 0,
		ResolvesSymbolicLink = 1uL << 1,
		ImmediatelyAvailableMetadataOnly = 1uL << 2,
		ForUploading = 1uL << 3
	}

	[Flags]
	[Native]
	public enum NSFileCoordinatorWritingOptions : ulong
	{
		ForDeleting = 1uL << 0,
		ForMoving = 1uL << 1,
		ForMerging = 1uL << 2,
		ForReplacing = 1uL << 3,
		ContentIndependentMetadataOnly = 1uL << 4
	}

	[Flags]
	[Native]
	public enum NSFileVersionAddingOptions : ulong
	{
		NSFileVersionAddingByMoving = 1uL << 0
	}

	[Flags]
	[Native]
	public enum NSFileVersionReplacingOptions : ulong
	{
		NSFileVersionReplacingByMoving = 1uL << 0
	}

	[Watch (0x2,0x0), TV (0x9,0x0), Flags, Mac (0xa,0x6), iOS (0x4,0x0)]
	[Native]
	public enum NSFileWrapperReadingOptions : ulong
	{
		Immediate = 1uL << 0,
		WithoutMapping = 1uL << 1
	}

	[Watch (0x2,0x0), TV (0x9,0x0), Flags, Mac (0xa,0x6), iOS (0x4,0x0)]
	[Native]
	public enum NSFileWrapperWritingOptions : ulong
	{
		Atomic = 1uL << 0,
		WithNameUpdating = 1uL << 1
	}

	[Native]
	public enum NSLinguisticTaggerUnit : long
	{
		Word,
		Sentence,
		Paragraph,
		Document
	}

	[Flags]
	[Native]
	public enum NSLinguisticTaggerOptions : ulong
	{
		OmitWords = 1uL << 0,
		OmitPunctuation = 1uL << 1,
		OmitWhitespace = 1uL << 2,
		OmitOther = 1uL << 3,
		JoinNames = 1uL << 4
	}

	[Native]
	public enum NSNetServicesError : long
	{
		UnknownError = -72000,
		CollisionError = -72001,
		NotFoundError = -72002,
		ActivityInProgress = -72003,
		BadArgumentError = -72004,
		CancelledError = -72005,
		InvalidError = -72006,
		TimeoutError = -72007
	}

	[Flags]
	[Native]
	public enum NSNetServiceOptions : ulong
	{
		NoAutoRename = 1uL << 0,
		ListenForConnections = 1uL << 1
	}

	[Native]
	[Verify (InferredFromMemberPrefix)]
	public enum NSUbiquitousKeyValueStore : long
	{
		ServerChange,
		InitialSyncChange,
		QuotaViolationChange,
		AccountChange
	}

	public enum SSLSessionOption
	{
		BreakOnServerAuth = 0,
		BreakOnCertRequested = 1,
		BreakOnClientAuth = 2,
		FalseStart = 3,
		SendOneByteRecord = 4,
		AllowServerIdentityChange = 5,
		Fallback = 6,
		BreakOnClientHello = 7,
		AllowRenegotiation = 8,
		EnableSessionTickets = 9
	}

	public enum SSLSessionState
	{
		Idle,
		Handshake,
		Connected,
		Closed,
		Aborted
	}

	public enum SSLClientCertificateState
	{
		None,
		Requested,
		Sent,
		Rejected
	}

	public enum SSLProtocolSide
	{
		ServerSide,
		ClientSide
	}

	public enum SSLConnectionType
	{
		StreamType,
		DatagramType
	}

	public enum SSLAuthenticate
	{
		NeverAuthenticate,
		AlwaysAuthenticate,
		TryAuthenticate
	}

	[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
	[Native]
	public enum NSURLSessionTaskState : long
	{
		Running = 0,
		Suspended = 1,
		Canceling = 2,
		Completed = 3
	}

	[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
	[Native]
	public enum NSURLSessionWebSocketMessageType : long
	{
		Data = 0,
		String = 1
	}

	[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
	[Native]
	public enum NSURLSessionWebSocketCloseCode : long
	{
		Invalid = 0,
		NormalClosure = 1000,
		GoingAway = 1001,
		ProtocolError = 1002,
		UnsupportedData = 1003,
		NoStatusReceived = 1005,
		AbnormalClosure = 1006,
		InvalidFramePayloadData = 1007,
		PolicyViolation = 1008,
		MessageTooBig = 1009,
		MandatoryExtensionMissing = 1010,
		InternalServerError = 1011,
		TLSHandshakeFailure = 1015
	}

	[NoWatch, NoTV, NoMac, iOS (11,0)]
	[Native]
	public enum NSURLSessionMultipathServiceType : long
	{
		None = 0,
		Handover = 1,
		Interactive = 2,
		Aggregate = 3
	}

	[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	[Native]
	public enum NSURLSessionDelayedRequestDisposition : long
	{
		ContinueLoading = 0,
		UseNewRequest = 1,
		Cancel = 2
	}

	[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
	[Native]
	public enum NSURLSessionAuthChallengeDisposition : long
	{
		UseCredential = 0,
		PerformDefaultHandling = 1,
		CancelAuthenticationChallenge = 2,
		RejectProtectionSpace = 3
	}

	[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
	[Native]
	public enum NSURLSessionResponseDisposition : long
	{
		Cancel = 0,
		Allow = 1,
		BecomeDownload = 2,
		BecomeStream = 3
	}

	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	[Native]
	public enum NSURLSessionTaskMetricsResourceFetchType : long
	{
		Unknown,
		NetworkLoad,
		ServerPush,
		LocalCache
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct PLAYRECT
	{
		public int x;

		public int y;

		public int uWidth;

		public int uHeight;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct INITINFO
	{
		public int uWidth;

		public int uHeight;
	}

	public enum AlarmhostMajorType : uint
	{
		OrAlarmhostAlarm = 1,
		OrAlarmhostException,
		OrAlarmhostOperation,
		Maj0rAlarmhostEvent
	}

	public enum AlarmhostMinorType : uint
	{
		ShortCircuit = 1,
		BrokenCircuit,
		AlarmReset,
		AlarmNormal,
		PasswordError,
		IdCardIllegally,
		KeypadRemove,
		KeypadRemoveRestore,
		DevRemove,
		DevRemoveRestore,
		BelowAlarmLimit1,
		BelowAlarmLimit2,
		BelowAlarmLimit3,
		BelowAlarmLimit4,
		AboveAlarmLimit1,
		AboveAlarmLimit2,
		AboveAlarmLimit3,
		AboveAlarmLimit4,
		UrgencybtnOn,
		UrgencybtnOff,
		VirtualDefenceBandit,
		VirtualDefenceFire,
		VirtualDefenceUrgent,
		AlarmhostMotdetStart,
		AlarmhostMotdetStop,
		AlarmhostHideAlarmStart,
		AlarmhostHideAlarmStop,
		AlarmhostUpsAlarm,
		AlarmhostElectricityMeterAlarm,
		AlarmhostSwitchPowerAlarm,
		AlarmhostGasDetectSysAlarm,
		AlarmhostTransformerTempratureAlarm,
		AlarmhostTempHumiAlarm,
		AlarmhostUpsAlarmRestore,
		AlarmhostElectricityMeterAlarmRestore,
		AlarmhostSwitchPowerAlarmRestore,
		AlarmhostGasDetectSysAlarmRestore,
		AlarmhostTransformerTempratureAlarmRestore,
		AlarmhostTempHumiAlarmRestore,
		AlarmhostWaterLevelSensorAlarm,
		AlarmhostWaterLevelSensorAlarmRestore,
		AlarmhostDustNoiseAlarm,
		AlarmhostDustNoiseAlarmRestore,
		AlarmhostEnvironmentalLoggerAlarm,
		AlarmhostEnvironmentalLoggerAlarmRestore,
		AlarmhostTriggerTamper,
		AlarmhostTriggerTamperRestore,
		AlarmhostEmergencyCallHelpAlarm,
		AlarmhostEmergencyCallHelpAlarmRestore,
		PowerOn = 1,
		PowerOff,
		WdtReset,
		LowBatteryVoltage,
		AcLoss,
		AcRestore,
		RtcException,
		NetworkConnectFailure,
		NetworkConnectRestore,
		TelLineConnectFailure,
		TelLineConnectRestore,
		ExpanderBusLoss,
		ExpanderBusRestore,
		KeypadBusLoss,
		KeypadBusRestore,
		SensorFailure,
		SensorRestore,
		Rs485ConnectFailure,
		Rs485ConnectRestore,
		BattertVoltageRestore,
		WiredNetworkAbnormal,
		WiredNetworkRestore,
		GprsAbnormal,
		GprsRestore,
		Minor3gAbnormal,
		Minor3gRestore,
		SimCardAbnormal,
		SimCardRestore,
		AlarmhostViLost,
		AlarmhostIllegalAccess,
		AlarmhostHdFull,
		AlarmhostHdError,
		AlarmhostDcdLost,
		AlarmhostIpConflict,
		AlarmhostNetBroken,
		AlarmhostRecError,
		AlarmhostViException,
		AlarmhostFormatHddError,
		AlarmhostUsbError,
		AlarmhostUsbRestore,
		AlarmhostPrintError,
		AlarmhostPrintRestore,
		SubsystemCommunicationError,
		AlarmhostIpcNoLink,
		AlarmhostIpcIpConflict,
		AlarmhostViMismatch,
		AlarmhostMcuRestart,
		AlarmhostGprsModuleFault,
		AlarmhostTelephoneModuleFault,
		AlarmhostWifiAbnormal,
		AlarmhostWifiRestore,
		AlarmhostRfAbnormal,
		AlarmhostRfRestore,
		AlarmhostDetectorOnline,
		AlarmhostDetectorOffline,
		AlarmhostDetectorBatteryNormal,
		AlarmhostDetectorBatteryLow,
		Guard = 1,
		Unguard,
		Bypass,
		DuressAccess,
		AlarmhostLocalReboot,
		AlarmhostRemoteReboot,
		AlarmhostLocalUpgrade,
		AlarmhostRemoteUpgrade,
		RecoveryDefaultParam,
		AlarmOutput,
		AccessOpen,
		AccessClose,
		SirenOpen,
		SirenClose,
		ModZoneConfig,
		ModAlarmoutConifg,
		ModAnalogConfig,
		Rs485Config,
		PhoneConfig,
		AddAdmin,
		ModAdminParam,
		DelAdmin,
		AddNetuser,
		ModNetuserParam,
		DelNetuser,
		AddOperatoruser,
		ModOperatoruserPw,
		DelOperatoruser,
		AddKeypaduser,
		DelKeypaduser,
		RemoteuserLogin,
		RemoteuserLogout,
		RemoteGuard,
		RemoteUnguard,
		ModHostConfig,
		RestoreBypass,
		AlarmoutOpen,
		AlarmoutClose,
		ModSubsystemParam,
		GroupBypass,
		RestoreGroupBypass,
		ModGrpsParam,
		ModNetReportParam,
		ModReportMod,
		ModGatewayParam,
		AlarmhostRemoteStartRec,
		AlarmhostRemoteStopRec,
		AlarmhostStartTransChan,
		AlarmhostStopTransChan,
		AlarmhostStartVt,
		AlarmhostStopVtm,
		AlarmhostRemotePlaybyfile,
		AlarmhostRemotePlaybytime,
		AlarmhostRemotePtzctrl,
		AlarmhostRemoteFormatHdd,
		AlarmhostRemoteLockfile,
		AlarmhostRemoteUnlockfile,
		AlarmhostRemoteCfgfileOutput,
		AlarmhostRemoteCfgfileIntput,
		AlarmhostRemoteRecfileOutput,
		AlarmhostStayArm,
		AlarmhostQuickArm,
		AlarmhostAutomaticArm,
		AlarmhostAutomaticDisarm,
		AlarmhostKeyswitchArm,
		AlarmhostKeyswitchDisarm,
		AlarmhostClearAlarm,
		AlarmhostModFaultCfg,
		AlarmhostModEventTriggerAlarmoutCfg,
		AlarmhostSearchExternalModule,
		AlarmhostRegisterExternalModule,
		AlarmhostCloseKeyboardAlarm,
		AlarmhostMod3gParam,
		AlarmhostModPrintParam,
		SdCardFormat,
		SubsystemUpgrade,
		AlarmhostPlanArmCfg,
		AlarmhostPhoneArm,
		AlarmhostPhoneStayArm,
		AlarmhostPhoneQuickArm,
		AlarmhostPhoneDisarm,
		AlarmhostPhoneClearAlarm,
		AlarmhostWhitelistCfg,
		AlarmhostTimeTriggerCfg,
		AlarmhostCaptrueCfg,
		AlarmhostTamperCfg,
		AlarmhostTemporaryPassword,
		AlarmhostOnekeyAwayArm,
		AlarmhostOnekeyStayArm,
		AlarmhostSingleZoneArm,
		AlarmhostSingleZoneDisarm,
		AlarmhostHiddnsConfig,
		AlarmhostRemoteKeyboardUpdata,
		AlarmhostZoneAddDetector,
		AlarmhostZoneDeleteDetector,
		AlarmhostQueryDetectorSignal,
		AlarmhostQueryDetectorBattery,
		AlarmhostSetDetectorGuard,
		AlarmhostSetDetectorUnguard,
		AlarmhostSetWifiParameter,
		AlarmhostOpenVoice,
		AlarmhostCloseVoice,
		AlarmhostRemoteKeypadUpgrade,
		AlarmhostOnetouchAwayArming,
		AlarmhostOnetouchStayArming,
		AlarmhostSinglePartitionArmingOrDisarming,
		AlarmhostCardConfiguration,
		AlarmhostCardArmingOrDisarming,
		AlarmhostExpendingNetcenterConfiguration,
		AlarmhostNetcardConfiguration,
		AlarmhostDdnsConfiguration,
		AlarmhostRs485busConfiguration,
		AlarmhostRs485busReRegistration,
		AlarmhostRemoteOpenElectricLock,
		AlarmhostRemoteCloseElectricLock,
		AlarmhostLocalOpenElectricLock,
		AlarmhostLocalCloseElectricLock,
		AlarmhostOpenAlarmLamp,
		AlarmhostCloseAlarmLamp,
		AlarmhostLocalSetDeviceActive = 240,
		AlarmhostRemoteSetDeviceActive = 241,
		AlarmhostLocalParaFactoryDefault = 242,
		AlarmhostRemoteParaFactoryDefault = 243,
		SchooltimeIrgiB = 1,
		SchooltimeSdk,
		SchooltimeSelftest,
		SubsystemAbnormalinsert,
		SubsystemAbnormalpullout,
		AutoArm,
		AutoDisarm,
		TimeTiggerOn,
		TimeTiggerOff,
		AutoArmFaild,
		AutoDisarmFaild,
		TimeTiggerOnFaild,
		TimeTiggerOffFaild,
		MandatoryAlarm,
		KeypadLocked,
		UsbInsert,
		UsbPullout
	}

	public enum CharEncodeType
	{
		Err = -1,
		No = 0,
		Cn = 1,
		Gbk = 2,
		Big5 = 3,
		Jp = 4,
		Kr = 5,
		Utf8 = 6,
		Iso88591 = 7
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TIME
	{
		public uint dwYear;

		public uint dwMonth;

		public uint dwDay;

		public uint dwHour;

		public uint dwMinute;

		public uint dwSecond;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TIME_V30
	{
		public ushort wYear;

		public byte byMonth;

		public byte byDay;

		public byte byHour;

		public byte byMinute;

		public byte bySecond;

		public byte byRes;

		public ushort wMilliSec;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CALIBRATE_TIME
	{
		public uint dwSize;

		public NET_DVR_TIME struTime;

		public ushort wMilliSec;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TIMESIGN_CFG
	{
		public uint dwSize;

		public byte[] byCustomSetTimeSign;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TIME_EX
	{
		public ushort wYear;

		public byte byMonth;

		public byte byDay;

		public byte byHour;

		public byte byMinute;

		public byte bySecond;

		public byte byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCHEDTIME
	{
		public byte byStartHour;

		public byte byStartMin;

		public byte byStopHour;

		public byte byStopMin;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_STRUCTHEAD
	{
		public ushort wLength;

		public byte byVersion;

		public byte byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_HANDLEEXCEPTION_V41
	{
		public uint dwHandleType;

		public uint dwMaxRelAlarmOutChanNum;

		public uint[] dwRelAlarmOut;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_HANDLEEXCEPTION_V40
	{
		public uint dwHandleType;

		public uint dwMaxRelAlarmOutChanNum;

		public uint dwRelAlarmOutChanNum;

		public uint[] dwRelAlarmOut;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_HANDLEEXCEPTION_V30
	{
		public uint dwHandleType;

		public byte[] byRelAlarmOut;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_HANDLEEXCEPTION
	{
		public uint dwHandleType;

		public byte[] byRelAlarmOut;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEVICECFG
	{
		public uint dwSize;

		public byte[] sDVRName;

		public uint dwDVRID;

		public uint dwRecycleRecord;

		public byte[] sSerialNumber;

		public uint dwSoftwareVersion;

		public uint dwSoftwareBuildDate;

		public uint dwDSPSoftwareVersion;

		public uint dwDSPSoftwareBuildDate;

		public uint dwPanelVersion;

		public uint dwHardwareVersion;

		public byte byAlarmInPortNum;

		public byte byAlarmOutPortNum;

		public byte byRS232Num;

		public byte byRS485Num;

		public byte byNetworkPortNum;

		public byte byDiskCtrlNum;

		public byte byDiskNum;

		public byte byDVRType;

		public byte byChanNum;

		public byte byStartChan;

		public byte byDecordChans;

		public byte byVGANum;

		public byte byUSBNum;

		public byte byAuxoutNum;

		public byte byAudioNum;

		public byte byIPChanNum;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IPADDR
	{
		public sbyte[] sIpV4;

		public byte[] byIPv6;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ETHERNET_V30
	{
		public NET_DVR_IPADDR struDVRIP;

		public NET_DVR_IPADDR struDVRIPMask;

		public uint dwNetInterface;

		public ushort wDVRPort;

		public ushort wMTU;

		public byte[] byMACAddr;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ETHERNET
	{
		public sbyte[] sDVRIP;

		public sbyte[] sDVRIPMask;

		public uint dwNetInterface;

		public ushort wDVRPort;

		public byte[] byMACAddr;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PPPOECFG
	{
		public uint dwPPPOE;

		public byte[] sPPPoEUser;

		public sbyte[] sPPPoEPassword;

		public NET_DVR_IPADDR struPPPoEIP;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_NETCFG_V30
	{
		public uint dwSize;

		public NET_DVR_ETHERNET_V30[] struEtherNet;

		public NET_DVR_IPADDR[] struRes1;

		public NET_DVR_IPADDR struAlarmHostIpAddr;

		public byte[] byRes2;

		public ushort wAlarmHostIpPort;

		public byte byUseDhcp;

		public byte byIPv6Mode;

		public NET_DVR_IPADDR struDnsServer1IpAddr;

		public NET_DVR_IPADDR struDnsServer2IpAddr;

		public byte[] byIpResolver;

		public ushort wIpResolverPort;

		public ushort wHttpPortNo;

		public NET_DVR_IPADDR struMulticastIpAddr;

		public NET_DVR_IPADDR struGatewayIpAddr;

		public NET_DVR_PPPOECFG struPPPoE;

		public byte byEnablePrivateMulticastDiscovery;

		public byte byEnableOnvifMulticastDiscovery;

		public byte byEnableDNS;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ETHERNET_MULTI
	{
		public NET_DVR_IPADDR struDVRIP;

		public NET_DVR_IPADDR struDVRIPMask;

		public uint dwNetInterface;

		public byte byCardType;

		public byte byEnableDNS;

		public ushort wMTU;

		public byte[] byMACAddr;

		public byte[] byRes2;

		public byte byUseDhcp;

		public byte[] byRes3;

		public NET_DVR_IPADDR struGatewayIpAddr;

		public NET_DVR_IPADDR struDnsServer1IpAddr;

		public NET_DVR_IPADDR struDnsServer2IpAddr;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_NETCFG_MULTI
	{
		public uint dwSize;

		public byte byDefaultRoute;

		public byte byNetworkCardNum;

		public byte byWorkMode;

		public byte byRes;

		public NET_DVR_ETHERNET_MULTI[] struEtherNet;

		public NET_DVR_IPADDR struManageHost1IpAddr;

		public NET_DVR_IPADDR struManageHost2IpAddr;

		public NET_DVR_IPADDR struAlarmHostIpAddr;

		public ushort wManageHost1Port;

		public ushort wManageHost2Port;

		public ushort wAlarmHostIpPort;

		public byte[] byIpResolver;

		public ushort wIpResolverPort;

		public ushort wDvrPort;

		public ushort wHttpPortNo;

		public ushort wDvrPort2;

		public byte[] byRes2;

		public NET_DVR_IPADDR struMulticastIpAddr;

		public NET_DVR_PPPOECFG struPPPoE;

		public byte[] byRes3;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_NETCFG
	{
		public uint dwSize;

		public NET_DVR_ETHERNET[] struEtherNet;

		public sbyte[] sManageHostIP;

		public ushort wManageHostPort;

		public sbyte[] sIPServerIP;

		public sbyte[] sMultiCastIP;

		public sbyte[] sGatewayIP;

		public sbyte[] sNFSIP;

		public byte[] sNFSDirectory;

		public uint dwPPPOE;

		public byte[] sPPPoEUser;

		public sbyte[] sPPPoEPassword;

		public sbyte[] sPPPoEIP;

		public ushort wHttpPort;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SIP_CFG
	{
		public uint dwSize;

		public byte byEnableAutoLogin;

		public byte byLoginStatus;

		public byte[] byRes1;

		public NET_DVR_IPADDR stuServerIP;

		public ushort wServerPort;

		public byte[] byRes2;

		public byte[] byUserName;

		public byte[] byPassWord;

		public byte[] byLocalNo;

		public byte[] byDispalyName;

		public ushort wLocalPort;

		public byte byLoginCycle;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IP_VIEW_DEVCFG
	{
		public uint dwSize;

		public byte byDefaultRing;

		public byte byRingVolume;

		public byte byInputVolume;

		public byte byOutputVolume;

		public ushort wRtpPort;

		public byte[] byRes1;

		public uint dwPreviewDelayTime;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IP_VIEW_AUDIO_CFG
	{
		public uint dwSize;

		public byte byAudioEncPri1;

		public byte byAudioEncPri2;

		public ushort wAudioPacketLen1;

		public ushort wAudioPacketLen2;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IP_VIEW_CALL_CFG
	{
		public uint dwSize;

		public byte byEnableAutoResponse;

		public byte byAudoResponseTime;

		public byte[] byRes1;

		public byte byEnableAlarmNumber1;

		public byte[] byRes2;

		public byte[] byAlarmNumber1;

		public byte byEnableAlarmNumber2;

		public byte[] byRes3;

		public byte[] byAlarmNumber2;

		public byte[] byRes4;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RECORDCHAN
	{
		public uint dwMaxRecordChanNum;

		public uint dwCurRecordChanNum;

		public uint[] dwRelRecordChan;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MOTION_V30
	{
		public byte[][] byMotionScope;

		public byte byMotionSensitive;

		public byte byEnableHandleMotion;

		public byte byEnableDisplay;

		public sbyte reservedData;

		public NET_DVR_HANDLEEXCEPTION_V30 struMotionHandleType;

		public NET_DVR_SCHEDTIME[][] struAlarmTime;

		public byte[] byRelRecordChan;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MOTION
	{
		public byte[][] byMotionScope;

		public byte byMotionSensitive;

		public byte byEnableHandleMotion;

		public byte byEnableDisplay;

		public sbyte reservedData;

		public NET_DVR_HANDLEEXCEPTION strMotionHandleType;

		public NET_DVR_SCHEDTIME[][] struAlarmTime;

		public byte[] byRelRecordChan;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_HIDEALARM_V30
	{
		public uint dwEnableHideAlarm;

		public ushort wHideAlarmAreaTopLeftX;

		public ushort wHideAlarmAreaTopLeftY;

		public ushort wHideAlarmAreaWidth;

		public ushort wHideAlarmAreaHeight;

		public NET_DVR_HANDLEEXCEPTION_V30 strHideAlarmHandleType;

		public NET_DVR_SCHEDTIME[][] struAlarmTime;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_HIDEALARM
	{
		public uint dwEnableHideAlarm;

		public ushort wHideAlarmAreaTopLeftX;

		public ushort wHideAlarmAreaTopLeftY;

		public ushort wHideAlarmAreaWidth;

		public ushort wHideAlarmAreaHeight;

		public NET_DVR_HANDLEEXCEPTION strHideAlarmHandleType;

		public NET_DVR_SCHEDTIME[][] struAlarmTime;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VILOST_V30
	{
		public byte byEnableHandleVILost;

		public NET_DVR_HANDLEEXCEPTION_V30 strVILostHandleType;

		public NET_DVR_SCHEDTIME[][] struAlarmTime;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VILOST
	{
		public byte byEnableHandleVILost;

		public NET_DVR_HANDLEEXCEPTION strVILostHandleType;

		public NET_DVR_SCHEDTIME[][] struAlarmTime;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SHELTER
	{
		public ushort wHideAreaTopLeftX;

		public ushort wHideAreaTopLeftY;

		public ushort wHideAreaWidth;

		public ushort wHideAreaHeight;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_COLOR
	{
		public byte byBrightness;

		public byte byContrast;

		public byte bySaturation;

		public byte byHue;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RGB_COLOR
	{
		public byte byRed;

		public byte byGreen;

		public byte byBlue;

		public byte byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_POINT
	{
		public float fX;

		public float fY;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PICCFG_V30
	{
		public uint dwSize;

		public byte[] sChanName;

		public uint dwVideoFormat;

		public byte[] byReservedData;

		public uint dwShowChanName;

		public ushort wShowNameTopLeftX;

		public ushort wShowNameTopLeftY;

		public NET_DVR_VILOST_V30 struVILost;

		public NET_DVR_VILOST_V30 struRes;

		public NET_DVR_MOTION_V30 struMotion;

		public NET_DVR_HIDEALARM_V30 struHideAlarm;

		public uint dwEnableHide;

		public NET_DVR_SHELTER[] struShelter;

		public uint dwShowOsd;

		public ushort wOSDTopLeftX;

		public ushort wOSDTopLeftY;

		public byte byOSDType;

		public byte byDispWeek;

		public byte byOSDAttrib;

		public byte byHourOSDType;

		public byte byFontSize;

		public byte byOSDColorType;

		public byte byAlignment;

		public byte byOSDMilliSecondEnable;

		public NET_DVR_RGB_COLOR struOsdColor;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PICCFG_EX
	{
		public uint dwSize;

		public byte[] sChanName;

		public uint dwVideoFormat;

		public byte byBrightness;

		public byte byContrast;

		public byte bySaturation;

		public byte byHue;

		public uint dwShowChanName;

		public ushort wShowNameTopLeftX;

		public ushort wShowNameTopLeftY;

		public NET_DVR_VILOST struVILost;

		public NET_DVR_MOTION struMotion;

		public NET_DVR_HIDEALARM struHideAlarm;

		public uint dwEnableHide;

		public NET_DVR_SHELTER[] struShelter;

		public uint dwShowOsd;

		public ushort wOSDTopLeftX;

		public ushort wOSDTopLeftY;

		public byte byOSDType;

		public byte byDispWeek;

		public byte byOSDAttrib;

		public byte byHourOsdType;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PICCFG
	{
		public uint dwSize;

		public byte[] sChanName;

		public uint dwVideoFormat;

		public byte byBrightness;

		public byte byContrast;

		public byte bySaturation;

		public byte byHue;

		public uint dwShowChanName;

		public ushort wShowNameTopLeftX;

		public ushort wShowNameTopLeftY;

		public NET_DVR_VILOST struVILost;

		public NET_DVR_MOTION struMotion;

		public NET_DVR_HIDEALARM struHideAlarm;

		public uint dwEnableHide;

		public ushort wHideAreaTopLeftX;

		public ushort wHideAreaTopLeftY;

		public ushort wHideAreaWidth;

		public ushort wHideAreaHeight;

		public uint dwShowOsd;

		public ushort wOSDTopLeftX;

		public ushort wOSDTopLeftY;

		public byte byOSDType;

		public byte byDispWeek;

		public byte byOSDAttrib;

		public sbyte reservedData2;
	}

	public enum BitrateEncodeIndex : uint
	{
		def = 0,
		BITRATE_ENCODE_8kps = 1,
		BITRATE_ENCODE_16kps = 2,
		BITRATE_ENCODE_32kps = 3,
		BITRATE_ENCODE_64kps = 4,
		BITRATE_ENCODE_128kps = 5,
		BITRATE_ENCODE_192kps = 6,
		BITRATE_ENCODE_40kps = 7,
		BITRATE_ENCODE_48kps = 8,
		BITRATE_ENCODE_56kps = 9,
		BITRATE_ENCODE_80kps = 10,
		BITRATE_ENCODE_96kps = 11,
		BITRATE_ENCODE_112kps = 12,
		BITRATE_ENCODE_144kps = 13,
		BITRATE_ENCODE_160kps = 14
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_COMPRESSION_INFO_V30
	{
		public byte byStreamType;

		public byte byResolution;

		public byte byBitrateType;

		public byte byPicQuality;

		public uint dwVideoBitrate;

		public uint dwVideoFrameRate;

		public ushort wIntervalFrameI;

		public byte byIntervalBPFrame;

		public byte byres1;

		public byte byVideoEncType;

		public byte byAudioEncType;

		public byte byVideoEncComplexity;

		public byte byEnableSvc;

		public byte byFormatType;

		public byte byAudioBitRate;

		public byte byStreamSmooth;

		public byte byAudioSamplingRate;

		public byte bySmartCodec;

		public byte byres;

		public ushort wAverageVideoBitrate;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_COMPRESSIONCFG_V30
	{
		public uint dwSize;

		public NET_DVR_COMPRESSION_INFO_V30 struNormHighRecordPara;

		public NET_DVR_COMPRESSION_INFO_V30 struRes;

		public NET_DVR_COMPRESSION_INFO_V30 struEventRecordPara;

		public NET_DVR_COMPRESSION_INFO_V30 struNetPara;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_COMPRESSION_INFO
	{
		public byte byStreamType;

		public byte byResolution;

		public byte byBitrateType;

		public byte byPicQuality;

		public uint dwVideoBitrate;

		public uint dwVideoFrameRate;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_COMPRESSIONCFG
	{
		public uint dwSize;

		public NET_DVR_COMPRESSION_INFO struRecordPara;

		public NET_DVR_COMPRESSION_INFO struNetPara;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_COMPRESSION_INFO_EX
	{
		public byte byStreamType;

		public byte byResolution;

		public byte byBitrateType;

		public byte byPicQuality;

		public uint dwVideoBitrate;

		public uint dwVideoFrameRate;

		public ushort wIntervalFrameI;

		public byte byIntervalBPFrame;

		public byte byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_COMPRESSIONCFG_EX
	{
		public uint dwSize;

		public NET_DVR_COMPRESSION_INFO_EX struRecordPara;

		public NET_DVR_COMPRESSION_INFO_EX struNetPara;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RECORDSCHED
	{
		public NET_DVR_SCHEDTIME struRecordTime;

		public byte byRecordType;

		public sbyte[] reservedData;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RECORDDAY
	{
		public ushort wAllDayRecord;

		public byte byRecordType;

		public sbyte reservedData;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RECORD_V30
	{
		public uint dwSize;

		public uint dwRecord;

		public NET_DVR_RECORDDAY[] struRecAllDay;

		public NET_DVR_RECORDSCHED[][] struRecordSched;

		public uint dwRecordTime;

		public uint dwPreRecordTime;

		public uint dwRecorderDuration;

		public byte byRedundancyRec;

		public byte byAudioRec;

		public byte byStreamType;

		public byte byPassbackRecord;

		public ushort wLockDuration;

		public byte byRecordBackup;

		public byte bySVCLevel;

		public byte byRecordManage;

		public byte byExtraSaveAudio;

		public byte[] byReserve;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RECORDSCHED_V40
	{
		public NET_DVR_SCHEDTIME struRecordTime;

		public byte byRecordType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RECORDDAY_V40
	{
		public byte byAllDayRecord;

		public byte byRecordType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RECORD_V40
	{
		public uint dwSize;

		public uint dwRecord;

		public NET_DVR_RECORDDAY_V40[] struRecAllDay;

		public NET_DVR_RECORDSCHED_V40[][] struRecordSched;

		public uint dwRecordTime;

		public uint dwPreRecordTime;

		public uint dwRecorderDuration;

		public byte byRedundancyRec;

		public byte byAudioRec;

		public byte byStreamType;

		public byte byPassbackRecord;

		public ushort wLockDuration;

		public byte byRecordBackup;

		public byte bySVCLevel;

		public byte byRecordManage;

		public byte byExtraSaveAudio;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RECORD
	{
		public uint dwSize;

		public uint dwRecord;

		public NET_DVR_RECORDDAY[] struRecAllDay;

		public NET_DVR_RECORDSCHED[][] struRecordSched;

		public uint dwRecordTime;

		public uint dwPreRecordTime;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PTZ_PROTOCOL
	{
		public uint dwType;

		public byte[] byDescribe;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PTZCFG
	{
		public uint dwSize;

		public NET_DVR_PTZ_PROTOCOL[] struPtz;

		public uint dwPtzNum;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SERIALSTART_V40
	{
		public uint dwSize;

		public uint dwSerialType;

		public byte bySerialNum;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DECODERCFG_V40
	{
		public uint dwSize;

		public uint dwBaudRate;

		public byte byDataBit;

		public byte byStopBit;

		public byte byParity;

		public byte byFlowcontrol;

		public ushort wDecoderType;

		public ushort wDecoderAddress;

		public byte[] bySetPreset;

		public byte[] bySetCruise;

		public byte[] bySetTrack;

		public byte bySerialNO;

		public byte byWorkMode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DECODERCFG_V30
	{
		public uint dwSize;

		public uint dwBaudRate;

		public byte byDataBit;

		public byte byStopBit;

		public byte byParity;

		public byte byFlowcontrol;

		public ushort wDecoderType;

		public ushort wDecoderAddress;

		public byte[] bySetPreset;

		public byte[] bySetCruise;

		public byte[] bySetTrack;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DECODERCFG
	{
		public uint dwSize;

		public uint dwBaudRate;

		public byte byDataBit;

		public byte byStopBit;

		public byte byParity;

		public byte byFlowcontrol;

		public ushort wDecoderType;

		public ushort wDecoderAddress;

		public byte[] bySetPreset;

		public byte[] bySetCruise;

		public byte[] bySetTrack;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PPPCFG_V30
	{
		public NET_DVR_IPADDR struRemoteIP;

		public NET_DVR_IPADDR struLocalIP;

		public sbyte[] sLocalIPMask;

		public byte[] sUsername;

		public byte[] sPassword;

		public byte byPPPMode;

		public byte byRedial;

		public byte byRedialMode;

		public byte byDataEncrypt;

		public uint dwMTU;

		public sbyte[] sTelephoneNumber;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PPPCFG
	{
		public sbyte[] sRemoteIP;

		public sbyte[] sLocalIP;

		public sbyte[] sLocalIPMask;

		public byte[] sUsername;

		public byte[] sPassword;

		public byte byPPPMode;

		public byte byRedial;

		public byte byRedialMode;

		public byte byDataEncrypt;

		public uint dwMTU;

		public sbyte[] sTelephoneNumber;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SINGLE_RS232
	{
		public uint dwBaudRate;

		public byte byDataBit;

		public byte byStopBit;

		public byte byParity;

		public byte byFlowcontrol;

		public uint dwWorkMode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_USB_RS232
	{
		public uint dwBaudRate;

		public byte byDataBit;

		public byte byStopBit;

		public byte byParity;

		public byte byFlowcontrol;

		public byte byVirtualSerialPort;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RS232CFG_V30
	{
		public uint dwSize;

		public NET_DVR_SINGLE_RS232[] struRs232;

		public NET_DVR_PPPCFG_V30 struPPPConfig;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RS232CFG
	{
		public uint dwSize;

		public uint dwBaudRate;

		public byte byDataBit;

		public byte byStopBit;

		public byte byParity;

		public byte byFlowcontrol;

		public uint dwWorkMode;

		public NET_DVR_PPPCFG struPPPConfig;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct LPNET_DVR_PRESETCHAN_INFO
	{
		public uint dwEnablePresetChan;

		public uint dwPresetPointNo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct LPNET_DVR_CRUISECHAN_INFO
	{
		public uint dwEnableCruiseChan;

		public uint dwCruiseNo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct LPNET_DVR_PTZTRACKCHAN_INFO
	{
		public uint dwEnablePtzTrackChan;

		public uint dwPtzTrackNo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PTZ_NOTIFICATION
	{
		public uint dwSize;

		public ushort byEventType;

		public byte[] byRes;

		public uint dwEnablePresetChanNum;

		public NET_DVR_PRESETCHAN_INFO[] struPresetChanInfo;

		public uint dwEnableCruiseChanNum;

		public NET_DVR_CRUISECHAN_INFO[] struCruiseChanInfo;

		public uint dwEnablePtzTrackChanNum;

		public NET_DVR_PTZTRACKCHAN_INFO[] struPtzTrackInfo;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMINCFG_V40
	{
		public uint dwSize;

		public byte[] sAlarmInName;

		public byte byAlarmType;

		public byte byAlarmInHandle;

		public byte byChannel;

		public byte byRes1;

		public uint dwHandleType;

		public uint dwMaxRelAlarmOutChanNum;

		public uint dwRelAlarmOutChanNum;

		public uint[] dwRelAlarmOut;

		public NET_DVR_SCHEDTIME[][] struAlarmTime;

		public uint dwMaxRecordChanNum;

		public uint dwCurRecordChanNum;

		public uint[] dwRelRecordChan;

		public uint dwMaxEnablePtzCtrlNun;

		public uint dwEnablePresetChanNum;

		public NET_DVR_PRESETCHAN_INFO[] struPresetChanInfo;

		public byte[] byRes2;

		public uint dwEnableCruiseChanNum;

		public NET_DVR_CRUISECHAN_INFO[] struCruiseChanInfo;

		public uint dwEnablePtzTrackChanNum;

		public NET_DVR_PTZTRACKCHAN_INFO[] struPtzTrackInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMINCFG_V30
	{
		public uint dwSize;

		public byte[] sAlarmInName;

		public byte byAlarmType;

		public byte byAlarmInHandle;

		public byte byChannel;

		public byte byRes1;

		public NET_DVR_HANDLEEXCEPTION_V30 struAlarmHandleType;

		public NET_DVR_SCHEDTIME[][] struAlarmTime;

		public byte[] byRelRecordChan;

		public byte[] byEnablePreset;

		public byte[] byPresetNo;

		public byte[] byRes2;

		public byte[] byEnableCruise;

		public byte[] byCruiseNo;

		public byte[] byEnablePtzTrack;

		public byte[] byPTZTrack;

		public byte[] byRes3;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALRAM_FIXED_HEADER
	{
		public uint dwAlarmType;

		public NET_DVR_TIME_EX struAlarmTime;

		[StructLayout (LayoutKind.Explicit)]
		public struct UStruAlarm
		{
			[FieldOffset (0)]
			public byte[] byUnionLen;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruIOAlarm
			{
				public uint dwAlarmInputNo;

				public uint dwTrigerAlarmOutNum;

				public uint dwTrigerRecordChanNum;
			}


			[FieldOffset (0)]
			public StruIOAlarm struIOAlarm;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruAlarmChannel
			{
				public uint dwAlarmChanNum;
			}


			[FieldOffset (0)]
			public StruAlarmChannel struAlarmChannel;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruAlarmHardDisk
			{
				public uint dwAlarmHardDiskNum;
			}


			[FieldOffset (0)]
			public StruAlarmHardDisk struAlarmHardDisk;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruRecordingHost
			{
				public byte bySubAlarmType;

				public byte[] byRes1;

				public NET_DVR_TIME_EX struRecordEndTime;

				public byte[] byRes;
			}


			[FieldOffset (0)]
			public StruRecordingHost struRecordingHost;
		}


		public UStruAlarm uStruAlarm;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMINFO_V40
	{
		public NET_DVR_ALRAM_FIXED_HEADER struAlarmFixedHeader;

		public unsafe uint* pAlarmData;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMINCFG
	{
		public uint dwSize;

		public byte[] sAlarmInName;

		public byte byAlarmType;

		public byte byAlarmInHandle;

		public byte byChannel;

		public byte byRes;

		public NET_DVR_HANDLEEXCEPTION struAlarmHandleType;

		public NET_DVR_SCHEDTIME[][] struAlarmTime;

		public byte[] byRelRecordChan;

		public byte[] byEnablePreset;

		public byte[] byPresetNo;

		public byte[] byEnableCruise;

		public byte[] byCruiseNo;

		public byte[] byEnablePtzTrack;

		public byte[] byPTZTrack;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ANALOG_ALARMINCFG
	{
		public uint dwSize;

		public byte byEnableAlarmHandle;

		public byte[] byRes1;

		public byte[] byAlarmInName;

		public ushort wAlarmInUpper;

		public ushort wAlarmInLower;

		public NET_DVR_HANDLEEXCEPTION_V30 struAlarmHandleType;

		public NET_DVR_SCHEDTIME[][] struAlarmTime;

		public byte[] byRelRecordChan;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMINFO_V30
	{
		public uint dwAlarmType;

		public uint dwAlarmInputNumber;

		public byte[] byAlarmOutputNumber;

		public byte[] byAlarmRelateChannel;

		public byte[] byChannel;

		public byte[] byDiskNumber;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARM_HOT_SPARE
	{
		public uint dwSize;

		public uint dwExceptionCase;

		public NET_DVR_IPADDR struDeviceIP;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMINFO
	{
		public uint dwAlarmType;

		public uint dwAlarmInputNumber;

		public uint[] dwAlarmOutputNumber;

		public uint[] dwAlarmRelateChannel;

		public uint[] dwChannel;

		public uint[] dwDiskNumber;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IPDEVINFO
	{
		public uint dwEnable;

		public byte[] sUserName;

		public byte[] sPassword;

		public NET_DVR_IPADDR struIP;

		public ushort wDVRPort;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IPDEVINFO_V31
	{
		public byte byEnable;

		public byte byProType;

		public byte byEnableQuickAdd;

		public byte byRes1;

		public byte[] sUserName;

		public byte[] sPassword;

		public byte[] byDomain;

		public NET_DVR_IPADDR struIP;

		public ushort wDVRPort;

		public byte[] szDeviceID;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IPCHANINFO
	{
		public byte byEnable;

		public byte byIPID;

		public byte byChannel;

		public byte byIPIDHigh;

		public byte byTransProtocol;

		public byte[] byres;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IPPARACFG
	{
		public uint dwSize;

		public NET_DVR_IPDEVINFO[] struIPDevInfo;

		public byte[] byAnalogChanEnable;

		public NET_DVR_IPCHANINFO[] struIPChanInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IPPARACFG_V31
	{
		public uint dwSize;

		public NET_DVR_IPDEVINFO_V31[] struIPDevInfo;

		public byte[] byAnalogChanEnable;

		public NET_DVR_IPCHANINFO[] struIPChanInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IPSERVER_STREAM
	{
		public byte byEnable;

		public byte[] byRes;

		public NET_DVR_IPADDR struIPServer;

		public ushort wPort;

		public ushort wDvrNameLen;

		public byte[] byDVRName;

		public ushort wDVRSerialLen;

		public ushort[] byRes1;

		public byte[] byDVRSerialNumber;

		public byte[] byUserName;

		public byte[] byPassWord;

		public byte byChannel;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_STREAM_MEDIA_SERVER_CFG
	{
		public byte byValid;

		public byte[] byRes1;

		public NET_DVR_IPADDR struDevIP;

		public ushort wDevPort;

		public byte byTransmitType;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEV_CHAN_INFO
	{
		public NET_DVR_IPADDR struIP;

		public ushort wDVRPort;

		public byte byChannel;

		public byte byTransProtocol;

		public byte byTransMode;

		public byte byFactoryType;

		public byte byDeviceType;

		public byte byDispChan;

		public byte bySubDispChan;

		public byte byResolution;

		public byte[] byRes;

		public byte[] byDomain;

		public byte[] sUserName;

		public byte[] sPassword;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PU_STREAM_CFG
	{
		public uint dwSize;

		public NET_DVR_STREAM_MEDIA_SERVER_CFG struStreamMediaSvrCfg;

		public NET_DVR_DEV_CHAN_INFO struDevChanInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DDNS_STREAM_CFG
	{
		public byte byEnable;

		public byte[] byRes1;

		public NET_DVR_IPADDR struStreamServer;

		public ushort wStreamServerPort;

		public byte byStreamServerTransmitType;

		public byte byRes2;

		public NET_DVR_IPADDR struIPServer;

		public ushort wIPServerPort;

		public byte[] byRes3;

		public byte[] sDVRName;

		public ushort wDVRNameLen;

		public ushort wDVRSerialLen;

		public byte[] sDVRSerialNumber;

		public byte[] sUserName;

		public byte[] sPassWord;

		public ushort wDVRPort;

		public byte[] byRes4;

		public byte byChannel;

		public byte byTransProtocol;

		public byte byTransMode;

		public byte byFactoryType;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PU_STREAM_URL
	{
		public byte byEnable;

		public byte[] strURL;

		public byte byTransPortocol;

		public ushort wIPID;

		public byte byChannel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_HKDDNS_STREAM
	{
		public byte byEnable;

		public byte[] byRes;

		public byte[] byDDNSDomain;

		public ushort wPort;

		public ushort wAliasLen;

		public byte[] byAlias;

		public ushort wDVRSerialLen;

		public byte[] byRes1;

		public byte[] byDVRSerialNumber;

		public byte[] byUserName;

		public byte[] byPassWord;

		public byte byChannel;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IPCHANINFO_V40
	{
		public byte byEnable;

		public byte byRes1;

		public ushort wIPID;

		public uint dwChannel;

		public byte byTransProtocol;

		public byte byTransMode;

		public byte byFactoryType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_STREAM_INFO
	{
		public uint dwSize;

		public byte[] byID;

		public uint dwChannel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RTSP_PROTOCAL_CFG
	{
		public byte byEnable;

		public byte byLocalBackUp;

		public byte[] byRes;

		public byte[] strURL;

		public uint dwProtocalType;

		public byte[] sUserName;

		public byte[] sPassWord;

		public byte[] byAddress;

		public ushort wPort;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_GET_STREAM_UNION
	{
		[FieldOffset (0)]
		public NET_DVR_IPCHANINFO struChanInfo;

		[FieldOffset (0)]
		public NET_DVR_IPSERVER_STREAM struIPServerStream;

		[FieldOffset (0)]
		public NET_DVR_PU_STREAM_CFG struPUStream;

		[FieldOffset (0)]
		public NET_DVR_DDNS_STREAM_CFG struDDNSStream;

		[FieldOffset (0)]
		public NET_DVR_PU_STREAM_URL struStreamUrl;

		[FieldOffset (0)]
		public NET_DVR_HKDDNS_STREAM struHkDDNSStream;

		[FieldOffset (0)]
		public NET_DVR_IPCHANINFO_V40 struIPChan;
	}

	public enum GetStreamType : uint
	{
		IpDevice = 0,
		StreamMedia,
		Ipserver,
		DdnsStreamCfg,
		StreamMediaUrl,
		Hkddns,
		IpDeviceAdv,
		IpDeviceV40,
		Rtsp
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_STREAM_MODE
	{
		public byte byGetStreamType;

		public byte[] byRes;

		public NET_DVR_GET_STREAM_UNION uGetStream;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IPPARACFG_V40
	{
		public uint dwSize;

		public uint dwGroupNum;

		public uint dwAChanNum;

		public uint dwDChanNum;

		public uint dwStartDChan;

		public byte[] byAnalogChanEnable;

		public NET_DVR_IPDEVINFO_V31[] struIPDevInfo;

		public NET_DVR_STREAM_MODE[] struStreamMode;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMINFO_DEV
	{
		public uint dwAlarmType;

		public NET_DVR_TIME struTime;

		public byte[] byRes;

		public uint dwNumber;

		public unsafe ushort* pNO;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IPALARMOUTINFO
	{
		public byte byIPID;

		public byte byAlarmOut;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IPALARMOUTCFG
	{
		public uint dwSize;

		public NET_DVR_IPALARMOUTINFO[] struIPAlarmOutInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IPALARMOUTINFO_V40
	{
		public uint dwIPID;

		public uint dwAlarmOut;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IPALARMOUTCFG_V40
	{
		public uint dwSize;

		public uint dwCurIPAlarmOutNum;

		public NET_DVR_IPALARMOUTINFO_V40[] struIPAlarmOutInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IPALARMININFO
	{
		public byte byIPID;

		public byte byAlarmIn;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IPALARMINCFG
	{
		public uint dwSize;

		public NET_DVR_IPALARMININFO[] struIPAlarmInInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IPALARMININFO_V40
	{
		public uint dwIPID;

		public uint dwAlarmIn;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IPALARMINCFG_V40
	{
		public uint dwSize;

		public uint dwCurIPAlarmInNum;

		public NET_DVR_IPALARMININFO_V40[] struIPAlarmInInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IPALARMINFO
	{
		public NET_DVR_IPDEVINFO[] struIPDevInfo;

		public byte[] byAnalogChanEnable;

		public NET_DVR_IPCHANINFO[] struIPChanInfo;

		public NET_DVR_IPALARMININFO[] struIPAlarmInInfo;

		public NET_DVR_IPALARMOUTINFO[] struIPAlarmOutInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IPALARMINFO_V31
	{
		public NET_DVR_IPDEVINFO_V31[] struIPDevInfo;

		public byte[] byAnalogChanEnable;

		public NET_DVR_IPCHANINFO[] struIPChanInfo;

		public NET_DVR_IPALARMININFO[] struIPAlarmInInfo;

		public NET_DVR_IPALARMOUTINFO[] struIPAlarmOutInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IPALARMINFO_V40
	{
		public NET_DVR_IPDEVINFO_V31[] struIPDevInfo;

		public byte[] byAnalogChanEnable;

		public NET_DVR_IPCHANINFO[] struIPChanInfo;

		public NET_DVR_IPALARMININFO[] struIPAlarmInInfo;

		public NET_DVR_IPALARMOUTINFO[] struIPAlarmOutInfo;

		public byte[] byRes;
	}

	public enum HdStat : uint
	{
		HdStatOk = 0,
		HdStatUnformatted = 1,
		HdStatError = 2,
		HdStatSmartFailed = 3,
		HdStatMismatch = 4,
		HdStatIdle = 5,
		NetHdStatOffline = 6,
		HdRiadvdExpand = 7,
		HdStatReparing = 10,
		HdStatFormating = 11
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SINGLE_HD
	{
		public uint dwHDNo;

		public uint dwCapacity;

		public uint dwFreeSpace;

		public uint dwHdStatus;

		public byte byHDAttr;

		public byte byHDType;

		public byte byDiskDriver;

		public byte byRes1;

		public uint dwHdGroup;

		public byte byRecycling;

		public byte[] byRes2;

		public uint dwStorageType;

		public uint dwPictureCapacity;

		public uint dwFreePictureSpace;

		public byte[] byRes3;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_HDCFG
	{
		public uint dwSize;

		public uint dwHDCount;

		public NET_DVR_SINGLE_HD[] struHDInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SINGLE_HDGROUP_V40
	{
		public uint dwHDGroupNo;

		public uint[] dwRelRecordChan;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_HDGROUP_CFG_V40
	{
		public uint dwSize;

		public uint dwMaxHDGroupNum;

		public uint dwCurHDGroupNum;

		public NET_DVR_SINGLE_HDGROUP_V40[] struHDGroupAttr;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SINGLE_HDGROUP
	{
		public uint dwHDGroupNo;

		public byte[] byHDGroupChans;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_HDGROUP_CFG
	{
		public uint dwSize;

		public uint dwHDGroupCount;

		public NET_DVR_SINGLE_HDGROUP[] struHDGroupAttr;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCALECFG
	{
		public uint dwSize;

		public uint dwMajorScale;

		public uint dwMinorScale;

		public uint[] dwRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMOUTCFG_V30
	{
		public uint dwSize;

		public byte[] sAlarmOutName;

		public uint dwAlarmOutDelay;

		public NET_DVR_SCHEDTIME[][] struAlarmOutTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMOUTCFG
	{
		public uint dwSize;

		public byte[] sAlarmOutName;

		public uint dwAlarmOutDelay;

		public NET_DVR_SCHEDTIME[][] struAlarmOutTime;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PREVIEWCFG_V30
	{
		public uint dwSize;

		public byte byPreviewNumber;

		public byte byEnableAudio;

		public ushort wSwitchTime;

		public byte[][] bySwitchSeq;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PREVIEWCFG
	{
		public uint dwSize;

		public byte byPreviewNumber;

		public byte byEnableAudio;

		public ushort wSwitchTime;

		public byte[] bySwitchSeq;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VGAPARA
	{
		public ushort wResolution;

		public ushort wFreq;

		public uint dwBrightness;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIXPARA_V30
	{
		public ushort[] wOrder;

		public ushort wSwitchTime;

		public byte[] res;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIXPARA
	{
		public ushort wDisplayLogo;

		public ushort wDisplayOsd;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VOOUT
	{
		public byte byVideoFormat;

		public byte byMenuAlphaValue;

		public ushort wScreenSaveTime;

		public ushort wVOffset;

		public ushort wBrightness;

		public byte byStartMode;

		public byte byEnableScaler;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VIDEOOUT_V30
	{
		public uint dwSize;

		public NET_DVR_VOOUT[] struVOOut;

		public NET_DVR_VGAPARA[] struVGAPara;

		public NET_DVR_MATRIXPARA_V30[] struMatrixPara;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VIDEOOUT
	{
		public uint dwSize;

		public NET_DVR_VOOUT[] struVOOut;

		public NET_DVR_VGAPARA[] struVGAPara;

		public NET_DVR_MATRIXPARA struMatrixPara;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_USER_INFO_V40
	{
		public byte[] sUserName;

		public byte[] sPassword;

		public byte[] byLocalRight;

		public byte[] byRemoteRight;

		public uint[] dwNetPreviewRight;

		public uint[] dwLocalRecordRight;

		public uint[] dwNetRecordRight;

		public uint[] dwLocalPlaybackRight;

		public uint[] dwNetPlaybackRight;

		public uint[] dwLocalPTZRight;

		public uint[] dwNetPTZRight;

		public uint[] dwLocalBackupRight;

		public NET_DVR_IPADDR struUserIP;

		public byte[] byMACAddr;

		public byte byPriority;

		public byte byAlarmOnRight;

		public byte byAlarmOffRight;

		public byte byBypassRight;

		public byte[] byRes1;

		public byte[] byPublishRight;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_USER_INFO_V30
	{
		public byte[] sUserName;

		public byte[] sPassword;

		public byte[] byLocalRight;

		public byte[] byRemoteRight;

		public byte[] byNetPreviewRight;

		public byte[] byLocalPlaybackRight;

		public byte[] byNetPlaybackRight;

		public byte[] byLocalRecordRight;

		public byte[] byNetRecordRight;

		public byte[] byLocalPTZRight;

		public byte[] byNetPTZRight;

		public byte[] byLocalBackupRight;

		public NET_DVR_IPADDR struUserIP;

		public byte[] byMACAddr;

		public byte byPriority;

		public byte byAlarmOnRight;

		public byte byAlarmOffRight;

		public byte byBypassRight;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_USER_INFO_EX
	{
		public byte[] sUserName;

		public byte[] sPassword;

		public uint[] dwLocalRight;

		public uint dwLocalPlaybackRight;

		public uint[] dwRemoteRight;

		public uint dwNetPreviewRight;

		public uint dwNetPlaybackRight;

		public sbyte[] sUserIP;

		public byte[] byMACAddr;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_USER_INFO
	{
		public byte[] sUserName;

		public byte[] sPassword;

		public uint[] dwLocalRight;

		public uint[] dwRemoteRight;

		public sbyte[] sUserIP;

		public byte[] byMACAddr;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_USER_V40
	{
		public uint dwSize;

		public uint dwMaxUserNum;

		public NET_DVR_USER_INFO_V40[] struUser;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_USER_V50
	{
		public uint dwSize;

		public uint dwMaxUserNum;

		public NET_DVR_USER_INFO_V40[] struUser;

		public sbyte[] sloginPassword;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_USER_V30
	{
		public uint dwSize;

		public NET_DVR_USER_INFO_V30[] struUser;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_USER_EX
	{
		public uint dwSize;

		public NET_DVR_USER_INFO_EX[] struUser;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_USER
	{
		public uint dwSize;

		public NET_DVR_USER_INFO[] struUser;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_EXCEPTION_V40
	{
		public uint dwSize;

		public uint dwMaxGroupNum;

		public NET_DVR_HANDLEEXCEPTION_V41[] struExceptionHandle;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_EXCEPTION_V30
	{
		public uint dwSize;

		public NET_DVR_HANDLEEXCEPTION_V30[] struExceptionHandleType;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_EXCEPTION
	{
		public uint dwSize;

		public NET_DVR_HANDLEEXCEPTION[] struExceptionHandleType;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CHANNELSTATE_V30
	{
		public byte byRecordStatic;

		public byte bySignalStatic;

		public byte byHardwareStatic;

		public byte byRes1;

		public uint dwBitRate;

		public uint dwLinkNum;

		public NET_DVR_IPADDR[] struClientIP;

		public uint dwIPLinkNum;

		public byte byExceedMaxLink;

		public byte[] byRes;

		public uint dwAllBitRate;

		public uint dwChannelNo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CHANNELSTATE
	{
		public byte byRecordStatic;

		public byte bySignalStatic;

		public byte byHardwareStatic;

		public sbyte reservedData;

		public uint dwBitRate;

		public uint dwLinkNum;

		public uint[] dwClientIP;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DISKSTATE
	{
		public uint dwVolume;

		public uint dwFreeSpace;

		public uint dwHardDiskStatic;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WORKSTATE_V40
	{
		public uint dwSize;

		public uint dwDeviceStatic;

		public NET_DVR_DISKSTATE[] struHardDiskStatic;

		public NET_DVR_CHANNELSTATE_V30[] struChanStatic;

		public uint[] dwHasAlarmInStatic;

		public uint[] dwHasAlarmOutStatic;

		public uint dwLocalDisplay;

		public byte[] byAudioInChanStatus;

		public byte[] byRes1;

		public float fHumidity;

		public float fTemperature;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_GETWORKSTATE_COND
	{
		public uint dwSize;

		public byte byFindHardByCond;

		public byte byFindChanByCond;

		public byte[] byRes1;

		public uint[] dwFindHardStatus;

		public uint[] dwFindChanNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WORKSTATE_V30
	{
		public uint dwDeviceStatic;

		public NET_DVR_DISKSTATE[] struHardDiskStatic;

		public NET_DVR_CHANNELSTATE_V30[] struChanStatic;

		public byte[] byAlarmInStatic;

		public byte[] byAlarmOutStatic;

		public uint dwLocalDisplay;

		public byte[] byAudioChanStatus;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WORKSTATE
	{
		public uint dwDeviceStatic;

		public NET_DVR_DISKSTATE[] struHardDiskStatic;

		public NET_DVR_CHANNELSTATE[] struChanStatic;

		public byte[] byAlarmInStatic;

		public byte[] byAlarmOutStatic;

		public uint dwLocalDisplay;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LOG_V30
	{
		public NET_DVR_TIME strLogTime;

		public uint dwMajorType;

		public uint dwMinorType;

		public byte[] sPanelUser;

		public byte[] sNetUser;

		public NET_DVR_IPADDR struRemoteHostAddr;

		public uint dwParaType;

		public uint dwChannel;

		public uint dwDiskNumber;

		public uint dwAlarmInPort;

		public uint dwAlarmOutPort;

		public uint dwInfoLen;

		public sbyte[] sInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LOG
	{
		public NET_DVR_TIME strLogTime;

		public uint dwMajorType;

		public uint dwMinorType;

		public byte[] sPanelUser;

		public byte[] sNetUser;

		public sbyte[] sRemoteHostAddr;

		public uint dwParaType;

		public uint dwChannel;

		public uint dwDiskNumber;

		public uint dwAlarmInPort;

		public uint dwAlarmOutPort;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct LPNET_DVR_ALARMHOST_SEARCH_LOG_PARAM
	{
		public ushort wMajorType;

		public ushort wMinorType;

		public NET_DVR_TIME struStartTime;

		public NET_DVR_TIME struEndTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_LOG_RET
	{
		public NET_DVR_TIME struLogTime;

		public byte[] sUserName;

		public NET_DVR_IPADDR struIPAddr;

		public ushort wMajorType;

		public ushort wMinorType;

		public ushort wParam;

		public byte[] byRes;

		public uint dwInfoLen;

		public sbyte[] sInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMOUTSTATUS_V30
	{
		public byte[] Output;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMOUTSTATUS
	{
		public byte[] Output;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TRADEINFO
	{
		public ushort m_Year;

		public ushort m_Month;

		public ushort m_Day;

		public ushort m_Hour;

		public ushort m_Minute;

		public ushort m_Second;

		public byte[] DeviceName;

		public uint dwChannelNumer;

		public byte[] CardNumber;

		public sbyte[] cTradeType;

		public uint dwCash;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FRAMETYPECODE
	{
		public byte[] code;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FRAMEFORMAT
	{
		public uint dwSize;

		public sbyte[] sATMIP;

		public uint dwATMType;

		public uint dwInputMode;

		public uint dwFrameSignBeginPos;

		public uint dwFrameSignLength;

		public byte[] byFrameSignContent;

		public uint dwCardLengthInfoBeginPos;

		public uint dwCardLengthInfoLength;

		public uint dwCardNumberInfoBeginPos;

		public uint dwCardNumberInfoLength;

		public uint dwBusinessTypeBeginPos;

		public uint dwBusinessTypeLength;

		public NET_DVR_FRAMETYPECODE[] frameTypeCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FILTER
	{
		public byte byEnable;

		public byte byMode;

		public byte byFrameBeginPos;

		public byte byRes;

		public byte[] byFilterText;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IDENTIFICAT
	{
		public byte byStartMode;

		public byte byEndMode;

		public byte[] byRes;

		public NET_DVR_FRAMETYPECODE struStartCode;

		public NET_DVR_FRAMETYPECODE struEndCode;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PACKAGE_LOCATION
	{
		public byte byOffsetMode;

		public byte[] byRes1;

		public uint dwOffsetPos;

		public NET_DVR_FRAMETYPECODE struTokenCode;

		public byte byMultiplierValue;

		public byte byEternOffset;

		public byte byCodeMode;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PACKAGE_LENGTH
	{
		public byte byLengthMode;

		public byte[] byRes1;

		public uint dwFixLength;

		public uint dwMaxLength;

		public uint dwMinLength;

		public byte byEndMode;

		public byte[] byRes2;

		public NET_DVR_FRAMETYPECODE struEndCode;

		public uint dwLengthPos;

		public uint dwLengthLen;

		public byte[] byRes3;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_OSD_POSITION
	{
		public byte byPositionMode;

		public byte[] byRes1;

		public uint dwPosX;

		public uint dwPosY;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DATE_FORMAT
	{
		public byte byMonth;

		public byte byDay;

		public byte byYear;

		public byte byDateForm;

		public byte[] byRes;

		public sbyte[] chSeprator;

		public sbyte[] chDisplaySeprator;

		public byte byDisplayForm;

		public byte[] res;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TIME_FORMAT
	{
		public byte byTimeForm;

		public byte[] byRes1;

		public byte byHourMode;

		public byte[] byRes2;

		public sbyte[] chSeprator;

		public sbyte[] chDisplaySeprator;

		public byte byDisplayForm;

		public byte[] byRes3;

		public byte byDisplayHourMode;

		public byte[] byRes4;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_OVERLAY_CHANNEL
	{
		public byte[] byChannel;

		public uint dwDelayTime;

		public byte byEnableDelayTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ATM_PACKAGE_ACTION
	{
		public NET_DVR_PACKAGE_LOCATION struPackageLocation;

		public NET_DVR_OSD_POSITION struOsdPosition;

		public NET_DVR_FRAMETYPECODE struActionCode;

		public NET_DVR_FRAMETYPECODE struPreCode;

		public byte byActionCodeMode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ATM_PACKAGE_DATE
	{
		public NET_DVR_PACKAGE_LOCATION struPackageLocation;

		public NET_DVR_DATE_FORMAT struDateForm;

		public NET_DVR_OSD_POSITION struOsdPosition;

		public byte[] res;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ATM_PACKAGE_TIME
	{
		public NET_DVR_PACKAGE_LOCATION location;

		public NET_DVR_TIME_FORMAT struTimeForm;

		public NET_DVR_OSD_POSITION struOsdPosition;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ATM_PACKAGE_OTHERS
	{
		public NET_DVR_PACKAGE_LOCATION struPackageLocation;

		public NET_DVR_PACKAGE_LENGTH struPackageLength;

		public NET_DVR_OSD_POSITION struOsdPosition;

		public NET_DVR_FRAMETYPECODE struPreCode;

		public byte[] res;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ATM_USER_DEFINE_PROTOCOL
	{
		public NET_DVR_IDENTIFICAT struIdentification;

		public NET_DVR_FILTER struFilter;

		public NET_DVR_ATM_PACKAGE_OTHERS struCardNoPara;

		public NET_DVR_ATM_PACKAGE_ACTION[] struTradeActionPara;

		public NET_DVR_ATM_PACKAGE_OTHERS struAmountPara;

		public NET_DVR_ATM_PACKAGE_OTHERS struSerialNoPara;

		public NET_DVR_OVERLAY_CHANNEL struOverlayChan;

		public NET_DVR_ATM_PACKAGE_DATE struRes1;

		public NET_DVR_ATM_PACKAGE_TIME struRes2;

		public byte[] byRes3;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ATM_FRAMEFORMAT_V30
	{
		public uint dwSize;

		public byte byEnable;

		public byte byInputMode;

		public byte[] byRes1;

		public NET_DVR_IPADDR struAtmIp;

		public ushort wAtmPort;

		public byte[] byRes2;

		public uint dwAtmType;

		public NET_DVR_ATM_USER_DEFINE_PROTOCOL struAtmUserDefineProtocol;

		public byte[] byRes3;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ATM_PROTO_TYPE
	{
		public uint dwAtmType;

		public sbyte[] chDesc;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ATM_PROTO_LIST
	{
		public uint dwAtmProtoNum;

		public NET_DVR_ATM_PROTO_TYPE[] struAtmProtoType;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ATM_PROTOCOL
	{
		public uint dwSize;

		public NET_DVR_ATM_PROTO_LIST struNetListenList;

		public NET_DVR_ATM_PROTO_LIST struSerialListenList;

		public NET_DVR_ATM_PROTO_LIST struNetProtoList;

		public NET_DVR_ATM_PROTO_LIST struSerialProtoList;

		public NET_DVR_ATM_PROTO_TYPE struCustomProto;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DECODERINFO
	{
		public byte[] byEncoderIP;

		public byte[] byEncoderUser;

		public byte[] byEncoderPasswd;

		public byte bySendMode;

		public byte byEncoderChannel;

		public ushort wEncoderPort;

		public byte[] reservedData;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DECODERSTATE
	{
		public byte[] byEncoderIP;

		public byte[] byEncoderUser;

		public byte[] byEncoderPasswd;

		public byte byEncoderChannel;

		public byte bySendMode;

		public ushort wEncoderPort;

		public uint dwConnectState;

		public byte[] reservedData;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DECCHANINFO
	{
		public sbyte[] sDVRIP;

		public ushort wDVRPort;

		public byte[] sUserName;

		public byte[] sPassword;

		public byte byChannel;

		public byte byLinkMode;

		public byte byLinkType;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DECINFO
	{
		public byte byPoolChans;

		public NET_DVR_DECCHANINFO[] struchanConInfo;

		public byte byEnablePoll;

		public byte byPoolTime;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DECCFG
	{
		public uint dwSize;

		public uint dwDecChanNum;

		public NET_DVR_DECINFO[] struDecInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PORTINFO
	{
		public uint dwEnableTransPort;

		public sbyte[] sDecoderIP;

		public ushort wDecoderPort;

		public ushort wDVRTransPort;

		public sbyte[] cReserve;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PORTCFG
	{
		public uint dwSize;

		public NET_DVR_PORTINFO[] struTransPortInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PLAYREMOTEFILE
	{
		public uint dwSize;

		public sbyte[] sDecoderIP;

		public ushort wDecoderPort;

		public ushort wLoadMode;

		[StructLayout (LayoutKind.Explicit)]
		public struct Mode_size
		{
			[FieldOffset (0)]
			public byte[] byFile;

			[StructLayout (LayoutKind.Sequential)]
			public struct Bytime
			{
				public uint dwChannel;

				public byte[] sUserName;

				public byte[] sPassword;

				public NET_DVR_TIME struStartTime;

				public NET_DVR_TIME struStopTime;
			}


			[FieldOffset (0)]
			public Bytime bytime;
		}


		public Mode_size mode_size;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DECCHANSTATUS
	{
		public uint dwWorkType;

		public sbyte[] sDVRIP;

		public ushort wDVRPort;

		public byte byChannel;

		public byte byLinkMode;

		public uint dwLinkType;

		[StructLayout (LayoutKind.Explicit)]
		public struct ObjectInfo
		{
			[StructLayout (LayoutKind.Sequential)]
			public struct UserInfo
			{
				public byte[] sUserName;

				public byte[] sPassword;

				public sbyte[] cReserve;
			}


			[FieldOffset (0)]
			public UserInfo userInfo;

			[StructLayout (LayoutKind.Sequential)]
			public struct FileInfo
			{
				public byte[] fileName;
			}


			[FieldOffset (0)]
			public FileInfo fileInfo;

			[StructLayout (LayoutKind.Sequential)]
			public struct TimeInfo
			{
				public uint dwChannel;

				public byte[] sUserName;

				public byte[] sPassword;

				public NET_DVR_TIME struStartTime;

				public NET_DVR_TIME struStopTime;
			}


			[FieldOffset (0)]
			public TimeInfo timeInfo;
		}


		public ObjectInfo objectInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DECSTATUS
	{
		public uint dwSize;

		public NET_DVR_DECCHANSTATUS[] struDecState;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SHOWSTRINGINFO
	{
		public ushort wShowString;

		public ushort wStringSize;

		public ushort wShowStringTopLeftX;

		public ushort wShowStringTopLeftY;

		public sbyte[] sString;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SHOWSTRING_V30
	{
		public uint dwSize;

		public NET_DVR_SHOWSTRINGINFO[] struStringInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SHOWSTRING_EX
	{
		public uint dwSize;

		public NET_DVR_SHOWSTRINGINFO[] struStringInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SHOWSTRING
	{
		public uint dwSize;

		public NET_DVR_SHOWSTRINGINFO[] struStringInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_EMAILCFG_V30
	{
		public uint dwSize;

		public byte[] sAccount;

		public byte[] sPassword;

		[StructLayout (LayoutKind.Sequential)]
		public struct StruSender
		{
			public byte[] sName;

			public byte[] sAddress;
		}


		public StruSender struSender;

		public byte[] sSmtpServer;

		public byte[] sPop3Server;

		[StructLayout (LayoutKind.Sequential)]
		public struct 
		{
			public byte[] sName;

			public byte[] sAddress;
		}


		public [anonymous Record: struct NET_DVR_EMAILCFG_V30::(anonymous at /Users/macbookpro/Downloads/iOS_V5.2.7.10_build20170302_EN/SimpleDemo/Classes/hcnetsdk.h:8687:5)][] struReceiver;

		public byte byAttachment;

		public byte bySmtpServerVerify;

		public byte byMailInterval;

		public byte byEnableSSL;

		public ushort wSmtpPort;

		public byte byEnableTLS;

		public byte byStartTLS;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CRUISE_PARA
	{
		public uint dwSize;

		public byte[] byPresetNo;

		public byte[] byCruiseSpeed;

		public ushort[] wDwellTime;

		public byte byEnableThisCruise;

		public byte[] res;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TIMEPOINT
	{
		public uint dwMonth;

		public uint dwWeekNo;

		public uint dwWeekDate;

		public uint dwHour;

		public uint dwMin;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ZONEANDDST
	{
		public uint dwSize;

		public uint dwZoneIndex;

		public byte[] byRes1;

		public uint dwEnableDST;

		public byte byDSTBias;

		public byte[] byRes2;

		public NET_DVR_TIMEPOINT struBeginPoint;

		public NET_DVR_TIMEPOINT struEndPoint;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_JPEGPARA
	{
		public ushort wPicSize;

		public ushort wPicQuality;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PICPARAM_V50
	{
		public NET_DVR_JPEGPARA struParam;

		public byte byPicFormat;

		public byte byCapturePicType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_AUXOUTCFG
	{
		public uint dwSize;

		public uint dwAlarmOutChan;

		public uint dwAlarmChanSwitchTime;

		public uint[] dwAuxSwitchTime;

		public byte[][] byAuxOrder;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_NTPPARA
	{
		public byte[] sNTPServer;

		public ushort wInterval;

		public byte byEnableNTP;

		public sbyte cTimeDifferenceH;

		public sbyte cTimeDifferenceM;

		public byte res1;

		public ushort wNtpPort;

		public byte[] res2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DDNSPARA
	{
		public byte[] sUsername;

		public byte[] sPassword;

		public byte[] sDomainName;

		public byte byEnableDDNS;

		public byte[] res;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DDNSPARA_EX
	{
		public byte byHostIndex;

		public byte byEnableDDNS;

		public ushort wDDNSPort;

		public byte[] sUsername;

		public byte[] sPassword;

		public byte[] sDomainName;

		public byte[] sServerName;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DDNSPARA_V30
	{
		public byte byEnableDDNS;

		public byte byHostIndex;

		public byte[] byRes1;

		[StructLayout (LayoutKind.Sequential)]
		public struct 
		{
			public byte[] sUsername;

			public byte[] sPassword;

			public byte[] sDomainName;

			public byte[] sServerName;

			public ushort wDDNSPort;

			public ushort wCountryID;

			public byte byStatus;

			public byte[] byRes;
		}


		public [anonymous Record: struct NET_DVR_DDNSPARA_V30::(anonymous at /Users/macbookpro/Downloads/iOS_V5.2.7.10_build20170302_EN/SimpleDemo/Classes/hcnetsdk.h:8822:5)][] struDDNS;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_EMAILPARA
	{
		public byte[] sUsername;

		public byte[] sPassword;

		public byte[] sSmtpServer;

		public byte[] sPop3Server;

		public byte[] sMailAddr;

		public byte[] sEventMailAddr1;

		public byte[] sEventMailAddr2;

		public byte[] res;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_NETAPPCFG
	{
		public uint dwSize;

		public sbyte[] sDNSIp;

		public NET_DVR_NTPPARA struNtpClientParam;

		public NET_DVR_DDNSPARA struDDNSClientParam;

		public byte[] res;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SINGLE_NFS
	{
		public sbyte[] sNfsHostIPAddr;

		public byte[] sNfsDirectory;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_NFSCFG
	{
		public uint dwSize;

		public NET_DVR_SINGLE_NFS[] struNfsDiskParam;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ISCSI_CFG
	{
		public uint dwSize;

		public ushort wVrmPort;

		public byte byEnable;

		public byte[] byRes;

		public NET_DVR_IPADDR struVrmAddr;

		public sbyte[] chNvtIndexCode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CRUISE_POINT
	{
		public byte PresetNum;

		public byte Dwell;

		public byte Speed;

		public byte Reserve;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CRUISE_RET
	{
		public NET_DVR_CRUISE_POINT[] struCruisePoint;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_NETCFG_OTHER
	{
		public uint dwSize;

		public sbyte[] sFirstDNSIP;

		public sbyte[] sSecondDNSIP;

		public sbyte[] sRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIX_DECINFO
	{
		public sbyte[] sDVRIP;

		public ushort wDVRPort;

		public byte byChannel;

		public byte byTransProtocol;

		public byte byTransMode;

		public byte[] byRes;

		public byte[] sUserName;

		public byte[] sPassword;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIX_DYNAMIC_DEC
	{
		public uint dwSize;

		public NET_DVR_MATRIX_DECINFO struDecChanInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIX_DEC_CHAN_STATUS
	{
		public uint dwSize;

		public uint dwIsLinked;

		public uint dwStreamCpRate;

		public sbyte[] cRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIX_DEC_CHAN_INFO
	{
		public uint dwSize;

		public NET_DVR_MATRIX_DECINFO struDecChanInfo;

		public uint dwDecState;

		public NET_DVR_TIME StartTime;

		public NET_DVR_TIME StopTime;

		public sbyte[] sFileName;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIX_DECCHANINFO
	{
		public uint dwEnable;

		public NET_DVR_MATRIX_DECINFO struDecChanInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIX_LOOP_DECINFO
	{
		public uint dwSize;

		public uint dwPoolTime;

		public NET_DVR_MATRIX_DECCHANINFO[] struchanConInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct TTY_CONFIG
	{
		public byte baudrate;

		public byte databits;

		public byte stopbits;

		public byte parity;

		public byte flowcontrol;

		public byte[] res;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIX_TRAN_CHAN_INFO
	{
		public byte byTranChanEnable;

		public byte byLocalSerialDevice;

		public byte byRemoteSerialDevice;

		public byte res1;

		public sbyte[] sRemoteDevIP;

		public ushort wRemoteDevPort;

		public byte[] res2;

		public TTY_CONFIG RemoteSerialDevCfg;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIX_TRAN_CHAN_CONFIG
	{
		public uint dwSize;

		public byte by232IsDualChan;

		public byte by485IsDualChan;

		public byte[] res;

		public NET_DVR_MATRIX_TRAN_CHAN_INFO[] struTranInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIX_DEC_REMOTE_PLAY
	{
		public uint dwSize;

		public sbyte[] sDVRIP;

		public ushort wDVRPort;

		public byte byChannel;

		public byte byReserve;

		public byte[] sUserName;

		public byte[] sPassword;

		public uint dwPlayMode;

		public NET_DVR_TIME StartTime;

		public NET_DVR_TIME StopTime;

		public sbyte[] sFileName;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIX_DEC_REMOTE_PLAY_CONTROL
	{
		public uint dwSize;

		public uint dwPlayCmd;

		public uint dwCmdParam;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIX_DEC_REMOTE_PLAY_STATUS
	{
		public uint dwSize;

		public uint dwCurMediaFileLen;

		public uint dwCurMediaFilePosition;

		public uint dwCurMediaFileDuration;

		public uint dwCurPlayTime;

		public uint dwCurMediaFIleFrames;

		public uint dwCurDataType;

		public byte[] res;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIX_PASSIVEMODE
	{
		public ushort wTransProtol;

		public ushort wPassivePort;

		public NET_DVR_IPADDR struMcastIP;

		public byte byStreamType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIX_TRAN_CHAN_INFO_V30
	{
		public byte byTranChanEnable;

		public byte byLocalSerialDevice;

		public byte byRemoteSerialDevice;

		public byte byRes1;

		public NET_DVR_IPADDR struRemoteDevIP;

		public ushort wRemoteDevPort;

		public byte byIsEstablished;

		public byte byRes2;

		public TTY_CONFIG RemoteSerialDevCfg;

		public byte[] byUsername;

		public byte[] byPassword;

		public uint dwLocalSerialNo;

		public uint dwRemoteSerialNo;

		public byte[] byRes3;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIX_TRAN_CHAN_CONFIG_V30
	{
		public uint dwSize;

		public byte by232IsDualChan;

		public byte by485IsDualChan;

		public byte[] byRes;

		public NET_DVR_MATRIX_TRAN_CHAN_INFO_V30[] struTranInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIX_CHAN_INFO_V30
	{
		public uint dwEnable;

		public NET_DVR_STREAM_MEDIA_SERVER_CFG streamMediaServerCfg;

		public NET_DVR_DEV_CHAN_INFO struDevChanInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIX_LOOP_DECINFO_V30
	{
		public uint dwSize;

		public uint dwPoolTime;

		public NET_DVR_MATRIX_CHAN_INFO_V30[] struchanConInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIX_DEC_CHAN_INFO_V30
	{
		public uint dwSize;

		public NET_DVR_STREAM_MEDIA_SERVER_CFG streamMediaServerCfg;

		public NET_DVR_DEV_CHAN_INFO struDevChanInfo;

		public uint dwDecState;

		public NET_DVR_TIME StartTime;

		public NET_DVR_TIME StopTime;

		public sbyte[] sFileName;

		public uint dwGetStreamMode;

		public NET_DVR_MATRIX_PASSIVEMODE struPassiveMode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIX_ABILITY
	{
		public uint dwSize;

		public byte byDecNums;

		public byte byStartChan;

		public byte byVGANums;

		public byte byBNCNums;

		public byte[][] byVGAWindowMode;

		public byte[] byBNCWindowMode;

		public byte byDspNums;

		public byte byHDMINums;

		public byte byDVINums;

		public byte[] byRes1;

		public byte[] bySupportResolution;

		public byte[][] byHDMIWindowMode;

		public byte[][] byDVIWindowMode;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DISP_LOGOCFG
	{
		public uint dwCorordinateX;

		public uint dwCorordinateY;

		public ushort wPicWidth;

		public ushort wPicHeight;

		public byte[] byRes1;

		public byte byFlash;

		public byte byTranslucent;

		public byte[] byRes2;

		public uint dwLogoSize;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIX_CHAN_STATUS
	{
		public byte byDecodeStatus;

		public byte byStreamType;

		public byte byPacketType;

		public byte byRecvBufUsage;

		public byte byDecBufUsage;

		public byte byFpsDecV;

		public byte byFpsDecA;

		public byte byCpuLoad;

		public byte[] byRes1;

		public uint dwDecodedV;

		public uint dwDecodedA;

		public ushort wImgW;

		public ushort wImgH;

		public byte byVideoFormat;

		public byte[] byRes2;

		public uint dwDecChan;

		public byte[] byRes3;
	}

	public enum VgaMode : uint
	{
		VgaNotAvaliable,
		VgaThs8200ModeSvga60hz,
		VgaThs8200ModeSvga75hz,
		VgaThs8200ModeXga60hz,
		VgaThs8200ModeXga75hz,
		VgaThs8200ModeSxga60hz,
		VgaThs8200Mode720p60hz,
		VgaThs8200Mode1080i60hz,
		VgaThs8200Mode1080p30hz,
		VgaThs8200ModeUxga30hz,
		HdmiSii9134ModeXga60hz,
		HdmiSii9134ModeSxga60hz,
		HdmiSii9134ModeSxga260hz,
		HdmiSii9134Mode720p60hz,
		HdmiSii9134Mode720p50hz,
		HdmiSii9134Mode1080i60hz,
		HdmiSii9134Mode1080i50hz,
		HdmiSii9134Mode1080p25hz,
		HdmiSii9134Mode1080p30hz,
		HdmiSii9134Mode1080p50hz,
		HdmiSii9134Mode1080p60hz,
		HdmiSii9134ModeUxga60hz,
		DviSii9134ModeXga60hz,
		DviSii9134ModeSxga60hz,
		DviSii9134ModeSxga260hz,
		DviSii9134Mode720p60hz,
		DviSii9134Mode720p50hz,
		DviSii9134Mode1080i60hz,
		DviSii9134Mode1080i50hz,
		DviSii9134Mode1080p25hz,
		DviSii9134Mode1080p30hz,
		DviSii9134Mode1080p50hz,
		DviSii9134Mode1080p60hz,
		DviSii9134ModeUxga60hz,
		VgaDecsvrModeSxga260hz,
		HdmiDecsvrMode1080p24hz,
		DviDecsvrMode1080p24hz,
		YPbPr_DECSVR_MODE_720P_60HZ,
		YPbPr_DECSVR_MODE_1080I_60HZ
	}

	public enum VideoStandard : uint
	{
		Non = 0,
		Ntsc = 1,
		Pal = 2
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VGA_DISP_CHAN_CFG
	{
		public uint dwSize;

		public byte byAudio;

		public byte byAudioWindowIdx;

		public byte byVgaResolution;

		public byte byVedioFormat;

		public uint dwWindowMode;

		public byte[] byJoinDecChan;

		public byte byEnlargeStatus;

		public byte byEnlargeSubWindowIndex;

		[StructLayout (LayoutKind.Explicit)]
		public struct StruDiff
		{
			[FieldOffset (0)]
			public byte[] byRes;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruVideoPlatform
			{
				public byte[] byJoinDecoderId;
			}


			[FieldOffset (0)]
			public StruVideoPlatform struVideoPlatform;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruNotVideoPlatform
			{
				public byte[] byRes;
			}


			[FieldOffset (0)]
			public StruNotVideoPlatform struNotVideoPlatform;
		}


		public StruDiff struDiff;

		public byte byUnionType;

		public byte byScale;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DISP_CHAN_STATUS
	{
		public byte byDispStatus;

		public byte byBVGA;

		public byte byVideoFormat;

		public byte byWindowMode;

		public byte[] byJoinDecChan;

		public byte[] byFpsDisp;

		public byte byScreenMode;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DECODER_WORK_STATUS
	{
		public uint dwSize;

		public NET_DVR_MATRIX_CHAN_STATUS[] struDecChanStatus;

		public NET_DVR_DISP_CHAN_STATUS[] struDispChanStatus;

		public byte[] byAlarmInStatus;

		public byte[] byAlarmOutStatus;

		public byte byAudioInChanStatus;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PASSIVEDECODE_CONTROL
	{
		public uint dwSize;

		public uint dwPlayCmd;

		public uint dwCmdParam;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIX_DECCHAN_CONTROL
	{
		public uint dwSize;

		public byte byDecChanScaleStatus;

		public byte byDecodeDelay;

		public byte byEnableSpartan;

		public byte byLowLight;

		public byte byNoiseReduction;

		public byte byDefog;

		public byte byEnableVcaDec;

		public byte byRes1;

		public uint dwAllCtrlType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SUBSYSTEMINFO
	{
		public byte bySubSystemType;

		public byte byChan;

		public byte byLoginType;

		public byte[] byRes1;

		public NET_DVR_IPADDR struSubSystemIP;

		public ushort wSubSystemPort;

		public byte[] byRes2;

		public NET_DVR_IPADDR struSubSystemIPMask;

		public NET_DVR_IPADDR struGatewayIpAddr;

		public byte[] sUserName;

		public byte[] sPassword;

		public sbyte[] sDomainName;

		public sbyte[] sDnsAddress;

		public byte[] sSerialNumber;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALLSUBSYSTEMINFO
	{
		public uint dwSize;

		public NET_DVR_SUBSYSTEMINFO[] struSubSystemInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LOOPPLAN_SUBCFG
	{
		public uint dwSize;

		public uint dwPoolTime;

		public NET_DVR_MATRIX_CHAN_INFO_V30[] struChanConInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMMODECFG
	{
		public uint dwSize;

		public byte byAlarmMode;

		public ushort wLoopTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CODESPLITTERINFO
	{
		public uint dwSize;

		public NET_DVR_IPADDR struIP;

		public ushort wPort;

		public byte[] byRes1;

		public byte[] sUserName;

		public byte[] sPassword;

		public byte byChan;

		public byte by485Port;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ASSOCIATECFG
	{
		public byte byAssociateType;

		public ushort wAlarmDelay;

		public byte byAlarmNum;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DYNAMICDECODE
	{
		public uint dwSize;

		public NET_DVR_ASSOCIATECFG struAssociateCfg;

		public NET_DVR_PU_STREAM_CFG struPuStreamCfg;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DECODESCHED
	{
		public NET_DVR_SCHEDTIME struSchedTime;

		public byte byDecodeType;

		public byte byLoopGroup;

		public byte[] byRes;

		public NET_DVR_PU_STREAM_CFG struDynamicDec;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PLANDECODE
	{
		public uint dwSize;

		public NET_DVR_DECODESCHED[][] struDecodeSched;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_EMAILCFG
	{
		public uint dwSize;

		public sbyte[] sUserName;

		public sbyte[] sPassWord;

		public sbyte[] sFromName;

		public sbyte[] sFromAddr;

		public sbyte[] sToName1;

		public sbyte[] sToName2;

		public sbyte[] sToAddr1;

		public sbyte[] sToAddr2;

		public sbyte[] sEmailServer;

		public byte byServerType;

		public byte byUseAuthen;

		public byte byAttachment;

		public byte byMailinterval;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_COMPRESSIONCFG_NEW
	{
		public uint dwSize;

		public NET_DVR_COMPRESSION_INFO_EX struLowCompression;

		public NET_DVR_COMPRESSION_INFO_EX struEventCompression;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PTZPOS
	{
		public ushort wAction;

		public ushort wPanPos;

		public ushort wTiltPos;

		public ushort wZoomPos;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PTZSCOPE
	{
		public ushort wPanPosMin;

		public ushort wPanPosMax;

		public ushort wTiltPosMin;

		public ushort wTiltPosMax;

		public ushort wZoomPosMin;

		public ushort wZoomPosMax;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RTSPCFG
	{
		public uint dwSize;

		public ushort wPort;

		public byte[] byReserve;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEVICEINFO
	{
		public byte[] sSerialNumber;

		public byte byAlarmInPortNum;

		public byte byAlarmOutPortNum;

		public byte byDiskNum;

		public byte byDVRType;

		public byte byChanNum;

		public byte byStartChan;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEVICEINFO_V30
	{
		public byte[] sSerialNumber;

		public byte byAlarmInPortNum;

		public byte byAlarmOutPortNum;

		public byte byDiskNum;

		public byte byDVRType;

		public byte byChanNum;

		public byte byStartChan;

		public byte byAudioChanNum;

		public byte byIPChanNum;

		public byte byZeroChanNum;

		public byte byMainProto;

		public byte bySubProto;

		public byte bySupport;

		public byte bySupport1;

		public byte bySupport2;

		public ushort wDevType;

		public byte bySupport3;

		public byte byMultiStreamProto;

		public byte byStartDChan;

		public byte byStartDTalkChan;

		public byte byHighDChanNum;

		public byte bySupport4;

		public byte byLanguageType;

		public byte byVoiceInChanNum;

		public byte byStartVoiceInChanNo;

		public byte bySupport5;

		public byte bySupport6;

		public byte byMirrorChanNum;

		public ushort wStartMirrorChanNo;

		public byte bySupport7;

		public byte byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEVICEINFO_V40
	{
		public NET_DVR_DEVICEINFO_V30 struDeviceV30;

		public byte bySupportLock;

		public byte byRetryLoginTime;

		public byte byPasswordLevel;

		public byte byProxyType;

		public uint dwSurplusLockTime;

		public byte byCharEncodeType;

		public byte bySupportDev5;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_USER_LOGIN_INFO
	{
		public sbyte[] sDeviceAddress;

		public byte byUseTransport;

		public ushort wPort;

		public sbyte[] sUserName;

		public sbyte[] sPassword;

		public unsafe fLoginResultCallBack* cbLoginResult;

		public unsafe void* pUser;

		public int bUseAsynLogin;

		public byte byProxyType;

		public byte byUseUTCTime;

		public byte[] byRes2;

		public int iProxyID;

		public byte[] byRes3;
	}

	public enum SdkNetworkEnvironment : uint
	{
		LocalAreaNetwork = 0,
		WideAreaNetwork
	}

	public enum DisplayMode : uint
	{
		Normalmode = 0,
		Overlaymode
	}

	public enum SendMode : uint
	{
		Ptoptcpmode = 0,
		Ptopudpmode,
		Multimode,
		Rtpmode,
		Reservedmode
	}

	public enum CaptureMode : uint
	{
		BmpMode = 0,
		JpegMode = 1
	}

	public enum RealsoundMode : uint
	{
		MonopolizeMode = 1,
		ShareMode = 2
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CLIENTINFO
	{
		public int lChannel;

		public int lLinkMode;

		public unsafe void* hPlayWnd;

		public unsafe sbyte* sMultiCastIP;

		public byte byProtoType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SDKSTATE
	{
		public uint dwTotalLoginNum;

		public uint dwTotalRealPlayNum;

		public uint dwTotalPlayBackNum;

		public uint dwTotalAlarmChanNum;

		public uint dwTotalFormatNum;

		public uint dwTotalFileSearchNum;

		public uint dwTotalLogSearchNum;

		public uint dwTotalSerialNum;

		public uint dwTotalUpgradeNum;

		public uint dwTotalVoiceComNum;

		public uint dwTotalBroadCastNum;

		public uint dwTotalListenNum;

		public uint dwEmailTestNum;

		public uint dwBackupNum;

		public uint dwTotalInquestUploadNum;

		public uint[] dwRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SDKABL
	{
		public uint dwMaxLoginNum;

		public uint dwMaxRealPlayNum;

		public uint dwMaxPlayBackNum;

		public uint dwMaxAlarmChanNum;

		public uint dwMaxFormatNum;

		public uint dwMaxFileSearchNum;

		public uint dwMaxLogSearchNum;

		public uint dwMaxSerialNum;

		public uint dwMaxUpgradeNum;

		public uint dwMaxVoiceComNum;

		public uint dwMaxBroadCastNum;

		public uint[] dwRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMER
	{
		public byte byUserIDValid;

		public byte bySerialValid;

		public byte byVersionValid;

		public byte byDeviceNameValid;

		public byte byMacAddrValid;

		public byte byLinkPortValid;

		public byte byDeviceIPValid;

		public byte bySocketIPValid;

		public int lUserID;

		public byte[] sSerialNumber;

		public uint dwDeviceVersion;

		public sbyte[] sDeviceName;

		public byte[] byMacAddr;

		public ushort wLinkPort;

		public sbyte[] sDeviceIP;

		public sbyte[] sSocketIP;

		public byte byIpProtocol;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DISPLAY_PARA
	{
		public nint bToScreen;

		public nint bToVideoOut;

		public nint nLeft;

		public nint nTop;

		public nint nWidth;

		public nint nHeight;

		public nint nReserved;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CARDINFO
	{
		public int lChannel;

		public int lLinkMode;

		public unsafe sbyte* sMultiCastIP;

		public NET_DVR_DISPLAY_PARA struDisplayPara;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FIND_DATA
	{
		public sbyte[] sFileName;

		public NET_DVR_TIME struStartTime;

		public NET_DVR_TIME struStopTime;

		public uint dwFileSize;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FINDDATA_V30
	{
		public sbyte[] sFileName;

		public NET_DVR_TIME struStartTime;

		public NET_DVR_TIME struStopTime;

		public uint dwFileSize;

		public sbyte[] sCardNum;

		public byte byLocked;

		public byte byFileType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FINDDATA_V40
	{
		public sbyte[] sFileName;

		public NET_DVR_TIME struStartTime;

		public NET_DVR_TIME struStopTime;

		public uint dwFileSize;

		public sbyte[] sCardNum;

		public byte byLocked;

		public byte byFileType;

		public byte byQuickSearch;

		public byte byRes;

		public uint dwFileIndex;

		public byte byStreamType;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FINDDATA_CARD
	{
		public sbyte[] sFileName;

		public NET_DVR_TIME struStartTime;

		public NET_DVR_TIME struStopTime;

		public uint dwFileSize;

		public sbyte[] sCardNum;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FILECOND
	{
		public int lChannel;

		public uint dwFileType;

		public uint dwIsLocked;

		public uint dwUseCardNo;

		public byte[] sCardNumber;

		public NET_DVR_TIME struStartTime;

		public NET_DVR_TIME struStopTime;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_POINT_FRAME
	{
		public int xTop;

		public int yTop;

		public int xBottom;

		public int yBottom;

		public int bCounter;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_COMPRESSION_AUDIO
	{
		public byte byAudioEncType;

		public byte byAudioSamplingRate;

		public byte byAudioBitRate;

		public byte[] byres;

		public byte bySupport;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_AP_INFO
	{
		public sbyte[] sSsid;

		public uint dwMode;

		public uint dwSecurity;

		public uint dwChannel;

		public uint dwSignalStrength;

		public uint dwSpeed;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_AP_INFO_LIST
	{
		public uint dwSize;

		public uint dwCount;

		public NET_DVR_AP_INFO[] struApInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WIFIETHERNET
	{
		public sbyte[] sIpAddress;

		public sbyte[] sIpMask;

		public byte[] byMACAddr;

		public byte byCloseWifi;

		public byte bRes;

		public uint dwEnableDhcp;

		public uint dwAutoDns;

		public sbyte[] sFirstDns;

		public sbyte[] sSecondDns;

		public sbyte[] sGatewayIpAddr;

		public byte[] bRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WIFI_CFG_EX
	{
		public NET_DVR_WIFIETHERNET struEtherNet;

		public sbyte[] sEssid;

		public uint dwMode;

		public uint dwSecurity;

		[StructLayout (LayoutKind.Explicit)]
		public struct Key
		{
			[StructLayout (LayoutKind.Sequential)]
			public struct Wep
			{
				public uint dwAuthentication;

				public uint dwKeyLength;

				public uint dwKeyType;

				public uint dwActive;

				public sbyte[][] sKeyInfo;
			}


			[FieldOffset (0)]
			public Wep wep;

			[StructLayout (LayoutKind.Sequential)]
			public struct Wpa_psk
			{
				public uint dwKeyLength;

				public sbyte[] sKeyInfo;

				public byte byEncryptType;

				public sbyte[] sNewKeyInfo;

				public byte byKeyType;

				public byte[] byRes;
			}


			[FieldOffset (0)]
			public Wpa_psk wpa_psk;

			[StructLayout (LayoutKind.Sequential)]
			public struct Wpa_wpa2
			{
				public byte byEncryptType;

				public byte byAuthType;

				public byte[] byRes;

				[StructLayout (LayoutKind.Explicit)]
				public struct Auth_param
				{
					[StructLayout (LayoutKind.Sequential)]
					public struct _EAP_TTLS
					{
						public byte byEapolVersion;

						public byte byAuthType;

						public byte[] byRes1;

						public byte[] byAnonyIdentity;

						public byte[] byUserName;

						public byte[] byPassword;

						public byte[] byRes;
					}


					[FieldOffset (0)]
					public _EAP_TTLS EAP_TTLS;

					[StructLayout (LayoutKind.Sequential)]
					public struct _EAP_PEAP
					{
						public byte byEapolVersion;

						public byte byAuthType;

						public byte byPeapVersion;

						public byte byPeapLabel;

						public byte[] byAnonyIdentity;

						public byte[] byUserName;

						public byte[] byPassword;

						public byte[] byRes;
					}


					[FieldOffset (0)]
					public _EAP_PEAP EAP_PEAP;

					[StructLayout (LayoutKind.Sequential)]
					public struct _EAP_TLS
					{
						public byte byEapolVersion;

						public byte[] byRes1;

						public byte[] byIdentity;

						public byte[] byPrivateKeyPswd;

						public byte[] byRes;
					}


					[FieldOffset (0)]
					public _EAP_TLS EAP_TLS;
				}


				public Auth_param auth_param;
			}


			[FieldOffset (0)]
			public Wpa_wpa2 wpa_wpa2;
		}


		public Key key;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WIFI_CFG
	{
		public uint dwSize;

		public NET_DVR_WIFI_CFG_EX struWifiCfg;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WIFI_CONNECT_STATUS
	{
		public uint dwSize;

		public byte byCurStatus;

		public byte[] byRes1;

		public uint dwErrorCode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WIFI_WORKMODE
	{
		public uint dwSize;

		public uint dwNetworkInterfaceMode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VEHICLE_INFO_COND
	{
		public uint dwSize;

		public NET_DVR_TIME_EX strStartTime;

		public NET_DVR_TIME_EX strStopTime;

		public sbyte[] sLicense;

		public uint dwChannel;

		public byte byRegion;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VEHICLE_INFO_CFG
	{
		public uint dwSize;

		public uint dwIndex;

		public byte[] byDeviceID;

		public byte byBelieve;

		public byte byDir;

		public byte byLineID;

		public byte byRes1;

		public NET_DVR_TIME_EX struSnapTime;

		public sbyte[] sLicense;

		public byte[] byMonitoringSiteID;

		public byte byCountry;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_CTRLINFO
	{
		public byte byVCAEnable;

		public byte byVCAType;

		public byte byStreamWithVCA;

		public byte byMode;

		public byte byControlType;

		public byte byPicWithVCA;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_CTRLCFG
	{
		public uint dwSize;

		public NET_VCA_CTRLINFO[] struCtrlInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_DEV_ABILITY
	{
		public uint dwSize;

		public byte byVCAChanNum;

		public byte byPlateChanNum;

		public byte byBBaseChanNum;

		public byte byBAdvanceChanNum;

		public byte byBFullChanNum;

		public byte byATMChanNum;

		public byte byPDCChanNum;

		public byte byITSChanNum;

		public byte byBPrisonChanNum;

		public byte byFSnapChanNum;

		public byte byFSnapRecogChanNum;

		public byte byFRetrievalChanNum;

		public byte bySupport;

		public byte byFRecogChanNum;

		public byte byBPPerimeterChanNum;

		public byte byTPSChanNum;

		public byte byTFSChanNum;

		public byte byFSnapBFullChanNum;

		public byte byHeatMapChanNum;

		public byte bySmartVehicleNum;

		public byte bySmartHVTNum;

		public byte bySmartNum;

		public byte byVehicleNum;

		public byte bySmartRoadDetectionNum;

		public byte bySmartFaceDetectionNum;

		public byte bySmartHeatMapNum;

		public byte[] byRes;
	}

	public enum VcaAbilityType : uint
	{
		TraversePlaneAbility = 1,
		EnterAreaAbility = 2,
		ExitAreaAbility = 4,
		IntrusionAbility = 8,
		LoiterAbility = 16,
		LeftTakeAbility = 32,
		ParkingAbility = 64,
		RunAbility = 128,
		HighDensityAbility = 256,
		LfTrackAbility = 512,
		ViolentMotionAbility = 1024,
		ReachHightAbility = 2048,
		GetUpAbility = 4096,
		LeftAbility = 8192,
		TakeAbility = 16384,
		LeavePosition = 32768,
		TrailAbility = 65536,
		KeyPersonGetUpAbility = 131072,
		StandupAbility = 262144,
		FallDownAbility = 524288,
		AudioAbnormalAbility = 1048576,
		AdvReachHeightAbility = 2097152,
		ToiletTarryAbility = 4194304,
		YardTarryAbility = 8388608,
		AdvTraversePlaneAbility = 16777216,
		LectureAbility = 33554432,
		AnswerAbility = 67108864,
		HumanEnterAbility = 268435456,
		OverTimeAbility = 536870912,
		StickUpAbility = 1073741824,
		InstallScannerAbility = 2147483648u
	}

	public enum VcaAbilityTypeEx : uint
	{
		PeoplenumChangeAbility = 2,
		SpacingChangeAbility = 4,
		EventCombinedAbility = 8,
		EventSitQuietly = 16,
		EventHighDensityStatusAbility = 32
	}

	public enum VcaChanAbilityType : uint
	{
		BehaviorBase = 1,
		BehaviorAdvance = 2,
		BehaviorFull = 3,
		Plate = 4,
		Atm = 5,
		Pdc = 6,
		Its = 7,
		BehaviorPrison = 8,
		FaceSnap = 9,
		FaceSnaprecog = 10,
		FaceRetrieval = 11,
		FaceRecog = 12,
		BehaviorPrisonPerimeter = 13,
		Tps = 14,
		Tfs = 15,
		BehaviorFacesnap = 16,
		Heatmap = 17,
		SmartVehicleDetection = 18,
		SmartHvtDetection = 19,
		SmartEvent = 20,
		VehicleDetection = 21,
		SmartRoadDetection = 22,
		SmartFaceDetection = 23,
		SmartHeatmap = 24
	}

	public enum VcaChanModeType : uint
	{
		Panel = 0,
		Surround = 1,
		Face = 2,
		Safetycabin = 3
	}

	public enum TfsChanModeType : uint
	{
		Cityroad = 0,
		Freeway = 1
	}

	public enum BehaviorSceneModeType : uint
	{
		Default = 0,
		Wall = 1,
		Indoor = 2
	}

	public enum LpbehaviorPrisonModeType : uint
	{
		Prison = 0,
		Hearing = 1,
		Recfield = 2
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_CHAN_IN_PARAM
	{
		public byte byVCAType;

		public byte byMode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_BEHAVIOR_ABILITY
	{
		public uint dwSize;

		public uint dwAbilityType;

		public byte byMaxRuleNum;

		public byte byMaxTargetNum;

		public byte bySupport;

		public byte[] byRes;

		public uint dwAbilityTypeEx;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCENE_CHANGE_UPDATE_PARAM
	{
		public uint dwSize;

		public byte byIDCount;

		public byte[] byRes1;

		public byte[][] byStreamID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ITS_ABILITY
	{
		public uint dwSize;

		public uint dwAbilityType;

		public byte byMaxRuleNum;

		public byte byMaxTargetNum;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_RECT
	{
		public float fX;

		public float fY;

		public float fWidth;

		public float fHeight;
	}

	public enum VcaEventType : uint
	{
		TraversePlane = 1,
		EnterArea = 2,
		ExitArea = 4,
		Intrusion = 8,
		Loiter = 16,
		LeftTake = 32,
		Parking = 64,
		Run = 128,
		HighDensity = 256,
		ViolentMotion = 512,
		ReachHight = 1024,
		GetUp = 2048,
		Left = 4096,
		Take = 8192,
		LeavePosition = 16384,
		Trail = 32768,
		KeyPersonGetUp = 65536,
		Standup = 131072,
		FallDown = 524288,
		AudioAbnormal = 1048576,
		AdvReachHeight = 2097152,
		ToiletTarry = 4194304,
		YardTarry = 8388608,
		AdvTraversePlane = 16777216,
		Lecture = 33554432,
		Answer = 67108864,
		HumanEnter = 268435456,
		OverTime = 536870912,
		StickUp = 1073741824,
		InstallScanner = 2147483648u
	}

	public enum VcaRuleEventTypeEx : uint
	{
		TraversePlane = 1,
		EnterArea = 2,
		ExitArea = 3,
		Intrusion = 4,
		Loiter = 5,
		LeftTake = 6,
		Parking = 7,
		Run = 8,
		HighDensity = 9,
		ViolentMotion = 10,
		ReachHight = 11,
		GetUp = 12,
		Left = 13,
		Take = 14,
		LeavePosition = 15,
		Trail = 16,
		KeyPersonGetUp = 17,
		Standup = 18,
		FallDown = 20,
		AudioAbnormal = 21,
		AdvReachHeight = 22,
		ToiletTarry = 23,
		YardTarry = 24,
		AdvTraversePlane = 25,
		Lecture = 26,
		Answer = 27,
		HumanEnter = 29,
		OverTime = 30,
		StickUp = 31,
		InstallScanner = 32,
		PeoplenumChange = 35,
		SpacingChange = 36,
		CombinedRule = 37,
		SitQuietly = 38,
		HighDensityStatus = 39
	}

	public enum VcaCrossDirection : uint
	{
		BothDirection,
		LeftGoRight,
		RightGoLeft
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_LINE
	{
		public NET_VCA_POINT struStart;

		public NET_VCA_POINT struEnd;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_POLYGON
	{
		public uint dwPointNum;

		public NET_VCA_POINT[] struPos;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_TRAVERSE_PLANE
	{
		public NET_VCA_LINE struPlaneBottom;

		public VcaCrossDirection dwCrossDirection;

		public byte bySensitivity;

		public byte byPlaneHeight;

		public byte byDetectionTarget;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_SIT_QUIETLY
	{
		public NET_VCA_POLYGON struRegion;

		public uint dwDuration;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_AREA
	{
		public NET_VCA_POLYGON struRegion;

		public byte bySensitivity;

		public byte byDetectionTarget;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_INTRUSION
	{
		public NET_VCA_POLYGON struRegion;

		public ushort wDuration;

		public byte bySensitivity;

		public byte byRate;

		public byte byDetectionTarget;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_LOITER
	{
		public NET_VCA_POLYGON struRegion;

		public ushort wDuration;

		public byte bySensitivity;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_TAKE_LEFT
	{
		public NET_VCA_POLYGON struRegion;

		public ushort wDuration;

		public byte bySensitivity;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_PARKING
	{
		public NET_VCA_POLYGON struRegion;

		public ushort wDuration;

		public byte bySensitivity;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_RUN
	{
		public NET_VCA_POLYGON struRegion;

		public float fRunDistance;

		public byte bySensitivity;

		public byte byMode;

		public byte byDetectionTarget;

		public byte byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_HIGH_DENSITY
	{
		public NET_VCA_POLYGON struRegion;

		public float fDensity;

		public byte bySensitivity;

		public byte byRes;

		public ushort wDuration;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_VIOLENT_MOTION
	{
		public NET_VCA_POLYGON struRegion;

		public ushort wDuration;

		public byte bySensitivity;

		public byte byMode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_REACH_HIGHT
	{
		public NET_VCA_LINE struVcaLine;

		public ushort wDuration;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_GET_UP
	{
		public NET_VCA_POLYGON struRegion;

		public ushort wDuration;

		public byte byMode;

		public byte bySensitivity;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_LEFT
	{
		public NET_VCA_POLYGON struRegion;

		public ushort wDuration;

		public byte bySensitivity;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_TAKE
	{
		public NET_VCA_POLYGON struRegion;

		public ushort wDuration;

		public byte bySensitivity;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_OVER_TIME
	{
		public NET_VCA_POLYGON struRegion;

		public ushort wDuration;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_HUMAN_ENTER
	{
		public uint[] dwRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_STICK_UP
	{
		public NET_VCA_POLYGON struRegion;

		public ushort wDuration;

		public byte bySensitivity;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_SCANNER
	{
		public NET_VCA_POLYGON struRegion;

		public ushort wDuration;

		public byte bySensitivity;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_LEAVE_POSITION
	{
		public NET_VCA_POLYGON struRegion;

		public ushort wLeaveDelay;

		public ushort wStaticDelay;

		public byte byMode;

		public byte byPersonType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_TRAIL
	{
		public NET_VCA_POLYGON struRegion;

		public ushort wRes;

		public byte bySensitivity;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_FALL_DOWN
	{
		public NET_VCA_POLYGON struRegion;

		public ushort wDuration;

		public byte bySensitivity;

		public byte byHeightThreshold;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_STANDUP
	{
		public NET_VCA_POLYGON struRegion;

		public byte bySensitivity;

		public byte byHeightThreshold;

		public ushort wDuration;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_PEOPLENUM_CHANGE
	{
		public NET_VCA_POLYGON struRegion;

		public byte bySensitivity;

		public byte byPeopleNumThreshold;

		public byte byDetectMode;

		public byte byNoneStateEffective;

		public ushort wDuration;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_SPACING_CHANGE
	{
		public NET_VCA_POLYGON struRegion;

		public float fSpacingThreshold;

		public byte bySensitivity;

		public byte byDetectMode;

		public ushort wDuration;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_AUDIO_ABNORMAL
	{
		public ushort wDecibel;

		public byte bySensitivity;

		public byte byAudioMode;

		public byte byEnable;

		public byte byThreshold;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_AUDIO_STEEP_DROP
	{
		public byte bySensitivity;

		public byte byEnable;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_AUDIO_EXCEPTION
	{
		public uint dwSize;

		public byte byEnableAudioInException;

		public byte[] byRes1;

		public NET_VCA_AUDIO_ABNORMAL struAudioAbnormal;

		public NET_DVR_SCHEDTIME[][] struAlarmSched;

		public NET_DVR_HANDLEEXCEPTION_V40 struHandleException;

		public uint dwMaxRelRecordChanNum;

		public uint dwRelRecordChanNum;

		public uint[] byRelRecordChan;

		public NET_DVR_AUDIO_STEEP_DROP struAudioSteepDrop;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_TOILET_TARRY
	{
		public NET_VCA_POLYGON struRegion;

		public ushort wDelay;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_YARD_TARRY
	{
		public NET_VCA_POLYGON struRegion;

		public ushort wDelay;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_ADV_REACH_HEIGHT
	{
		public NET_VCA_POLYGON struRegion;

		public uint dwCrossDirection;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_ADV_TRAVERSE_PLANE
	{
		public NET_VCA_POLYGON struRegion;

		public uint dwCrossDirection;

		public byte bySensitivity;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_LECTURE
	{
		public NET_VCA_POLYGON struRegion;

		public ushort wDuration;

		public byte bySensitivity;

		public byte byAlarmState;

		public byte byTrackingMode;

		public byte byZoomMode;

		public byte byZoomOver;

		public byte byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_ANSWER
	{
		public NET_VCA_POLYGON struRegion;

		public byte bySensitivity;

		public byte byAlarmState;

		public byte byZoomOver;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_RELATE_RULE_PARAM
	{
		public byte byRuleID;

		public byte byRes;

		public ushort wEventType;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_COMBINED_RULE
	{
		public byte byRuleSequence;

		public byte[] byRes;

		public uint dwMinInterval;

		public uint dwMaxInterval;

		public NET_VCA_RELATE_RULE_PARAM struRule1Raram;

		public NET_VCA_RELATE_RULE_PARAM struRule2Raram;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_HIGH_DENSITY_STATUS
	{
		public NET_VCA_POLYGON struRegion;

		public float fDensity;

		public byte bySensitivity;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_VCA_EVENT_UNION
	{
		[FieldOffset (0)]
		public uint[] uLen;

		[FieldOffset (0)]
		public NET_VCA_TRAVERSE_PLANE struTraversePlane;

		[FieldOffset (0)]
		public NET_VCA_AREA struArea;

		[FieldOffset (0)]
		public NET_VCA_INTRUSION struIntrusion;

		[FieldOffset (0)]
		public NET_VCA_LOITER struLoiter;

		[FieldOffset (0)]
		public NET_VCA_TAKE_LEFT struTakeTeft;

		[FieldOffset (0)]
		public NET_VCA_PARKING struParking;

		[FieldOffset (0)]
		public NET_VCA_RUN struRun;

		[FieldOffset (0)]
		public NET_VCA_HIGH_DENSITY struHighDensity;

		[FieldOffset (0)]
		public NET_VCA_VIOLENT_MOTION struViolentMotion;

		[FieldOffset (0)]
		public NET_VCA_REACH_HIGHT struReachHight;

		[FieldOffset (0)]
		public NET_VCA_GET_UP struGetUp;

		[FieldOffset (0)]
		public NET_VCA_LEFT struLeft;

		[FieldOffset (0)]
		public NET_VCA_TAKE struTake;

		[FieldOffset (0)]
		public NET_VCA_HUMAN_ENTER struHumanEnter;

		[FieldOffset (0)]
		public NET_VCA_OVER_TIME struOvertime;

		[FieldOffset (0)]
		public NET_VCA_STICK_UP struStickUp;

		[FieldOffset (0)]
		public NET_VCA_SCANNER struScanner;

		[FieldOffset (0)]
		public NET_VCA_LEAVE_POSITION struLeavePos;

		[FieldOffset (0)]
		public NET_VCA_TRAIL struTrail;

		[FieldOffset (0)]
		public NET_VCA_FALL_DOWN struFallDown;

		[FieldOffset (0)]
		public NET_VCA_AUDIO_ABNORMAL struAudioAbnormal;

		[FieldOffset (0)]
		public NET_VCA_ADV_REACH_HEIGHT struReachHeight;

		[FieldOffset (0)]
		public NET_VCA_TOILET_TARRY struToiletTarry;

		[FieldOffset (0)]
		public NET_VCA_YARD_TARRY struYardTarry;

		[FieldOffset (0)]
		public NET_VCA_ADV_TRAVERSE_PLANE struAdvTraversePlane;

		[FieldOffset (0)]
		public NET_VCA_LECTURE struLecture;

		[FieldOffset (0)]
		public NET_VCA_ANSWER struAnswer;

		[FieldOffset (0)]
		public NET_VCA_STANDUP struStandUp;

		[FieldOffset (0)]
		public NET_VCA_PEOPLENUM_CHANGE struPeopleNumChange;

		[FieldOffset (0)]
		public NET_VCA_SPACING_CHANGE struSpacingChange;

		[FieldOffset (0)]
		public NET_VCA_COMBINED_RULE struCombinedRule;

		[FieldOffset (0)]
		public NET_VCA_SIT_QUIETLY struSitQuietly;

		[FieldOffset (0)]
		public NET_VCA_HIGH_DENSITY_STATUS struHighDensityStatus;
	}

	public enum SizeFilterMode : uint
	{
		ImagePixMode,
		RealWorldMode,
		DefaultMode
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_SIZE_FILTER
	{
		public byte byActive;

		public byte byMode;

		public byte[] byRes;

		public NET_VCA_RECT struMiniRect;

		public NET_VCA_RECT struMaxRect;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_ONE_RULE
	{
		public byte byActive;

		public byte[] byRes;

		public byte[] byRuleName;

		public VcaEventType dwEventType;

		public NET_VCA_EVENT_UNION uEventParam;

		public NET_VCA_SIZE_FILTER struSizeFilter;

		public NET_DVR_SCHEDTIME[][] struAlarmTime;

		public NET_DVR_HANDLEEXCEPTION_V30 struHandleType;

		public byte[] byRelRecordChan;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_RULECFG
	{
		public uint dwSize;

		public byte byPicProType;

		public byte byUpLastAlarm;

		public byte byPicRecordEnable;

		public byte byRes;

		public NET_DVR_JPEGPARA struPictureParam;

		public NET_VCA_ONE_RULE[] struRule;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_DEV_INFO
	{
		public NET_DVR_IPADDR struDevIP;

		public ushort wPort;

		public byte byChannel;

		public byte byIvmsChannel;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TARGET_LEFT_REGION_ALARM
	{
		public uint dwSize;

		public uint dwRelativeTime;

		public uint dwAbsTime;

		public NET_VCA_DEV_INFO struDevInfo;

		public byte byTargetType;

		public byte byLeftDirection;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_FILTER_STRATEGY
	{
		public byte byStrategy;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_RULE_TRIGGER_PARAM
	{
		public byte byTriggerMode;

		public byte byTriggerPoint;

		public byte[] byRes1;

		public float fTriggerArea;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_ONE_RULE_V41
	{
		public byte byActive;

		public byte[] byRes1;

		public byte byEventTypeFlag;

		public ushort wEventTypeEx;

		public byte[] byRuleName;

		public VcaEventType dwEventType;

		public NET_VCA_EVENT_UNION uEventParam;

		public NET_VCA_SIZE_FILTER struSizeFilter;

		public NET_DVR_SCHEDTIME[][] struAlarmTime;

		public NET_DVR_HANDLEEXCEPTION_V30 struHandleType;

		public byte[] byRelRecordChan;

		public ushort wAlarmDelay;

		public byte[] byRes2;

		public NET_VCA_FILTER_STRATEGY struFilterStrategy;

		public NET_VCA_RULE_TRIGGER_PARAM struTriggerParam;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_RULECFG_V41
	{
		public uint dwSize;

		public byte byPicProType;

		public byte byUpLastAlarm;

		public byte byPicRecordEnable;

		public byte byRes1;

		public NET_DVR_JPEGPARA struPictureParam;

		public NET_VCA_ONE_RULE_V41[] struRule;

		public ushort[] wRelSnapChan;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_ONE_RULE_V42
	{
		public byte byActive;

		public byte byEventPriority;

		public byte[] byRes1;

		public ushort wEventType;

		public byte[] byRuleName;

		public NET_VCA_EVENT_UNION uEventParam;

		public NET_VCA_SIZE_FILTER struSizeFilter;

		public NET_DVR_SCHEDTIME[][] struAlarmTime;

		public NET_DVR_HANDLEEXCEPTION_V40 struAlarmHandleType;

		public uint[] dwRelRecordChan;

		public ushort wAlarmDelay;

		public byte[] byRes2;

		public NET_VCA_FILTER_STRATEGY struFilterStrategy;

		public NET_VCA_RULE_TRIGGER_PARAM struTriggerParam;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PTZ_POSITION
	{
		public byte byEnable;

		public byte[] byRes1;

		public byte[] byPtzPositionName;

		public NET_DVR_PTZPOS struPtzPos;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_RULECFG_V42
	{
		public uint dwSize;

		public byte byPicProType;

		public byte byUpLastAlarm;

		public byte byPicRecordEnable;

		public byte byRes1;

		public NET_DVR_JPEGPARA struPicParam;

		public NET_VCA_ONE_RULE_V42[] struRule;

		public ushort[] wRelSnapChan;

		public byte byTrackEnable;

		public byte byRes2;

		public NET_DVR_PTZ_POSITION struPTZPosition;

		public ushort wTrackDuration;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_TARGET_INFO
	{
		public uint dwID;

		public NET_VCA_RECT struRect;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_RULE_INFO
	{
		public byte byRuleID;

		public byte byRes;

		public ushort wEventTypeEx;

		public byte[] byRuleName;

		public VcaEventType dwEventType;

		public NET_VCA_EVENT_UNION uEventParam;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_RULE_ALARM
	{
		public uint dwSize;

		public uint dwRelativeTime;

		public uint dwAbsTime;

		public NET_VCA_RULE_INFO struRuleInfo;

		public NET_VCA_TARGET_INFO struTargetInfo;

		public NET_VCA_DEV_INFO struDevInfo;

		public uint dwPicDataLen;

		public byte byPicType;

		public byte byRelAlarmPicNum;

		public byte bySmart;

		public byte byRes;

		public uint dwAlarmID;

		public byte[] byRes2;

		public unsafe byte* pImage;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_DRAW_MODE
	{
		public uint dwSize;

		public byte byDspAddTarget;

		public byte byDspAddRule;

		public byte byDspPicAddTarget;

		public byte byDspPicAddRule;

		public byte[] byRes;
	}

	public enum ObjectTypeEnum : uint
	{
		EnumObjectTypeCoat = 1
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_OBJECT_COLOR_COND
	{
		public uint dwChannel;

		public uint dwObjType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PIC
	{
		public byte byPicType;

		public byte[] byRes1;

		public uint dwPicWidth;

		public uint dwPicHeight;

		public uint dwPicDataLen;

		public uint dwPicDataBuffLen;

		public unsafe byte* byPicDataBuff;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_OBJECT_COLOR_UNION
	{
		[FieldOffset (0)]
		public NET_DVR_COLOR struColor;

		[FieldOffset (0)]
		public NET_DVR_PIC struPicture;

		[FieldOffset (0)]
		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_OBJECT_COLOR
	{
		public uint dwSize;

		public byte byEnable;

		public byte byColorMode;

		public byte[] byRes1;

		public NET_DVR_OBJECT_COLOR_UNION uObjColor;

		public byte[] byRes2;
	}

	public enum AreaTypeEnum : uint
	{
		OverlapRegion = 1,
		BedLocation = 2
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_AUXAREA
	{
		public uint dwAreaType;

		public byte byEnable;

		public byte[] byRes1;

		public NET_VCA_POLYGON struPolygon;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_AUXAREA_LIST
	{
		public uint dwSize;

		public NET_DVR_AUXAREA[] struArea;

		public byte[] byRes2;
	}

	public enum ChanWorkmodeEnum : uint
	{
		Independent = 1,
		Master = 2,
		Slave = 3
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CHANNEL_WORKMODE
	{
		public uint dwSize;

		public byte byWorkMode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CHANNEL
	{
		public byte[] byAddress;

		public ushort wDVRPort;

		public byte[] byRes1;

		public byte[] sUserName;

		public byte[] sPassword;

		public uint dwChannel;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_SLAVE_CHANNEL_UNION
	{
		[FieldOffset (0)]
		public byte[] byRes;

		[FieldOffset (0)]
		public uint dwLocalChannel;

		[FieldOffset (0)]
		public NET_DVR_CHANNEL struRemoteChannel;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SLAVE_CHANNEL_PARAM
	{
		public byte byChanType;

		public byte[] byRes1;

		public NET_DVR_SLAVE_CHANNEL_UNION uSlaveChannel;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SLAVE_CHANNEL_CFG
	{
		public uint dwSize;

		public NET_DVR_SLAVE_CHANNEL_PARAM[] struChanParam;

		public byte[] byRes;
	}

	public enum VqdEventEnum : uint
	{
		Blur = 1,
		Luma = 2,
		Chroma = 3,
		Snow = 4,
		Streak = 5,
		Freeze = 6,
		SignalLoss = 7,
		Ptz = 8,
		ScneneChange = 9,
		VideoAbnormal = 10,
		VideoBlock = 11
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VQD_EVENT_COND
	{
		public uint dwChannel;

		public uint dwEventType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VQD_EVENT_PARAM
	{
		public byte byThreshold;

		public byte byTriggerMode;

		public byte byUploadPic;

		public byte byRes1;

		public uint dwTimeInterval;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VQD_EVENT_RULE
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes1;

		public NET_DVR_VQD_EVENT_PARAM struEventParam;

		public NET_DVR_SCHEDTIME[][] struAlarmTime;

		public NET_DVR_HANDLEEXCEPTION_V30 struHandleType;

		public byte[] byRelRecordChan;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BASELINE_SCENE
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CONTROL_BASELINE_SCENE_PARAM
	{
		public uint dwSize;

		public uint dwChannel;

		public byte byCommand;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VQD_ALARM
	{
		public uint dwSize;

		public uint dwRelativeTime;

		public uint dwAbsTime;

		public NET_VCA_DEV_INFO struDevInfo;

		public uint dwEventType;

		public float fThreshold;

		public uint dwPicDataLen;

		public unsafe byte* pImage;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct LPNET_DVR_CB_POINT
	{
		public NET_VCA_POINT struPoint;

		public NET_DVR_PTZPOS struPtzPos;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TRACK_CALIBRATION_PARAM
	{
		public byte byPointNum;

		public byte[] byRes;

		public NET_DVR_CB_POINT[] struCBPoint;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TRACK_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte byFollowChan;

		public byte byDomeCalibrate;

		public byte byRes;

		public NET_DVR_TRACK_CALIBRATION_PARAM struCalParam;
	}

	public enum TrackMode : uint
	{
		ManualCtrl = 0,
		AlarmTrack
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MANUAL_CTRL_INFO
	{
		public NET_VCA_POINT struCtrlPoint;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TRACK_MODE
	{
		public uint dwSize;

		public byte byTrackMode;

		public byte byRuleConfMode;

		public byte[] byRes;

		[StructLayout (LayoutKind.Explicit)]
		public struct UModeParam
		{
			[FieldOffset (0)]
			public uint[] dwULen;

			[FieldOffset (0)]
			public NET_DVR_MANUAL_CTRL_INFO struManualCtrl;
		}


		public UModeParam uModeParam;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARM_JPEG
	{
		public byte byPicProType;

		public byte[] byRes;

		public NET_DVR_JPEGPARA struPicParam;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PHY_RATIO
	{
		public uint dwSize;

		public uint dwPhysicsRatio;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SLAVECAMERA_COND
	{
		public uint dwSize;

		public uint dwChannel;

		public byte byID;

		public byte[] byRes1;

		public uint dwSceneID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SLAVECAMERA_CFG
	{
		public uint dwSize;

		public byte byAddressType;

		public ushort wPort;

		public byte byLoginStatus;

		[StructLayout (LayoutKind.Explicit)]
		public struct UnionServer
		{
			[StructLayout (LayoutKind.Sequential)]
			public struct StruDomain
			{
				public byte[] szDomain;

				public byte[] byRes1;
			}


			[FieldOffset (0)]
			public StruDomain struDomain;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruAddrIP
			{
				public NET_DVR_IPADDR struIp;
			}


			[FieldOffset (0)]
			public StruAddrIP struAddrIP;
		}


		public UnionServer unionServer;

		public byte[] szUserName;

		public byte[] szPassWord;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SLAVECAMERA_PARAM
	{
		public byte byLinkStatus;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SLAVECAMERA_STATUS
	{
		public uint dwSize;

		public NET_DVR_SLAVECAMERA_PARAM[] struSlaveCamera;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_PTZ_INFO
	{
		public float fPan;

		public float fTilt;

		public float fZoom;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CALIB_PARAM
	{
		public NET_PTZ_INFO struPtzInfo;

		public NET_VCA_POINT struCalibCoordinates;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SLAVECAMERA_CALIB_CFG
	{
		public uint dwSize;

		public byte byCalibMode;

		public byte[] byRes;

		public NET_DVR_CALIB_PARAM[] struCalibParam;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TRACKING
	{
		public uint dwSize;

		public byte byEnable;

		public byte byMode;

		public ushort wTrackingTime;

		public NET_VCA_POLYGON struRegion;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SLAVECAMERA_CALIB_V50
	{
		public uint dwSize;

		public byte byCalibMode;

		public byte[] byRes;

		public NET_DVR_CALIB_PARAM[] struCalibParam;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SLAVECAMERA_CALIB_V51
	{
		public uint dwSize;

		public byte byCalibMode;

		public byte[] byRes;

		public NET_DVR_CALIB_PARAM[] struCalibParam;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CAPTURE_PICTURE_RESULT
	{
		public uint dwSize;

		public uint dwReturnPicSize;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_GOTOSCENE_COND
	{
		public uint dwSize;

		public uint dwChannel;

		public uint dwSceneID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TRACK_INITPOSTION
	{
		public uint dwSize;

		public uint dwChannel;

		public byte byID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MANUAL_TRACKRATIO
	{
		public uint dwSize;

		public byte byCoefficient;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_IVMS_ONE_RULE
	{
		public byte byActive;

		public byte[] byRes1;

		public byte[] byRuleName;

		public VcaEventType dwEventType;

		public NET_VCA_EVENT_UNION uEventParam;

		public NET_VCA_SIZE_FILTER struSizeFilter;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_IVMS_RULECFG
	{
		public NET_IVMS_ONE_RULE[] struRule;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_IVMS_BEHAVIORCFG
	{
		public uint dwSize;

		public byte byPicProType;

		public byte[] byRes;

		public NET_DVR_JPEGPARA struPicParam;

		public NET_IVMS_RULECFG[][] struRuleCfg;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_IVMS_DEVSCHED
	{
		public NET_DVR_SCHEDTIME struTime;

		public NET_DVR_PU_STREAM_CFG struPUStream;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_IVMS_STREAMCFG
	{
		public uint dwSize;

		public NET_IVMS_DEVSCHED[][] struDevSched;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_MASK_REGION
	{
		public byte byEnable;

		public byte[] byRes;

		public NET_VCA_POLYGON struPolygon;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_MASK_REGION_LIST
	{
		public uint dwSize;

		public byte[] byRes;

		public NET_VCA_MASK_REGION[] struMask;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_ENTER_REGION
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes1;

		public NET_VCA_POLYGON struPolygon;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_IVMS_MASK_REGION_LIST
	{
		public uint dwSize;

		public NET_VCA_MASK_REGION_LIST[][] struList;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_IVMS_ENTER_REGION
	{
		public uint dwSize;

		public NET_VCA_ENTER_REGION[][] struEnter;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_IVMS_ALARM_JPEG
	{
		public byte byPicProType;

		public byte[] byRes;

		public NET_DVR_JPEGPARA struPicParam;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_IVMS_SEARCHCFG
	{
		public uint dwSize;

		public NET_DVR_MATRIX_DEC_REMOTE_PLAY struRemotePlay;

		public NET_IVMS_ALARM_JPEG struAlarmJpeg;

		public NET_IVMS_RULECFG struRuleCfg;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TRACK_CALIBRATION_PARAM_V41
	{
		public byte byPointNum;

		public byte[] byRes;

		public NET_DVR_CB_POINT[] struCBPoint;

		public NET_DVR_PTZPOS struHorizonPtzPos;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TRACK_DEV_PARAM
	{
		public uint dwSize;

		public byte byEnable;

		public byte byTransMode;

		public byte[] byRes1;

		public NET_DVR_CHANNEL struTrackDevChan;

		public NET_DVR_TRACK_CALIBRATION_PARAM_V41 struCalParam;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IDENTIFICATION_PARAM
	{
		public byte[] sUserName;

		public byte[] sPassword;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_MOUNT_PARAM_UNION
	{
		[FieldOffset (0)]
		public byte[] uLen;

		[FieldOffset (0)]
		public NET_DVR_IDENTIFICATION_PARAM struIdentificationParam;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_NAS_MOUNT_PARAM
	{
		public byte byMountType;

		public byte[] byRes;

		public NET_DVR_MOUNT_PARAM_UNION uMountParam;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_MOUNTMETHOD_PARAM_UNION
	{
		[FieldOffset (0)]
		public byte[] uLen;

		[FieldOffset (0)]
		public NET_DVR_NAS_MOUNT_PARAM struNasMountParam;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SINGLE_NET_DISK_INFO
	{
		public byte byNetDiskType;

		public byte[] byRes1;

		public NET_DVR_IPADDR struNetDiskAddr;

		public byte[] sDirectory;

		public ushort wPort;

		public byte[] byRes2;

		public NET_DVR_MOUNTMETHOD_PARAM_UNION uMountMethodParam;

		public byte[] byRes3;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_NET_DISKCFG
	{
		public uint dwSize;

		public NET_DVR_SINGLE_NET_DISK_INFO[] struNetDiskParam;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SINGLE_NET_DISK_INFO_V40
	{
		public byte byNetDiskType;

		public byte[] byRes1;

		public byte[] sDirectory;

		public byte[] byDevAddr;

		public ushort wPort;

		public byte[] byRes2;

		public NET_DVR_MOUNTMETHOD_PARAM_UNION uMountMethodParam;

		public byte[] byRes4;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_NET_DISKCFG_V40
	{
		public uint dwSize;

		public NET_DVR_SINGLE_NET_DISK_INFO_V40[] struNetDiskParam;
	}

	public enum MainEventType : uint
	{
		MotDet = 0,
		AlarmIn = 1,
		VcaBehavior = 2,
		Inquest = 3,
		VcaDetection = 4,
		Pos = 5,
		TrialCase = 6,
		StreamInfo = 100
	}

	public enum VcaDetectionMinorType : uint
	{
		VcaTraversePlane = 1,
		FieldDetection,
		AudioInputAlarm,
		SoundIntensityAlarm,
		FaceDetection,
		VirtualFocusAlarm,
		SceneChangeAlarm,
		PirAlarm,
		EnterRegion,
		ExitRegion,
		Loitering,
		Groupdetection,
		Rapidmove,
		Park,
		UnattendedBaggage,
		Attendedbaggage,
		VehicleDetection,
		All = 4294967295u
	}

	public enum BehaviorMinorType : uint
	{
		TraversePlane = 0,
		EnterArea,
		ExitArea,
		Intrusion,
		Loiter,
		LeftTake,
		Parking,
		Run,
		HighDensity,
		StickUp,
		InstallScanner,
		OperateOverTime,
		FaceDetect,
		Left,
		Take,
		LeavePosition,
		TrailInfo = 16,
		FallDownInfo = 19,
		ObjectPaste = 20,
		FaceCaptureInfo = 21,
		MultiFacesInfo = 22,
		AudioAbnormalInfo = 23
	}

	public enum TrialCaseMinorType : uint
	{
		StartInfo = 4097,
		StopInfo = 4098,
		TagInfo = 4099,
		SegmentInfo = 4100,
		JudgeCaseInfo = 4101
	}

	public enum StreamInfoMinorType : uint
	{
		EventStreamId = 0,
		EventTiming = 1,
		EventMotionDetect = 2,
		EventAlarm = 3,
		EventAlarmOrMotionDetect = 4,
		EventAlarmAndMotionDetect = 5,
		EventCommandTrigger = 6,
		EventMannual = 7,
		EventBackupVolume = 8,
		StreamEventSemaphore,
		StreamEventHide,
		StreamEventInverse,
		StreamEventVideoLost,
		StreamEventWirelessAlarm,
		StreamEventPirAlarm,
		StreamEventCallhelpAlarm,
		StreamEventFacesnap,
		StreamEventFaceDetection,
		StreamEventItsPlate,
		StreamEventPdc,
		StreamEventScenechangeDetection,
		StreamEventDefocusDetection,
		StreamEventAudioexception,
		VcaEventTraversePlane,
		VcaEventIntrusion,
		VcaEventEnterArea,
		VcaEventExitArea,
		VcaEventLoiter,
		VcaEventHighDensity,
		VcaEventRun,
		VcaEventParking,
		VcaEventLeft,
		VcaEventTake
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SEARCH_EVENT_PARAM
	{
		public ushort wMajorType;

		public ushort wMinorType;

		public NET_DVR_TIME struStartTime;

		public NET_DVR_TIME struEndTime;

		public byte byLockType;

		public byte byValue;

		public byte[] byRes;

		[StructLayout (LayoutKind.Explicit)]
		public struct USeniorParam
		{
			[FieldOffset (0)]
			public byte[] byLen;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruAlarmParam
			{
				public byte[] byAlarmInNo;

				public byte[] byRes;
			}


			[FieldOffset (0)]
			public StruAlarmParam struAlarmParam;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruAlarmParamByValue
			{
				public ushort[] wAlarmInNo;

				public byte[] byRes;
			}


			[FieldOffset (0)]
			public StruAlarmParamByValue struAlarmParamByValue;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruMotionParam
			{
				public byte[] byMotDetChanNo;

				public byte[] byRes;
			}


			[FieldOffset (0)]
			public StruMotionParam struMotionParam;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruMotionParamByValue
			{
				public ushort[] wMotDetChanNo;

				public byte[] byRes;
			}


			[FieldOffset (0)]
			public StruMotionParamByValue struMotionParamByValue;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruVcaParam
			{
				public byte[] byChanNo;

				public byte byRuleID;

				public byte[] byRes1;
			}


			[FieldOffset (0)]
			public StruVcaParam struVcaParam;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruVcaParamByValue
			{
				public ushort[] wChanNo;

				public byte byRuleID;

				public byte[] byRes;
			}


			[FieldOffset (0)]
			public StruVcaParamByValue struVcaParamByValue;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruInquestParam
			{
				public byte byRoomIndex;

				public byte[] byRes1;

				public byte[] sInquestInfo;

				public byte[] byRes2;
			}


			[FieldOffset (0)]
			public StruInquestParam struInquestParam;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruVCADetectByBit
			{
				public byte[] byChan;
			}


			[FieldOffset (0)]
			public StruVCADetectByBit struVCADetectByBit;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruVCADetectByValue
			{
				public uint[] dwChanNo;

				public byte byAll;

				public byte[] byres;
			}


			[FieldOffset (0)]
			public StruVCADetectByValue struVCADetectByValue;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruStreamIDParam
			{
				public NET_DVR_STREAM_INFO struIDInfo;

				public uint dwCmdType;

				public byte byBackupVolumeNum;

				public byte[] byRes;
			}


			[FieldOffset (0)]
			public StruStreamIDParam struStreamIDParam;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruTrialParam
			{
				public byte[] byCaseNo;

				public byte[] byCaseName;

				public byte[] byLitigant1;

				public byte[] byLitigant2;

				public byte[] byChiefJudge;

				public byte byCaseType;

				public byte[] byRes;
			}


			[FieldOffset (0)]
			public StruTrialParam struTrialParam;
		}


		public USeniorParam uSeniorParam;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SEARCH_EVENT_PARAM_V40
	{
		public ushort wMajorType;

		public ushort wMinorType;

		public NET_DVR_TIME struStartTime;

		public NET_DVR_TIME struEndTime;

		public byte byLockType;

		public byte[] byRes;

		[StructLayout (LayoutKind.Explicit)]
		public struct USeniorParam
		{
			[FieldOffset (0)]
			public byte[] byLen;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruAlarmParam
			{
				public ushort[] wAlarmInNo;

				public byte[] byRes;
			}


			[FieldOffset (0)]
			public StruAlarmParam struAlarmParam;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruMotionParam
			{
				public ushort[] wMotDetChanNo;

				public byte[] byRes;
			}


			[FieldOffset (0)]
			public StruMotionParam struMotionParam;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruVcaParam
			{
				public ushort[] wChanNo;

				public byte byRuleID;

				public byte[] byRes;
			}


			[FieldOffset (0)]
			public StruVcaParam struVcaParam;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruInquestParam
			{
				public byte byRoomIndex;

				public byte[] byRes;
			}


			[FieldOffset (0)]
			public StruInquestParam struInquestParam;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruVCADetect
			{
				public byte byAll;

				public byte[] byRes1;

				public ushort[] wChanNo;

				public byte[] byRes;
			}


			[FieldOffset (0)]
			public StruVCADetect struVCADetect;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruStreamIDParam
			{
				public NET_DVR_STREAM_INFO struIDInfo;

				public uint dwCmdType;

				public byte byBackupVolumeNum;

				public byte[] byRes;
			}


			[FieldOffset (0)]
			public StruStreamIDParam struStreamIDParam;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruPosAlarm
			{
				public ushort[] wChannel;

				public byte byAllChan;

				public byte byCaseSensitive;

				public byte byCombinateMode;

				public byte byRes1;

				public sbyte[][] sKeyWord;

				public byte[] byRes;
			}


			[FieldOffset (0)]
			public StruPosAlarm struPosAlarm;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruTrialParam
			{
				public byte[] byCaseNo;

				public byte[] byCaseName;

				public byte[] byLitigant1;

				public byte[] byLitigant2;

				public byte[] byChiefJudge;

				public byte byCaseType;

				public byte[] byRes;
			}


			[FieldOffset (0)]
			public StruTrialParam struTrialParam;
		}


		public USeniorParam uSeniorParam;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SEARCH_EVENT_RET
	{
		public ushort wMajorType;

		public ushort wMinorType;

		public NET_DVR_TIME struStartTime;

		public NET_DVR_TIME struEndTime;

		public byte[] byChan;

		public byte[] byChanEx;

		public byte[] byRes;

		[StructLayout (LayoutKind.Explicit)]
		public struct USeniorRet
		{
			[StructLayout (LayoutKind.Sequential)]
			public struct StruAlarmRet
			{
				public uint dwAlarmInNo;

				public byte[] byRes;
			}


			[FieldOffset (0)]
			public StruAlarmRet struAlarmRet;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruMotionRet
			{
				public uint dwMotDetNo;

				public byte[] byRes;
			}


			[FieldOffset (0)]
			public StruMotionRet struMotionRet;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruVcaRet
			{
				public uint dwChanNo;

				public byte byRuleID;

				public byte[] byRes1;

				public byte[] byRuleName;

				public NET_VCA_EVENT_UNION uEvent;
			}


			[FieldOffset (0)]
			public StruVcaRet struVcaRet;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruInquestRet
			{
				public byte byRoomIndex;

				public byte byDriveIndex;

				public byte[] byRes1;

				public uint dwSegmentNo;

				public ushort wSegmetSize;

				public ushort wSegmentState;

				public byte[] byRes2;
			}


			[FieldOffset (0)]
			public StruInquestRet struInquestRet;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruStreamIDRet
			{
				public uint dwRecordType;

				public uint dwRecordLength;

				public byte byLockFlag;

				public byte byDrawFrameType;

				public byte[] byRes1;

				public byte[] byFileName;

				public uint dwFileIndex;

				public byte[] byRes;
			}


			[FieldOffset (0)]
			public StruStreamIDRet struStreamIDRet;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruTrialRet
			{
				public byte byRoomIndex;

				public byte byDriveIndex;

				public ushort wSegmetSize;

				public uint dwSegmentNo;

				public byte bySegmentState;

				public byte byCaseType;

				public byte[] byRes;

				public byte[] byCaseNo;

				public byte[] byCaseName;

				public byte[] byLitigant1;

				public byte[] byLitigant2;

				public byte[] byChiefJudge;

				public byte[] byRes1;
			}


			[FieldOffset (0)]
			public StruTrialRet struTrialRet;
		}


		public USeniorRet uSeniorRet;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SEARCH_EVENT_RET_V40
	{
		public ushort wMajorType;

		public ushort wMinorType;

		public NET_DVR_TIME struStartTime;

		public NET_DVR_TIME struEndTime;

		public ushort[] wChan;

		public byte[] byRes;

		[StructLayout (LayoutKind.Explicit)]
		public struct USeniorRet
		{
			[FieldOffset (0)]
			public byte[] byLen;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruAlarmRet
			{
				public uint dwAlarmInNo;

				public byte[] byRes;
			}


			[FieldOffset (0)]
			public StruAlarmRet struAlarmRet;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruMotionRet
			{
				public uint dwMotDetNo;

				public byte[] byRes;
			}


			[FieldOffset (0)]
			public StruMotionRet struMotionRet;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruVcaRet
			{
				public uint dwChanNo;

				public byte byRuleID;

				public byte[] byRes1;

				public byte[] byRuleName;

				public NET_VCA_EVENT_UNION uEvent;

				public byte[] byRes;
			}


			[FieldOffset (0)]
			public StruVcaRet struVcaRet;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruInquestRet
			{
				public byte byRoomIndex;

				public byte byDriveIndex;

				public byte[] byRes1;

				public uint dwSegmentNo;

				public ushort wSegmetSize;

				public ushort wSegmentState;

				public byte[] byRes2;
			}


			[FieldOffset (0)]
			public StruInquestRet struInquestRet;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruStreamIDRet
			{
				public uint dwRecordType;

				public uint dwRecordLength;

				public byte byLockFlag;

				public byte byDrawFrameType;

				public byte[] byRes1;

				public byte[] byFileName;

				public uint dwFileIndex;

				public byte[] byRes;
			}


			[FieldOffset (0)]
			public StruStreamIDRet struStreamIDRet;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruPosRet
			{
				public uint dwChanNo;

				public byte[] byRes;
			}


			[FieldOffset (0)]
			public StruPosRet struPosRet;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruTrialRet
			{
				public byte byRoomIndex;

				public byte byDriveIndex;

				public ushort wSegmetSize;

				public uint dwSegmentNo;

				public byte bySegmentState;

				public byte byCaseType;

				public byte[] byRes;

				public byte[] byCaseNo;

				public byte[] byCaseName;

				public byte[] byLitigant1;

				public byte[] byLitigant2;

				public byte[] byChiefJudge;

				public byte[] byRes1;
			}


			[FieldOffset (0)]
			public StruTrialRet struTrialRet;
		}


		public USeniorRet uSeniorRet;
	}

	public enum CalibrateType : uint
	{
		PdcCalibrate = 1,
		BehaviorOutCalibrate = 2,
		BehaviorInCalibrate = 3,
		ItsCalbirete = 4,
		BvDirectCalibrate = 5,
		PdcLineCalibrate = 6
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RECT_LIST
	{
		public byte byRectNum;

		public byte[] byRes1;

		public NET_VCA_RECT[] struVcaRect;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PDC_CALIBRATION
	{
		public NET_DVR_RECT_LIST struRectList;

		public byte[] byRes;
	}

	public enum LineMode : uint
	{
		HeightLine,
		LengthLine
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CAMERA_PARAM
	{
		public byte byEnableHeight;

		public byte byEnableAngle;

		public byte byEnableHorizon;

		public byte[] byRes;

		public float fCameraHeight;

		public float fCameraAngle;

		public float fHorizon;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LINE_SEGMENT
	{
		public byte byLineMode;

		public byte[] byRes;

		public NET_VCA_POINT struStartPoint;

		public NET_VCA_POINT struEndPoint;

		public float fValue;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BEHAVIOR_OUT_CALIBRATION
	{
		public uint dwLineSegNum;

		public NET_DVR_LINE_SEGMENT[] struLineSegment;

		public NET_DVR_CAMERA_PARAM struCameraParam;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IN_CAL_SAMPLE
	{
		public NET_VCA_RECT struVcaRect;

		public NET_DVR_LINE_SEGMENT struLineSegment;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BEHAVIOR_IN_CALIBRATION
	{
		public uint dwCalSampleNum;

		public NET_DVR_IN_CAL_SAMPLE[] struCalSample;

		public NET_DVR_CAMERA_PARAM struCameraParam;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ITS_CALIBRATION
	{
		public uint dwPointNum;

		public NET_VCA_POINT[] struPoint;

		public float fWidth;

		public float fHeight;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BV_DIRECT_CALIBRATION
	{
		public uint dwCameraHeight;

		public float fPitchAngle;

		public float fInclineAngle;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PDC_LINE_CALIBRATION
	{
		public NET_VCA_LINE struCalibrationLine;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_CALIBRATION_PRARM_UNION
	{
		[FieldOffset (0)]
		public byte[] byRes;

		[FieldOffset (0)]
		public NET_DVR_PDC_CALIBRATION struPDCCalibration;

		[FieldOffset (0)]
		public NET_DVR_BEHAVIOR_OUT_CALIBRATION struBehaviorOutCalibration;

		[FieldOffset (0)]
		public NET_DVR_BEHAVIOR_IN_CALIBRATION struBehaviorInCalibration;

		[FieldOffset (0)]
		public NET_DVR_ITS_CALIBRATION struITSCalibration;

		[FieldOffset (0)]
		public NET_DVR_BV_DIRECT_CALIBRATION struBvDirectCalibration;

		[FieldOffset (0)]
		public NET_DVR_PDC_LINE_CALIBRATION struPDCLineCalibration;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CALIBRATION_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte byCalibrationType;

		public byte[] byRes1;

		public NET_DVR_CALIBRATION_PRARM_UNION uCalibrateParam;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PDC_ENTER_DIRECTION
	{
		public NET_VCA_POINT struStartPoint;

		public NET_VCA_POINT struEndPoint;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PDC_RULE_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes1;

		public NET_VCA_POLYGON struPolygon;

		public NET_DVR_PDC_ENTER_DIRECTION struEnterDirection;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PDC_RULE_CFG_V41
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes1;

		public NET_VCA_POLYGON struPolygon;

		public NET_DVR_PDC_ENTER_DIRECTION struEnterDirection;

		public NET_DVR_SCHEDTIME[][] struAlarmTime;

		public NET_DVR_TIME_EX struDayStartTime;

		public NET_DVR_TIME_EX struNightStartTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PDC_RULE_COND
	{
		public uint dwSize;

		public uint dwChannel;

		public uint dwID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PDC_RULE_CFG_V42
	{
		public uint dwSize;

		public byte byEnable;

		public byte byOSDEnable;

		public byte byCurDetectType;

		public byte byInterferenceSuppression;

		public NET_VCA_POINT struOSDPoint;

		public byte byDataUploadCycle;

		public byte bySECUploadEnable;

		public byte byEmailDayReport;

		public byte byEmailWeekReport;

		public byte byEmailMonthReport;

		public byte byEmailYearReport;

		public byte[] byRes2;

		public NET_VCA_POLYGON struPolygon;

		public NET_DVR_PDC_ENTER_DIRECTION struEnterDirection;

		public NET_DVR_SCHEDTIME[][] struAlarmTime;

		public NET_DVR_TIME_EX struDayStartTime;

		public NET_DVR_TIME_EX struNightStartTime;

		public NET_DVR_HANDLEEXCEPTION_V40 struAlarmHandleType;

		public byte byDetecteSensitivity;

		public byte byGenerateSpeedSpace;

		public byte byGenerateSpeedTime;

		public byte byCountSpeed;

		public byte byDetecteType;

		public byte byTargetSizeCorrect;

		public byte[] byRes3;

		public NET_VCA_LINE struLine;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TRIAL_VERSION_CFG
	{
		public uint dwSize;

		public ushort wReserveTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SYN_CHANNEL_NAME_PARAM
	{
		public uint dwSize;

		public uint dwChannel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RESET_COUNTER_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte byMode;

		public byte[] byRes1;

		public NET_DVR_TIME_EX[] struTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VCA_CTRLINFO_COND
	{
		public uint dwSize;

		public NET_DVR_STREAM_INFO struStreamInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VCA_CTRLINFO_CFG
	{
		public uint dwSize;

		public byte byVCAEnable;

		public byte byVCAType;

		public byte byStreamWithVCA;

		public byte byMode;

		public byte byControlType;

		public byte[] byRes;
	}

	public enum PdcParamKey : uint
	{
		HumanGenerateRate = 50,
		DetectSensitive = 51
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PDC_TARGET_INFO
	{
		public uint dwTargetID;

		public NET_VCA_RECT struTargetRect;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PDC_TARGET_IN_FRAME
	{
		public byte byTargetNum;

		public byte[] byRes1;

		public NET_DVR_PDC_TARGET_INFO[] struTargetInfo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PDC_ALRAM_INFO
	{
		public uint dwSize;

		public byte byMode;

		public byte byChannel;

		public byte bySmart;

		public byte byRes1;

		public NET_VCA_DEV_INFO struDevInfo;

		[StructLayout (LayoutKind.Explicit)]
		public struct UStatModeParam
		{
			[StructLayout (LayoutKind.Sequential)]
			public struct StruStatFrame
			{
				public uint dwRelativeTime;

				public uint dwAbsTime;

				public byte[] byRes;
			}


			[FieldOffset (0)]
			public StruStatFrame struStatFrame;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruStatTime
			{
				public NET_DVR_TIME tmStart;

				public NET_DVR_TIME tmEnd;

				public byte[] byRes;
			}


			[FieldOffset (0)]
			public StruStatTime struStatTime;
		}


		public UStatModeParam uStatModeParam;

		public uint dwLeaveNum;

		public uint dwEnterNum;

		public byte byBrokenNetHttp;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PDC_QUERY
	{
		public NET_DVR_TIME tmStart;

		public NET_DVR_TIME tmEnd;

		public uint dwLeaveNum;

		public uint dwEnterNum;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_POSITION_RULE_CFG
	{
		public uint dwSize;

		public NET_DVR_PTZ_POSITION struPtzPosition;

		public NET_VCA_RULECFG struVcaRuleCfg;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_POSITION_RULE_CFG_V41
	{
		public uint dwSize;

		public NET_DVR_PTZ_POSITION struPtzPosition;

		public NET_VCA_RULECFG_V41 struVcaRuleCfg;

		public byte byTrackEnable;

		public byte byRes1;

		public ushort wTrackDuration;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LIMIT_ANGLE
	{
		public byte byEnable;

		public byte[] byRes1;

		public NET_DVR_PTZPOS struUp;

		public NET_DVR_PTZPOS struDown;

		public NET_DVR_PTZPOS struLeft;

		public NET_DVR_PTZPOS struRight;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_POSITION_INDEX
	{
		public byte byIndex;

		public byte byRes1;

		public ushort wDwell;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_POSITION_TRACK_CFG
	{
		public uint dwSize;

		public byte byNum;

		public byte[] byRes1;

		public NET_DVR_POSITION_INDEX[] struPositionIndex;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PATROL_SCENE_INFO
	{
		public ushort wDwell;

		public byte byPositionID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PATROL_TRACKCFG
	{
		public uint dwSize;

		public NET_DVR_PATROL_SCENE_INFO[] struPatrolSceneInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TRACK_PARAMCFG
	{
		public uint dwSize;

		public ushort wAlarmDelayTime;

		public ushort wTrackHoldTime;

		public byte byTrackMode;

		public byte byPreDirection;

		public byte byTrackSmooth;

		public byte byZoomAdjust;

		public byte byMaxTrackZoom;

		public byte byStopTrackWhenFindFace;

		public byte byStopTrackThreshold;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DOME_MOVEMENT_PARAM
	{
		public ushort wMaxZoom;

		public byte[] byRes;
	}

	public enum TrafficAidType : uint
	{
		Congestion = 1,
		Parking = 2,
		Inverse = 4,
		Pedestrian = 8,
		Debris = 16,
		Smoke = 32,
		Overline = 64,
		VehicleControlList = 128,
		Speed = 256,
		Lanechange = 512,
		Turnaround = 1024,
		VehicleOccupancyNonvehicle = 2048,
		Gasser = 4096
	}

	public enum TrafficSceneMode : uint
	{
		Freeway = 0,
		Tunnel,
		Bridge
	}

	public enum ItsAbilityType : uint
	{
		CongestionAbility = 1,
		ParkingAbility = 2,
		InverseAbility = 4,
		PedestrianAbility = 8,
		DebrisAbility = 16,
		SmokeAbility = 32,
		OverlineAbility = 64,
		VehicleControlListAbility = 128,
		SpeedAbility = 256,
		LanechangeAbility = 512,
		TurnaroundAbility = 1024,
		LaneVolumeAbility = 65536,
		LaneVelocityAbility = 131072,
		TimeHeadwayAbility = 262144,
		SpaceHeadwayAbility = 524288,
		TimeOccupancyRatioAbility = 1048576,
		SpaceOccupancyRatioAbility = 2097152,
		LaneQueueAbility = 4194304,
		VehicleTypeAbility = 8388608,
		TrafficStateAbility = 16777216
	}

	public enum ItsTpsType : uint
	{
		LaneVolume = 1,
		LaneVelocity = 2,
		TimeHeadway = 4,
		SpaceHeadway = 8,
		TimeOccupancyRatio = 16,
		SpaceOccupancyRatio = 32,
		Queue = 64,
		VehicleType = 128,
		TrafficState = 256
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_REGION_LIST
	{
		public uint dwSize;

		public byte byNum;

		public byte[] byRes1;

		public NET_VCA_POLYGON[] struPolygon;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DIRECTION
	{
		public NET_VCA_POINT struStartPoint;

		public NET_VCA_POINT struEndPoint;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ONE_LANE
	{
		public byte byEnable;

		public byte[] byRes1;

		public byte[] byLaneName;

		public NET_DVR_DIRECTION struFlowDirection;

		public NET_VCA_POLYGON struPolygon;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LANE_CFG
	{
		public uint dwSize;

		public NET_DVR_ONE_LANE[] struLane;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_AID_PARAM
	{
		public ushort wParkingDuration;

		public ushort wPedestrianDuration;

		public ushort wDebrisDuration;

		public ushort wCongestionLength;

		public ushort wCongestionDuration;

		public ushort wInverseDuration;

		public ushort wInverseDistance;

		public ushort wInverseAngleTolerance;

		public ushort wIllegalParkingTime;

		public ushort wIllegalParkingPicNum;

		public byte byMergePic;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ONE_AID_RULE
	{
		public byte byEnable;

		public byte[] byRes1;

		public byte[] byRuleName;

		public uint dwEventType;

		public NET_VCA_SIZE_FILTER struSizeFilter;

		public NET_VCA_POLYGON struPolygon;

		public NET_DVR_AID_PARAM struAIDParam;

		public NET_DVR_SCHEDTIME[][] struAlarmTime;

		public NET_DVR_HANDLEEXCEPTION_V30 struHandleType;

		public byte[] byRelRecordChan;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_AID_RULECFG
	{
		public uint dwSize;

		public byte byPicProType;

		public byte[] byRes1;

		public NET_DVR_JPEGPARA struPictureParam;

		public NET_DVR_ONE_AID_RULE[] struOneAIDRule;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ONE_AID_RULE_V41
	{
		public byte byEnable;

		public byte byLaneNo;

		public byte[] byRes1;

		public byte[] byRuleName;

		public uint dwEventType;

		public NET_VCA_SIZE_FILTER struSizeFilter;

		public NET_VCA_POLYGON struPolygon;

		public NET_DVR_AID_PARAM struAIDParam;

		public NET_DVR_SCHEDTIME[][] struAlarmTime;

		public NET_DVR_HANDLEEXCEPTION_V30 struHandleType;

		public byte[] byRelRecordChan;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_AID_RULECFG_V41
	{
		public uint dwSize;

		public byte byPicProType;

		public byte[] byRes1;

		public NET_DVR_JPEGPARA struPictureParam;

		public NET_DVR_ONE_AID_RULE_V41[] struAIDRule;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ONE_TPS_RULE
	{
		public byte byEnable;

		public byte byLaneID;

		public byte[] byRes1;

		public uint dwCalcType;

		public NET_VCA_SIZE_FILTER struSizeFilter;

		public NET_VCA_POLYGON struVitrualLoop;

		public NET_DVR_SCHEDTIME[][] struAlarmTime;

		public NET_DVR_HANDLEEXCEPTION_V30 struHandleType;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TPS_RULECFG
	{
		public uint dwSize;

		public NET_DVR_ONE_TPS_RULE[] struOneTpsRule;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ONE_TPS_RULE_V41
	{
		public byte byEnable;

		public byte byLaneID;

		public byte[] byRes1;

		public uint dwCalcType;

		public NET_VCA_SIZE_FILTER struSizeFilter;

		public NET_VCA_POLYGON struVitrualLoop;

		public NET_DVR_SCHEDTIME[][] struAlarmTime;

		public NET_DVR_HANDLEEXCEPTION_V30 struHandleType;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TPS_RULECFG_V41
	{
		public uint dwSize;

		public NET_DVR_ONE_TPS_RULE_V41[] struOneTpsRule;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_AID_INFO
	{
		public byte byRuleID;

		public byte[] byRes1;

		public byte[] byRuleName;

		public uint dwAIDType;

		public NET_DVR_DIRECTION struDirect;

		public byte bySpeedLimit;

		public byte byCurrentSpeed;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_AID_ALARM
	{
		public uint dwSize;

		public uint dwRelativeTime;

		public uint dwAbsTime;

		public NET_VCA_DEV_INFO struDevInfo;

		public NET_DVR_AID_INFO struAIDInfo;

		public uint dwPicDataLen;

		public unsafe byte* pImage;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LANE_QUEUE
	{
		public NET_VCA_POINT struHead;

		public NET_VCA_POINT struTail;

		public uint dwLength;
	}

	public enum TrafficDataVaryType : uint
	{
		NoVary,
		VehicleEnter,
		VehicleLeave,
		UeueVary
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LANE_PARAM
	{
		public byte[] byRuleName;

		public byte byRuleID;

		public byte byVaryType;

		public byte byLaneType;

		public byte byRes1;

		public uint dwLaneVolume;

		public uint dwLaneVelocity;

		public uint dwTimeHeadway;

		public uint dwSpaceHeadway;

		public float fSpaceOccupyRation;

		public NET_DVR_LANE_QUEUE struLaneQueue;

		public NET_VCA_POINT struRuleLocation;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TPS_INFO
	{
		public uint dwLanNum;

		public NET_DVR_LANE_PARAM[] struLaneParam;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TPS_ALARM
	{
		public uint dwSize;

		public uint dwRelativeTime;

		public uint dwAbsTime;

		public NET_VCA_DEV_INFO struDevInfo;

		public NET_DVR_TPS_INFO struTPSInfo;

		public byte[] byRes1;
	}

	public enum TrafficDataVaryTypeExEnum : uint
	{
		No = 0,
		VehicleEnter = 1,
		VehicleLeave = 2,
		Queue = 4,
		Statistic = 8
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LANE_PARAM_V41
	{
		public byte[] byRuleName;

		public byte byRuleID;

		public byte byLaneType;

		public byte byTrafficState;

		public byte byLaneNo;

		public uint dwVaryType;

		public uint dwTpsType;

		public uint dwLaneVolume;

		public uint dwLaneVelocity;

		public uint dwTimeHeadway;

		public uint dwSpaceHeadway;

		public float fSpaceOccupyRation;

		public float fTimeOccupyRation;

		public uint dwLightVehicle;

		public uint dwMidVehicle;

		public uint dwHeavyVehicle;

		public NET_DVR_LANE_QUEUE struLaneQueue;

		public NET_VCA_POINT struRuleLocation;

		public uint dwOversizeVehicle;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TPS_INFO_V41
	{
		public uint dwLanNum;

		public NET_DVR_LANE_PARAM_V41[] struLaneParam;

		public uint dwSceneID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FACEDETECT_RULECFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte byEventType;

		public byte byUpLastAlarm;

		public byte byUpFacePic;

		public byte[] byRuleName;

		public NET_VCA_POLYGON struVcaPolygon;

		public byte byPicProType;

		public byte bySensitivity;

		public ushort wDuration;

		public NET_DVR_JPEGPARA struPictureParam;

		public NET_VCA_SIZE_FILTER struSizeFilter;

		public NET_DVR_SCHEDTIME[][] struAlarmTime;

		public NET_DVR_HANDLEEXCEPTION_V30 struHandleType;

		public byte[] byRelRecordChan;

		public byte byPicRecordEnable;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FACE_PIPCFG
	{
		public byte byEnable;

		public byte byBackChannel;

		public byte byPosition;

		public byte byPIPDiv;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FACEDETECT_RULECFG_V41
	{
		public uint dwSize;

		public byte byEnable;

		public byte byEventType;

		public byte byUpLastAlarm;

		public byte byUpFacePic;

		public byte[] byRuleName;

		public NET_VCA_POLYGON struVcaPolygon;

		public byte byPicProType;

		public byte bySensitivity;

		public ushort wDuration;

		public NET_DVR_JPEGPARA struPictureParam;

		public NET_VCA_SIZE_FILTER struSizeFilter;

		public NET_DVR_SCHEDTIME[][] struAlarmTime;

		public NET_DVR_HANDLEEXCEPTION_V30 struHandleType;

		public byte[] byRelRecordChan;

		public byte byPicRecordEnable;

		public byte byRes1;

		public ushort wAlarmDelay;

		public NET_DVR_FACE_PIPCFG struFacePIP;

		public ushort[] wRelSnapChan;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FACEDETECT_ALARM
	{
		public uint dwSize;

		public uint dwRelativeTime;

		public uint dwAbsTime;

		public byte[] byRuleName;

		public NET_VCA_TARGET_INFO struTargetInfo;

		public NET_VCA_DEV_INFO struDevInfo;

		public uint dwPicDataLen;

		public byte byAlarmPicType;

		public byte byPanelChan;

		public byte byRelAlarmPicNum;

		public byte byRes1;

		public uint dwFacePicDataLen;

		public uint dwAlarmID;

		public byte[] byRes2;

		public unsafe byte* pFaceImage;

		public unsafe byte* pImage;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_EVENT_PARAM_UNION
	{
		public uint[] uLen;

		public uint dwHumanIn;

		public float fCrowdDensity;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_EVENT_INFO
	{
		public byte byRuleID;

		public byte[] byRes;

		public byte[] byRuleName;

		public uint dwEventType;

		public NET_DVR_EVENT_PARAM_UNION uEventParam;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_EVENT_INFO_LIST
	{
		public byte byNum;

		public byte[] byRes1;

		public NET_DVR_EVENT_INFO[] struEventInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RULE_INFO_ALARM
	{
		public uint dwSize;

		public uint dwRelativeTime;

		public uint dwAbsTime;

		public NET_VCA_DEV_INFO struDevInfo;

		public NET_DVR_EVENT_INFO_LIST struEventInfoList;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ONE_SCENE_TIME
	{
		public byte byActive;

		public byte[] byRes1;

		public uint dwSceneID;

		public NET_DVR_SCHEDTIME struEffectiveTime;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCENE_TIME_CFG
	{
		public uint dwSize;

		public NET_DVR_ONE_SCENE_TIME[] struSceneTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ONE_SCENE_CFG
	{
		public byte byEnable;

		public byte byDirection;

		public byte[] byRes1;

		public uint dwSceneID;

		public byte[] bySceneName;

		public NET_DVR_PTZPOS struPtzPos;

		public uint dwTrackTime;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCENE_CFG
	{
		public uint dwSize;

		public NET_DVR_ONE_SCENE_CFG[] struSceneCfg;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCENE_COND
	{
		public uint dwSize;

		public int lChannel;

		public uint dwSceneID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FORENSICS_MODE
	{
		public uint dwSize;

		public byte byMode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCENE_INFO
	{
		public uint dwSceneID;

		public byte[] bySceneName;

		public byte byDirection;

		public byte[] byRes1;

		public NET_DVR_PTZPOS struPtzPos;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_AID_ALARM_V41
	{
		public uint dwSize;

		public uint dwRelativeTime;

		public uint dwAbsTime;

		public NET_VCA_DEV_INFO struDevInfo;

		public NET_DVR_AID_INFO struAIDInfo;

		public NET_DVR_SCENE_INFO struSceneInfo;

		public uint dwPicDataLen;

		public unsafe byte* pImage;

		public byte byDataType;

		public byte byLaneNo;

		public ushort wMilliSecond;

		public byte[] byMonitoringSiteID;

		public byte[] byDeviceID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TPS_ALARM_V41
	{
		public uint dwSize;

		public uint dwRelativeTime;

		public uint dwAbsTime;

		public NET_VCA_DEV_INFO struDevInfo;

		public NET_DVR_TPS_INFO_V41 struTPSInfo;

		public byte[] byMonitoringSiteID;

		public byte[] byDeviceID;

		public uint dwStartTime;

		public uint dwStopTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VCA_VERSION
	{
		public ushort wMajorVersion;

		public ushort wMinorVersion;

		public ushort wRevisionNumber;

		public ushort wBuildNumber;

		public ushort wVersionYear;

		public byte byVersionMonth;

		public byte byVersionDay;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PALTE_PARAM
	{
		public byte byPlateRecoMode;

		public byte byBelive;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PLATECFG
	{
		public uint dwSize;

		public uint dwEnable;

		public byte byPicProType;

		public byte[] byRes1;

		public NET_DVR_JPEGPARA struPictureParam;

		public NET_DVR_PALTE_PARAM struPlateParam;

		public NET_DVR_HANDLEEXCEPTION struHandleType;

		public NET_DVR_SCHEDTIME[][] struAlarmTime;

		public byte[] byRelRecordChan;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PLATE_INFO
	{
		public byte byPlateType;

		public byte byColor;

		public byte byBright;

		public byte byLicenseLen;

		public byte byEntireBelieve;

		public byte byRegion;

		public byte byCountry;

		public byte[] byRes;

		public NET_VCA_RECT struPlateRect;

		public sbyte[] sLicense;

		public byte[] byBelieve;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PLATERECO_RESULE
	{
		public uint dwSize;

		public uint dwRelativeTime;

		public uint dwAbsTime;

		public NET_VCA_DEV_INFO struDevInfo;

		public NET_DVR_PLATE_INFO struPlateInfo;

		public uint dwPicDataLen;

		public uint[] dwRes;

		public unsafe byte* pImage;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LOG_MATRIX
	{
		public NET_DVR_TIME strLogTime;

		public uint dwMajorType;

		public uint dwMinorType;

		public byte[] sPanelUser;

		public byte[] sNetUser;

		public NET_DVR_IPADDR struRemoteHostAddr;

		public uint dwParaType;

		public uint dwChannel;

		public uint dwDiskNumber;

		public uint dwAlarmInPort;

		public uint dwAlarmOutPort;

		public uint dwInfoLen;

		public byte byDevSequence;

		public byte[] byMacAddr;

		public byte[] sSerialNumber;

		public sbyte[] sInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VEDIOPLATLOG
	{
		public byte bySearchCondition;

		public byte byDevSequence;

		public byte[] sSerialNumber;

		public byte[] byMacAddr;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CODESYSTEMABILITY
	{
		public uint dwSize;

		public uint dwAbilityVersion;

		public uint dwSupportMaxVideoFrameRate;

		public uint dwSupportRecordType;

		public byte bySupportLinkMode;

		public byte bySupportStringRow;

		public byte bySupportHideNum;

		public byte byRes1;

		public byte[] byMainStreamSupportResolution;

		public byte[] bySubStreamSupportResolution;

		public byte[] byEventStreamSupportResolution;

		public byte byNotSupportPreview;

		public byte byNotSupportStorage;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IO_INCFG
	{
		public uint dwSize;

		public byte byIoInStatus;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IO_OUTCFG
	{
		public uint dwSize;

		public byte byDefaultStatus;

		public byte byIoOutStatus;

		public ushort wAheadTime;

		public uint dwTimePluse;

		public uint dwTimeDelay;

		public byte byFreqMulti;

		public byte byDutyRate;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FLASH_OUTCFG
	{
		public uint dwSize;

		public byte byMode;

		public byte byRelatedIoIn;

		public byte byRecognizedLane;

		public byte byDetectBrightness;

		public byte byBrightnessThreld;

		public byte byStartHour;

		public byte byStartMinute;

		public byte byEndHour;

		public byte byEndMinute;

		public byte byFlashLightEnable;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LIGHTSNAPCFG
	{
		public uint dwSize;

		public byte byLightIoIn;

		public byte byTrigIoIn;

		public byte byRelatedDriveWay;

		public byte byTrafficLight;

		public byte bySnapTimes1;

		public byte bySnapTimes2;

		public byte[] byRes1;

		public ushort[] wIntervalTime1;

		public ushort[] wIntervalTime2;

		public byte byRecord;

		public byte bySessionTimeout;

		public byte byPreRecordTime;

		public byte byVideoDelay;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MEASURESPEEDCFG
	{
		public uint dwSize;

		public byte byTrigIo1;

		public byte byTrigIo2;

		public byte byRelatedDriveWay;

		public byte byTestSpeedTimeOut;

		public uint dwDistance;

		public byte byCapSpeed;

		public byte bySpeedLimit;

		public byte bySnapTimes1;

		public byte bySnapTimes2;

		public ushort[] wIntervalTime1;

		public ushort[] wIntervalTime2;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CLOUDSTORAGE_COND
	{
		public uint dwSize;

		public uint dwChannel;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_POOLPARAM
	{
		public uint dwPoolID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CLOUDSTORAGE_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes;

		public NET_DVR_IPADDR struIP;

		public ushort wPort;

		public byte[] byRes1;

		public sbyte[] szUser;

		public sbyte[] szPassword;

		public NET_DVR_POOLPARAM[] struPoolInfo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PARKLAMP_COND
	{
		public uint dwSize;

		public uint dwChannel;

		public byte byParkingIndex;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PARKLAMP_INFOCFG
	{
		public uint dwSize;

		public sbyte[] sLicense;

		public sbyte[] sParkingNo;

		public byte byLampFlicker;

		public byte byLampColor;

		public byte byStatus;

		public byte byColorDepth;

		public byte byColor;

		public byte byVehicleLogoRecog;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VIDEOEFFECT
	{
		public byte byBrightnessLevel;

		public byte byContrastLevel;

		public byte bySharpnessLevel;

		public byte bySaturationLevel;

		public byte byHueLevel;

		public byte byEnableFunc;

		public byte byLightInhibitLevel;

		public byte byGrayLevel;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_GAIN
	{
		public byte byGainLevel;

		public byte byGainUserSet;

		public byte[] byRes;

		public uint dwMaxGainValue;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WHITEBALANCE
	{
		public byte byWhiteBalanceMode;

		public byte byWhiteBalanceModeRGain;

		public byte byWhiteBalanceModeBGain;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_EXPOSURE
	{
		public byte byExposureMode;

		public byte byAutoApertureLevel;

		public byte[] byRes;

		public uint dwVideoExposureSet;

		public uint dwExposureUserSet;

		public uint dwRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WDR
	{
		public byte byWDREnabled;

		public byte byWDRLevel1;

		public byte byWDRLevel2;

		public byte byWDRContrastLevel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WDR_CFG
	{
		public uint dwSize;

		public NET_DVR_WDR struWDR;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DAYNIGHT
	{
		public byte byDayNightFilterType;

		public byte bySwitchScheduleEnabled;

		public byte byBeginTime;

		public byte byEndTime;

		public byte byDayToNightFilterLevel;

		public byte byNightToDayFilterLevel;

		public byte byDayNightFilterTime;

		public byte byBeginTimeMin;

		public byte byBeginTimeSec;

		public byte byEndTimeMin;

		public byte byEndTimeSec;

		public byte byAlarmTrigState;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_GAMMACORRECT
	{
		public byte byGammaCorrectionEnabled;

		public byte byGammaCorrectionLevel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BACKLIGHT
	{
		public byte byBacklightMode;

		public byte byBacklightLevel;

		public byte[] byRes1;

		public uint dwPositionX1;

		public uint dwPositionY1;

		public uint dwPositionX2;

		public uint dwPositionY2;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_NOISEREMOVE
	{
		public byte byDigitalNoiseRemoveEnable;

		public byte byDigitalNoiseRemoveLevel;

		public byte bySpectralLevel;

		public byte byTemporalLevel;

		public byte byDigitalNoiseRemove2DEnable;

		public byte byDigitalNoiseRemove2DLevel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CMOSMODECFG
	{
		public byte byCaptureMod;

		public byte byBrightnessGate;

		public byte byCaptureGain1;

		public byte byCaptureGain2;

		public uint dwCaptureShutterSpeed1;

		public uint dwCaptureShutterSpeed2;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CAMERAPARAMCFG
	{
		public uint dwSize;

		public NET_DVR_VIDEOEFFECT struVideoEffect;

		public NET_DVR_GAIN struGain;

		public NET_DVR_WHITEBALANCE struWhiteBalance;

		public NET_DVR_EXPOSURE struExposure;

		public NET_DVR_GAMMACORRECT struGammaCorrect;

		public NET_DVR_WDR struWdr;

		public NET_DVR_DAYNIGHT struDayNight;

		public NET_DVR_BACKLIGHT struBackLight;

		public NET_DVR_NOISEREMOVE struNoiseRemove;

		public byte byPowerLineFrequencyMode;

		public byte byIrisMode;

		public byte byMirror;

		public byte byDigitalZoom;

		public byte byDeadPixelDetect;

		public byte byBlackPwl;

		public byte byEptzGate;

		public byte byLocalOutputGate;

		public byte byCoderOutputMode;

		public byte byLineCoding;

		public byte byDimmerMode;

		public byte byPaletteMode;

		public byte byEnhancedMode;

		public byte byDynamicContrastEN;

		public byte byDynamicContrast;

		public byte byJPEGQuality;

		public NET_DVR_CMOSMODECFG struCmosModeCfg;

		public byte byFilterSwitch;

		public byte byFocusSpeed;

		public byte byAutoCompensationInterval;

		public byte bySceneMode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEFOGCFG
	{
		public byte byMode;

		public byte byLevel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ELECTRONICSTABILIZATION
	{
		public byte byEnable;

		public byte byLevel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CORRIDOR_MODE_CCD
	{
		public byte byEnableCorridorMode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SMARTIR_PARAM
	{
		public byte byMode;

		public byte byIRDistance;

		public byte byShortIRDistance;

		public byte byLongIRDistance;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PIRIS_PARAM
	{
		public byte byMode;

		public byte byPIrisAperture;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LASER_PARAM_CFG
	{
		public byte byControlMode;

		public byte bySensitivity;

		public byte byTriggerMode;

		public byte byBrightness;

		public byte byAngle;

		public byte byLimitBrightness;

		public byte byEnabled;

		public byte byIllumination;

		public byte byLightAngle;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FFC_PARAM
	{
		public byte byMode;

		public byte byRes1;

		public ushort wCompensateTime;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DDE_PARAM
	{
		public byte byMode;

		public byte byNormalLevel;

		public byte byExpertLevel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_AGC_PARAM
	{
		public byte bySceneType;

		public byte byLightLevel;

		public byte byGainLevel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SNAP_CAMERAPARAMCFG
	{
		public byte byWDRMode;

		public byte byWDRType;

		public byte byWDRLevel;

		public byte byRes1;

		public NET_DVR_TIME_EX struStartTime;

		public NET_DVR_TIME_EX struEndTime;

		public byte byDayNightBrightness;

		public byte byMCEEnabled;

		public byte byMCELevel;

		public byte byAutoContrastEnabled;

		public byte byAutoContrastLevel;

		public byte byLSEDetailEnabled;

		public byte byLSEDetailLevel;

		public byte byLPDEEnabled;

		public byte byLPDELevel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_OPTICAL_DEHAZE
	{
		public byte byEnable;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CAMERAPARAMCFG_EX
	{
		public uint dwSize;

		public NET_DVR_VIDEOEFFECT struVideoEffect;

		public NET_DVR_GAIN struGain;

		public NET_DVR_WHITEBALANCE struWhiteBalance;

		public NET_DVR_EXPOSURE struExposure;

		public NET_DVR_GAMMACORRECT struGammaCorrect;

		public NET_DVR_WDR struWdr;

		public NET_DVR_DAYNIGHT struDayNight;

		public NET_DVR_BACKLIGHT struBackLight;

		public NET_DVR_NOISEREMOVE struNoiseRemove;

		public byte byPowerLineFrequencyMode;

		public byte byIrisMode;

		public byte byMirror;

		public byte byDigitalZoom;

		public byte byDeadPixelDetect;

		public byte byBlackPwl;

		public byte byEptzGate;

		public byte byLocalOutputGate;

		public byte byCoderOutputMode;

		public byte byLineCoding;

		public byte byDimmerMode;

		public byte byPaletteMode;

		public byte byEnhancedMode;

		public byte byDynamicContrastEN;

		public byte byDynamicContrast;

		public byte byJPEGQuality;

		public NET_DVR_CMOSMODECFG struCmosModeCfg;

		public byte byFilterSwitch;

		public byte byFocusSpeed;

		public byte byAutoCompensationInterval;

		public byte bySceneMode;

		public NET_DVR_DEFOGCFG struDefogCfg;

		public NET_DVR_ELECTRONICSTABILIZATION struElectronicStabilization;

		public NET_DVR_CORRIDOR_MODE_CCD struCorridorMode;

		public byte byExposureSegmentEnable;

		public byte byBrightCompensate;

		public byte byCaptureModeN;

		public byte byCaptureModeP;

		public NET_DVR_SMARTIR_PARAM struSmartIRParam;

		public NET_DVR_PIRIS_PARAM struPIrisParam;

		public NET_DVR_LASER_PARAM_CFG struLaserParam;

		public NET_DVR_FFC_PARAM struFFCParam;

		public NET_DVR_DDE_PARAM struDDEParam;

		public NET_DVR_AGC_PARAM struAGCParam;

		public byte byLensDistortionCorrection;

		public byte[] byRes1;

		public NET_DVR_SNAP_CAMERAPARAMCFG struSnapCCD;

		public NET_DVR_OPTICAL_DEHAZE struOpticalDehaze;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FOCUSING_POSITION_STATE
	{
		public uint dwSize;

		public byte byState;

		public byte[] byRes;
	}

	public enum VcaPlateColor : uint
	{
		BluePlate = 0,
		YellowPlate,
		WhitePlate,
		BlackPlate,
		GreenPlate,
		BkairPlate,
		Other = 255
	}

	public enum VcaPlateType : uint
	{
		VcaStandard92Plate = 0,
		VcaStandard02Plate,
		VcaWjpolicePlate,
		VcaJingchePlate,
		Standard92BackPlate,
		VcaShiguanPlate,
		VcaNongyongPlate,
		VcaMotoPlate
	}

	public enum VtrResult : uint
	{
		Other = 0,
		Bus = 1,
		Truck = 2,
		Car = 3,
		Minibus = 4,
		Smalltruck = 5,
		Human = 6,
		Tumbrel = 7,
		Trike = 8,
		SuvMpv = 9,
		MediumBus = 10,
		MotorVehicle = 11,
		NonMotorVehicle = 12,
		Smallcar = 13,
		Microcar = 14,
		Pickup = 15
	}

	public enum VcrClrClass : uint
	{
		Unsupport = 0,
		White = 1,
		Silver = 2,
		Gray = 3,
		Black = 4,
		Red = 5,
		Darkblue = 6,
		Blue = 7,
		Yellow = 8,
		Green = 9,
		Brown = 10,
		Pink = 11,
		Purple = 12,
		Darkgray = 13,
		Cyan = 14
	}

	public enum VcaOperateType : uint
	{
		LicenseType = 1,
		PlatecolorType = 2,
		CardnoType = 4,
		PlatetypeType = 8,
		ListtypeType = 16,
		IndexType = 32,
		OperateIndexType = 64
	}

	public enum VcaIllegalType : uint
	{
		PostpicType = 1,
		LowspeedType = 2,
		HighspeedType = 4,
		RetrogradeType = 8,
		RushRedlightType = 16,
		PressLaneType = 32,
		ViolateGuideType = 64,
		RoadStrandType = 128,
		VehicleIllegalLaneType = 256,
		IllegalLaneChangeType = 512,
		IllegalLaneDriveType = 1024,
		ViolateBanType = 2048,
		CrossParkingType = 4096,
		GreenParkingType = 8192
	}

	public enum VcaVehicleType : uint
	{
		OtherType = 1,
		SmallcarType = 2,
		BigcarType = 4,
		BusType = 8,
		TruckType = 16,
		CarType = 32,
		MinibusType = 64,
		SmallTruckType = 128
	}

	public enum VlrVehicleClass : uint
	{
		Other = 0,
		Volkswagen = 1,
		Buick = 2,
		Bmw = 3,
		Honda = 4,
		Peugeot = 5,
		Toyota = 6,
		Ford = 7,
		Nissan = 8,
		Audi = 9,
		Mazda = 10,
		Chevrolet = 11,
		Citroen = 12,
		Hyundai = 13,
		Chery = 14,
		Kia = 15,
		Roewe = 16,
		Mitsubishi = 17,
		Skoda = 18,
		Geely = 19,
		Zhonghua = 20,
		Volvo = 21,
		Lexus = 22,
		Fiat = 23,
		Emgrand = 24,
		Dongfeng = 25,
		Byd = 26,
		Suzuki = 27,
		Jinbei = 28,
		Haima = 29,
		Sgmw = 30,
		Jac = 31,
		Subaru = 32,
		Englon = 33,
		Greatwall = 34,
		Hafei = 35,
		Isuzu = 36,
		Soueast = 37,
		Chana = 38,
		Foton = 39,
		Xiali = 40,
		Benz = 41,
		Faw = 42,
		Naveco = 43,
		Lifan = 44,
		Besturn = 45,
		Crown = 46,
		Renault = 47,
		Jmc = 48,
		Mg = 49,
		Kama = 50,
		Zotye = 51,
		Changhe = 52,
		Xmkinglong = 53,
		Huizhong = 54,
		Szkinglong = 55,
		Higer = 56,
		Yutong = 57,
		Cnhtc = 58,
		Beiben = 59,
		Xingma = 60,
		Yuejin = 61,
		Huanghai = 62,
		Oldwall = 63,
		Chanacommercial = 64,
		Porsche = 65,
		Cadillac = 66,
		Infiniti = 67,
		Gleagle = 68,
		Jeep = 69,
		Landrover = 70,
		Changfeng = 71,
		Benni = 72,
		Era = 73,
		Taurus = 74,
		Eado = 75,
		Shanqi = 76,
		Hongyan = 77,
		Dragon = 78,
		Jactext = 79,
		Jacbus = 80,
		Ankai = 81,
		Shenlong = 82,
		Daewoo = 83,
		Wuzheng = 84,
		Man = 85,
		Zhongtong = 86,
		Baojun = 87,
		Bqweiwang = 88,
		Trumpche = 89,
		Lufeng = 90,
		Hmzhengzhou = 91,
		Beijing = 92,
		Zhongshun = 93,
		Weilin = 94,
		Opel = 95,
		Karry = 96,
		Sma = 97,
		Smatext = 98,
		Yuwin = 99,
		Mini = 100,
		Mark = 101,
		Haval = 102,
		Oga = 103,
		Venucia = 104,
		Byd2 = 105,
		Smart = 106,
		Baw = 107,
		Luxgen = 108,
		Yema = 109,
		Zte = 110,
		Everus = 111,
		Chrysler = 112,
		Gonow = 113,
		Shjiang = 114,
		Ruilin = 115,
		Forta = 116,
		Gaguar = 117,
		Heibao = 118,
		Tking = 119,
		Tkingtext = 120,
		Foday = 121,
		Lotus = 122,
		Nanjun = 123,
		Shuanghuan = 124,
		Saibao = 125,
		Hawtai = 126,
		Lifo = 127,
		Jonway = 128,
		Fulongma = 129,
		Weili = 130,
		Anchi = 131,
		Paixi = 132,
		Higertext = 133,
		Riyecar = 134,
		Riyetruck = 135,
		Jiangnan = 136,
		Oldzotye = 137,
		Oldxiali = 138,
		Newaochi = 139,
		Cdw = 140,
		Cdwtext = 141,
		Ciimo = 142,
		Chanads = 143,
		Ds = 144,
		Rohens = 145,
		Yantai = 146,
		Shuanglong = 147,
		Fengling = 148,
		Xinkai = 149,
		Gmc = 150,
		Datong = 151,
		Bqyinxiang = 152,
		Newchery = 153,
		Mudan = 154,
		Dayun = 155,
		Dongwo = 156,
		Union = 157,
		Chunzhou = 158,
		Sany = 159,
		Yaxing = 160,
		Hengtong = 161,
		Shaolin = 162,
		Young = 163,
		Stom = 164,
		Sanhuan = 165,
		Xugong = 166,
		Beifang = 167,
		Jianghuan = 168,
		Bjfarm = 169,
		Newdadi = 170,
		Sunwin = 171,
		Yingtian = 172,
		Qingqi = 173,
		Chufeng = 174,
		Scania = 175,
		Jiulong = 176,
		Youyi = 177,
		Shangrao = 178,
		Jijiang = 179,
		Yangzi = 180,
		Xiwo = 181,
		Changjiang = 182,
		Wuyi = 183,
		Chengdu = 184,
		Tianma = 185,
		Baolong = 186,
		Newyatu = 187,
		Barui = 188,
		Guanzhi = 189,
		Xiyate = 190,
		Binli = 191,
		Dadi = 192,
		Fuqi = 193,
		Hangtian = 194,
		Hengtian = 195,
		Jmccar = 196,
		Kaersen = 197,
		Kawei = 198,
		Lanbojini = 199,
		Mashaladi = 200,
		Shuchi = 201,
		Shili = 202,
		Huabei = 203,
		Yizheng = 204,
		Chunlan = 205,
		Dafa = 206,
		Shenye = 207,
		Falali = 208,
		Fuxing = 209,
		Anyuan = 210,
		Jinghua = 211,
		Taihu = 212,
		Wuzhoulong = 213,
		Changlong = 214,
		Yuexi = 215,
		Shenma = 216,
		Lushan = 217,
		Wanfeng = 218,
		Gzyunbao = 219,
		Zhongda = 220,
		Threewheel = 221,
		Twowheel = 222,
		Jbc = 223,
		Yzjiang = 224,
		Cnj = 225,
		Forland = 226,
		Farmcar = 227,
		Dongfanghong = 228,
		Steyr = 229,
		Hongqi = 230,
		User1 = 231,
		User2 = 232,
		User3 = 233,
		User4 = 234,
		User5 = 235,
		User6 = 236,
		User7 = 237,
		User8 = 238
	}

	public enum VsbVolkswagenClass : uint
	{
		BVolkswagenOther = 0,
		BVolkswagenLavida = 1,
		BVolkswagenCrosslavida = 2,
		BVolkswagenTiguan = 3,
		BVolkswagenTouran = 4,
		BVolkswagenSantana = 5,
		BVolkswagenSantana2000 = 6,
		BVolkswagenSantana3000 = 7,
		BVolkswagenVista = 8,
		BVolkswagenPassat = 9,
		BVolkswagenPassatlingyu = 10,
		BVolkswagenPolo = 11,
		BVolkswagenPolocross = 12,
		BVolkswagenPologti = 13,
		BVolkswagenSagitar = 14,
		BVolkswagenMagotan = 15,
		BVolkswagenJetta = 16,
		BVolkswagenBora = 17,
		BVolkswagenNewgolf = 18,
		BVolkswagenGolfgti = 19,
		BVolkswagenGol = 20,
		BVolkswagenCaddy = 21,
		BVolkswagenPhaeton = 22,
		BVolkswagenToureg = 23,
		BVolkswagenScirocco = 24,
		BVolkswagenBeetle = 25,
		BVolkswagenSharan = 26,
		BVolkswagenMultivan = 27,
		BVolkswagenCarboncopy = 28,
		BVolkswagenVistachangda = 29,
		BVolkswagenBorasportline = 30,
		RVolkswagenCc1 = 31,
		R_VOLKSWAGEN_Cross_POLO_1 = 32,
		R_VOLKSWAGEN_Cross_POLO_2 = 33,
		RVolkswagenMultivan1 = 34,
		RVolkswagenPolo1 = 35,
		RVolkswagenPolo2 = 36,
		RVolkswagenPoloJinqu1 = 37,
		RVolkswagenPoloJinqu2 = 38,
		R_VOLKSWAGEN_Tiguan_1 = 39,
		R_VOLKSWAGEN_Tiguan_2 = 40,
		RVolkswagenXialang1 = 41,
		RVolkswagenBaolai1 = 42,
		RVolkswagenBaolai2 = 43,
		RVolkswagenBaolai3 = 44,
		RVolkswagenBaolai4 = 45,
		RVolkswagenShangku1 = 46,
		RVolkswagenPasate1 = 47,
		RVolkswagenPasate2 = 48,
		RVolkswagenPasate3 = 49,
		RVolkswagenPasate4 = 50,
		RVolkswagenPasate5 = 51,
		RVolkswagenJieda1 = 52,
		RVolkswagenJieda2 = 53,
		RVolkswagenJieda3 = 54,
		RVolkswagenJieda4 = 55,
		RVolkswagenLangyi1 = 56,
		RVolkswagenLangyi2 = 57,
		RVolkswagenSangtana1 = 58,
		RVolkswagenSangtana2 = 59,
		RVolkswagenSangtana3 = 60,
		RVolkswagenSangtana4 = 61,
		RVolkswagenSangtanazhijun1 = 62,
		RVolkswagenSangtanazhijun2 = 63,
		RVolkswagenJiakechong1 = 64,
		RVolkswagenJiakechong2 = 65,
		RVolkswagenHuiteng2 = 66,
		RVolkswagenMaiteng1 = 67,
		RVolkswagenMaiteng2 = 68,
		RVolkswagenTuan3 = 69,
		RVolkswagenTuan1 = 70,
		RVolkswagenTuan2 = 71,
		RVolkswagenTuguan1 = 72,
		RVolkswagenTurui1 = 73,
		RVolkswagenTurui2 = 74,
		RVolkswagenSuteng1 = 75,
		RVolkswagenSuteng2 = 76,
		RVolkswagenSuteng3 = 77,
		RVolkswagenGaoerfu1 = 78,
		RVolkswagenGaoerfu2 = 79,
		RVolkswagenGaoerfu3 = 80,
		RVolkswagenLangyi3 = 81,
		RVolkswagenHuiteng1 = 82
	}

	public enum VbrBuickClass : uint
	{
		Other = 0,
		Encore = 1,
		Gl8 = 2,
		Legal = 3,
		Lacross = 4,
		Excelle = 5,
		Excellegt = 6,
		Wxcellext = 7,
		Enclave = 8,
		Royaum = 9,
		Sail = 10,
		Excellehrv = 11,
		Parkavenue = 12,
		Century = 13,
		Gl81 = 14,
		Gl82 = 15,
		Gl83 = 16,
		Gl84 = 17,
		Gl85 = 18,
		Encore1 = 19,
		Enclave1 = 20,
		Legal1 = 21,
		Legal2 = 22,
		Legal3 = 23,
		Legal4 = 24,
		Legal5 = 25,
		Legal6 = 26,
		Lacross1 = 27,
		Lacross2 = 28,
		Lacross3 = 29,
		Excelle1 = 30,
		Excelle2 = 31,
		Excelle3 = 32,
		Excelle4 = 33,
		Parkavenue1 = 34,
		Sail1 = 35,
		Excellegt1 = 36,
		Wxcellext1 = 37,
		Century1 = 38,
		Rongyu1 = 39
	}

	public enum VsbBmwClass : uint
	{
		Other = 0,
		VsbBmw3series = 1,
		VsbBmw5series = 2,
		X1 = 3,
		VsbBmw1series = 4,
		VsbBmw7series = 5,
		X3 = 6,
		X5 = 7,
		X6 = 8,
		Z4 = 9,
		Mini = 10,
		VsbBmw6series = 11,
		Yixi1 = 12,
		Yixi2 = 13,
		Sanxi1 = 14,
		Sanxi2 = 15,
		Sanxi3 = 16,
		Sanxi4 = 17,
		Wuxi1 = 18,
		Wuxi2 = 19,
		Liuxi1 = 20,
		Qixi1 = 21,
		Qixi2 = 22,
		X11 = 23,
		X12 = 24,
		X31 = 25,
		X32 = 26,
		X51 = 27,
		X52 = 28,
		X53 = 29,
		X61 = 30,
		Z41 = 31
	}

	public enum VsbHondaClass : uint
	{
		Other = 0,
		Crv = 1,
		Jade = 2,
		Civic = 3,
		Spirior = 4,
		Ciimo = 5,
		Elysion = 6,
		Obyssey = 7,
		Fit = 8,
		Newcity = 9,
		Crosstour = 10,
		Crider = 11,
		Accord = 12,
		City = 13,
		Antilock = 14,
		Crz = 15,
		Crv1 = 16,
		Crv2 = 17,
		Crv3 = 18,
		Crv4 = 19,
		Crv5 = 20,
		Crider1 = 21,
		Obyssey1 = 22,
		Obyssey2 = 23,
		Obyssey3 = 24,
		Obyssey4 = 25,
		Civic1 = 26,
		Civic5 = 27,
		Civic2 = 28,
		Civic3 = 29,
		Civic4 = 30,
		City1 = 31,
		Spirior1 = 32,
		Siming1 = 33,
		Jiede1 = 34,
		Crosstour1 = 35,
		Ailishen1 = 36,
		Newcity1 = 37,
		Newcity2 = 38,
		Newcity3 = 39,
		Accord1 = 40,
		Accord2 = 41,
		Accord3 = 42,
		Accord4 = 43,
		Accord5 = 44,
		Accord6 = 45,
		Accord7 = 46,
		Accord8 = 47,
		Accord9 = 48,
		Accord10 = 49,
		Fit1 = 50,
		Fit2 = 51,
		Fit3 = 52,
		Fit4 = 53,
		Fit5 = 54,
		Fit6 = 55
	}

	public enum VsbPeugeotClass : uint
	{
		Other = 0,
		VsbPeugeot2008 = 1,
		VsbPeugeot207 = 2,
		Senna = 3,
		VsbPeugeot3008 = 4,
		VsbPeugeot301 = 5,
		VsbPeugeot307 = 6,
		VsbPeugeot308 = 7,
		VsbPeugeot408 = 8,
		VsbPeugeot508 = 9,
		VsbPeugeot206 = 10,
		VsbPeugeot407 = 11,
		VsbPeugeot2061 = 12,
		VsbPeugeot2071 = 13,
		VsbPeugeot2072 = 14,
		VsbPeugeot30081 = 15,
		VsbPeugeot3011 = 16,
		VsbPeugeot3071 = 17,
		VsbPeugeot3072 = 18,
		VsbPeugeot3073 = 19,
		VsbPeugeot3081 = 20,
		VsbPeugeot4071 = 21,
		VsbPeugeot4081 = 22,
		VsbPeugeot4082 = 23,
		VsbPeugeot5081 = 24,
		VsbPeugeot2073 = 25,
		VsbPeugeot3074 = 26
	}

	public enum VsbToyotaClass : uint
	{
		Other = 0,
		Highlander = 1,
		Camry = 2,
		Yaris = 3,
		Yarisl = 4,
		Verso = 5,
		Huaguan = 6,
		Crown = 7,
		Corolla = 8,
		Coster = 9,
		Prado = 10,
		Prius = 11,
		Rav4 = 12,
		Rezi = 13,
		Vios = 14,
		Previa = 15,
		Hiace = 16,
		VsbToyota86 = 17,
		Spequoia = 18,
		Landcruiser = 19,
		Sienna = 20,
		Camryhybrid = 21,
		Grace = 22,
		Alphard = 23,
		Rav41 = 24,
		Rav42 = 25,
		VsbToyota861 = 26,
		Jiamei2 = 27,
		Jiamei3 = 28,
		Landeklz1 = 29,
		Kaimeirui1 = 30,
		Kaimeirui2 = 31,
		Kaimeirui3 = 32,
		Kaimeirui4 = 33,
		Kaimeirui5 = 34,
		Kaimeirui6 = 35,
		Kaluola1 = 36,
		Kaluola2 = 37,
		Aierfa1 = 38,
		Aierfa2 = 39,
		Weichi1 = 40,
		Weichi2 = 41,
		Weichi3 = 42,
		Weichi4 = 43,
		Weichi5 = 44,
		Puladuo1 = 45,
		Puladuo2 = 46,
		Puladuo3 = 47,
		Puruiweiya1 = 48,
		Puruiweiya4 = 49,
		Puruiweiya2 = 50,
		Puruiweiya3 = 51,
		Kesida1 = 52,
		Kesida2 = 53,
		Hanlanda1 = 54,
		Hanlanda2 = 55,
		Hanlanda3 = 56,
		Haishi1 = 57,
		Huangguan1 = 58,
		Huangguan2 = 59,
		Huangguan3 = 60,
		Huangguan4 = 61,
		Hongshan1 = 62,
		Huaguan1 = 63,
		Huaguan2 = 64,
		Huaguan3 = 65,
		Yizhi1 = 66,
		Ruizhi1 = 67,
		Ruizhi2 = 68,
		Ruizhi3 = 69,
		Ruizhi4 = 70,
		Ludixunyang1 = 71,
		Yalishi1 = 72,
		Yalishi2 = 73,
		Rav43 = 74,
		YARiSL_1 = 75,
		Jiamei1 = 76,
		Platz1 = 77,
		Landeklz2 = 78
	}

	public enum VsbFordClass : uint
	{
		Other = 0,
		Focus = 1,
		Fiesta = 2,
		Smax = 3,
		Mondeo = 4,
		Ecosport = 5,
		Escape = 6,
		Zhisheng = 7,
		Escort = 8,
		Explorer = 9,
		Edge = 10,
		Transit = 11,
		Quanshun1 = 12,
		Jianianhua1 = 13,
		Jianianhua2 = 14,
		Jianianhua3 = 15,
		Jianianhua4 = 16,
		Tanxianzhe1 = 17,
		Focus1 = 18,
		Focus2 = 19,
		Focus3 = 20,
		Focus4 = 21,
		Focus5 = 22,
		Focus6 = 23,
		Yibo1 = 24,
		Yihu1 = 25,
		Mengdiou1 = 26,
		Mengdiou2 = 27,
		Mengdiou3 = 28,
		Mengdiou4 = 29,
		Mengdiou5 = 30,
		Mengdiou6 = 31,
		Ruijie1 = 32,
		Maikesi1 = 33
	}

	public enum VsbNissanClass : uint
	{
		Other = 0,
		Xtrail = 1,
		Murano = 2,
		Livina = 3,
		March = 4,
		Tiida = 5,
		Teana = 6,
		Qashqai = 7,
		Sylphy = 8,
		Sunny = 9,
		D22pickup = 10,
		D22van = 11,
		Cabstar = 12,
		Hv200 = 13,
		Paladin = 14,
		Yida = 15,
		Duck = 16,
		Cefiro = 17,
		Fengshenbluebird = 18,
		Fengshensunny = 19,
		Succe = 20,
		Fuga = 21,
		Bluebird4 = 22,
		Venucia = 23,
		Quest = 24,
		Geniss = 25,
		Nv2001 = 26,
		Tianlai1 = 27,
		Tianlai2 = 28,
		Tianlai3 = 29,
		Tianlai4 = 30,
		Tianlai5 = 31,
		Tianlai6 = 32,
		Qijun1 = 33,
		Qijun2 = 34,
		Palading1 = 35,
		Loulan1 = 36,
		Loulan2 = 37,
		Lanniao1 = 38,
		Lanniao2 = 39,
		Lanniao3 = 40,
		Guishi1 = 41,
		Xuanyi1 = 42,
		Xuanyi2 = 43,
		Xuanyi3 = 44,
		Xiaoke1 = 45,
		Xiaoke2 = 46,
		Sunny3 = 47,
		Sunny1 = 48,
		Sunny2 = 49,
		Yida1 = 50,
		Yida2 = 51,
		Fengdu1 = 52,
		Fengya1 = 53,
		Liwei1 = 54,
		Liwei2 = 55,
		Liwei3 = 56,
		Liwei4 = 57,
		Junyi1 = 58,
		Qida1 = 59,
		Qida2 = 60,
		Qida3 = 61,
		Ruiqi1 = 62
	}

	public enum VsbAudiClass : uint
	{
		Other = 0,
		A3 = 1,
		A4l = 2,
		A6l = 3,
		Q3 = 4,
		Q5 = 5,
		A1 = 6,
		A4 = 7,
		A5 = 8,
		A6 = 9,
		A7 = 10,
		A8l = 11,
		Q7 = 12,
		S5 = 13,
		Tt = 14,
		VsbAudi100 = 15,
		VsbAudi200 = 16,
		S7 = 17,
		S8 = 18,
		VsbAudi1001 = 19,
		VsbAudi2001 = 20,
		A11 = 21,
		A31 = 22,
		A32 = 23,
		A41 = 24,
		A42 = 25,
		A4l1 = 26,
		A51 = 27,
		A61 = 28,
		A6l1 = 29,
		A6l2 = 30,
		A6l3 = 31,
		A71 = 32,
		A8l1 = 33,
		A8l2 = 34,
		A8l3 = 35,
		A8l4 = 36,
		Q31 = 37,
		Q51 = 38,
		Q52 = 39,
		Q53 = 40,
		Q54 = 41,
		Q71 = 42,
		Q72 = 43,
		S71 = 44,
		S81 = 45,
		Tt2 = 46,
		Tt3 = 47,
		Tt4 = 48,
		Tt1 = 49
	}

	public enum VsbMazdaClass : uint
	{
		Other = 0,
		Cx5 = 1,
		VsbMazda2 = 2,
		VsbMazda3 = 3,
		VsbMazda6 = 4,
		VsbMazda8 = 5,
		Corewing = 6,
		Cx7 = 7,
		X5 = 8,
		VsbMazda5 = 9,
		Premacy = 10,
		Mpv = 11,
		Cx51 = 12,
		Cx71 = 13,
		VsbMazda21 = 14,
		VsbMazda31 = 15,
		VsbMazda32 = 16,
		VsbMazda33 = 17,
		VsbMazda34 = 18,
		VsbMazda51 = 19,
		VsbMazda52 = 20,
		VsbMazda62 = 21,
		VsbMazda63 = 22,
		VsbMazda81 = 23,
		Premacy1 = 24,
		Premacy2 = 25,
		Corewing1 = 26,
		Corewing2 = 27,
		Corewing3 = 28,
		VsbMazda22 = 29,
		VsbMazda61 = 30,
		VsbMazda64 = 31
	}

	public enum VsbChevroletClass : uint
	{
		Other = 0,
		Newaveo = 1,
		Epica = 2,
		Cruze = 3,
		Captiva = 4,
		Malibu = 5,
		Sail = 6,
		Camaro = 7,
		Lecheng = 8,
		Lova = 9,
		Oldaveo = 10,
		Spark = 11,
		Sailsrv = 12,
		Lova1 = 13,
		Lova2 = 14,
		Spark1 = 15,
		Spark2 = 16,
		Oldaveo1 = 17,
		Oldaveo2 = 18,
		Epica1 = 19,
		Epica3 = 20,
		Epica4 = 21,
		Epica5 = 22,
		Newaveo1 = 23,
		Captiva1 = 24,
		Captiva2 = 25,
		Kemailuo1 = 26,
		Cruze1 = 27,
		Sail1 = 28,
		Sail2 = 29,
		Malibu1 = 30,
		Epica2 = 31
	}

	public enum VsbCitroenClass : uint
	{
		Other = 0,
		C2 = 1,
		C4l = 2,
		C5 = 3,
		Elysee = 4,
		Cquatreliangxiang = 5,
		Cquatresanxiang = 6,
		Saeapicasso = 7,
		Picasso = 8,
		Ctriomphe = 9,
		Xsara = 10,
		Shenlongfukang = 11,
		Changands = 12,
		C21 = 13,
		C4l1 = 14,
		C4picasso1 = 15,
		C51 = 16,
		Cquatresanxiang1 = 17,
		Cquatreliangxiang1 = 18,
		Ctriomphe1 = 19,
		Fukang1 = 20,
		Elysee1 = 21,
		Elysee2 = 22,
		Saeapicasso1 = 23
	}

	public enum VsbHyundaiClass : uint
	{
		Other = 0,
		Ix35 = 1,
		Langdong = 2,
		Moinca = 3,
		Shengda = 4,
		Verna = 5,
		Ruiyi = 6,
		Sonataeight = 7,
		Tucson = 8,
		Yuedong = 9,
		Elantra = 10,
		Grandsantafe = 11,
		Coupe = 12,
		Matrix = 13,
		Accent = 14,
		Ix30 = 15,
		Sonata = 16,
		Refine = 17,
		Mistra = 18,
		Sonatayufeng = 19,
		Santafe = 20,
		Huiyi = 21,
		I301 = 22,
		Ix351 = 23,
		Yilante1 = 24,
		Yilante2 = 25,
		Yilante3 = 26,
		Shengda1 = 27,
		Mingtu1 = 28,
		Mingyu1 = 29,
		Shengdafei1 = 30,
		Yuxiang1 = 31,
		Yuxiang2 = 32,
		Yuedong1 = 33,
		Yuedong2 = 34,
		Shengda2 = 35,
		Shengda3 = 36,
		Langdong1 = 37,
		Gerui1 = 38,
		Ruiyi1 = 39,
		Ruina1 = 40,
		Ruina2 = 41,
		Ruifeng1 = 42,
		Suonata1 = 43,
		Suonata2 = 44,
		Sounata3 = 45,
		Weilakesi1 = 46,
		Meijia1 = 47,
		Jinkouhuiyi1 = 48,
		Tusheng1 = 49,
		Tusheng2 = 50,
		Tusheng3 = 51,
		Kupai1 = 52,
		Yashente1 = 53,
		Yashente2 = 54,
		Lingxiang1 = 55,
		Feisi1 = 56
	}

	public enum VsbCheryClass : uint
	{
		Other = 0,
		A1 = 1,
		A3 = 2,
		Eastar = 3,
		Fulwin = 4,
		Qq = 5,
		E5 = 6,
		Cowin = 7,
		Tiggo = 8,
		A5 = 9,
		S16 = 10,
		Youya = 11,
		V5 = 12,
		E3 = 13,
		A11 = 14,
		A3liangxiang1 = 15,
		A51 = 16,
		Qq1 = 17,
		Qq2 = 18,
		Qq3 = 19,
		Qq4 = 20,
		Qq5 = 21,
		Dongfangzhizi1 = 22,
		Dongfangzhizi2 = 23,
		Dongfangzhizi3 = 24,
		Youya1 = 25,
		E31 = 26,
		E51 = 27,
		Qiyun11 = 28,
		Qiyun12 = 29,
		Qiyun1 = 30,
		Qiyun2 = 31,
		Qiyun21 = 32,
		Qiyun22 = 33,
		Qiyun31 = 34,
		Ruihu1 = 35,
		Ruihu2 = 36,
		Ruihu3 = 37,
		Ruihu4 = 38,
		Ruihu5 = 39,
		Fengyun2sanxiang1 = 40,
		Airuize71 = 41
	}

	public enum VsbKiaClass : uint
	{
		Other = 0,
		K2 = 1,
		K3 = 2,
		K5 = 3,
		Rio = 4,
		Cerato = 5,
		Sportager = 6,
		Soul = 7,
		Zhipao = 8,
		Carens = 9,
		Carnival = 10,
		Optima = 11,
		Opirus = 12,
		Maxima = 13,
		Forte = 14,
		Sorento = 15,
		K21 = 16,
		K31 = 17,
		K51 = 18,
		Ruiou1 = 19,
		Qianlima1 = 20,
		Qianlima2 = 21,
		Jiahua1 = 22,
		Xinjiale1 = 23,
		Zhipao1 = 24,
		Shipao1 = 25,
		Shipao2 = 26,
		Shipao3 = 27,
		Shipao4 = 28,
		Furuidi1 = 29,
		Furuidi2 = 30,
		Xiuer1 = 31,
		Suolantuo1 = 32,
		Suolantuo2 = 33,
		Sailatu1 = 34,
		Sailatu2 = 35,
		Sailatu3 = 36,
		Yuanjian1 = 37
	}

	public enum VsbBenzClass : uint
	{
		Other = 0,
		C = 1,
		E = 2,
		Glk = 3,
		Weiting = 4,
		Sprinter = 5,
		Viano = 6,
		M = 7,
		Clk = 8,
		G = 9,
		Gl = 10,
		R = 11,
		S = 12,
		A = 13,
		Smart = 14,
		B = 15,
		Slk = 16,
		Mb100 = 17,
		Vito = 18,
		Cls = 19,
		Sl = 20,
		Aji1 = 21,
		Aji2 = 22,
		Bji1 = 23,
		Cji1 = 24,
		Cji2 = 25,
		Cji3 = 26,
		Eji1 = 27,
		Eji2 = 28,
		Eji3 = 29,
		Eji4 = 30,
		Glkji1 = 31,
		Glkji2 = 32,
		Glkji3 = 33,
		Glji1 = 34,
		Glji2 = 35,
		Glji3 = 36,
		Gji1 = 37,
		Mb1001 = 38,
		Mlji1 = 39,
		Mlji2 = 40,
		Mlji3 = 41,
		Rji1 = 42,
		Rji2 = 43,
		Rji3 = 44,
		Slkji2 = 45,
		Slkji3 = 46,
		Slkji1 = 47,
		Sji1 = 48,
		Sji2 = 49,
		Sji3 = 50,
		Sji4 = 51,
		Lingte1 = 52,
		Weiyanuo1 = 53,
		Weiyanuo2 = 54,
		Weiting1 = 55,
		Keche1 = 56
	}

	public enum VsbSkodaClass : uint
	{
		Other = 0,
		Haorui = 1,
		Fabia = 2,
		Octavia = 3,
		Superb = 4,
		Spaceback = 5,
		Rapid = 6,
		Yeti = 7,
		Haorui1 = 8,
		Mingrui1 = 9,
		Mingrui2 = 10,
		Mingrui3 = 11,
		Xinrui1 = 12,
		Jingrui1 = 13,
		Jingrui2 = 14,
		Jingrui3 = 15,
		Supai1 = 16,
		Yedi1 = 17
	}

	public enum VsbDongfengClass : uint
	{
		SbDongfengOther = 0,
		SbDongfengJoyearx5 = 1,
		SbDongfengLingzhi = 2,
		SbDongfengJoyearx3 = 3,
		SbDongfengJoyear = 4,
		SbDongfengFengxingcm7 = 5,
		SbDongfengYufeng = 6,
		SbDongfengFengshena60 = 7,
		SbDongfengFengshens30 = 8,
		SbDongfengFengshenh30cross = 9,
		SbDongfengPickup = 10,
		SbDongfengZhongxingmianbaoche = 11,
		SbDongfengXiaoxingmianbaoche = 12,
		SbDongfengZhongxingvan = 13,
		SbDongfengQingxingxiangshivan = 14,
		SbDongfengQingzhongxingvan = 15,
		SbDongfengFengshenmercury = 16,
		SbDongfengSucce = 17,
		SbDongfengOdin = 18,
		SbDongfengYumsun = 19,
		SbDongfengRuiqi = 20,
		SbDongfengFengguang = 21,
		BrDongfengC351 = 22,
		BrDongfengK071 = 23,
		BrDongfengK072 = 24,
		BrDongfengV211 = 25,
		BrDongfengJialong1 = 26,
		BrDongfengXkfg1 = 27,
		BrDongfengCv031 = 28,
		BrDongfengKaipute1 = 29,
		BrDongfengDuolika1 = 30,
		BrDongfengDuolika2 = 31,
		BrDongfengDuolika3 = 32,
		BrDongfengTianjin1 = 33,
		BrDongfengTianjin2 = 34,
		BrDongfengXbw1 = 35,
		BrDongfengXbw2 = 36,
		BrDongfengMengka1 = 37,
		BrDongfengFuruika1 = 38,
		BrDongfengRuiqi1 = 39,
		BrDongfengA601 = 40,
		BrDongfengH301 = 41,
		BrDongfengH302 = 42,
		BrDongfengH303 = 43,
		BrDongfengJingyi1 = 44,
		BrDongfengJingyi2 = 45,
		BrDongfengJingyi3 = 46,
		BrDongfengLingzhi1 = 47,
		BrDongfengLingzhi2 = 48,
		BrDongfengLingzhi3 = 49,
		BrDongfengLingzhi4 = 50,
		BrDongfengLingzhi5 = 51
	}

	public enum VsbBydClass : uint
	{
		Other = 0,
		F0 = 1,
		F3 = 2,
		F3r = 3,
		F6 = 4,
		G3 = 5,
		G3r = 6,
		G6 = 7,
		L3 = 8,
		M6 = 9,
		S6 = 10,
		Surui = 11,
		Folel = 12,
		Sirui = 13,
		Mt5 = 14,
		F01 = 15,
		F3r1 = 16,
		F61 = 17,
		G3r1 = 18,
		G61 = 19,
		L31 = 20,
		M61 = 21,
		S61 = 22,
		Fulaier1 = 23,
		Surui1 = 24
	}

	public enum VsbSuzukiClass : uint
	{
		Other = 0,
		Alto = 1,
		Scross = 2,
		Swift = 3,
		Sx4 = 4,
		Lingyang = 5,
		Beidouxing = 6,
		Lianaa6 = 7,
		Landy = 8,
		Splash = 9,
		Grandvitara = 10,
		Jimny = 11,
		Kazashi = 12,
		Liana = 13,
		Liana1 = 14,
		Liana2 = 15,
		Beidouxing1 = 16,
		Beidouxing2 = 17,
		Beidouxing3 = 18,
		Beidouxing4 = 19,
		Jimuni1 = 20,
		Jimuni2 = 21,
		Sx41 = 22,
		Sx42 = 23,
		Sx43 = 24,
		Sx44 = 25,
		Sx45 = 26,
		Alto1 = 27,
		Alto2 = 28,
		Alto3 = 29,
		Alto4 = 30,
		Splash1 = 31,
		Landy1 = 32,
		Lingyang2 = 33,
		Lingyang3 = 34,
		Lingyang4 = 35,
		Lingyang5 = 36,
		Grandvitara1 = 37,
		Fengyu1 = 38,
		Swift1 = 39,
		Swift2 = 40,
		Kingchang1 = 41,
		Lingyang1 = 42
	}

	public enum VsbSgmwClass : uint
	{
		Other = 0,
		Hongguang = 1,
		Hongguangs = 2,
		Zhiguang = 3,
		Rongguangs = 4,
		Rongguang = 5,
		Hongtu = 6,
		Xingwang = 7,
		Yangguang = 8,
		Xiaoxuanfeng = 9,
		Wulingzhiguang1 = 10,
		Wulingzhiguang2 = 11,
		Wulingzhiguang3 = 12,
		Xingwang1 = 13,
		Xingwang2 = 14,
		Xingwang3 = 15,
		Honnguang1 = 16,
		Honnguang2 = 17,
		Xiaoxuanfeng1 = 18,
		Yangguang1 = 19,
		Yangguang2 = 20,
		Yangguang3 = 21,
		Rongguang1 = 22,
		Rongguang2 = 23,
		Hongtu1 = 24
	}

	public enum VsbChanaClass : uint
	{
		Other = 0,
		Honor = 1,
		Xingka = 2,
		Zhixing = 3,
		Pickup = 4,
		Zhixing2 = 5,
		Taurus = 6,
		Xingguang = 7,
		Benni = 8,
		Alsvin = 9,
		Cx20 = 10,
		Cx30 = 11,
		Eado = 12,
		Zhixings460 = 13,
		Cm8 = 14,
		Xinbao = 15,
		Xunlong = 16,
		Yuntong = 17,
		Leimeng = 18,
		Xingyun = 19,
		Ouliwei = 20,
		Eadoxt = 21,
		Xingyun1 = 22,
		Ouliwei1 = 23,
		Yuntong1 = 24,
		Taurus1 = 25,
		Leimeng1 = 26,
		Zhixing1 = 27,
		Zhixing2 = 28,
		Zhixing3 = 29,
		Zhixing4 = 30,
		Zhixing5 = 31,
		Zhixing6 = 32,
		Pickup1 = 33,
		Xingguang1 = 34,
		Xingguang2 = 35,
		Honor1 = 36
	}

	public enum VsbEadoClass : uint
	{
		Other = 0,
		Cs1 = 1,
		Cx1 = 2,
		Cx2 = 3,
		Benben1 = 4,
		Benben2 = 5,
		Benben3 = 6,
		Benben4 = 7,
		Benben5 = 8,
		Yuexiang1 = 9,
		Yuexiang2 = 10,
		Yuexiang3 = 11,
		Yuexiang4 = 12,
		Yidong1 = 13
	}

	public enum VsbJinbeiClass : uint
	{
		Other = 0,
		Grace = 1,
		Hiace = 2,
		Haixing = 3,
		Badao = 4,
		Lingqi = 5,
		Jinqi = 6,
		Lingchi = 7,
		Qiyun = 8,
		Zhishang1 = 9,
		Haixing1 = 10,
		Haixing2 = 11,
		Hiace1 = 12,
		Hiace2 = 13,
		Hiace3 = 14,
		Jindian1 = 15,
		Grace1 = 16,
		Grace2 = 17,
		Badao1 = 18
	}

	public enum VsbGeelyClass : uint
	{
		Other = 0,
		Ec7 = 1,
		Ec8 = 2,
		Sc3 = 3,
		Sc5rv = 4,
		Sc6 = 5,
		Jingying = 6,
		Jinggang = 7,
		Sx7 = 8,
		Haoqing = 9,
		Meiri = 10,
		Yinglunsc7 = 11,
		Panda = 12,
		Yuanjing = 13,
		Ziyoujian = 14
	}

	public enum VsbMitsubishiClass : uint
	{
		Other = 0,
		Galant = 1,
		Zinger = 2,
		Lancer = 3,
		Lancerex = 4,
		Pajero = 5,
		Pajerosport = 6,
		Jingxuanasx = 7,
		Grandis = 8,
		Outlander = 9,
		Qinxingyueye = 10,
		Gto = 11,
		Soveran = 12,
		Lionvel = 13,
		Hafeisimbo = 14,
		Lancerex1 = 15,
		Jingxuan1 = 16,
		Zinger1 = 17,
		Pajero1 = 18,
		Pajero2 = 19,
		Pajero3 = 20,
		Pajerosport1 = 21,
		Galant1 = 22,
		Galandi1 = 23,
		Galandi2 = 24,
		Outlander1 = 25,
		Outlander2 = 26,
		Lingyue1 = 27,
		Lancer1 = 28
	}

	public enum VsbLexusClass : uint
	{
		Other = 0,
		Es = 1,
		Ct = 2,
		Rx = 3,
		Is = 4,
		Lx = 5,
		Gs = 6,
		Gx = 7,
		Ls = 8,
		Ct1 = 9,
		Es1 = 10,
		Es2 = 11,
		Es3 = 12,
		Gs1 = 13,
		Gx1 = 14,
		Is1 = 15,
		Ls1 = 16,
		Ls2 = 17,
		Ls3 = 18,
		Lx1 = 19,
		Rx1 = 20,
		Rx2 = 21,
		Rx3 = 22
	}

	public enum VsbRoeweClass : uint
	{
		Other = 0,
		VsbRoewe350 = 1,
		VsbRoewe550 = 2,
		W5 = 3,
		VsbRoewe950 = 4,
		VsbRoewe750 = 5,
		VsbRoewe3501 = 6,
		VsbRoewe3502 = 7,
		VsbRoewe5501 = 8,
		VsbRoewe7501 = 9,
		VsbRoewe7502 = 10,
		VsbRoewe9501 = 11
	}

	public enum VsbHaimaClass : uint
	{
		Other = 0,
		Premarin = 1,
		S7 = 2,
		Prince = 3,
		Cupid = 4,
		Hatchback = 5,
		Knight = 6,
		Happin = 7,
		Family = 8,
		M3 = 9,
		Cupid1 = 10,
		Premarin1 = 11,
		Premarin2 = 12,
		Hatchback1 = 13,
		Happin1 = 14,
		Happin2 = 15,
		M31 = 16,
		Family1 = 17,
		Family2 = 18,
		Family3 = 19,
		Family4 = 20,
		Knight1 = 21,
		Knight2 = 22,
		Newhongda1 = 23,
		Newhondga2 = 24,
		Prince1 = 25,
		Rongda1 = 26
	}

	public enum VsbGreatwallClass : uint
	{
		Other = 0,
		Sing = 1,
		Saijun = 2,
		Haval = 3,
		Safe = 4,
		Saiku = 5,
		Sailing = 6,
		Kingdeer = 7,
		Deer = 8,
		Wingle = 9,
		Coolbear = 10,
		Lingao = 11,
		Cross = 12,
		Gwperi = 13,
		Cowry = 14,
		M4 = 15,
		Lingao1 = 16,
		Haval1 = 17,
		Haval2 = 18,
		Haval3 = 19,
		Haval4 = 20,
		Haval5 = 21,
		Haval6 = 22,
		Haval8 = 23,
		Haval9 = 24,
		Haval10 = 25,
		Haval11 = 26,
		Haval12 = 27,
		Cross1 = 28,
		Cross2 = 29,
		Jingling1 = 30,
		Sing1 = 31,
		Saiku1 = 32,
		Sailing1 = 33,
		Dier1 = 34,
		Coolbear1 = 35,
		Kingdeer1 = 36,
		Greatwall1 = 37,
		Greatwall2 = 38,
		Greatwall3 = 39,
		Greatwall4 = 40,
		Greatwall5 = 41,
		Greatwall6 = 42,
		Wingle1 = 43,
		Wingle2 = 44,
		Haval7 = 45
	}

	public enum VsbDsClass : uint
	{
		Other = 0,
		Kubo1 = 1,
		Kuwei1 = 2,
		Kuwei2 = 3
	}

	public enum VsbLandroverClass : uint
	{
		Other = 0,
		Faxian1 = 1,
		Faxian2 = 2,
		Lansheng1 = 3,
		Lansheng2 = 4,
		Lansheng3 = 5,
		Lansheng4 = 6,
		Sxz1 = 7
	}

	public enum VsbMgClass : uint
	{
		Other = 0,
		VsbMg3sw1 = 1,
		Mg31 = 2,
		Mg51 = 3,
		Mg61 = 4,
		Mg71 = 5
	}

	public enum VsbFawClass : uint
	{
		Other = 0,
		VsbFaw5011 = 1,
		N31 = 2,
		N32 = 3,
		Jiabao1 = 4,
		Jiabao2 = 5,
		Jiabao3 = 6,
		Jiabao4 = 7,
		Jiabao5 = 8,
		Jiabao6 = 9,
		Jiabao7 = 10,
		Xiali1 = 11,
		Xiali2 = 12,
		Xiali3 = 13,
		Xiali4 = 14,
		Xiali5 = 15,
		Xiali6 = 16,
		Aowei1 = 17,
		Aowei2 = 18,
		Aowei3 = 19,
		Aowei4 = 20,
		Aoxing1 = 21,
		Weile1 = 22,
		Weile2 = 23,
		Weizi1 = 24,
		Weizhi1 = 25,
		Weizhi2 = 26,
		Weizhi3 = 27,
		Weizhi4 = 28,
		Weizhi5 = 29,
		Xiaojiefang1 = 30,
		Hanwei1 = 31,
		Hanwei2 = 32,
		Hanwei3 = 33,
		Xindawei1 = 34,
		Xinhanwei1 = 35,
		Senya1 = 36,
		Tengwei1 = 37,
		Jiefang1 = 38,
		Jiefang2 = 39,
		Jiefang3 = 40,
		Jiefang4 = 41,
		Jiefang5 = 42,
		Jiefang6 = 43,
		Sailong1 = 44,
		Junwei1 = 45,
		B501 = 46,
		B502 = 47
	}

	public enum VsbSaicmotorClass : uint
	{
		SaicmotorOther = 0,
		HongyanJieshi1 = 1,
		DatongV801 = 2
	}

	public enum VsbSoueastClass : uint
	{
		Other = 0,
		V31 = 1,
		V32 = 2,
		V33 = 3,
		V34 = 4,
		V51 = 5,
		Xiwang1 = 6,
		Delika1 = 7,
		Delika2 = 8,
		Delika3 = 9,
		Delika4 = 10,
		Lingshuai1 = 11,
		Fulika1 = 12,
		Fulika2 = 13
	}

	public enum VsbZteClass : uint
	{
		Other = 0,
		Weihu1 = 1,
		Weihu2 = 2,
		Wuxian1 = 3,
		Wuxian2 = 4
	}

	public enum VsbZhonghuaClass : uint
	{
		Other = 0,
		H2301 = 1,
		H3201 = 2,
		H3301 = 3,
		H5301 = 4,
		V51 = 5,
		Zunchi1 = 6,
		Zunchi2 = 7,
		Kubao1 = 8,
		Junjie1 = 9,
		Junjie2 = 10,
		Junjiecross1 = 11,
		Junjiefrv1 = 12,
		Junjiefrv2 = 13,
		Junjiefsv1 = 14,
		Junjiefsv2 = 15,
		Junjiefsv3 = 16
	}

	public enum VsbCnhtcClass : uint
	{
		Other = 0,
		Hoka2 = 1,
		Howo1 = 2,
		Howo2 = 3,
		Howo3 = 4,
		Howo4 = 5,
		Howo5 = 6,
		Howo6 = 7,
		Howo7 = 8,
		Howo8 = 9,
		Sitaierwang1 = 10,
		Haohan1 = 11,
		Haoyun1 = 12,
		Jinwangzi1 = 13,
		Hoka1 = 14
	}

	public enum VsbZhongtongClass : uint
	{
		Other = 0,
		Kaichi1 = 1,
		Lingyu1 = 2,
		Lingxiu1 = 3,
		Linghang1 = 4,
		Shiji1 = 5,
		Kaixuan1 = 6,
		Lingyun1 = 7,
		Yangguang1 = 8
	}

	public enum VsbJiulongClass : uint
	{
		Other = 0,
		Jiulonga51 = 1
	}

	public enum VsbZotyeClass : uint
	{
		Other = 0,
		VsbZotye20082 = 1,
		VsbZotye50081 = 2,
		Z3001 = 3,
		VsbZotye20081 = 4
	}

	public enum VsbNavecoClass : uint
	{
		Other = 0,
		Daily_1 = 1,
		Power_1 = 2,
		Turbo_1 = 3,
		Venice_1 = 4,
		Baodi1 = 5,
		Deyihuoche1 = 6,
		Duling1 = 7
	}

	public enum VsbPorscheClass : uint
	{
		SbPorscheOther = 0,
		BrPorschePanamera1 = 1,
		BrPorscheCayenne1 = 2
	}

	public enum VsbChryslerClass : uint
	{
		Other = 0,
		VsbChrysler300c1 = 1,
		Ptmanbuzhe1 = 2
	}

	public enum VsbCadillacClass : uint
	{
		Other = 0,
		Ats1 = 1,
		Cts1 = 2,
		Cts3 = 3,
		Sls1 = 4,
		Sls2 = 5,
		Srx1 = 6,
		Cts2 = 7,
		Kaileide1 = 8
	}

	public enum VsbKamaClass : uint
	{
		Other = 0,
		Qingka2 = 1,
		Fulaika1 = 2,
		Jinyunka1 = 3,
		Junweika1 = 4,
		Qingka1 = 5
	}

	public enum VsbLifanClass : uint
	{
		Other = 0,
		VsbLifan3201 = 1,
		VsbLifan5201 = 2,
		VsbLifan5202 = 3,
		VsbLifan6201 = 4,
		X601 = 5,
		Fengshun1 = 6
	}

	public enum VsbBeijingClass : uint
	{
		Other = 0,
		E1 = 1
	}

	public enum VsbBeibenClass : uint
	{
		Other = 0,
		Ng801 = 1,
		Ng802 = 2,
		Ng803 = 3,
		V31 = 4,
		V32 = 5
	}

	public enum VsbBeifangClass : uint
	{
		Other = 0,
		A1 = 1
	}

	public enum VsbBawClass : uint
	{
		Other = 0,
		Yusheng0071 = 1,
		Qiling1 = 2,
		Luba1 = 3,
		Qishi1 = 4
	}

	public enum VsbBqweiwangClass : uint
	{
		Other = 0,
		VsbBqweiwang2051 = 1,
		VsbBqweiwang3061 = 2
	}

	public enum VsbSmaClass : uint
	{
		Other = 0,
		Haiyu1 = 1,
		Haiyu2 = 2,
		Haishang1 = 3,
		Haijing1 = 5,
		Haixun1 = 4,
		Haixun2 = 6
	}

	public enum VsbXingmaClass : uint
	{
		Other = 0,
		Xingkaima1 = 1
	}

	public enum VsbShuanghuanClass : uint
	{
		Other = 0,
		Sceo1 = 1
	}

	public enum VsbJeepClass : uint
	{
		Other = 0,
		Daqienuoji1 = 1,
		Daqienuoji2 = 2,
		Zhinanzhe1 = 3,
		Zhinanzhe2 = 4,
		Mumaren1 = 5,
		Mumaren2 = 6,
		Ziyouke = 7
	}

	public enum VsbVenuciaClass : uint
	{
		Other = 0,
		D501 = 1
	}

	public enum VsbHafeiClass : uint
	{
		Other = 0,
		Xinminyi1 = 1,
		Xinminyi2 = 2,
		Minyi1 = 3,
		Minyi2 = 4,
		Saibao1 = 5,
		Saima1 = 6,
		Saima2 = 7,
		Saima3 = 8,
		Lubao1 = 9,
		Lubao2 = 10,
		Lubao3 = 11,
		Luzunxiaobawang1 = 12,
		Ruiyi1 = 13,
		Junyi1 = 14
	}

	public enum VsbTkingClass : uint
	{
		Other = 0,
		Ouguan1 = 1,
		Ouguan2 = 2,
		Outeng1 = 3,
		Fuxing1 = 4,
		Qingkawang1 = 5,
		Afanda1 = 6,
		Junqi1 = 7
	}

	public enum VsbDaewooClass : uint
	{
		SbDaewooOther = 0,
		BrDaewoo6960h31 = 1
	}

	public enum VsbDayunClass : uint
	{
		SbDayunOther = 0,
		BrDayunZhongka1 = 1
	}

	public enum VsbBesturnClass : uint
	{
		Other = 0,
		B701 = 1,
		B702 = 2,
		B703 = 3,
		B704 = 4,
		B901 = 5,
		Aoxing1 = 6
	}

	public enum VsbWeilinClass : uint
	{
		Other = 0,
		H31 = 1,
		V51 = 2,
		X51 = 3
	}

	public enum VsbYutongClass : uint
	{
		Other = 0,
		VsbYutong8xi1 = 1,
		Keche1 = 2,
		Keche3 = 3,
		Keche4 = 4,
		Keche5 = 5,
		Keche2 = 6
	}

	public enum VsbAnkaiClass : uint
	{
		Other = 0,
		Keche1 = 1,
		Keche2 = 2
	}

	public enum VsbBaojunClass : uint
	{
		Other = 0,
		VsbBaojun6301 = 1
	}

	public enum VsbBinliClass : uint
	{
		Ther = 0,
		Ulu1 = 1
	}

	public enum VsbTrumpcheClass : uint
	{
		Other = 0,
		Ga51 = 1,
		Ga52 = 3,
		Gs51 = 2
	}

	public enum VsbGonowClass : uint
	{
		Other = 0,
		G31 = 1,
		G51 = 2,
		Shuaijian1 = 4,
		Xingwangm11 = 3,
		Caiyun5001 = 5
	}

	public enum VsbIsuzuClass : uint
	{
		Other = 0,
		Zhongxingshangyong1 = 1,
		Wushilingpika1 = 2,
		Wushilingpika2 = 3,
		Jingjizhe1 = 4
	}

	public enum VsbKarryClass : uint
	{
		Other = 0,
		You2 = 1,
		Youjin1 = 2,
		Yousheng1 = 3,
		Yousheng2 = 4,
		Youya = 5,
		You1 = 6
	}

	public enum VsbGaguarClass : uint
	{
		Other = 0,
		Xf1 = 1,
		Xj1 = 2
	}

	public enum VsbSubaruClass : uint
	{
		Other = 0,
		Aohu1 = 1,
		Lishi1 = 2,
		Lishi2 = 3,
		Xv1 = 4,
		Senlinren1 = 5,
		Senlinren2 = 6
	}

	public enum VsbEraClass : uint
	{
		Other = 0,
		Xiaoka1 = 1,
		Xiaoka3 = 2,
		Xiaoka4 = 3,
		Kangrui1 = 4,
		Kangrui2 = 5,
		Kangrui3 = 6,
		Ruiwo1 = 7,
		Ruiwo2 = 8,
		Ruiwo3 = 9,
		Jingang = 10,
		Linghang1 = 11,
		Linghang2 = 12,
		Yuling1 = 13,
		Yuling2 = 14,
		Yuling3 = 15,
		Yuling4 = 17,
		Xiaoka2 = 17
	}

	public enum VsbChangheClass : uint
	{
		Other = 0,
		Ch63211 = 1,
		Danshuangpai1 = 2,
		Aidier1 = 3,
		Aidier2 = 4,
		Furuida1 = 5
	}

	public enum VsbOpelClass : uint
	{
		Other = 0,
		Yate1 = 1
	}

	public enum VsbJonwayClass : uint
	{
		Other = 0,
		A3801 = 1
	}

	public enum VsbJiangnanClass : uint
	{
		Other = 0,
		Tt1 = 1
	}

	public enum VsbGleagleClass : uint
	{
		Other = 0,
		EagleGc71 = 1,
		EagleGx21 = 2,
		EagleGx71 = 3,
		EaglePanda1 = 4,
		EagleZiyoujian1 = 5,
		EagleZiyoujian2 = 6,
		EagleZiyoujian3 = 7,
		EagleYuanjing1 = 8,
		EagleYuanjing2 = 9
	}

	public enum VsbEmgrandClass : uint
	{
		Other = 0,
		Ec72 = 1,
		Ec73 = 2,
		Ec81 = 3,
		Ec71 = 4
	}

	public enum VsbEnglonClass : uint
	{
		Other = 0,
		Sc31 = 1,
		Sc51 = 2,
		Sc61 = 3,
		Sc71 = 4,
		Sx71 = 5,
		Jingang1 = 6,
		Jinying1 = 7
	}

	public enum VsbJacClass : uint
	{
		Other = 0,
		Tongyue1 = 1,
		Heyue1 = 2,
		Heyuea302 = 3,
		Heyuers3 = 4,
		Haoyun1 = 5,
		Weiling2 = 6,
		Weiling3 = 7,
		Weiling4 = 8,
		Keche1 = 9,
		Binyue1 = 10,
		Shuailing2 = 11,
		Kangling1 = 12,
		Kangling2 = 13,
		Yueyue1 = 14,
		Xingrui1 = 15,
		GeerfaH1 = 16,
		GeerfaK2 = 17,
		GeerfaK3 = 18,
		GeerfaM4 = 19,
		Ruifeng1 = 20,
		Ruifeng2 = 21,
		Ruifeng3 = 22,
		Ruifeng4 = 23,
		Ruiying1 = 24,
		Ruiying2 = 25,
		Junling2 = 26,
		Weiling1 = 27,
		Shuailing1 = 28,
		Ruiling1 = 29,
		Junling1 = 30
	}

	public enum VsbJmcClass : uint
	{
		Other = 0,
		Kaiyun1 = 1,
		Kaiyun2 = 2,
		Yuhu1 = 3,
		Baodian1 = 4,
		Baodian2 = 5,
		Baodian3 = 6,
		Baowei1 = 7,
		Baowei2 = 8,
		Quanshun1 = 9,
		Quanshun2 = 10,
		Quanshun3 = 11,
		Shunda1 = 12,
		Shunda2 = 13,
		Yusheng1 = 14,
		Yusheng2 = 15
	}

	public enum VsbVolvoClass : uint
	{
		Other = 0,
		C301 = 1,
		S401 = 2,
		S601 = 3,
		S602 = 4,
		S80l1 = 5,
		Xc601 = 6,
		Xc901 = 7
	}

	public enum VsbHigerClass : uint
	{
		Other = 0,
		H81 = 1,
		H921 = 2,
		V71 = 3,
		Keche1 = 4,
		Longwei1 = 5,
		H7v1 = 6
	}

	public enum VsbRuilinClass : uint
	{
		Other = 0,
		G31 = 1,
		G51 = 2,
		M11 = 3,
		X11 = 4,
		X12 = 5
	}

	public enum VsbShenlongClass : uint
	{
		Other = 0,
		GKeche1 = 1
	}

	public enum VsbFotonClass : uint
	{
		Other = 0,
		Aoling1 = 1,
		Aoling2 = 2,
		Aoling3 = 3,
		Ouman1 = 4,
		Ouman2 = 5,
		Ouman3 = 6,
		Ouman4 = 7,
		Ouhui1 = 8,
		Oumake1 = 9,
		Oumake2 = 10,
		Sapu1 = 11,
		Sapu3 = 12,
		Mengpaike1 = 13,
		Midi1 = 14,
		Fengjing1 = 15,
		Sapu2 = 16
	}

	public enum VsbFodayClass : uint
	{
		Other = 0,
		Chaoren1 = 1,
		Chaoren2 = 2,
		Tansuozhe1 = 3,
		Tansuozhe2 = 4,
		Tansuozhe3 = 5,
		Xiongshi1 = 6
	}

	public enum VsbHongqiClass : uint
	{
		Other = 0,
		Mingshi1 = 1
	}

	public enum VsbLuxgenClass : uint
	{
		Other = 0,
		Daseven1 = 1
	}

	public enum VsbXialiClass : uint
	{
		Other = 0,
		Qibing1 = 1
	}

	public enum VsbShuchiClass : uint
	{
		Other = 0,
		A1 = 1
	}

	public enum VsbInfinitiClass : uint
	{
		Other = 0,
		Ex1 = 1,
		Fx1 = 2,
		Fx2 = 3,
		Fx3 = 4,
		G1 = 5,
		Jx1 = 6
	}

	public enum VsbLotusClass : uint
	{
		Other = 0,
		L31 = 1,
		L32 = 2
	}

	public enum VsbFiatClass : uint
	{
		Other = 0,
		Feiyue1 = 1
	}

	public enum VsbOgaClass : uint
	{
		Other = 0,
		Mdx1 = 1,
		Mdx2 = 2
	}

	public enum VsbYuejinClass : uint
	{
		Other = 0,
		Shuaihu1 = 1,
		Caishen1 = 2,
		Caishen2 = 3,
		Caishen3 = 4
	}

	public enum VsbYemaClass : uint
	{
		Other = 0,
		F991 = 1
	}

	public enum VsbSzkinglongClass : uint
	{
		Other = 0,
		Bus111 = 1,
		Bus121 = 2,
		Bus131 = 3,
		Bus141 = 4,
		Bus161 = 5,
		Bus181 = 6,
		Bus11 = 7,
		Bus201 = 8,
		Bus21 = 9,
		Bus51 = 10,
		Bus61 = 11,
		Bus91 = 12,
		Bus101 = 13,
		Bus151 = 14
	}

	public enum VsbChangfengClass : uint
	{
		Other = 0,
		Cs71 = 1,
		Qibing1 = 2,
		Liebao1 = 3,
		Fuling1 = 4,
		Feiyang1 = 5,
		Feiteng1 = 6,
		Blackjingang1 = 7
	}

	public enum VsbLufengClass : uint
	{
		Other = 0,
		X61 = 1,
		X62 = 2,
		X63 = 3,
		Lufengx51 = 4,
		Lufengx81 = 5,
		Lufengx82 = 6,
		Fenghua1 = 7,
		X64 = 8,
		Fengshang1 = 9
	}

	public enum VsbShanqiClass : uint
	{
		Other = 0,
		Aolong1 = 1,
		Aolong2 = 2,
		Delong1 = 3,
		Delong2 = 4,
		Delong3 = 5
	}

	public enum VsbRenaultClass : uint
	{
		Other = 0,
		Meiganna1 = 1,
		Keleiao1 = 2,
		Keleiao2 = 3,
		Scene1 = 4,
		Fenglang1 = 5,
		Tafeike1 = 6
	}

	public enum VsbHuanghaiClass : uint
	{
		Other = 0,
		Dacaishen1 = 1,
		Dacaishen2 = 2,
		Bus41 = 3,
		Challenger1 = 4,
		Aolongcuv1 = 5,
		Aojun1 = 6,
		Aojun2 = 7,
		Qishengv31 = 8,
		Linghangzhe1 = 9,
		Fengchi1 = 10
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VEHICLE_INFO
	{
		public uint dwIndex;

		public byte byVehicleType;

		public byte byColorDepth;

		public byte byColor;

		public byte byRadarState;

		public ushort wSpeed;

		public ushort wLength;

		public byte byIllegalType;

		public byte byVehicleLogoRecog;

		public byte byVehicleSubLogoRecog;

		public byte byVehicleModel;

		public byte[] byCustomInfo;

		public ushort wVehicleLogoRecog;

		public byte[] byRes3;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PLATE_RESULT
	{
		public uint dwSize;

		public byte byResultType;

		public byte byChanIndex;

		public ushort wAlarmRecordID;

		public uint dwRelativeTime;

		public byte[] byAbsTime;

		public uint dwPicLen;

		public uint dwPicPlateLen;

		public uint dwVideoLen;

		public byte byTrafficLight;

		public byte byPicNum;

		public byte byDriveChan;

		public byte byVehicleType;

		public uint dwBinPicLen;

		public uint dwCarPicLen;

		public uint dwFarCarPicLen;

		public unsafe byte* pBuffer3;

		public unsafe byte* pBuffer4;

		public unsafe byte* pBuffer5;

		public byte byRelaLaneDirectionType;

		public byte byCarDirectionType;

		public byte[] byRes3;

		public NET_DVR_PLATE_INFO struPlateInfo;

		public NET_DVR_VEHICLE_INFO struVehicleInfo;

		public unsafe byte* pBuffer1;

		public unsafe byte* pBuffer2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IMAGEOVERLAYCFG
	{
		public uint dwSize;

		public byte byOverlayInfo;

		public byte byOverlayMonitorInfo;

		public byte byOverlayTime;

		public byte byOverlaySpeed;

		public byte byOverlaySpeeding;

		public byte byOverlayLimitFlag;

		public byte byOverlayPlate;

		public byte byOverlayColor;

		public byte byOverlayLength;

		public byte byOverlayType;

		public byte byOverlayColorDepth;

		public byte byOverlayDriveChan;

		public byte byOverlayMilliSec;

		public byte byOverlayIllegalInfo;

		public byte byOverlayRedOnTime;

		public byte byFarAddPlateJpeg;

		public byte byNearAddPlateJpeg;

		public byte[] byRes1;

		public byte[] byMonitorInfo1;

		public byte[] byMonitorInfo2;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SNAPCFG
	{
		public uint dwSize;

		public byte byRelatedDriveWay;

		public byte bySnapTimes;

		public ushort wSnapWaitTime;

		public ushort[] wIntervalTime;

		public uint dwSnapVehicleNum;

		public NET_DVR_JPEGPARA struJpegPara;

		public byte[] byRes2;
	}

	public enum ItcMainmodeAbility : uint
	{
		ModeUnknow = 0,
		PostMode = 1,
		EpoliceMode = 2,
		PostepoliceMode = 4
	}

	public enum ItcRecogRegionType : uint
	{
		Rect = 0,
		Polygon = 1
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SNAP_ABILITY
	{
		public uint dwSize;

		public byte byIoInNum;

		public byte byIoOutNum;

		public byte bySingleSnapNum;

		public byte byLightModeArrayNum;

		public byte byMeasureModeArrayNum;

		public byte byPlateEnable;

		public byte byLensMode;

		public byte byPreTriggerSupport;

		public uint dwAbilityType;

		public byte byIoSpeedGroup;

		public byte byIoLightGroup;

		public byte byRecogRegionType;

		public byte bySupport;

		public ushort wSupportMultiRadar;

		public byte byICRPresetNum;

		public byte byICRTimeSlot;

		public byte bySupportRS485Num;

		public byte byExpandRs485SupportSensor;

		public byte byExpandRs485SupportSignalLampDet;

		public byte byRelayNum;

		public byte bySupport1;

		public byte bySupport2;

		public byte bySupportWhiteBalance;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_ICRTIMECFG
	{
		public NET_DVR_SCHEDTIME struTime;

		public byte byAssociateRresetNo;

		public byte bySubSwitchMode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_ICR_TIMESWITCH_PARAM
	{
		public NET_ITC_ICRTIMECFG[] struAutoCtrlTime;

		public byte[] byICRPreset;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_ICR_MANUALSWITCH_PARAM
	{
		public byte[] byICRPreset;

		public byte bySubSwitchMode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_ICR_AOTOSWITCH_PARAM
	{
		public byte[] byICRPreset;

		public byte byICRAutoSwitch;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_ICR_ALGAOTOSWITCH_PARAM
	{
		public byte byDetectThreshold;

		public byte byAbBrightnessThreshold;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_ITC_ICR_PARAM_UNION
	{
		[FieldOffset (0)]
		public byte[] uLen;

		[FieldOffset (0)]
		public NET_ITC_ICR_AOTOSWITCH_PARAM struICRAutoSwitch;

		[FieldOffset (0)]
		public NET_ITC_ICR_MANUALSWITCH_PARAM struICRManualSwitch;

		[FieldOffset (0)]
		public NET_ITC_ICR_TIMESWITCH_PARAM struICRTimeSwitch;

		[FieldOffset (0)]
		public NET_ITC_ICR_ALGAOTOSWITCH_PARAM strICRAlgorithmAutoSwitch;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_ICRCFG
	{
		public uint dwSize;

		public byte bySwitchType;

		public byte[] byRes;

		public NET_ITC_ICR_PARAM_UNION uICRParam;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_HANDLEEXCEPTION
	{
		public uint dwHandleType;

		public byte byEnable;

		public byte byRes;

		public ushort wDuration;

		public byte[] byAlarmOutTriggered;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_EXCEPTION
	{
		public uint dwSize;

		public NET_ITC_HANDLEEXCEPTION[] struSnapExceptionType;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TRIGCOORDINATE
	{
		public ushort wTopLeftX;

		public ushort wTopLeftY;

		public ushort wWdith;

		public ushort wHeight;
	}

	public enum ProvinceCityIdx : uint
	{
		AnhuiProvince = 0,
		AomenProvince = 1,
		BeijingProvince = 2,
		ChongqingProvince = 3,
		FujianProvince = 4,
		GansuProvince = 5,
		GuangdongProvince = 6,
		GuangxiProvince = 7,
		GuizhouProvince = 8,
		HainanProvince = 9,
		HebeiProvince = 10,
		HenanProvince = 11,
		HeilongjiangProvince = 12,
		HubeiProvince = 13,
		HunanProvince = 14,
		JilinProvince = 15,
		JiangsuProvince = 16,
		JiangxiProvince = 17,
		LiaoningProvince = 18,
		NeimengguProvince = 19,
		NingxiaProvince = 20,
		QinghaiProvince = 21,
		ShandongProvince = 22,
		ShanxiJinProvince = 23,
		ShanxiShanProvince = 24,
		ShanghaiProvince = 25,
		SichuanProvince = 26,
		TaiwanProvince = 27,
		TianjinProvince = 28,
		XizangProvince = 29,
		XianggangProvince = 30,
		XinjiangProvince = 31,
		YunnanProvince = 32,
		ZhejiangProvince = 33
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_GEOGLOCATION
	{
		public int[] iRes;

		public uint dwCity;
	}

	public enum SceneMode : uint
	{
		UnkownSceneMode = 0,
		HighwaySceneMode = 1,
		SuburbanSceneMode = 2,
		UrbanSceneMode = 3,
		TunnelSceneMode = 4
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VTPARAM
	{
		public uint dwSize;

		public byte byEnable;

		public byte byIsDisplay;

		public byte byLoopPos;

		public byte bySnapGain;

		public uint dwSnapShutter;

		public NET_DVR_TRIGCOORDINATE struTrigCoordinate;

		public NET_DVR_TRIGCOORDINATE[] struRes;

		public byte byTotalLaneNum;

		public byte byPolarLenType;

		public byte byDayAuxLightMode;

		public byte byLoopToCalRoadBright;

		public byte byRoadGrayLowTh;

		public byte byRoadGrayHighTh;

		public ushort wLoopPosBias;

		public uint dwHfrShtterInitValue;

		public uint dwSnapShtterInitValue;

		public uint dwHfrShtterMaxValue;

		public uint dwSnapShtterMaxValue;

		public uint dwHfrShtterNightValue;

		public uint dwSnapShtterNightMinValue;

		public uint dwSnapShtterNightMaxValue;

		public uint dwInitAfe;

		public uint dwMaxAfe;

		public ushort wResolutionX;

		public ushort wResolutionY;

		public uint dwGainNightValue;

		public uint dwSceneMode;

		public uint dwRecordMode;

		public NET_DVR_GEOGLOCATION struGeogLocation;

		public byte[] byTrigFlag;

		public byte[] byTrigSensitive;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SNAPENABLECFG
	{
		public uint dwSize;

		public byte byPlateEnable;

		public byte[] byRes1;

		public byte byFrameFlip;

		public ushort wFlipAngle;

		public ushort wLightPhase;

		public byte byLightSyncPower;

		public byte byFrequency;

		public byte byUploadSDEnable;

		public byte byPlateMode;

		public byte byUploadInfoFTP;

		public byte byAutoFormatSD;

		public ushort wJpegPicSize;

		public byte bySnapPicResolution;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FTPCFG
	{
		public uint dwSize;

		public uint dwEnableFTP;

		public sbyte[] sFTPIP;

		public uint dwFTPPort;

		public byte[] sUserName;

		public byte[] sPassword;

		public uint dwDirLevel;

		public ushort wTopDirMode;

		public ushort wSubDirMode;

		public byte byEnableAnony;

		public byte byPicArchivingInterval;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PICTURE_NAME
	{
		public byte[] byItemOrder;

		public byte byDelimiter;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PICTURE_NAME_EX
	{
		public byte[] byItemOrder;

		public byte byDelimiter;

		public byte[] byPicNamePrefix;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SERIAL_CATCHPIC_PARA
	{
		public byte byStrFlag;

		public byte byEndFlag;

		public ushort wCardIdx;

		public uint dwCardLen;

		public uint dwTriggerPicChans;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_JPEGCFG_V30
	{
		public uint dwSize;

		public NET_DVR_JPEGPARA[] struJpegPara;

		public ushort wBurstMode;

		public ushort wUploadInterval;

		public NET_DVR_PICTURE_NAME struPicNameRule;

		public byte bySaveToHD;

		public byte byRes1;

		public ushort wCatchInterval;

		public byte[] byRes2;

		public NET_DVR_SERIAL_CATCHPIC_PARA struRs232Cfg;

		public NET_DVR_SERIAL_CATCHPIC_PARA struRs485Cfg;

		public uint[] dwTriggerPicTimes;

		public uint[] dwAlarmInPicChanTriggered;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MANUALSNAP
	{
		public byte byOSDEnable;

		public byte byLaneNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SPRCFG
	{
		public uint dwSize;

		public byte[] byDefaultCHN;

		public byte byPlateOSD;

		public byte bySendJPEG1;

		public byte bySendJPEG2;

		public ushort wDesignedPlateWidth;

		public byte byTotalLaneNum;

		public byte byRes1;

		public ushort wRecognizedLane;

		public NET_VCA_RECT[] struLaneRect;

		public uint dwRecogMode;

		public byte bySendPRRaw;

		public byte bySendBinImage;

		public byte byDelayCapture;

		public byte byUseLED;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PLCCFG
	{
		public uint dwSize;

		public byte byPlcEnable;

		public byte byPlateExpectedBright;

		public byte[] byRes1;

		public byte byTradeoffFlash;

		public byte byCorrectFactor;

		public ushort wLoopStatsEn;

		public byte byPlcBrightOffset;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEVICESTATECFG
	{
		public uint dwSize;

		public ushort wPreviewNum;

		public ushort wFortifyLinkNum;

		public NET_DVR_IPADDR[] struPreviewIP;

		public NET_DVR_IPADDR[] struFortifyIP;

		public uint dwVideoFrameRate;

		public byte byResolution;

		public byte bySnapResolution;

		public byte byStreamType;

		public byte byTriggerType;

		public uint dwSDVolume;

		public uint dwSDFreeSpace;

		public byte[][] byDetectorState;

		public byte byDetectorLinkState;

		public byte bySDStatus;

		public byte[] byFortifyLevel;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_POSTEPOLICECFG
	{
		public uint dwSize;

		public uint dwDistance;

		public uint[] dwLightChan;

		public byte byCapSpeed;

		public byte bySpeedLimit;

		public byte byTrafficDirection;

		public byte byRes1;

		public ushort wLoopPreDist;

		public ushort wTrigDelay;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SIGNALLAMP_DETCFG
	{
		public uint dwSize;

		public byte[] byAbsTime;

		public NET_DVR_IPADDR struAlarmCamIP;

		public uint dwPic1Len;

		public uint dwPic2Len;

		public unsafe sbyte* pPic1Buffer;

		public unsafe sbyte* pPic2Buffer;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_EXDEVDET_COND
	{
		public uint dwSize;

		public uint dwChannel;

		public byte byExternalDevType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_EXDEVDET_CFG
	{
		public uint dwSize;

		public byte byExternalDevStatus;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PROTO_TYPE
	{
		public uint dwType;

		public byte[] byDescribe;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IPC_PROTO_LIST
	{
		public uint dwSize;

		public uint dwProtoNum;

		public NET_DVR_PROTO_TYPE[] struProto;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IPC_PROTO_LIST_V41
	{
		public uint dwSize;

		public uint dwProtoNum;

		public unsafe byte* pBuffer;

		public uint dwBufferLen;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PTZPOS_INFO
	{
		public uint dwPanPos;

		public uint dwTiltPos;

		public uint dwZoomPos;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_HUMAN_FEATURE
	{
		public byte byAgeGroup;

		public byte bySex;

		public byte byEyeGlass;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_OBJECT_FEATURE
	{
		public byte byColorRatel;

		public byte byRed;

		public byte byGreen;

		public byte byBlue;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_ADVANCE_COND_UNION
	{
		[FieldOffset (0)]
		public byte[] byLen;

		[FieldOffset (0)]
		public NET_VCA_HUMAN_FEATURE struHumanFeature;

		[FieldOffset (0)]
		public NET_DVR_OBJECT_FEATURE struObjectFeature;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TRAVERSE_PLANE_SEARCHCOND
	{
		public NET_VCA_TRAVERSE_PLANE[] struVcaTraversePlane;

		public uint dwPreTime;

		public uint dwDelayTime;

		public NET_DVR_PTZPOS_INFO struPTZPosInfo;

		public byte byAdvanceType;

		public byte[] byRes1;

		public NET_DVR_ADVANCE_COND_UNION uAdvanceCond;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INTRUSION_SEARCHCOND
	{
		public NET_VCA_INTRUSION[] struVcaIntrusion;

		public uint dwPreTime;

		public uint dwDelayTime;

		public NET_DVR_PTZPOS_INFO struPTZPosInfo;

		public byte byAdvanceType;

		public byte[] byRes1;

		public NET_DVR_ADVANCE_COND_UNION uAdvanceCond;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FACEDETECTION_SEARCHCOND
	{
		public NET_VCA_POLYGON struFacePolygon;

		public uint dwPreTime;

		public uint dwDelayTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_AREA_SMARTSEARCH_COND_UNION
	{
		[FieldOffset (0)]
		public byte[] byLen;

		[FieldOffset (0)]
		public byte[][] byMotionScope;

		[FieldOffset (0)]
		public NET_DVR_TRAVERSE_PLANE_SEARCHCOND struTraversPlaneCond;

		[FieldOffset (0)]
		public NET_DVR_INTRUSION_SEARCHCOND struIntrusionCond;

		[FieldOffset (0)]
		public NET_DVR_FACEDETECTION_SEARCHCOND struFaceSnapCond;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SMART_SEARCH_PARAM
	{
		public byte byChan;

		public byte bySearchCondType;

		public ushort wChan;

		public NET_DVR_TIME struStartTime;

		public NET_DVR_TIME struEndTime;

		public NET_DVR_AREA_SMARTSEARCH_COND_UNION uSmartSearchCond;

		public byte bySensitivity;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SMART_SEARCH_PARAM_V40
	{
		public uint dwSize;

		public NET_DVR_STREAM_INFO struIDInfo;

		public byte bySearchCondType;

		public byte bySensitivity;

		public byte[] byRes1;

		public NET_DVR_TIME_EX struStartTime;

		public NET_DVR_TIME_EX struEndTime;

		public NET_DVR_AREA_SMARTSEARCH_COND_UNION uSmartSearchCond;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SMART_SEARCH_RET
	{
		public NET_DVR_TIME struStartTime;

		public NET_DVR_TIME struEndTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IPSAN_SERACH_PARAM
	{
		public NET_DVR_IPADDR struIP;

		public ushort wPort;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IPSAN_SERACH_RET
	{
		public byte[] byDirectory;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEVICECFG_V40
	{
		public uint dwSize;

		public byte[] sDVRName;

		public uint dwDVRID;

		public uint dwRecycleRecord;

		public byte[] sSerialNumber;

		public uint dwSoftwareVersion;

		public uint dwSoftwareBuildDate;

		public uint dwDSPSoftwareVersion;

		public uint dwDSPSoftwareBuildDate;

		public uint dwPanelVersion;

		public uint dwHardwareVersion;

		public byte byAlarmInPortNum;

		public byte byAlarmOutPortNum;

		public byte byRS232Num;

		public byte byRS485Num;

		public byte byNetworkPortNum;

		public byte byDiskCtrlNum;

		public byte byDiskNum;

		public byte byDVRType;

		public byte byChanNum;

		public byte byStartChan;

		public byte byDecordChans;

		public byte byVGANum;

		public byte byUSBNum;

		public byte byAuxoutNum;

		public byte byAudioNum;

		public byte byIPChanNum;

		public byte byZeroChanNum;

		public byte bySupport;

		public byte byEsataUseage;

		public byte byIPCPlug;

		public byte byStorageMode;

		public byte bySupport1;

		public ushort wDevType;

		public byte[] byDevTypeName;

		public byte bySupport2;

		public byte byAnalogAlarmInPortNum;

		public byte byStartAlarmInNo;

		public byte byStartAlarmOutNo;

		public byte byStartIPAlarmInNo;

		public byte byStartIPAlarmOutNo;

		public byte byHighIPChanNum;

		public byte byEnableRemotePowerOn;

		public ushort wDevClass;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEVICECFG_V50
	{
		public uint dwSize;

		public byte[] sDVRName;

		public uint dwDVRID;

		public uint dwRecycleRecord;

		public byte[] sSerialNumber;

		public uint dwSoftwareVersion;

		public uint dwSoftwareBuildDate;

		public uint dwDSPSoftwareVersion;

		public uint dwDSPSoftwareBuildDate;

		public uint dwPanelVersion;

		public uint dwHardwareVersion;

		public byte byAlarmInPortNum;

		public byte byAlarmOutPortNum;

		public byte byRS232Num;

		public byte byRS485Num;

		public byte byNetworkPortNum;

		public byte byDiskCtrlNum;

		public byte byDiskNum;

		public byte byDVRType;

		public byte byChanNum;

		public byte byStartChan;

		public byte byDecordChans;

		public byte byVGANum;

		public byte byUSBNum;

		public byte byAuxoutNum;

		public byte byAudioNum;

		public byte byIPChanNum;

		public byte byZeroChanNum;

		public byte bySupport;

		public byte byEsataUseage;

		public byte byIPCPlug;

		public byte byStorageMode;

		public byte bySupport1;

		public ushort wDevType;

		public byte[] byDevTypeName;

		public byte bySupport2;

		public byte byAnalogAlarmInPortNum;

		public byte byStartAlarmInNo;

		public byte byStartAlarmOutNo;

		public byte byStartIPAlarmInNo;

		public byte byStartIPAlarmOutNo;

		public byte byHighIPChanNum;

		public byte byEnableRemotePowerOn;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ZEROCHANCFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes1;

		public uint dwVideoBitrate;

		public uint dwVideoFrameRate;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ZERO_ZOOMCFG
	{
		public uint dwSize;

		public NET_VCA_POINT struPoint;

		public byte byState;

		public byte byPreviewNumber;

		public byte[] byPreviewSeq;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SNMPCFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes1;

		public ushort wVersion;

		public ushort wServerPort;

		public byte[] byReadCommunity;

		public byte[] byWriteCommunity;

		public byte[] byTrapHostIP;

		public ushort wTrapHostPort;

		public byte[] byTrapName;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SNMPv3_USER
	{
		public byte[] byUserName;

		public byte bySecLevel;

		public byte byAuthtype;

		public byte byPrivtype;

		public byte[] byRes;

		public byte[] byAuthpass;

		public byte[] byPrivpass;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SNMPCFG_V30
	{
		public uint dwSize;

		public byte byEnableV1;

		public byte byEnableV2;

		public byte byEnableV3;

		public byte[] byRes1;

		public ushort wServerPort;

		public byte[] byReadCommunity;

		public byte[] byWriteCommunity;

		public byte[] byTrapHostIP;

		public ushort wTrapHostPort;

		public byte[] byRes2;

		public NET_DVR_SNMPv3_USER struRWUser;

		public NET_DVR_SNMPv3_USER struROUser;

		public byte[] byTrapName;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SADPINFO
	{
		public NET_DVR_IPADDR struIP;

		public ushort wPort;

		public ushort wFactoryType;

		public sbyte[] chSoftwareVersion;

		public sbyte[] chSerialNo;

		public ushort wEncCnt;

		public byte[] byMACAddr;

		public NET_DVR_IPADDR struSubDVRIPMask;

		public NET_DVR_IPADDR struGatewayIpAddr;

		public NET_DVR_IPADDR struDnsServer1IpAddr;

		public NET_DVR_IPADDR struDnsServer2IpAddr;

		public byte byDns;

		public byte byDhcp;

		public byte[] szGB28181DevID;

		public byte byActivated;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SADPINFO_LIST
	{
		public uint dwSize;

		public ushort wSadpNum;

		public byte[] byRes;

		public NET_DVR_SADPINFO[] struSadpInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SADP_VERIFY
	{
		public sbyte[] chPassword;

		public NET_DVR_IPADDR struOldIP;

		public ushort wOldPort;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DESC_NODE
	{
		public int iValue;

		public byte[] byDescribe;

		public uint dwFreeSpace;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DISKABILITY_LIST
	{
		public uint dwSize;

		public uint dwNodeNum;

		public NET_DVR_DESC_NODE[] struDescNode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BACKUP_NAME_PARAM
	{
		public uint dwFileNum;

		public NET_DVR_FINDDATA_V30[] struFileList;

		public byte[] byDiskDes;

		public byte byWithPlayer;

		public byte byContinue;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BACKUP_TIME_PARAM
	{
		public int lChannel;

		public NET_DVR_TIME struStartTime;

		public NET_DVR_TIME struStopTime;

		public byte[] byDiskDes;

		public byte byWithPlayer;

		public byte byContinue;

		public byte byDrawFrame;

		public byte byUseBackCfgParam;

		public uint dwStreamType;

		public byte[] byRes;
	}

	public enum CompressionAbilityType : uint
	{
		CompressionStreamAbility = 0,
		MainResolutionAbility = 1,
		SubResolutionAbility = 2,
		EventResolutionAbility = 3,
		FrameAbility = 4,
		BitrateTypeAbility = 5,
		BitrateAbility = 6,
		ThirdResolutionAbility = 7,
		StreamTypeAbility = 8,
		PicQualityAbility = 9,
		IntervalBpframeAbility = 10,
		VideoEncAbility = 11,
		AudioEncAbility = 12,
		VideoEncComplexityAbility = 13,
		FormatAbility = 14
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ABILITY_LIST
	{
		public uint dwAbilityType;

		public byte[] byRes;

		public uint dwNodeNum;

		public NET_DVR_DESC_NODE[] struDescNode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_COMPRESSIONCFG_ABILITY
	{
		public uint dwSize;

		public uint dwAbilityNum;

		public NET_DVR_ABILITY_LIST[] struAbilityNode;
	}

	public enum RaidMode : uint
	{
		Raid0 = 1,
		Raid1,
		Raid10,
		Raid1e,
		Raid5,
		Raid6,
		Raid50,
		Jbod,
		Raid60
	}

	public enum HdSupportType : uint
	{
		Sata = 1,
		Pata = 2,
		Sas = 4,
		Atapi = 8,
		Tape = 16,
		Ses = 32
	}

	public enum SupportRaidType : uint
	{
		Raid0Ability = 1,
		Raid1Ability = 2,
		Raid10Ability = 4,
		Raid1eAbility = 8,
		Raid5Ability = 16,
		Raid6Ability = 32,
		Raid50Ability = 64,
		JbodAbility = 128,
		Raid60Ability = 256
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PHY_DISK_INFO
	{
		public ushort wPhySlot;

		public byte byType;

		public byte byStatus;

		public byte[] byMode;

		public uint dwHCapacity;

		public uint dwLCapacity;

		public byte[] byArrrayName;

		public ushort wArrayID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PHY_DISK_LIST
	{
		public uint dwSize;

		public uint dwCount;

		public NET_DVR_PHY_DISK_INFO[] struPhyDiskInfo;
	}

	public enum BgaType : uint
	{
		Rebuild = 1,
		ConsistencyFix = 2,
		ConsistencyCheck = 4,
		InitQuick = 8,
		InitBack = 16,
		Migration = 32,
		InitFore = 64,
		Copyback = 128
	}

	public enum BgaState : uint
	{
		None = 0,
		Running,
		Aborted,
		Paused
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BGA_INFO
	{
		public byte byBga;

		public byte byBgaState;

		public ushort wBgaPercentage;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ARRAY_INFO
	{
		public ushort wArrayID;

		public byte byRaidMode;

		public byte byStatus;

		public uint dwHCapacity;

		public uint dwLCapacity;

		public uint dwHFreeSpace;

		public uint dwLFreeSpace;

		public byte[] byArrayName;

		public byte byPDCount;

		public byte bySpareCount;

		public byte[] byRes1;

		public ushort[] wPDSlots;

		public ushort[] wSparePDSlots;

		public NET_DVR_BGA_INFO struBgaInfo;

		public ushort[] wPDSlotsPartTwo;

		public ushort[] wSparePDSlotsPartTwo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ARRAY_LIST
	{
		public uint dwSize;

		public uint dwCount;

		public NET_DVR_ARRAY_INFO[] struArrayInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VD_INFO
	{
		public ushort wSlot;

		public byte byStatus;

		public byte byRaidMode;

		public ushort wArrayID;

		public byte byRepair;

		public byte byUsage;

		public byte[] byArrayName;

		public byte[] byName;

		public uint dwHCapacity;

		public uint dwLCapacity;

		public uint dwHFreeSpace;

		public uint dwLFreeSpace;

		public NET_DVR_BGA_INFO struBgaInfo;

		public uint dwBlockSize;

		public NET_DVR_IPADDR struWarrantIP;

		public sbyte[] szArrayGroup;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VD_LIST
	{
		public uint dwSize;

		public uint dwCount;

		public NET_DVR_VD_INFO[] struVDInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ADAPTER_VERSION
	{
		public ushort wMajorVersion;

		public ushort wMinorVersion;

		public ushort wRevisionNumber;

		public ushort wBuildNumber;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VD_SLOT
	{
		public ushort wVDSlot;

		public byte byAlloc;

		public byte[] byRes;

		public uint dwHVDSlotSize;

		public uint dwLVDSlotSize;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ARRAY_SPACE_ALLOC_INFO
	{
		public byte byVDSlotCount;

		public byte[] byRes1;

		public NET_DVR_VD_SLOT[] struVDSlots;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RAID_ADAPTER_INFO
	{
		public uint dwSize;

		public NET_DVR_ADAPTER_VERSION struVersion;

		public byte bySlotCount;

		public byte bySupportMigrate;

		public byte bySupportExpand;

		public byte bySupportRebuild;

		public ushort wSlotSupportType;

		public ushort wSupportRaidType;

		public byte byAutoRebuild;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_OPERATE_ARRAY_PARAM
	{
		public byte byRaidMode;

		public byte byPDCount;

		public ushort wArrayID;

		public ushort[] wPDSlots;

		public byte[] byName;

		public byte byInitMode;

		public byte byRes1;

		public ushort[] wPDSlotsPartTwo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_OPERATE_VD_PARAM
	{
		public ushort wArrayID;

		public byte bySlot;

		public byte byInitType;

		public uint dwHCapacity;

		public uint dwLCapacity;

		public byte[] byName;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SPARE_DISK_PARAM
	{
		public ushort wPDSlot;

		public ushort wArrayID;

		public byte bySpareType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct LPNET_DVR_DECSUBSYSTEMJIONSTATUS
	{
		public byte byJoinStatus;

		public byte byJoinSubSystem;

		public byte byJoinDispNum;

		public byte byJoinSubWindowNum;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct LPNET_DVR_SINGLESUBSYSTEMJOININFO
	{
		public byte bySubSystemType;

		public byte byConnectStatus;

		public byte byMatrixNum;

		public byte bySubSystemNum;

		public NET_DVR_DECSUBSYSTEMJIONSTATUS[] struDecSub;

		public byte byBindStatus;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALLDECSUBSYSTEMJOININFO
	{
		public uint dwSize;

		public NET_DVR_SINGLESUBSYSTEMJOININFO[] struSingleSubSystemJoinInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_NATASSOCIATECFG
	{
		public uint dwSize;

		public NET_DVR_NETCFG_V30[] struNatIpAddress;

		public byte byNATEnable;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TEMPERATUREALARMCFG
	{
		public byte byEnableTemperatureAlarm;

		public byte[] byRes1;

		public int iTemperatureUpLimited;

		public int iTemperatureDownLimited;

		public NET_DVR_HANDLEEXCEPTION_V30 struTempHandleType;

		public NET_DVR_SCHEDTIME[][] struAlarmTime;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BOARDALARMCFG
	{
		public byte byEnablePullAlarm;

		public byte[] byRes1;

		public NET_DVR_HANDLEEXCEPTION_V30 struBoardHandleType;

		public NET_DVR_SCHEDTIME[][] struAlarmTime;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VIDEOPLATFORMALARMCFG
	{
		public uint dwSize;

		public NET_DVR_TEMPERATUREALARMCFG struTempAlarmCfg;

		public NET_DVR_BOARDALARMCFG struBoardAlarmCfg;

		public NET_DVR_HANDLEEXCEPTION_V30[] struHandleException;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CODESPLITTERASSOCIATE
	{
		public uint dwSize;

		public NET_DVR_IPADDR struIP;

		public ushort wPort;

		public byte[] byRes1;

		public byte[] sUserName;

		public byte[] sPassword;

		public byte byChan;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIXSUBSYSTEMINFO
	{
		public byte byMatrixNum;

		public byte bySubSystemNum;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VIDEOPLATFORM_ALRAMINFO
	{
		public uint dwSize;

		public byte byAlarmType;

		public byte byBoardNum;

		public byte[] byRes1;

		public byte[] bySubSystemChan;

		public int iTemperature;

		public byte byMainboardSeq;

		public byte[] byRes2;

		public byte[] byFanSequence;

		public NET_DVR_MATRIXSUBSYSTEMINFO struInputNote;

		public NET_DVR_MATRIXSUBSYSTEMINFO struOutputNote;

		public byte[] byRes3;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INQUEST_CDRW_CFG
	{
		public uint dwSize;

		public uint dwNum;

		public uint[] dwRwSelectPara;

		public uint dwModeSelect;

		public byte[] byRes;

		public uint dwStartCDRW;

		public uint dwHdExcp;

		public uint dwInterval;

		public sbyte[] sLable;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INQUEST_FILEINFO
	{
		public sbyte[] sFileName;

		public uint dwFileLen;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INQUEST_FILES
	{
		public uint dwFileNum;

		public NET_DVR_INQUEST_FILEINFO[] struFileInfo;

		public uint dwCDIndex;

		public uint bFinalizeDisc;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INQUEST_CDRW
	{
		public uint dwEnable;

		public uint dwStatus;

		public uint dwVolumn;

		public uint dwFreeSpace;

		public uint dwTimeLeft;

		public byte byCDType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INQUEST_CDRW_STATUS
	{
		public uint dwType;

		public NET_DVR_INQUEST_CDRW[] strCDRWNum;

		public NET_DVR_TIME_EX struInquestStartTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INQUEST_PIP_PARAM
	{
		public byte byPipChan;

		public byte[] byRes;

		public ushort wTopLeftX;

		public ushort wTopLeftY;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INQUEST_PIP_STATUS
	{
		public byte byBaseChan;

		public byte byBackChan;

		public byte byPIPMode;

		public byte byRes;

		public NET_DVR_INQUEST_PIP_PARAM[] strPipPara;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INQUEST_PIP_PARAM_V40
	{
		public byte byPipChan;

		public byte[] byRes1;

		public ushort wTopLeftX;

		public ushort wTopLeftY;

		public ushort wHeight;

		public ushort wWidth;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INQUEST_PIP_STATUS_V40
	{
		public NET_DVR_STRUCTHEAD struStructHead;

		public byte byBaseChan;

		public byte byBackChan;

		public byte byPIPMode;

		public byte byPipCount;

		public byte byPicShowMode;

		public byte[] byRes;

		public NET_DVR_INQUEST_PIP_PARAM_V40[] strPipPara;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INQUEST_SECRET_INFO
	{
		public byte[] sSecretKey;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SINGLESCREENCFG
	{
		public byte byScreenSeq;

		public byte bySubSystemNum;

		public byte byDispNum;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BIGSCREENCFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte byModeX;

		public byte byModeY;

		public byte byMainDecodeSystem;

		public byte byMainDecoderDispChan;

		public byte byVideoStandard;

		public byte[] byRes1;

		public uint dwResolution;

		public NET_DVR_SINGLESCREENCFG[] struFollowSingleScreen;

		public ushort wBigScreenX;

		public ushort wBigScreenY;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SUBSERVERINFO
	{
		public byte bySequence;

		public byte byBelongSubDomain;

		public byte[] byRes1;

		public uint dwMaxIpcNums;

		public NET_DVR_IPADDR struSubMatrixIP;

		public ushort wSubMatrixPort;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_UNITEDMATRIXINFO
	{
		public uint dwSize;

		public NET_DVR_SUBSERVERINFO struDomainInfo;

		public NET_DVR_SUBSERVERINFO[] struSubDomainInfo;

		public NET_DVR_SUBSERVERINFO[] struMatrixInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_REGCALLBACKPARAM
	{
		public sbyte[] sDeviceID;

		public sbyte[] sPassword;

		public byte[] sSerialNumber;

		public uint dwDeviceType;

		public byte nStatus;

		public byte byNetType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LOGONREPONSEPARAM
	{
		public ushort wHeartbeatTime;

		public byte byOvertimes;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PREVIEWPARAM
	{
		public byte byTransProtol;

		public byte byTransMode;

		public NET_DVR_IPADDR struCuIp;

		public ushort wPort;

		public ushort wUdpPort;

		public byte bySupportQos;

		public byte byNatRequest;

		public byte byPreviewType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEVICENATINFO
	{
		public NET_DVR_IPADDR struPuIp;

		public ushort wOuterPort;

		public ushort wInterPort;

		public uint nSessionID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PREVIEWCALLBACKPARAM
	{
		public int lChannel;

		public byte nLinkProtocol;

		public byte nTransMode;

		public byte byPreviewType;

		public byte[] byRes;

		public uint nSessionID;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PLAYBACKREQUESTPARAM
	{
		public byte byPlayBackMode;

		public byte[] byRes1;

		[StructLayout (LayoutKind.Explicit)]
		public struct Playbackmode
		{
			[FieldOffset (0)]
			public sbyte[] sFileName;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruPlayBackbyTime
			{
				public int lChannel;

				public NET_DVR_TIME struStartTime;

				public NET_DVR_TIME struStopTime;

				public byte[] byRes;
			}


			[FieldOffset (0)]
			public StruPlayBackbyTime struPlayBackbyTime;
		}


		public Playbackmode playbackmode;

		public NET_DVR_IPADDR struCuIp;

		public ushort wPort;

		public byte[] byRes2;

		public uint dwSessionID;

		public byte[] byRes3;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PLAYBACKCALLBACKPARAM
	{
		public byte byPlayBackMode;

		public byte[] byRes1;

		[StructLayout (LayoutKind.Explicit)]
		public struct Playbackmode
		{
			[FieldOffset (0)]
			public sbyte[] sFileName;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruPlayBackbyTime
			{
				public int lChannel;

				public NET_DVR_TIME struStartTime;

				public NET_DVR_TIME struStopTime;

				public byte[] byRes;
			}


			[FieldOffset (0)]
			public StruPlayBackbyTime struPlayBackbyTime;
		}


		public Playbackmode playbackmode;

		public uint nSessionID;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VOICEREQUESTPARAM
	{
		public byte nVoiceChannel;

		public byte[] byRes1;

		public NET_DVR_IPADDR struCuIp;

		public ushort wPort;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMSETUPREQUESTPARAM
	{
		public NET_DVR_IPADDR struCuIp;

		public ushort wPort;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_GPSALARMINFO
	{
		public byte[] byDeviceID;

		public NET_DVR_TIME_EX struGpsTime;

		public uint dwLongitude;

		public uint dwLatitude;

		public int iTimeZone;

		public uint dwDirection;

		public ushort wSatellites;

		public ushort wPrecision;

		public uint dwHeight;

		public uint dwGPSSeq;

		public ushort wSpeed;

		public sbyte[] sDirection;

		public byte byLocateMode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PICTUREINFO
	{
		public uint dwSize;

		public byte byChanIndex;

		public byte[] byRes1;

		public byte[] byDeviceID;

		public byte[] byAbsTime;

		public uint dwPicLen;

		public byte[] byRes2;

		public unsafe byte* pPicBuffer;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CMSPARAM
	{
		public uint dwSize;

		public NET_DVR_IPADDR struCmsAddr;

		public ushort wCmsPort;

		public byte[] byRes1;

		public byte[] sDeviceID;

		public byte[] byPassword;

		public NET_DVR_IPADDR struPicServerAddr;

		public ushort wPicServerPort;

		public ushort wCmsUdpPort;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_QOSPARAM
	{
		public ushort wMaxBitUL;

		public ushort wMaxBitDL;

		public byte byTrafficClass;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PPPDPARAM
	{
		public byte[] byDialNum;

		public byte[] byUserName;

		public byte[] byPassword;

		public byte[] byApn;

		public NET_DVR_IPADDR struLocalIp;

		public NET_DVR_IPADDR struRemoteIp;

		public ushort wMtuSize;

		public byte byVerifyProtocal;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DIALPARAM
	{
		public uint dwSize;

		public byte bEnable3G;

		public byte byDialMethod;

		public byte bySwitchMethod;

		public byte byEnaAlarmInDial;

		public byte[] byRes1;

		public ushort wOffLineTime;

		public NET_DVR_PPPDPARAM struPppdParam;

		public NET_DVR_QOSPARAM struQosParam;

		public byte[] byUimNumber;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DIALREQUEST
	{
		public byte byConnNum;

		public byte byNetType;

		public byte[] byRes;
	}

	public enum UimInfo : uint
	{
		Unknown = 0,
		Valid = 1,
		Novalid = 4,
		Roam = 11,
		Noexist = 255
	}

	public enum RealMode : uint
	{
		Cdma1x = 12,
		Evdo = 14,
		Cdmahybrid = 18,
		Gsm = 21,
		Gprs = 22,
		Edge = 23,
		Wcdma = 24,
		Hsdpa = 25,
		Hsupa = 26,
		Hspa = 27,
		Tgsm = 31,
		Tgprs = 32,
		Tedge = 33,
		Tdscdma = 34,
		Tdhsdpa = 35,
		Tdhsupa = 36,
		Tdhspa = 37
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DIALSTATUS
	{
		public byte byRealMode;

		public byte byUimCard;

		public byte[] byRes1;

		public uint dwSignal;

		public uint dwDialStatus;

		public NET_DVR_IPADDR struLocalIp;

		public NET_DVR_IPADDR struRemoteIp;

		public NET_DVR_IPADDR struNetMask;

		public NET_DVR_IPADDR struDns;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PHONECFG
	{
		public byte[] byWhiteList;

		public byte[] byPhonePerssion;

		public byte[] byAlarmHandler;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SMSRELATIVEPARAM
	{
		public uint dwSize;

		public byte bEnableSmsAlarm;

		public byte[] byRes1;

		public NET_DVR_PHONECFG[] struWhiteList;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SMSLISTINFO
	{
		public uint dwSize;

		public uint dwTotalSmsNum;

		public byte[] byRes;

		public unsafe byte* pSmsParam;

		public uint dwBufLen;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SMSPARAM
	{
		public uint dwIndex;

		public byte byStatus;

		public byte[] byRes;

		public NET_DVR_TIME_EX struRecvTime;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SMSCONTENT
	{
		public byte[] byPhoneNum;

		public byte[] byMsg;
	}

	public enum PinReady : uint
	{
		Ready = 1,
		Pin = 2,
		Puk = 3,
		Pin2 = 4,
		Puk2 = 5
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PINSTATUS
	{
		public uint dwSize;

		public byte byStatus;

		public byte byPinTimes;

		public byte byPukTimes;

		public byte bEnableLock;

		public byte[] byRes;
	}

	public enum PinCmd : uint
	{
		InEnable = 1,
		InDisable = 2,
		InVerify = 3,
		UkVerify = 4,
		InChange = 5
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PINCODEPARAM
	{
		public uint dwSize;

		public byte byPinCmd;

		public byte[] byRes1;

		public byte[] byPinCode;

		public byte[] byNewPinCode;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PUSHJPEGPARA
	{
		public ushort wPicSize;

		public ushort wPicQuality;

		public byte byPicTackleMode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PUSHALARMINFO
	{
		public uint dwAlarmType;

		public uint dwAlarmInputNumber;

		public uint[] dwAlarmOutputNumber;

		public uint[] dwAlarmRelateChannel;

		public uint[] dwChannel;

		public uint[] dwDiskNumber;

		public byte[] byDeviceID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PUSHALARMINFO_V30
	{
		public uint dwAlarmType;

		public uint dwAlarmInputNumber;

		public byte[] byAlarmOutputNumber;

		public byte[] byAlarmRelateChannel;

		public byte[] byChannel;

		public byte[] byDiskNumber;

		public byte[] byDeviceID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MB_AUTOWORKPARA
	{
		public byte byCurPowerCtrlType;

		public byte[] byRes;

		public NET_DVR_SCHEDTIME[][] struWorkTime;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MB_POWERCTRLPARA
	{
		public uint dwSize;

		public uint dwHaltDelay;

		public NET_DVR_MB_AUTOWORKPARA struAutoWorkPara;

		public byte byEnableUnderVoltProtect;

		public byte byUnderVoltPercent;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MB_AUTOBACKUPPARA
	{
		public uint dwSize;

		public byte byEnableAutoBackup;

		public byte[] byRes1;

		public byte[] byBackupChannel;

		public byte[] byBackupDays;

		public byte[] byBackupFileType;

		public NET_DVR_SCHEDTIME[][] struBackupTime;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MB_GPSPARA
	{
		public uint dwSize;

		public byte byEnableGPS;

		public byte byGpsInterface;

		public byte bySpeedUnit;

		public byte byEnableRetrieve;

		public int iAdjustTime;

		public byte byEnableAdjustTime;

		public byte[] byRes1;

		public ushort wGpsUploadInterval;

		public byte[] byGpsOsdChannel;

		public uint dwSpeedLimit;

		public NET_DVR_HANDLEEXCEPTION_V30 struGpsAlarm;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MB_SENSORINPARA
	{
		public uint dwSize;

		public byte[] byTriggerType;

		public byte[] byTriggerChannel;

		public byte[] byOsdDisplay;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ACCELERATIONCFG
	{
		public uint dwMaxXAcc;

		public uint dwMaxYAcc;

		public uint dwMaxZAcc;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_GSENSORPARA
	{
		public uint dwSize;

		public NET_DVR_ACCELERATIONCFG struAccelerationCfg;

		public byte byModuleSelect;

		public byte[] byRes1;

		public NET_DVR_HANDLEEXCEPTION_V30 struHandleException;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MB_DOWNLOADSVRPARA
	{
		public uint dwSize;

		public NET_DVR_IPADDR struDownloadSvrIp;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PLATERECOG_PARA
	{
		public uint dwSize;

		public byte byPrMode;

		public byte byPrScene;

		public byte byPrDetRect;

		public byte byPrPicQuality;

		public byte byPrPicMode;

		public byte byPlateOsdDisplay;

		public byte byPrProvCharIndex;

		public byte byPrProvCharIndex1;

		public byte byPrProvCharIndex2;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SPEEDLMT_PARA
	{
		public byte bStartMaxSpeedLimit;

		public byte bStartMinSpeedLimit;

		public byte[] byRes;

		public uint dwMaxSpeedLimit;

		public uint dwMinSpeedLimit;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PLATECHECK_PARA
	{
		public byte bAlarmWhenChecked;

		public byte bInformWhenChecked;

		public byte[] byRes;

		public NET_DVR_IPADDR struBlackFtpServer;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ENFORCESYS_PARA
	{
		public uint dwSize;

		public NET_DVR_SPEEDLMT_PARA struSpeedLmtPara;

		public NET_DVR_PLATECHECK_PARA struPlateCheckPara;

		public byte bySelPeccType;

		public byte byEnfOptHabit;

		public byte byAdjPrevFpsMode;

		public byte byRes1;

		public NET_DVR_IPADDR struUploadServerIp;

		public ushort wUploadServerPort;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PUSHMODEPARAM
	{
		public byte byUdpPreviewMode;

		public byte byVoiceWorkMode;

		public byte[] byRes;
	}

	public enum SensorType : uint
	{
		TypeNone = 0,
		TypeTemperature = 1,
		TypeHumidity,
		TypeWindspeed,
		TypeGas,
		AcVoltage,
		AcCurrent,
		DcVoltage,
		DcCurrent,
		WaterPressure,
		PressureTransmitter,
		FlowTransmitter,
		WaterLeakage,
		IntergratedTemperatureDetector,
		IsolationTemperatureDetector,
		ResidualChlorine,
		TypeAcTerminal = 16,
		TypeAcSocket = 17,
		TypeUnknow = 255
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SENSOR_INFO
	{
		public uint dwSize;

		public byte[] byName;

		public byte byEnable;

		public byte byValid;

		public byte byType;

		public byte byAlarmMode;

		public float fMeasureHigh;

		public float fMeasureLow;

		public float fAlarm1;

		public float fAlarm2;

		public float fAlarm3;

		public float fAlarm4;

		public uint dwOsdCfg;

		public float fSensitive;

		public byte bySensorStandard;

		public byte byChan;

		public byte[] byRes3;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SIREN_PARAM
	{
		public uint dwSize;

		public byte[] byName;

		public ushort wDelay;

		public byte[] byRes1;

		public uint dwOverallEventJointSirenOn;

		public uint[] dwSubsystemEventJointSirenOn;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_AIR_CONDITION_PARAM
	{
		public uint dwSize;

		public byte byEnable;

		public byte byMode;

		public byte byTemperature;

		public byte[] byRes;
	}

	public enum DetectorType : uint
	{
		PanicButton = 0,
		MagneticContact,
		SmokeDetector,
		ActiveInfraredDetector,
		PassiveInfraredDetector,
		GlassBreakDetector,
		VibrationDetector,
		DualTechnologyPirDetector,
		TripleTechnologyPirDetector,
		HumidityDetector,
		TemperatureDetector,
		CombustibleGasDetector,
		DynamicSwitch,
		ControlSwitch,
		SmartLock,
		WaterDetector,
		OtherDetector = 65535
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMIN_PARAM
	{
		public uint dwSize;

		public byte[] byName;

		public ushort wDetectorType;

		public byte byType;

		public byte byUploadAlarmRecoveryReport;

		public uint dwParam;

		public NET_DVR_SCHEDTIME[][] struAlarmTime;

		public byte[] byAssociateAlarmOut;

		public byte[] byAssociateSirenOut;

		public byte bySensitivityParam;

		public byte byArrayBypass;

		public byte byJointSubSystem;

		public byte byModuleStatus;

		public ushort wModuleAddress;

		public byte byModuleChan;

		public byte byModuleType;

		public ushort wZoneIndex;

		public ushort wInDelay;

		public ushort wOutDelay;

		public byte byAlarmType;

		public byte byZoneResistor;

		public float fZoneResistorManual;

		public byte[] byDetectorSerialNo;

		public byte byZoneSignalType;

		public byte byDisableDetectorTypeCfg;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MULTI_ALARMIN_COND
	{
		public uint dwSize;

		public int[] iZoneNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SINGLE_ALARMIN_PARAM
	{
		public uint dwSize;

		public ushort wZoneNo;

		public byte byJointSubSystem;

		public byte byType;

		public byte[] byName;

		public ushort wDetectorType;

		public ushort wInDelay;

		public ushort wOutDelay;

		public byte byAlarmType;

		public byte byZoneSignalType;

		public byte[] byDetectorSerialNo;

		public byte byDisableDetectorTypeCfg;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMIN_PARAM_LIST
	{
		public uint dwSize;

		public NET_DVR_SINGLE_ALARMIN_PARAM[] struSingleAlarmInParam;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMOUT_PARAM
	{
		public uint dwSize;

		public byte[] byName;

		public ushort wDelay;

		public ushort wTriggerIndex;

		public byte[] byAssociateAlarmIn;

		public byte byModuleType;

		public byte byModuleStatus;

		public ushort wModuleAddress;

		public byte byModuleChan;

		public byte byWorkMode;

		public byte byAlarmOutMode;

		public byte byTimeOn;

		public byte byTimeOff;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMIN_SETUP
	{
		public byte[] byAssiciateAlarmIn;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_MAIN_STATUS
	{
		public uint dwSize;

		public byte[] bySetupAlarmStatus;

		public byte[] byAlarmInStatus;

		public byte[] byAlarmOutStatus;

		public byte[] byBypassStatus;

		public byte[] bySubSystemGuardStatus;

		public byte[] byAlarmInFaultStatus;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_MAIN_STATUS_V40
	{
		public uint dwSize;

		public byte[] bySetupAlarmStatus;

		public byte[] byAlarmInStatus;

		public byte[] byAlarmOutStatus;

		public byte[] byBypassStatus;

		public byte[] bySubSystemGuardStatus;

		public byte[] byAlarmInFaultStatus;

		public byte[] byAlarmInMemoryStatus;

		public byte[] byAlarmInTamperStatus;

		public byte[] byEnableSubSystem;

		public byte[] bySubSystemGuardType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_OTHER_STATUS
	{
		public uint dwSize;

		public byte[] bySirenStatus;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_OTHER_STATUS_V50
	{
		public uint dwSize;

		public byte[] bySirenStatus;

		public byte[] byDetetorPower;

		public byte[] byDetetorConnection;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_ENABLECFG
	{
		public uint dwSize;

		public byte[] byAudioOutEnable;

		public byte[] byElectroLockEnable;

		public byte[] byMobileGateEnable;

		public byte[] bySirenEnable;

		public byte bySerialPurpose;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_ABILITY
	{
		public uint dwSize;

		public ushort wTotalAlarmInNum;

		public ushort wLocalAlarmInNum;

		public ushort wExpandAlarmInNum;

		public ushort wTotalAlarmOutNum;

		public ushort wLocalAlarmOutNum;

		public ushort wExpandAlarmOutNum;

		public ushort wTotalRs485Num;

		public ushort wLocalRs485Num;

		public ushort wExpandRs485Num;

		public ushort wFullDuplexRs485Num;

		public ushort wTotalSensorNum;

		public ushort wLocalSensorNum;

		public ushort wExpandSensorNum;

		public ushort wAudioOutNum;

		public ushort wGatewayNum;

		public ushort wElectroLockNum;

		public ushort wSirenNum;

		public ushort wSubSystemNum;

		public ushort wNetUserNum;

		public ushort wKeyboardNum;

		public ushort wOperatorUserNum;

		public byte bySupportDetector;

		public byte bySupportSensitivity;

		public byte bySupportArrayBypass;

		public byte bySupportAlarmInDelay;

		public byte[] bySupportAlarmInType;

		public byte byTelNum;

		public byte byCenterGroupNum;

		public byte byGPRSNum;

		public byte byNetNum;

		public byte byAudioNum;

		public byte by3GNum;

		public byte byAnalogVideoChanNum;

		public byte byDigitalVideoChanNum;

		public byte bySubSystemArmType;

		public byte byPublicSubSystemNum;

		public uint dwSupport1;

		public uint dwSubSystemEvent;

		public uint dwOverallEvent;

		public uint dwFaultType;

		public byte byPublicSubsystemAssociateSubsystemNum;

		public byte byOverallKeyboard;

		public ushort wSafetyCabinSupport;

		public byte by485SlotNum;

		public byte bySubSystemAttributeAbility;

		public ushort wKeyboardAddrNum;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_485_SLOT_LIST_INFO
	{
		public uint dwSize;

		public byte byAll;

		public byte[] byres;

		public byte[] byIndex;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_485LIST_INFO
	{
		public uint dwSize;

		public byte byAll;

		public byte[] byres;

		public byte[] byIndex;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARM_RS485CFG
	{
		public uint dwSize;

		public byte[] sDeviceName;

		public ushort wDeviceType;

		public ushort wDeviceProtocol;

		public uint dwBaudRate;

		public byte byDataBit;

		public byte byStopBit;

		public byte byParity;

		public byte byFlowcontrol;

		public byte byDuplex;

		public byte byWorkMode;

		public byte byChannel;

		public byte bySerialType;

		public byte byMode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEVICE_PROTO_LIST
	{
		public uint dwSize;

		public uint dwProtoNum;

		public NET_DVR_PROTO_TYPE[] struProtoType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEVICE_TYPE
	{
		public uint dwType;

		public byte[] byDescribe;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEVICE_TYPE_LIST
	{
		public uint dwSize;

		public uint dwTypeNum;

		public NET_DVR_DEVICE_TYPE[] struDeviceType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARM_DEVICE_USER
	{
		public uint dwSize;

		public byte[] sUserName;

		public byte[] sPassword;

		public NET_DVR_IPADDR struUserIP;

		public byte[] byMACAddr;

		public byte byUserType;

		public byte byAlarmOnRight;

		public byte byAlarmOffRight;

		public byte byBypassRight;

		public byte[] byOtherRight;

		public byte[] byNetPreviewRight;

		public byte[] byNetRecordRight;

		public byte[] byNetPlaybackRight;

		public byte[] byNetPTZRight;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_KEYBOARD_USER
	{
		public uint dwSize;

		public uint dwID;

		public byte[] byDefanceArea;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_OPERATE_USER
	{
		public uint dwSize;

		public byte[] sUserName;

		public byte[] sPassword;

		public byte bySubSystemPermission;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_GATEWAY_CFG
	{
		public uint dwSize;

		public byte[] byName;

		public byte byEnable;

		public byte byLocalEnable;

		public ushort wDelayTime;

		public byte byLockWorkMode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SENSOR_ALARM
	{
		public uint dwSize;

		public uint dwAbsTime;

		public byte[] byName;

		public byte bySensorChannel;

		public byte byType;

		public byte byAlarmType;

		public byte byAlarmMode;

		public float fValue;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_ALARMINFO
	{
		public uint dwAlarmType;

		public byte[] byAlarmInputNumber;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SWITCH_ALARM
	{
		public uint dwSize;

		public byte[] byName;

		public ushort wSwitchChannel;

		public byte byAlarmType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_ALARMHOST_EXCEPTION_PARAM
	{
		[FieldOffset (0)]
		public uint[] dwUnionSize;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_EXCEPTION_ALARM
	{
		public uint dwSize;

		public uint dwExceptionType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PHONECENTERDIALCFG
	{
		public byte[] sCenterName;

		public byte[] byPhoneNum;

		public byte byRepeatCall;

		public byte byPstnProtocol;

		public byte byDialDelay;

		public byte byPstnTransMode;

		public byte[] byRes1;

		public byte[] byReceiverId;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOSTDIALCFG
	{
		public uint dwSize;

		public NET_DVR_PHONECENTERDIALCFG[] struPhoneCenterParam;

		public ushort wReportPeriod;

		public ushort wFirstReportTime;

		public byte byReportValid;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOSTDIALSETUPMODE
	{
		public uint dwSize;

		public byte byEnableMode;

		public byte byCallType;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PU_CHAN_INFO
	{
		public NET_DVR_IPADDR struIpAddr;

		public ushort wPort;

		public ushort wChannel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PU_CHAN_LIST
	{
		public uint dwSize;

		public uint dwNum;

		public NET_DVR_PU_CHAN_INFO[] struPuChanInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PTZ_CTRL
	{
		public byte byEnable;

		public byte byType;

		public byte byPtzNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARM_CAM_INFO
	{
		public uint dwCamID;

		public uint dwRecordTime;

		public uint dwMonID;

		public uint dwResidentTime;

		public NET_DVR_PTZ_CTRL struPtzCtrl;

		public byte byAlarmOffMode;

		public byte byDevType;

		public byte byDecChan;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARM_CAM_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes;

		public uint dwNum;

		public NET_DVR_ALARM_CAM_INFO[] struAlarmCam;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_AUDIO_ASSOCIATE_ALARM
	{
		public uint dwSize;

		public byte[] byEnterDoor;

		public byte[] byExitDoor;

		public byte[] byAlarmIn;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_UPLOAD_PARAM
	{
		public uint dwSize;

		public byte byUploadType;

		public byte byDataType;

		public byte byDataNum;

		public byte byAudioType;

		public sbyte[] sFileName;

		public unsafe sbyte* lpBuffer;

		public uint dwBufferSize;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DOWNLOAD_PARAM
	{
		public uint dwSize;

		public byte byDownType;

		public byte byDataType;

		public byte byDataNum;

		public byte byRes1;

		public sbyte[] sFileName;

		public unsafe DATADOWNLOAD* lpDataCallBack;

		public unsafe void* pUserData;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_DOWNLOAD_PARAM
	{
		public uint dwSize;

		public byte byDownType;

		public byte byDataType;

		public byte byDataNum;

		public byte byRes1;

		public sbyte[] sFileName;

		public unsafe DATADOWNLOAD* lpDataCallBack;

		public unsafe void* pUserData;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LED_SCREEN_CFG
	{
		public uint dwSize;

		public byte[] sLEDName;

		public byte byTransMode;

		public byte byProtocolType;

		public byte byLEDColor;

		public byte byDataPolarity;

		public byte byOEPolarity;

		public byte byScanMode;

		public byte[] byRes1;

		public ushort wLEDWidth;

		public ushort wLEDHeight;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LED_CONTENT_CFG
	{
		public uint dwSize;

		public byte[] sLEDContent;

		public byte byContentAct;

		public byte byContentSpeed;

		public byte byContentStayTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SWITCH_TIME
	{
		public byte byValid;

		public byte[] byRes;

		public NET_DVR_TIME_EX struTimeOn;

		public NET_DVR_TIME_EX struTimeOff;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LED_SWITCH_TIME
	{
		public uint dwSize;

		public NET_DVR_SWITCH_TIME[] struTimer;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LED_BRIGHTNESS_STEP
	{
		public uint dwSize;

		public byte byValid;

		public byte[] byRes1;

		public byte[] byBrightnessStep;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LED_STATUS
	{
		public uint dwSize;

		public byte bySwitchState;

		public byte byBrightness;

		public byte[] byRes;
	}

	public enum HdDisplayFormat : uint
	{
		Invalid = 0,
		Cvbs = 1,
		Dvi = 2,
		Vga = 4,
		Hdmi = 8,
		YPbPr = 16
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DECCARD_ABILITY
	{
		public byte byCardType;

		public byte byDecNums;

		public byte byDispNums;

		public byte byDecStartIdx;

		public byte byDispStartIdx;

		public byte[] byDispResolution;

		public byte[] byDispFormat;

		public byte[][] byWindowMode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DECODESVR_ABILITY
	{
		public uint dwSize;

		public byte byCardNums;

		public byte byStartChan;

		public byte[] byRes1;

		public NET_DVR_DECCARD_ABILITY[] struDecCardAbility;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_MATRIX_DEV_CHAN_INFO
	{
		public NET_DVR_IPADDR struIP;

		public ushort wDVRPort;

		public byte byChannel;

		public byte byTransProtocol;

		public byte byTransMode;

		public byte byFactoryType;

		public byte byUsedSlotNum;

		public byte bySlotNum;

		public byte[] byRes;

		public byte[] sUserName;

		public byte[] sPassword;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct LPNET_MATRIX_PU_STREAM_CFG
	{
		public uint dwSize;

		public NET_DVR_STREAM_MEDIA_SERVER_CFG struStreamMediaSvrCfg;

		public NET_MATRIX_DEV_CHAN_INFO struDevChanInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIX_CAMERACFG
	{
		public uint dwGlobalIndex;

		public uint dwInterIndex;

		public byte[] sCamName;

		public NET_MATRIX_PU_STREAM_CFG struPuStreamCfg;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIX_CAMERALIST
	{
		public uint dwSize;

		public byte[] byRes;

		public uint dwCamNum;

		public unsafe byte* pBuffer;

		public uint dwBufLen;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DISP_CHAN_INFO
	{
		public NET_DVR_IPADDR struIP;

		public ushort wDVRPort;

		public byte byDispChannel;

		public byte byUsedSlotNum;

		public byte bySlotNum;

		public byte[] byRes;

		public byte[] sUserName;

		public byte[] sPassword;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIX_MONITORCFG
	{
		public uint dwGlobalIndex;

		public uint dwInterIndex;

		public byte[] sMonName;

		public NET_DVR_DISP_CHAN_INFO struDispChanCfg;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIX_MONITORLIST
	{
		public uint dwSize;

		public byte[] byRes;

		public uint dwMonNum;

		public unsafe byte* pBuffer;

		public uint dwBufLen;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SUBMATRIXINFO
	{
		public byte byMainMatrix;

		public byte bySubMatrixSequence;

		public byte byLoginType;

		public byte[] byRes1;

		public NET_DVR_IPADDR struSubMatrixIP;

		public ushort wSubMatrixPort;

		public byte[] byRes2;

		public NET_DVR_IPADDR struSubMatrixIPMask;

		public NET_DVR_IPADDR struGatewayIpAddr;

		public byte[] sUserName;

		public byte[] sPassword;

		public sbyte[] sDomainName;

		public sbyte[] sDnsAddress;

		public byte[] sSerialNumber;

		public byte[] byRes3;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALLUNITEDMATRIXINFO
	{
		public uint dwSize;

		public NET_DVR_SUBMATRIXINFO[] struSubMatrixInfo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIXGATEWAYNOTE
	{
		public ushort wTrunkInToOutAbility;

		public ushort wTrunkOutToInAbility;

		public byte[] byRes;

		public NET_DVR_MATRIXSUBSYSTEMINFO struInputNote;

		public NET_DVR_MATRIXSUBSYSTEMINFO struOutputNote;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIXGATEWAYINFO
	{
		public uint dwSize;

		public NET_DVR_MATRIXGATEWAYNOTE[] struGatewayNote;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIXCODESYSTEMINFO
	{
		public byte byMatrixNum;

		public byte bySubSystemNum;

		public byte byChan;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIXDECODESYSTEMINFO
	{
		public byte byMatrixNum;

		public byte bySubSystemNum;

		public byte byDispChan;

		public byte bySubDispChan;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIXSWITCH
	{
		public NET_DVR_MATRIXCODESYSTEMINFO struInputNote;

		public NET_DVR_MATRIXDECODESYSTEMINFO struOutputNote;

		public byte[] byRes;
	}

	public enum DevType : uint
	{
		EncCard = 0,
		DecCard,
		SdDecCard,
		FpgaCard,
		CsCard,
		AlertorCard,
		Nat0,
		Nat1,
		VcaCard,
		VgaDecCard,
		VgaEncCard,
		ErrCard
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIXSWITCHCTRL
	{
		public uint dwCamId;

		public uint dwMonId;

		public byte bySubWindowNum;

		public byte bySwitchType;

		public ushort wAlarmType;

		public uint dwResidentTime;

		public byte byVcaDevType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIXDATABASE
	{
		public uint dwDevType;

		public uint dwParam;

		public byte byFileType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SUBSYSTEMINFO_V40
	{
		public byte bySubSystemType;

		public byte byChan;

		public byte byLoginType;

		public byte bySlotNum;

		public byte[] byRes1;

		public NET_DVR_IPADDR struSubSystemIP;

		public NET_DVR_IPADDR struSubSystemIPMask;

		public NET_DVR_IPADDR struGatewayIpAddr;

		public ushort wSubSystemPort;

		public byte[] byRes2;

		public byte[] sUserName;

		public byte[] sPassword;

		public sbyte[] sDomainName;

		public sbyte[] sDnsAddress;

		public byte[] sSerialNumber;

		public byte byBelongBoard;

		public byte byInterfaceType;

		public byte byInterfaceNums;

		public byte byInterfaceStartNum;

		public byte[] byDeviceName;

		public byte byAudioChanNums;

		public byte byAudioChanStartNum;

		public byte byAudioChanType;

		public byte[] byRes3;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALLSUBSYSTEMINFO_V40
	{
		public uint dwSize;

		public NET_DVR_SUBSYSTEMINFO_V40[] struSubSystemInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct LPNET_DVR_SINGLESUBSYSTEMJOININFO_V40
	{
		public byte bySubSystemType;

		public byte byConnectStatus;

		public byte byMatrixNum;

		public byte bySubSystemNum;

		public NET_DVR_DECSUBSYSTEMJIONSTATUS[] struDecSub;

		public byte byBindStatus;

		public byte bySlotNum;

		public byte byDecodeAbility;

		public byte byUsedTrunk;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALLDECSUBSYSTEMJOININFO_V40
	{
		public uint dwSize;

		public NET_DVR_SINGLESUBSYSTEMJOININFO_V40[] struSingleSubSystemJoinInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SUBSYSTEM_ABILITY
	{
		public byte bySubSystemType;

		public byte byChanNum;

		public byte byStartChan;

		public byte bySlotNum;

		public byte[] byRes1;

		[StructLayout (LayoutKind.Explicit)]
		public struct StruAbility
		{
			[FieldOffset (0)]
			public byte[] byRes;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruVACSystemAbility
			{
				public byte byDecode;

				public byte byNeedPreAllocDec;

				public byte byVACType;

				public byte[] byRes;
			}


			[FieldOffset (0)]
			public StruVACSystemAbility struVACSystemAbility;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruDecoderSystemAbility
			{
				public byte byVGANums;

				public byte byBNCNums;

				public byte byHDMINums;

				public byte byDVINums;

				public byte byLayerNums;

				public byte bySpartan;

				public byte byDecType;

				public byte byOutputSwitch;

				public byte bySDINums;

				public byte[] byRes1;

				public byte byDecoderType;

				public byte[] byRes2;
			}


			[FieldOffset (0)]
			public StruDecoderSystemAbility struDecoderSystemAbility;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruCoderSystemAbility
			{
				public byte byCoderType;

				public byte byOptical;

				public byte byOpticalSubChan;

				public byte bySupportAVSeparate;

				public byte[] byRes;
			}


			[FieldOffset (0)]
			public StruCoderSystemAbility struCoderSystemAbility;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruInputSystemAbility
			{
				public ushort wTrunkAbility;

				public byte byOpticalFiberNum;

				public byte[] byRes;
			}


			[FieldOffset (0)]
			public StruInputSystemAbility struInputSystemAbility;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruOutputSystemAbility
			{
				public ushort wTrunkAbility;

				public byte byOpticalFiberNum;

				public byte[] byRes;
			}


			[FieldOffset (0)]
			public StruOutputSystemAbility struOutputSystemAbility;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruCodeSpitterSystemAbility
			{
				public byte by485Num;

				public byte bySlotNum;

				public byte[] byRes;
			}


			[FieldOffset (0)]
			public StruCodeSpitterSystemAbility struCodeSpitterSystemAbility;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruAlarmHostSystemAbility
			{
				public ushort wAlarmInNums;

				public ushort wAlarmOutNums;

				public byte[][] byAlarmBoxEnable;

				public byte bySupportContact;

				public byte[] byRes;
			}


			[FieldOffset (0)]
			public StruAlarmHostSystemAbility struAlarmHostSystemAbility;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruInOutputSystemAbility
			{
				public byte byOpticalFiberNum;

				public byte[] byRes1;

				public ushort[] wTrunkAbility;

				public byte[] byRes2;
			}


			[FieldOffset (0)]
			public StruInOutputSystemAbility struInOutputSystemAbility;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruFiberSwitchSystemAbility
			{
				public byte bySupportRingProtocol;

				public byte bySupportRingNums;

				public byte bySupportPortNums;

				public byte[] byRes;

				public uint dwPortSupportRingProto;

				public byte[] byRes2;
			}


			[FieldOffset (0)]
			public StruFiberSwitchSystemAbility struFiberSwitchSystemAbility;
		}


		public StruAbility struAbility;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VIDEOPLATFORM_ABILITY_V40
	{
		public uint dwSize;

		public byte byCodeSubSystemNums;

		public byte byDecodeSubSystemNums;

		public byte bySupportNat;

		public byte byInputSubSystemNums;

		public byte byOutputSubSystemNums;

		public byte byCodeSpitterSubSystemNums;

		public byte byAlarmHostSubSystemNums;

		public byte bySupportBigScreenNum;

		public byte byVCASubSystemNums;

		public byte byV6SubSystemNums;

		public byte byV6DecoderSubSystemNums;

		public byte bySupportBigScreenX;

		public byte bySupportBigScreenY;

		public byte bySupportSceneNums;

		public byte byVcaSupportChanMode;

		public byte bySupportScreenNums;

		public byte bySupportLayerNums;

		public byte byNotSupportPreview;

		public byte byNotSupportStorage;

		public byte byUploadLogoMode;

		public NET_DVR_SUBSYSTEM_ABILITY[] struSubSystemAbility;

		public byte by485Nums;

		public byte by232Nums;

		public byte bySerieStartChan;

		public byte byScreenMode;

		public byte byDevVersion;

		public byte bySupportBaseMapNums;

		public ushort wBaseLengthX;

		public ushort wBaseLengthY;

		public byte bySupportPictureTrans;

		public byte bySupportPreAllocDec;

		public byte bySupportDecAutoManage;

		public byte byTranDevSubSystemNums;

		public byte byFiberSwitchNums;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VIDEOPLATFORM_ABILITY
	{
		public uint dwSize;

		public byte byCodeSubSystemNums;

		public byte byDecodeSubSystemNums;

		public byte bySupportNat;

		public byte byInputSubSystemNums;

		public byte byOutputSubSystemNums;

		public byte byCodeSpitterSubSystemNums;

		public byte byAlarmHostSubSystemNums;

		public byte bySupportBigScreenNum;

		public byte byVCASubSystemNums;

		public byte[] byRes1;

		public NET_DVR_SUBSYSTEM_ABILITY[] struSubSystemAbility;

		public byte by485Nums;

		public byte by232Nums;

		public byte bySerieStartChan;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_HOLIDATE_MODEA
	{
		public byte byStartMonth;

		public byte byStartDay;

		public byte byEndMonth;

		public byte byEndDay;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_HOLIDATE_MODEB
	{
		public byte byStartMonth;

		public byte byStartWeekNum;

		public byte byStartWeekday;

		public byte byEndMonth;

		public byte byEndWeekNum;

		public byte byEndWeekday;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_HOLIDATE_MODEC
	{
		public ushort wStartYear;

		public byte byStartMon;

		public byte byStartDay;

		public ushort wEndYear;

		public byte byEndMon;

		public byte byEndDay;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_HOLIDATE_UNION
	{
		[FieldOffset (0)]
		public uint[] dwSize;

		[FieldOffset (0)]
		public NET_DVR_HOLIDATE_MODEA struModeA;

		[FieldOffset (0)]
		public NET_DVR_HOLIDATE_MODEB struModeB;

		[FieldOffset (0)]
		public NET_DVR_HOLIDATE_MODEC struModeC;
	}

	public enum HoliDateMode : uint
	{
		A = 0,
		B,
		C
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_HOLIDAY_PARAM
	{
		public byte byEnable;

		public byte byDateMode;

		public byte[] byRes1;

		public NET_DVR_HOLIDATE_UNION uHolidate;

		public byte[] byName;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_HOLIDAY_PARAM_CFG
	{
		public uint dwSize;

		public NET_DVR_HOLIDAY_PARAM[] struHolidayParam;

		public uint[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_HOLIDAY_HANDLE
	{
		public uint dwSize;

		public NET_DVR_SCHEDTIME[] struAlarmTime;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_HOLIDAY_HANDLE_COND
	{
		public uint dwSize;

		public uint dwChannel;

		public uint dwSMDHandleType;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_HOLIDAY_RECORD
	{
		public uint dwSize;

		public NET_DVR_RECORDDAY struRecDay;

		public NET_DVR_RECORDSCHED[] struRecordSched;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ONE_LINK
	{
		public NET_DVR_IPADDR struIP;

		public int lChannel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LINK_STATUS
	{
		public uint dwSize;

		public ushort wLinkNum;

		public byte[] byRes1;

		public NET_DVR_ONE_LINK[] struOneLink;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ONE_BONDING
	{
		public byte byMode;

		public byte byUseDhcp;

		public byte byMasterCard;

		public byte byStatus;

		public byte[] byBond;

		public NET_DVR_ETHERNET_V30 struEtherNet;

		public NET_DVR_IPADDR struGatewayIpAddr;

		public byte byEnableDNS;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_NETWORK_BONDING
	{
		public uint dwSize;

		public byte byEnable;

		public byte byNum;

		public byte[] byRes1;

		public NET_DVR_ONE_BONDING[] struOneBond;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DISK_QUOTA
	{
		public byte byQuotaType;

		public byte[] byRes1;

		public ushort wStoragePeriod;

		public uint dwHCapacity;

		public uint dwLCapacity;

		public uint dwHUsedSpace;

		public uint dwLUsedSpace;

		public byte byQuotaRatio;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DISK_QUOTA_CFG
	{
		public uint dwSize;

		public NET_DVR_DISK_QUOTA struPicQuota;

		public NET_DVR_DISK_QUOTA struRecordQuota;

		public NET_DVR_DISK_QUOTA struAddInfoQuota;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TIMING_CAPTURE
	{
		public NET_DVR_JPEGPARA struJpegPara;

		public uint dwPicInterval;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_REL_CAPTURE_CHAN
	{
		public byte[] byChan;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_REL_CAPTURE_CHAN_V40
	{
		public uint dwMaxRelCaptureChanNum;

		public uint[] dwChanNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_EVENT_CAPTURE_V40
	{
		public NET_DVR_JPEGPARA struJpegPara;

		public uint dwPicInterval;

		public NET_DVR_REL_CAPTURE_CHAN_V40[] struRelCaptureChan;

		public NET_DVR_REL_CAPTURE_CHAN_V40[] struAlarmInCapture;

		public uint dwMaxGroupNum;

		public byte byCapTimes;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_EVENT_CAPTURE
	{
		public NET_DVR_JPEGPARA struJpegPara;

		public uint dwPicInterval;

		public NET_DVR_REL_CAPTURE_CHAN[] struRelCaptureChan;

		public NET_DVR_REL_CAPTURE_CHAN[] struAlarmInCapture;

		public byte byCapTimes;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_JPEG_CAPTURE_CFG_V40
	{
		public uint dwSize;

		public NET_DVR_TIMING_CAPTURE struTimingCapture;

		public NET_DVR_EVENT_CAPTURE_V40 struEventCapture;

		public byte byStreamType;

		public byte[] byRes3;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_JPEG_CAPTURE_CFG
	{
		public uint dwSize;

		public NET_DVR_TIMING_CAPTURE struTimingCapture;

		public NET_DVR_EVENT_CAPTURE struEventCapture;

		public byte byStreamType;

		public byte[] byRes3;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CAPTURE_DAY
	{
		public byte byAllDayCapture;

		public byte byCaptureType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CAPTURE_SCHED
	{
		public NET_DVR_SCHEDTIME struCaptureTime;

		public byte byCaptureType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCHED_CAPTURECFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes1;

		public NET_DVR_CAPTURE_DAY[] struCaptureDay;

		public NET_DVR_CAPTURE_SCHED[][] struCaptureSched;

		public NET_DVR_CAPTURE_DAY struCaptureHoliday;

		public NET_DVR_CAPTURE_SCHED[] struHolidaySched;

		public uint dwRecorderDuration;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FLOW_TEST_PARAM
	{
		public uint dwSize;

		public int lCardIndex;

		public uint dwInterval;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FLOW_INFO
	{
		public uint dwSize;

		public uint dwSendFlowSize;

		public uint dwRecvFlowSize;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RECORD_LABEL
	{
		public uint dwSize;

		public NET_DVR_TIME struTimeLabel;

		public byte byQuickAdd;

		public byte[] byRes1;

		public byte[] sLabelName;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LABEL_IDENTIFY
	{
		public byte[] sLabelIdentify;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEL_LABEL_PARAM
	{
		public uint dwSize;

		public byte byMode;

		public byte byRes1;

		public ushort wLabelNum;

		public NET_DVR_LABEL_IDENTIFY[] struIndentify;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MOD_LABEL_PARAM
	{
		public NET_DVR_LABEL_IDENTIFY struIndentify;

		public byte[] byRes1;

		public byte[] sLabelName;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FIND_LABEL
	{
		public uint dwSize;

		public int lChannel;

		public NET_DVR_TIME struStartTime;

		public NET_DVR_TIME struStopTime;

		public byte[] sLabelName;

		public byte byDrawFrame;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FINDLABEL_DATA
	{
		public byte[] sLabelName;

		public NET_DVR_TIME struTimeLabel;

		public NET_DVR_LABEL_IDENTIFY struLabelIdentify;

		public byte[] byRes1;
	}

	public enum CountryIndex : uint
	{
		Nonsupport = 0,
		Cze = 1,
		Fra = 2,
		Deu = 3,
		Esp = 4,
		Ita = 5,
		Nld = 6,
		Pol = 7,
		Svk = 8,
		Blr = 9,
		Mda = 10,
		Rus = 11,
		Ukr = 12,
		Bel = 13,
		Bgr = 14,
		Dnk = 15,
		Fin = 16,
		Gbr = 17,
		Grc = 18,
		Hrv = 19,
		Hun = 20,
		Isr = 21,
		Lux = 22,
		Mkd = 23,
		Nor = 24,
		Prt = 25,
		Rou = 26,
		Srb = 27,
		Aze = 28,
		Geo = 29,
		Kaz = 30,
		Ltu = 31,
		Tkm = 32,
		Uzb = 33,
		Lva = 34,
		Est = 35,
		Alb = 36,
		Aut = 37,
		Bih = 38,
		Irl = 39,
		Isl = 40,
		Vat = 41,
		Mlt = 42,
		Swe = 43,
		Che = 44,
		Cyp = 45,
		Tur = 46,
		Svn = 47,
		Mtg = 48,
		Kov = 49,
		Adr = 50,
		Arm = 51,
		Mon = 52,
		Lie = 53,
		Smo = 54,
		Res1 = 55,
		Res2 = 56,
		Res3 = 57,
		Res4 = 58,
		Chi = 59,
		Ibn = 60,
		Skr = 61,
		Leb = 62,
		Nep = 63,
		Tha = 64,
		Pak = 65,
		Emi = 66,
		Bhu = 67,
		Oma = 68,
		Kor = 69,
		Phi = 70,
		Cam = 71,
		Qat = 72,
		Kyr = 73,
		Mal = 74,
		Mly = 75,
		Mog = 76,
		Ara = 77,
		Bru = 78,
		Lao = 79,
		Jap = 80,
		Res19 = 81,
		Pas = 82,
		Taj = 83,
		Kuw = 84,
		Syr = 85,
		Ind = 86,
		Isa = 87,
		Afg = 88,
		Lan = 89,
		Irq = 90,
		Vie = 91,
		Ira = 92,
		Yem = 93,
		Jor = 94,
		Bur = 95,
		Sik = 96,
		Ban = 97,
		Sga = 98,
		Eat = 99,
		Res5 = 100,
		Res6 = 101,
		Res7 = 102,
		Res8 = 103,
		Egt = 104,
		Liy = 105,
		Sua = 106,
		Tun = 107,
		Alg = 108,
		Mcc = 109,
		Eth = 110,
		Eri = 111,
		Sde = 112,
		Dji = 113,
		Ken = 114,
		Tai = 115,
		Uga = 116,
		Rwa = 117,
		Bud = 118,
		Sey = 119,
		Cha = 120,
		Cea = 121,
		Con = 122,
		Eqg = 123,
		Gab = 124,
		Tco = 125,
		Drc = 126,
		Stp = 127,
		Man = 128,
		Wsa = 129,
		Sel = 130,
		Tga = 131,
		Mai = 132,
		Buf = 133,
		Gui = 134,
		Gub = 135,
		Cav = 136,
		Sle = 137,
		Lir = 138,
		Ivc = 139,
		Gha = 140,
		Tgo = 141,
		Ben = 142,
		Nig = 143,
		Zab = 144,
		Ang = 145,
		Zbe = 146,
		Maw = 147,
		Moq = 148,
		Bot = 149,
		Nam = 150,
		Saf = 151,
		Swd = 152,
		Les = 153,
		Mag = 154,
		Uoc = 155,
		Mat = 156,
		Nge = 157,
		Ssd = 158,
		Sah = 159,
		Myt = 160,
		Ren = 161,
		Cai = 162,
		Azo = 163,
		Mad = 164,
		Res9 = 165,
		Res10 = 166,
		Res11 = 167,
		Res12 = 168,
		Cad = 169,
		Gre = 170,
		Pie = 171,
		Usa = 172,
		Ber = 173,
		Mex = 174,
		Gua = 175,
		Bli = 176,
		Sar = 177,
		Hor = 178,
		Nic = 179,
		Cor = 180,
		Pan = 181,
		Tbm = 182,
		Tci = 183,
		Cub = 184,
		Jam = 185,
		Cay = 186,
		Hat = 187,
		Tdo = 188,
		Pur = 189,
		Vil = 190,
		Bvi = 191,
		Atv = 192,
		Anb = 193,
		Csm = 194,
		Acy = 195,
		Sby = 196,
		Skn = 197,
		Mot = 198,
		Glp = 199,
		Dom = 200,
		Mte = 201,
		Luc = 202,
		Svg = 203,
		Grd = 204,
		Bar = 205,
		Trt = 206,
		Cur = 207,
		Arb = 208,
		Nea = 209,
		Col = 210,
		Ven = 211,
		Guy = 212,
		Sur = 213,
		Frn = 214,
		Ecu = 215,
		Per = 216,
		Bol = 217,
		Par = 218,
		Cle = 219,
		Bra = 220,
		Ugy = 221,
		Arg = 222,
		Res13 = 223,
		Res14 = 224,
		Res15 = 225,
		Res16 = 226,
		Atn = 227,
		Ned = 228,
		Png = 229,
		San = 230,
		Vau = 231,
		Ncn = 232,
		Pau = 233,
		Fsm = 234,
		Mri = 235,
		Cnm = 236,
		Teg = 237,
		Nur = 238,
		Kib = 239,
		Fid = 240,
		Tng = 241,
		Tuv = 242,
		Wef = 243,
		Tis = 244,
		Eas = 245,
		Toe = 246,
		Nue = 247,
		Tcd = 248,
		Pfp = 249,
		Pid = 250,
		Haw = 251,
		Res17 = 252,
		Res18 = 253,
		Unrecognized = 254,
		All = 255
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FIND_PICTURE_PARAM
	{
		public uint dwSize;

		public int lChannel;

		public byte byFileType;

		public byte byNeedCard;

		public byte byProvince;

		public byte byRes;

		public byte[] sCardNum;

		public NET_DVR_TIME struStartTime;

		public NET_DVR_TIME struStopTime;

		public uint dwTrafficType;

		public uint dwVehicleType;

		public uint dwIllegalType;

		public byte byLaneNo;

		public byte bySubHvtType;

		public byte[] byRes2;

		public sbyte[] sLicense;

		public byte byRegion;

		public byte byCountry;

		public byte[] byRes3;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FIND_PICTURE
	{
		public sbyte[] sFileName;

		public NET_DVR_TIME struTime;

		public uint dwFileSize;

		public sbyte[] sCardNum;

		public byte byPlateColor;

		public byte byVehicleLogo;

		public byte byEventSearchStatus;

		public byte byRecogResult;

		public sbyte[] sLicense;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BACKUP_PICTURE_PARAM
	{
		public uint dwSize;

		public uint dwPicNum;

		public NET_DVR_FIND_PICTURE[] struPicture;

		public byte[] byDiskDes;

		public byte byWithPlayer;

		public byte byContinue;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_COMPRESSION_LIMIT
	{
		public uint dwSize;

		public uint dwChannel;

		public byte byCompressType;

		public byte[] byRes;

		public NET_DVR_COMPRESSIONCFG_V30 struCurrentCfg;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VIDEO_EFFECT
	{
		public uint dwBrightValue;

		public uint dwContrastValue;

		public uint dwSaturationValue;

		public uint dwHueValue;

		public uint dwSharpness;

		public uint dwDenoising;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VIDEO_INPUT_EFFECT
	{
		public uint dwSize;

		public ushort wEffectMode;

		public byte[] byRes1;

		public NET_DVR_VIDEO_EFFECT struVideoEffect;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VIDEOPARA_V40
	{
		public uint dwChannel;

		public uint dwVideoParamType;

		public uint dwVideoParamValue;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEFAULT_VIDEO_COND
	{
		public uint dwSize;

		public uint dwChannel;

		public uint dwVideoMode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ENCODE_JOINT_PARAM
	{
		public uint dwSize;

		public byte byJointed;

		public byte byDevType;

		public byte[] byRes1;

		public NET_DVR_IPADDR struIP;

		public ushort wPort;

		public ushort wChannel;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VCA_CHAN_WORKSTATUS
	{
		public byte byJointed;

		public byte[] byRes1;

		public NET_DVR_IPADDR struIP;

		public ushort wPort;

		public ushort wChannel;

		public byte byVcaChanStatus;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VCA_DEV_WORKSTATUS
	{
		public uint dwSize;

		public byte byDeviceStatus;

		public byte byCpuLoad;

		public NET_DVR_VCA_CHAN_WORKSTATUS[] struVcaChanStatus;

		public uint[] dwRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VGA_DISP_CHAN_CFG_V40
	{
		public uint dwSize;

		public byte byAudio;

		public byte byAudioWindowIdx;

		public byte byVgaResolution;

		public byte byVedioFormat;

		public uint dwWindowMode;

		public byte[] byJoinDecChan;

		public byte byEnlargeStatus;

		public byte byEnlargeSubWindowIndex;

		public byte byScale;

		public byte byUnionType;

		[StructLayout (LayoutKind.Explicit)]
		public struct StruDiff
		{
			[FieldOffset (0)]
			public byte[] byRes;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruVideoPlatform
			{
				public byte[] byJoinDecoderId;

				public byte byDecResolution;

				public byte[] byRes;
			}


			[FieldOffset (0)]
			public StruVideoPlatform struVideoPlatform;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruNotVideoPlatform
			{
				public byte[] byRes;
			}


			[FieldOffset (0)]
			public StruNotVideoPlatform struNotVideoPlatform;
		}


		public StruDiff struDiff;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_V6SUBSYSTEMPARAM
	{
		public byte bySerialTrans;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CORRECT_DEADPIXEL_PARAM
	{
		public uint dwSize;

		public uint dwCommand;

		public uint dwDeadPixelX;

		public uint dwDeadPixelY;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CORRECT_PARAMS
	{
		public byte byYellowIntervalTime;

		public byte byDigTrafficLight;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_REDAREACFG
	{
		public uint dwSize;

		public uint dwCorrectEnable;

		public uint dwCorrectLevel;

		public uint dwAreaNum;

		public NET_VCA_RECT[] struLaneRect;

		public NET_DVR_CORRECT_PARAMS[] struCorrectParam;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_HISTORICDATACFG
	{
		public uint dwSize;

		public uint dwTotalNum;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INQUEST_ROOM
	{
		public byte byRoomIndex;

		public byte byFileType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INQUEST_MESSAGE
	{
		public sbyte[] sMessage;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INQUEST_SENSOR_DEVICE
	{
		public ushort wDeviceType;

		public ushort wDeviceAddr;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INQUEST_SENSOR_INFO
	{
		public NET_DVR_INQUEST_SENSOR_DEVICE[] struSensorDevice;

		public uint dwSupportPro;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INQUEST_ROOM_INFO
	{
		public sbyte[] szCDName;

		[StructLayout (LayoutKind.Explicit)]
		public struct UCalcMode
		{
			[FieldOffset (0)]
			public byte byBitRate;

			[FieldOffset (0)]
			public byte byInquestTime;
		}


		public UCalcMode uCalcMode;

		public byte byCalcType;

		public byte byAutoDelRecord;

		public byte byAlarmThreshold;

		public byte byInquestChannelResolution;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INQUEST_SYSTEM_INFO
	{
		public uint dwRecordMode;

		public uint dwWorkMode;

		public uint dwResolutionMode;

		public NET_DVR_INQUEST_SENSOR_INFO struSensorInfo;

		public NET_DVR_INQUEST_ROOM_INFO[] struInquestRoomInfo;

		public byte byEnableHashCheck;

		public byte byEnableInitCD;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INQUEST_RESUME_SEGMENT
	{
		public NET_DVR_TIME struStartTime;

		public NET_DVR_TIME struStopTime;

		public byte byRoomIndex;

		public byte byDriveIndex;

		public ushort wSegmetSize;

		public uint dwSegmentNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INQUEST_RESUME_EVENT
	{
		public uint dwResumeNum;

		public NET_DVR_INQUEST_RESUME_SEGMENT[] struResumeSegment;

		public byte byResumeMode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INQUEST_DEVICE_VERSION
	{
		public byte byMainVersion;

		public byte bySubVersion;

		public byte byUpgradeVersion;

		public byte byCustomizeVersion;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DISK_RAID_INFO
	{
		public uint dwSize;

		public byte byEnable;

		public byte bySleepStatus;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SYNCHRONOUS_IPC
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IPC_PASSWD
	{
		public uint dwSize;

		public sbyte[] sOldPasswd;

		public sbyte[] sNewPasswd;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEVICE_NET_USING_INFO
	{
		public uint dwSize;

		public uint dwPreview;

		public uint dwPlayback;

		public uint dwIPCModule;

		public uint dwNetDiskRW;

		public byte[] res;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IPC_NETCFG
	{
		public uint dwSize;

		public NET_DVR_IPADDR struIP;

		public ushort wPort;

		public sbyte[] res;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TIME_LOCK
	{
		public uint dwSize;

		public NET_DVR_TIME strBeginTime;

		public NET_DVR_TIME strEndTime;

		public uint dwChannel;

		public uint dwRecordType;

		public uint dwLockDuration;

		public NET_DVR_TIME_EX strUnlockTimePoint;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LOCK_RETURN
	{
		public uint dwSize;

		public NET_DVR_TIME strBeginTime;

		public NET_DVR_TIME strEndTime;

		public byte[] byRes;
	}

	public enum NetSdkUploadType : uint
	{
		UpgradeCertFile = 0,
		UploadCertFile = 1,
		TrialCertFile = 2,
		ConfigurationFile = 3,
		UploadRecordFile = 4,
		SceneConfigurationFile = 5,
		UploadPictureFile = 6,
		UploadViolationFile = 7,
		UploadTgFile = 8,
		UploadDataToDb = 9,
		UploadBackgroundPic = 10,
		UploadCalibrationFile = 11,
		UploadTmeFile = 12,
		UploadVehicleBlackwhitelstFile = 13,
		UploadPictureToCloud = 15,
		UploadVideoFile = 16,
		UploadScreenFile = 17,
		UploadPublishMaterial = 18,
		UploadPublishUpgradeFile = 19,
		UploadRingFile = 20,
		UploadEncryptCert = 21,
		UploadThermometricFile = 22,
		UploadSubbrandFile = 23,
		UploadLedCheckFile = 24,
		BatchUploadPictureFile = 25,
		UploadEdidCfgFile = 26,
		UploadPanoramicStitch = 27,
		UploadAudioFile = 29
	}

	public enum NetSdkDownloadType : uint
	{
		SdkDownloadCert = 0,
		SdkDownloadIpcCfgFile = 1,
		SdkDownloadBaselineScenePic = 2,
		SdkDownloadVqdAlarmPic = 3,
		SdkDownloadConfigurationFile = 4,
		SdkDownloadSceneConfigurationFile = 5,
		SdkDownloadFileFormDb = 6,
		SdkDownloadTmeFile = 7,
		SdkDownloadVehicleBlackwhitelstFile = 8,
		SdkDownloadGuidFile = 9,
		SdkDownloadFileFormCloud = 10,
		SdkDownloadPicture = 11,
		SdkDownloadVideo = 12,
		DvrDownloadScreenFile = 13,
		SdkDownloadPublishMaterial = 14,
		SdkDownloadThermometricFile = 15,
		SdkDownloadLedCheckFile = 16,
		SdkDownloadVehicleInformation = 17
	}

	public enum NetSdkDownloadStatus : uint
	{
		Success = 1,
		Processing,
		Failed,
		UnkownError
	}

	public enum NetSdkDownloadControlTypeEnum
	{
		Err = -1,
		Qos = 1
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PANORAMIC_STITCH_UPLOAD
	{
		public uint dwSize;

		public uint dwChannel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BONJOUR_CFG
	{
		public uint dwSize;

		public byte byEnableBonjour;

		public byte[] byRes1;

		public byte[] byFriendlyName;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SOCKS_CFG
	{
		public uint dwSize;

		public byte byEnableSocks;

		public byte byVersion;

		public ushort wProxyPort;

		public byte[] byProxyaddr;

		public byte[] byUserName;

		public byte[] byPassword;

		public byte[] byLocalAddr;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_QOS_CFG
	{
		public uint dwSize;

		public byte byManageDscp;

		public byte byAlarmDscp;

		public byte byVideoDscp;

		public byte byAudioDscp;

		public byte byFlag;

		public byte byEnable;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_HTTPS_CFG
	{
		public uint dwSize;

		public ushort wHttpsPort;

		public byte byEnable;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CERT_NAME
	{
		public byte[] byCountry;

		public byte[] byState;

		public byte[] byLocality;

		public byte[] byOrganization;

		public byte[] byUnit;

		public byte[] byCommonName;

		public byte[] byEmail;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CERT_PARAM
	{
		public uint dwSize;

		public ushort wCertFunc;

		public ushort wCertType;

		public byte byFileType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CERT_INFO
	{
		public uint dwSize;

		public NET_DVR_CERT_PARAM struCertParam;

		public uint dwValidDays;

		public byte[] byPasswd;

		public NET_DVR_CERT_NAME struCertName;

		public NET_DVR_CERT_NAME struIssuerName;

		public NET_DVR_TIME_EX struBeginTime;

		public NET_DVR_TIME_EX struEndTime;

		public byte[] serialNumber;

		public byte byVersion;

		public byte byKeyAlgorithm;

		public byte byKeyLen;

		public byte bySignatureAlgorithm;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CHANS_RECORD_STATUS
	{
		public byte byValid;

		public byte byRecord;

		public ushort wChannelNO;

		public uint dwRelatedHD;

		public byte byOffLineRecord;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IP_ALARM_GROUP_NUM
	{
		public uint dwSize;

		public uint dwIPAlarmInGroup;

		public uint dwIPAlarmInNum;

		public uint dwIPAlarmOutGroup;

		public uint dwIPAlarmOutNum;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CHAN_GROUP_RECORD_STATUS
	{
		public uint dwSize;

		public NET_DVR_CHANS_RECORD_STATUS[] struChanStatus;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RECTCFG
	{
		public ushort wXCoordinate;

		public ushort wYCoordinate;

		public ushort wWidth;

		public ushort wHeight;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WINCFG
	{
		public uint dwSize;

		public byte byVaild;

		public byte byInputIdx;

		public byte byLayerIdx;

		public byte byTransparency;

		public NET_DVR_RECTCFG struWin;

		public ushort wScreenHeight;

		public ushort wScreenWidth;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALLWINCFG
	{
		public uint dwSize;

		public NET_DVR_WINCFG[] struWinCfg;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCREENZOOM
	{
		public uint dwSize;

		public uint dwScreenNum;

		public NET_DVR_POINT_FRAME struPointFrame;

		public byte byLayer;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_MATRIX_CAMERAINFO
	{
		public uint dwGlobalCamId;

		public byte[] sCamName;

		public uint dwMatrixId;

		public uint dwLocCamId;

		public byte byValid;

		public byte byPtzCtrl;

		public byte byUseType;

		public byte byUsedByTrunk;

		public byte byTrunkReq;

		public byte[] byRes1;

		public NET_DVR_TIME struInstallTime;

		public byte[] sPurpose;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_MATRIX_MONITORINFO
	{
		public uint dwGloalMonId;

		public byte[] sMonName;

		public uint dwMatrixId;

		public uint dwLocalMonId;

		public byte byValid;

		public byte byTrunkType;

		public byte byUsedByTrunk;

		public byte byTrunkReq;

		public NET_DVR_TIME struInstallTime;

		public byte[] sPurpose;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_MATRIX_DIGITALMATRIX
	{
		public NET_DVR_IPADDR struAddress;

		public ushort wPort;

		public byte byNicNum;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_MATRIX_ANALOGMATRIX
	{
		public byte bySerPortNum;

		public byte byMatrixSerPortType;

		public byte[] byRes1;

		public NET_DVR_SINGLE_RS232 struRS232;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_MATRIX_UNION
	{
		[FieldOffset (0)]
		public NET_MATRIX_DIGITALMATRIX struDigitalMatrix;

		[FieldOffset (0)]
		public NET_MATRIX_ANALOGMATRIX struAnalogMatrix;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_MATRIX_MATRIXINFO
	{
		public uint dwSize;

		public uint dwMatrixId;

		public byte[] sDevName;

		public byte byCtrlType;

		public byte byProtocolType;

		public byte[] byRes1;

		public NET_MATRIX_UNION struMatrixUnion;

		public uint dwMaxPortsIn;

		public uint dwMaxPortsOut;

		public byte[] sUserName;

		public byte[] sPassword;

		public NET_DVR_TIME struInstallTime;

		public byte[] sPurpose;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIXLIST
	{
		public uint dwSize;

		public byte[] byRes;

		public uint dwMatrixNum;

		public unsafe byte* pBuffer;

		public uint dwBufLen;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_MATRIX_UARTPARAM
	{
		public uint dwSize;

		public byte[] byPortName;

		public ushort wUserId;

		public byte byPortType;

		public byte byFuncType;

		public byte byProtocolType;

		public byte byBaudRate;

		public byte byDataBits;

		public byte byStopBits;

		public byte byParity;

		public byte byFlowCtrl;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_MATRIX_USERPARAM
	{
		public uint dwSize;

		public byte[] sUserName;

		public byte[] sPassword;

		public byte byRole;

		public byte byLevel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_MATRIX_RESOURCEGROUPPARAM
	{
		public uint dwSize;

		public byte[] byGroupName;

		public byte byGroupType;

		public byte byRes1;

		public ushort wMemNum;

		public uint[] dwGlobalId;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_MATRIX_USERGROUPPARAM
	{
		public uint dwSize;

		public byte[] sGroupName;

		public ushort[] wUserMember;

		public ushort[] wResorceGroupMember;

		public byte[] byPermission;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_MATRIX_TRUNKPARAM
	{
		public uint dwSize;

		public uint dwTrunkId;

		public byte[] sTrunkName;

		public uint dwSrcMonId;

		public uint dwDstCamId;

		public byte byTrunkType;

		public byte byAbility;

		public byte bySubChan;

		public byte byLevel;

		public ushort wReserveUserID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIX_TRUNKLIST
	{
		public uint dwSize;

		public byte[] byRes;

		public uint dwTrunkNum;

		public unsafe byte* pBuffer;

		public uint dwBufLen;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct LPNET_DVR_PROTO_TYPE_EX
	{
		public ushort wType;

		public ushort wCommunitionType;

		public byte[] byDescribe;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIXMANAGE_ABILITY
	{
		public uint dwSize;

		public uint dwMaxCameraNum;

		public uint dwMaxMonitorNum;

		public ushort wMaxMatrixNum;

		public ushort wMaxSerialNum;

		public ushort wMaxUser;

		public ushort wMaxResourceArrayNum;

		public ushort wMaxUserArrayNum;

		public ushort wMaxTrunkNum;

		public byte nStartUserNum;

		public byte nStartUserGroupNum;

		public byte nStartResourceGroupNum;

		public byte nStartSerialNum;

		public uint dwMatrixProtoNum;

		public NET_DVR_PROTO_TYPE_EX[] struMatrixProto;

		public uint dwKeyBoardProtoNum;

		public NET_DVR_PROTO_TYPE_EX[] struKeyBoardProto;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_SINGLE_FACESNAPCFG
	{
		public byte byActive;

		public byte byAutoROIEnable;

		public byte[] byRes;

		public NET_VCA_SIZE_FILTER struSizeFilter;

		public NET_VCA_POLYGON struVcaPolygon;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_FACESNAPCFG
	{
		public uint dwSize;

		public byte bySnapTime;

		public byte bySnapInterval;

		public byte bySnapThreshold;

		public byte byGenerateRate;

		public byte bySensitive;

		public byte byReferenceBright;

		public byte byMatchType;

		public byte byMatchThreshold;

		public NET_DVR_JPEGPARA struPictureParam;

		public NET_VCA_SINGLE_FACESNAPCFG[] struRule;

		public ushort wFaceExposureMinDuration;

		public byte byFaceExposureMode;

		public byte byBackgroundPic;

		public uint dwValidFaceTime;

		public uint dwUploadInterval;

		public uint dwFaceFilteringTime;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FIRMWARE_VERSION_IFNO
	{
		public uint dwSize;

		public sbyte[] szFirmwareVersion;

		public byte[] byRes2;
	}

	public enum HumanAgeGroupEnum : uint
	{
		Infant = 1,
		Child = 2,
		Youngster = 3,
		Adolescent = 4,
		Youth = 5,
		Prime = 6,
		Midlife = 7,
		Midage = 8,
		Old = 9
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_FACESNAP_RESULT
	{
		public uint dwSize;

		public uint dwRelativeTime;

		public uint dwAbsTime;

		public uint dwFacePicID;

		public uint dwFaceScore;

		public NET_VCA_TARGET_INFO struTargetInfo;

		public NET_VCA_RECT struRect;

		public NET_VCA_DEV_INFO struDevInfo;

		public uint dwFacePicLen;

		public uint dwBackgroundPicLen;

		public byte bySmart;

		public byte byAlarmEndMark;

		public byte byRepeatTimes;

		public byte byRes;

		public NET_VCA_HUMAN_FEATURE struFeature;

		public float fStayDuration;

		public sbyte[] sStorageIP;

		public ushort wStoragePort;

		public byte[] byRes1;

		public unsafe byte* pBuffer1;

		public unsafe byte* pBuffer2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_SUB_PROCIMG_V50
	{
		public uint dwImageLen;

		public uint dwFaceScore;

		public NET_VCA_RECT struVcaRect;

		public NET_VCA_POINT struLeftEyePoint;

		public NET_VCA_POINT struRightEyePoint;

		public byte byDistance;

		public byte bySex;

		public byte byAgeGroup;

		public byte byEyeGlass;

		public NET_VCA_RECT struPosRect;

		public byte[] byRes;

		public unsafe byte* pImage;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FACE_DETECTION
	{
		public uint dwSize;

		public uint dwRelativeTime;

		public uint dwAbsTime;

		public uint dwBackgroundPicLen;

		public NET_VCA_DEV_INFO struDevInfo;

		public NET_VCA_RECT[] struFacePic;

		public byte byFacePicNum;

		public byte[] byRes;

		public unsafe byte* pBackgroundPicpBuffer;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_FD_PROCIMG_RESULT_V50
	{
		public uint dwSize;

		public uint dwImageId;

		public byte[] byRes;

		public uint dwSubImageNum;

		public NET_VCA_SUB_PROCIMG_V50[] struProcImg;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEFOCUS_ALARM
	{
		public uint dwSize;

		public NET_VCA_DEV_INFO struDevInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_AUDIOEXCEPTION_ALARM
	{
		public uint dwSize;

		public byte byAlarmType;

		public byte byRes1;

		public ushort wAudioDecibel;

		public NET_VCA_DEV_INFO struDevInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_BUTTON_DOWN_EXCEPTION_ALARM
	{
		public uint dwSize;

		public NET_VCA_DEV_INFO struDevInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_FD_IMAGE_CFG
	{
		public uint dwWidth;

		public uint dwHeight;

		public uint dwImageLen;

		public byte[] byRes;

		public unsafe byte* pImage;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_FD_PROCIMG_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte bySensitivity;

		public byte[] byRes1;

		public NET_VCA_SIZE_FILTER struSizeFilter;

		public NET_VCA_POLYGON struPolygon;

		public NET_VCA_FD_IMAGE_CFG struFDImage;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_SUB_PROCIMG
	{
		public uint dwImageLen;

		public uint dwFaceScore;

		public NET_VCA_RECT struVcaRect;

		public byte[] byRes;

		public unsafe byte* pImage;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_FD_PROCIMG_RESULT
	{
		public uint dwSize;

		public uint dwImageId;

		public byte[] byRes;

		public uint dwSubImageNum;

		public NET_VCA_SUB_PROCIMG[] struProcImg;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_PICMODEL_RESULT
	{
		public uint dwImageLen;

		public uint dwModelLen;

		public byte[] byRes;

		public unsafe byte* pImage;

		public unsafe byte* pModel;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_REGISTER_PIC
	{
		public uint dwImageID;

		public uint dwFaceScore;

		public NET_VCA_RECT struVcaRect;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_AREAINFOCFG
	{
		public ushort wNationalityID;

		public ushort wProvinceID;

		public ushort wCityID;

		public ushort wCountyID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_HUMAN_ATTRIBUTE
	{
		public byte bySex;

		public byte byCertificateType;

		public byte[] byBirthDate;

		public byte[] byName;

		public NET_DVR_AREAINFOCFG struNativePlace;

		public byte[] byCertificateNumber;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_HUMANATTRIBUTE_COND
	{
		public byte bySex;

		public byte byCertificateType;

		public byte[] byStartBirthDate;

		public byte[] byEndBirthDate;

		public byte[] byName;

		public NET_DVR_AREAINFOCFG struNativePlace;

		public byte[] byCertificateNumber;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_BLACKLIST_INFO
	{
		public uint dwSize;

		public uint dwRegisterID;

		public uint dwGroupNo;

		public byte byType;

		public byte byLevel;

		public byte[] byRes1;

		public NET_VCA_HUMAN_ATTRIBUTE struAttribute;

		public byte[] byRemark;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_BLACKLIST_PARA
	{
		public uint dwSize;

		public NET_VCA_BLACKLIST_INFO struBlackListInfo;

		public uint dwRegisterPicNum;

		public NET_VCA_PICMODEL_RESULT[] struRegisterPic;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_BLACKLIST_COND
	{
		public int lChannel;

		public uint dwGroupNo;

		public byte byType;

		public byte byLevel;

		public byte[] byRes1;

		public NET_VCA_HUMAN_ATTRIBUTE struAttribute;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_BLACKLIST_PIC
	{
		public uint dwSize;

		public uint dwFacePicNum;

		public byte[] byRes;

		public NET_VCA_PICMODEL_RESULT[] struBlackListPic;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_FIND_PICTURECOND
	{
		public int lChannel;

		public NET_DVR_TIME struStartTime;

		public NET_DVR_TIME struStopTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_SUB_SNAPPIC_DATA
	{
		public uint dwFacePicID;

		public uint dwFacePicLen;

		public NET_DVR_TIME struSnapTime;

		public uint dwSimilarity;

		public byte[] byRes;

		public sbyte[] sPicBuf;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_ADVANCE_FIND
	{
		public uint dwFacePicID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_NORMAL_FIND
	{
		public uint dwImageID;

		public uint dwFaceScore;

		public NET_VCA_RECT struVcaRect;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_VCA_FIND_SNAPPIC_UNION
	{
		[FieldOffset (0)]
		public NET_VCA_NORMAL_FIND struNormalFind;

		[FieldOffset (0)]
		public NET_VCA_ADVANCE_FIND struAdvanceFind;
	}

	public enum VcaFindSnappicType : uint
	{
		NormalFind = 0,
		AdvanceFind = 1
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_FIND_PICTURECOND_ADVANCE
	{
		public int lChannel;

		public NET_DVR_TIME struStartTime;

		public NET_DVR_TIME struStopTime;

		public byte byThreshold;

		public byte[] byRes;

		public VcaFindSnappicType dwFindType;

		public NET_VCA_FIND_SNAPPIC_UNION uFindParam;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_FACESNAP_INFO_ALARM
	{
		public uint dwRelativeTime;

		public uint dwAbsTime;

		public uint dwSnapFacePicID;

		public uint dwSnapFacePicLen;

		public NET_VCA_DEV_INFO struDevInfo;

		public byte[] byRes;

		public unsafe byte* pBuffer1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_BLACKLIST_INFO_ALARM
	{
		public NET_VCA_BLACKLIST_INFO struBlackListInfo;

		public uint dwBlackListPicLen;

		public byte[] byRes;

		public unsafe byte* pBuffer1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_FACESNAP_MATCH_ALARM
	{
		public uint dwSize;

		public float fSimilarity;

		public NET_VCA_FACESNAP_INFO_ALARM struSnapInfo;

		public NET_VCA_BLACKLIST_INFO_ALARM struBlackListInfo;

		public sbyte[] sStorageIP;

		public ushort wStoragePort;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_BLACKLIST_INFO_ALARM_LOG
	{
		public NET_VCA_BLACKLIST_INFO struBlackListInfo;

		public uint dwBlackListPicID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_FACESNAP_INFO_ALARM_LOG
	{
		public uint dwRelativeTime;

		public uint dwAbsTime;

		public uint dwSnapFacePicID;

		public NET_VCA_DEV_INFO struDevInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_FACESNAP_MATCH_ALARM_LOG
	{
		public uint dwSize;

		public float fSimilarity;

		public NET_VCA_FACESNAP_INFO_ALARM_LOG struSnapInfoLog;

		public NET_VCA_BLACKLIST_INFO_ALARM_LOG struBlackListInfoLog;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_FACEMATCH_PICCOND
	{
		public uint dwSize;

		public uint dwSnapFaceID;

		public uint dwBlackListID;

		public uint dwBlackListFaceID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_FACEMATCH_PICTURE
	{
		public uint dwSize;

		public uint dwSnapFaceLen;

		public uint dwBlackListFaceLen;

		public byte[] byRes;

		public unsafe byte* pSnapFace;

		public unsafe byte* pBlackListFace;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_BLACKLIST_FASTREGISTER_PARA
	{
		public uint dwSize;

		public NET_VCA_BLACKLIST_INFO struBlackListInfo;

		public uint dwImageLen;

		public byte[] byRes;

		public unsafe byte* pImage;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_SINGLE_PATH
	{
		public byte byActive;

		public byte byType;

		public byte bySaveAlarmPic;

		public byte[] byRes1;

		public uint dwDiskDriver;

		public uint dwLeftSpace;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_SAVE_PATH_CFG
	{
		public uint dwSize;

		public NET_VCA_SINGLE_PATH[] struPathInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEV_ACCESS_CFG
	{
		public uint dwSize;

		public NET_DVR_IPADDR struIP;

		public ushort wDevicePort;

		public byte byEnable;

		public byte byRes1;

		public byte[] sUserName;

		public byte[] sPassword;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DISPWINDOWMODE
	{
		public byte byDispChanType;

		public byte byDispChanSeq;

		public byte[] byRes;

		public byte[] byDispMode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DISPINFO
	{
		public byte byChanNums;

		public byte byStartChan;

		public byte[] byRes;

		public uint[] dwSupportResolution;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCREENINFO
	{
		public byte bySupportBigScreenNums;

		public byte byStartBigScreenNum;

		public byte byMaxScreenX;

		public byte byMaxScreenY;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SDI_INFO
	{
		public byte byChanNums;

		public byte byStartChan;

		public byte[] byRes;

		public uint[] dwSupportResolution;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIX_ABILITY_V41
	{
		public uint dwSize;

		public byte byDspNums;

		public byte byDecChanNums;

		public byte byStartChan;

		public byte[] byRes1;

		public NET_DVR_DISPINFO struVgaInfo;

		public NET_DVR_DISPINFO struBncInfo;

		public NET_DVR_DISPINFO struHdmiInfo;

		public NET_DVR_DISPINFO struDviInfo;

		public NET_DVR_DISPWINDOWMODE[] struDispMode;

		public NET_DVR_SCREENINFO struBigScreenInfo;

		public byte bySupportAutoReboot;

		public byte[] byRes2;

		public NET_DVR_SDI_INFO struSDIInfo;

		public byte[] byRes3;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct LPNET_DVR_VIDEO_PLATFORM
	{
		[FieldOffset (0)]
		public byte[] byRes;

		[StructLayout (LayoutKind.Sequential)]
		public struct StruVideoPlatform
		{
			public byte[] byJoinDecoderId;

			public byte[] byDecResolution;

			public NET_DVR_RECTCFG struPosition;

			public byte[] byRes;
		}


		[FieldOffset (0)]
		public StruVideoPlatform struVideoPlatform;

		[StructLayout (LayoutKind.Sequential)]
		public struct StruNotVideoPlatform
		{
			public byte[] byRes;
		}


		[FieldOffset (0)]
		public StruNotVideoPlatform struNotVideoPlatform;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIX_VOUTCFG
	{
		public uint dwSize;

		public byte byAudio;

		public byte byAudioWindowIdx;

		public byte byDispChanType;

		public byte byVedioFormat;

		public uint dwResolution;

		public uint dwWindowMode;

		public byte[] byJoinDecChan;

		public byte byEnlargeStatus;

		public byte byEnlargeSubWindowIndex;

		public byte byScale;

		public byte byUnionType;

		public NET_DVR_VIDEO_PLATFORM struDiff;

		public uint dwDispChanNum;

		public ushort wLEDWidth;

		public ushort wLEDHeight;

		public byte byEnableVideoEffect;

		public byte[] byRes;

		public NET_DVR_VIDEOEFFECT struVideoEffect;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DISP_CHAN_STATUS_V41
	{
		public byte byDispStatus;

		public byte byBVGA;

		public byte byVideoFormat;

		public byte byWindowMode;

		public byte[] byJoinDecChan;

		public byte[] byFpsDisp;

		public byte byScreenMode;

		public byte[] byRes1;

		public uint dwDispChan;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DECODER_WORK_STATUS_V41
	{
		public uint dwSize;

		public NET_DVR_MATRIX_CHAN_STATUS[] struDecChanStatus;

		public NET_DVR_DISP_CHAN_STATUS_V41[] struDispChanStatus;

		public byte[] byAlarmInStatus;

		public byte[] byAlarmOutStatus;

		public byte byAudioInChanStatus;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIX_DEC_REMOTE_PLAY_V41
	{
		public uint dwSize;

		public NET_DVR_IPADDR struIP;

		public ushort wDVRPort;

		public byte byChannel;

		public byte byReserve;

		public byte[] sUserName;

		public byte[] sPassword;

		public uint dwPlayMode;

		public NET_DVR_TIME StartTime;

		public NET_DVR_TIME StopTime;

		public sbyte[] sFileName;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RECTCFG_SCENE
	{
		public ushort wXCoordinate;

		public ushort wYCoordinate;

		public ushort wWidth;

		public ushort wHeight;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCENEDISPCFG
	{
		public byte byEnable;

		public byte bySoltNum;

		public byte[] byRes1;

		public byte byDispChanNum;

		public byte byAudio;

		public byte byAudioWindowIdx;

		public byte byVedioFormat;

		public byte byWindowMode;

		public byte byEnlargeStatus;

		public byte byEnlargeSubWindowIndex;

		public byte byScale;

		public uint dwResolution;

		public byte[] byJoinDecChan;

		public byte[] byJoinDecoderId;

		public byte[] byDecResolution;

		public byte byRow;

		public byte byColumn;

		public byte[] byRes2;

		public NET_DVR_RECTCFG struDisp;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEV_CHAN_INFO_SCENE
	{
		public NET_DVR_IPADDR struIP;

		public ushort wDVRPort;

		public byte byChannel;

		public byte byTransProtocol;

		public byte byTransMode;

		public byte byFactoryType;

		public byte byDeviceType;

		public byte[] byRes;

		public byte[] sUserName;

		public byte[] sPassword;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_STREAM_MEDIA_SERVER_CFG_SCENE
	{
		public byte byValid;

		public byte[] byRes1;

		public NET_DVR_IPADDR struDevIP;

		public ushort wDevPort;

		public byte byTransmitType;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PU_STREAM_CFG_SCENE
	{
		public NET_DVR_STREAM_MEDIA_SERVER_CFG_SCENE streamMediaServerCfg;

		public NET_DVR_DEV_CHAN_INFO_SCENE struDevChanInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CYC_SUR_CHAN_ELE_SCENE
	{
		public byte byEnable;

		public byte[] byRes;

		public NET_DVR_STREAM_MEDIA_SERVER_CFG_SCENE struStreamMediaSvrCfg;

		public NET_DVR_DEV_CHAN_INFO_SCENE struDecChanInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIX_LOOP_DECINFO_SCENE
	{
		public ushort wPoolTime;

		public byte[] byRes1;

		public NET_DVR_CYC_SUR_CHAN_ELE_SCENE[] struChanArray;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DECODECHANCFG_SCENE
	{
		public byte byDecodeEnable;

		public byte bySlotNum;

		public byte byDecChan;

		public byte byJointAllDecodeChan;

		public byte byJointSlotNum;

		public byte byJointChanNum;

		public byte[] byRes;

		[StructLayout (LayoutKind.Explicit)]
		public struct StruDecCfg
		{
			[FieldOffset (0)]
			public NET_DVR_PU_STREAM_CFG_SCENE struSceneDynamicDecCfg;

			[FieldOffset (0)]
			public NET_DVR_MATRIX_LOOP_DECINFO_SCENE struSceneCycDecCfg;
		}


		public StruDecCfg struDecCfg;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BIGSCREENCFG_SCENE
	{
		public byte byAllValid;

		public byte byAssociateBaseMap;

		public byte byEnableSpartan;

		public byte byRes;

		public NET_DVR_WINCFG[] struWinCfg;

		public NET_DVR_BIGSCREENCFG struBigScreen;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIX_SCENECFG
	{
		public uint dwSize;

		public byte[] sSceneName;

		public byte byBigScreenNums;

		public byte[] byRes1;

		public ushort wDecChanNums;

		public ushort wDispChanNums;

		public byte[] byRes2;

		public unsafe byte* pBigScreenBuffer;

		public unsafe byte* pDecChanBuffer;

		public unsafe byte* pDispChanBuffer;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BIGSCREENASSOCIATECFG
	{
		public uint dwSize;

		public byte byEnableBaseMap;

		public byte byAssociateBaseMap;

		public byte byEnableSpartan;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCREEN_WINCFG
	{
		public uint dwSize;

		public byte byVaild;

		public byte byInputType;

		public ushort wInputIdx;

		public uint dwLayerIdx;

		public NET_DVR_RECTCFG struWin;

		public byte byWndIndex;

		public byte byCBD;

		public byte bySubWnd;

		public byte byRes1;

		public uint dwDeviceIndex;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WINLIST
	{
		public uint dwSize;

		public ushort wScreenSeq;

		public byte[] byRes;

		public uint dwWinNum;

		public unsafe byte* pBuffer;

		public uint dwBufLen;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LAYOUTCFG
	{
		public uint dwSize;

		public byte byValid;

		public byte[] byRes1;

		public byte[] byLayoutName;

		public NET_DVR_SCREEN_WINCFG[] struWinCfg;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LAYOUT_LIST
	{
		public uint dwSize;

		public NET_DVR_LAYOUTCFG[] struLayoutInfo;

		public byte[] byRes;
	}

	public enum NetDvrCamMode : uint
	{
		Unknow = 0,
		CamBnc,
		CamVga,
		CamDvi,
		CamHdmi,
		CamIp,
		CamRgb,
		CamDecoder,
		CamMatrix,
		CamYpbpr,
		CamUsb,
		CamSdi,
		CamHdi,
		CamDp,
		CamHdtvi,
		CamJoint,
		CamHdbaset,
		CamDvit,
		CamFusion,
		CamVscreen,
		CamFiber
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INPUTSTREAMCFG
	{
		public uint dwSize;

		public byte byValid;

		public byte byCamMode;

		public ushort wInputNo;

		public byte[] sCamName;

		public NET_DVR_VIDEOEFFECT struVideoEffect;

		public NET_DVR_PU_STREAM_CFG struPuStream;

		public ushort wBoardNum;

		public ushort wInputIdxOnBoard;

		public uint dwResolution;

		public byte byVideoFormat;

		public byte byStatus;

		public byte[] sGroupName;

		public byte byJointMatrix;

		public byte byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INPUTSTREAM_LIST
	{
		public uint dwSize;

		public NET_DVR_INPUTSTREAMCFG[] struInputStreamInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_OUTPUTPARAM
	{
		public uint dwSize;

		public byte byMonMode;

		public byte[] byRes1;

		public uint dwResolution;

		public NET_DVR_VIDEOEFFECT struVideoEffect;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_OUTPUTCFG
	{
		public uint dwSize;

		public byte byScreenLayX;

		public byte byScreenLayY;

		public ushort wOutputChanNum;

		public byte[] byRes1;

		public NET_DVR_OUTPUTPARAM struOutputParam;

		public byte[] sWallName;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCREENSERVER_ABILITY
	{
		public uint dwSize;

		public byte byIsSupportScreenNum;

		public byte bySerialNums;

		public byte byMaxInputNums;

		public byte byMaxLayoutNums;

		public byte byMaxWinNums;

		public byte[] byRes1;

		public byte byMaxScreenLayX;

		public byte byMaxScreenLayY;

		public ushort wMatrixProtoNum;

		public NET_DVR_PROTO_TYPE[] struScreenProto;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCREENCONTROL_ABILITY
	{
		public uint dwSize;

		public byte byLayoutNum;

		public byte byWinNum;

		public byte byOsdNum;

		public byte byLogoNum;

		public byte byInputStreamNum;

		public byte byOutputChanNum;

		public byte byCamGroupNum;

		public byte byPlanNum;

		public byte[] byRes1;

		public byte byIsSupportPlayBack;

		public byte byMatrixInputNum;

		public byte byMatrixOutputNum;

		public NET_DVR_DISPINFO struVgaInfo;

		public NET_DVR_DISPINFO struBncInfo;

		public NET_DVR_DISPINFO struHdmiInfo;

		public NET_DVR_DISPINFO struDviInfo;

		public byte byMaxUserNums;

		public byte byPicSpan;

		public ushort wDVCSDevNum;

		public ushort wNetSignalNum;

		public ushort wBaseCoordinateX;

		public ushort wBaseCoordinateY;

		public byte byExternalMatrixNum;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ANALOGINPUTSTATUS
	{
		public uint dwLostFrame;

		public byte byHaveSignal;

		public byte byVideoFormat;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_INPUTSTATUS_UNION
	{
		[FieldOffset (0)]
		public NET_DVR_MATRIX_CHAN_STATUS struIpInputStatus;

		[FieldOffset (0)]
		public NET_DVR_ANALOGINPUTSTATUS struAnalogInputStatus;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INPUTSTATUS
	{
		public ushort wInputNo;

		public byte byInputType;

		public byte[] byRes1;

		public NET_DVR_INPUTSTATUS_UNION struStatusUnion;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCREENINPUTSTATUS
	{
		public uint dwSize;

		public byte[] byRes;

		public uint dwNums;

		public unsafe byte* pBuffer;

		public uint dwBufLen;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCREENALARMCFG
	{
		public uint dwSize;

		public byte byAlarmType;

		public byte byBoardType;

		public byte bySubException;

		public byte byRes1;

		public ushort wStartInputNum;

		public ushort wEndInputNum;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIX_CFG
	{
		public byte byValid;

		public byte byCommandProtocol;

		public byte byScreenType;

		public byte byRes1;

		public byte[] byScreenToMatrix;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DIGITALSCREEN
	{
		public NET_DVR_IPADDR struAddress;

		public ushort wPort;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ANALOGSCREEN
	{
		public byte byDevSerPortNum;

		public byte byScreenSerPort;

		public byte[] byRes;

		public NET_DVR_MATRIX_CFG struMatrixCfg;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_SCREEN_UNION
	{
		[FieldOffset (0)]
		public NET_DVR_DIGITALSCREEN struDigitalScreen;

		[FieldOffset (0)]
		public NET_DVR_ANALOGSCREEN struAnalogScreen;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCREEN_SCREENINFO
	{
		public uint dwSize;

		public byte byValid;

		public byte nLinkMode;

		public byte byDeviceType;

		public byte byScreenLayX;

		public byte byScreenLayY;

		public byte[] byRes1;

		public byte[] sUserName;

		public byte[] sPassword;

		public byte[] sDevName;

		public NET_DVR_SCREEN_UNION struScreenUnion;

		public byte byInputNum;

		public byte byOutputNum;

		public byte byCBDNum;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct LPNET_DVR_BASEMAP_CFG
	{
		public byte byScreenIndex;

		public byte byMapNum;

		public byte[] res;

		public ushort wSourWidth;

		public ushort wSourHeight;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PICTURECFG
	{
		public uint dwSize;

		public byte byUseType;

		public byte bySequence;

		public byte[] byRes;

		public NET_DVR_BASEMAP_CFG struBasemapCfg;

		public byte[] sPicName;

		public uint dwVideoWall;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_OSDCFG
	{
		public uint dwSize;

		public byte byValid;

		public byte byDispMode;

		public byte byFontColorY;

		public byte byFontColorU;

		public byte byFontColorV;

		public byte byBackColorY;

		public byte byBackColorU;

		public byte byBackColorV;

		public ushort wXCoordinate;

		public ushort wYCoordinate;

		public ushort wWidth;

		public ushort wHeight;

		public uint dwCharCnt;

		public ushort[] wOSDChar;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SERIAL_CONTROL
	{
		public uint dwSize;

		public byte bySerialNum;

		public byte[] byRes1;

		public byte[] bySerial;

		public byte[] byRes2;
	}

	public enum InputInterfaceType : uint
	{
		Vga = 0,
		Svideo,
		Ypbpr,
		Dvi,
		Bnc,
		DviLoop,
		BncLoop,
		Hdmi,
		Ip,
		Usb,
		Sdi,
		Dp,
		Hdbaset
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INPUT_INTERFACE_CTRL
	{
		public byte byInputSourceType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DISPLAY_COLOR_CTRL
	{
		public byte byColorType;

		public sbyte byScale;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DISPLAY_POSITION_CTRL
	{
		public byte byPositionType;

		public sbyte byScale;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RECTCFG_EX
	{
		public uint dwXCoordinate;

		public uint dwYCoordinate;

		public uint dwWidth;

		public uint dwHeight;

		public byte[] byRes;
	}

	public enum NetDvrPlanOperateType : uint
	{
		WitchLayout = 1,
		CreenPowerOff,
		CreenPowerOn,
		WitchBasemap
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PLAN_INFO
	{
		public byte byValid;

		public byte byType;

		public ushort wLayoutNo;

		public byte byScreenStyle;

		public byte byBaseMapType;

		public byte[] byRes1;

		public uint dwDelayTime;

		public uint dwSerialNo;

		public uint dwBaseMapWndNo;

		public uint dwBaseMapNo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CYCLE_TIME
	{
		public byte byValid;

		public byte[] byRes;

		public NET_DVR_TIME_EX struTime;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PLAN_CFG
	{
		public uint dwSize;

		public byte byValid;

		public byte byWorkMode;

		public byte byWallNo;

		public byte byPlanNo;

		public byte[] byPlanName;

		public NET_DVR_TIME_EX struTime;

		public NET_DVR_CYCLE_TIME[] struTimeCycle;

		public uint dwWorkCount;

		public NET_DVR_PLAN_INFO[] strPlanEntry;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PLAN_LIST
	{
		public uint dwSize;

		public uint dwPlanNums;

		public unsafe byte* pBuffer;

		public byte byWallNo;

		public byte[] byRes1;

		public uint dwBufLen;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CONTROL_PARAM
	{
		public uint dwSize;

		public byte[] sDeviceID;

		public ushort wChan;

		public byte byIndex;

		public byte byRes1;

		public uint dwControlParam;

		public byte byMandatoryAlarm;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEVICE_RUN_STATUS
	{
		public uint dwSize;

		public uint dwMemoryTotal;

		public uint dwMemoryUsage;

		public byte byCPUUsage;

		public byte byMainFrameTemp;

		public byte byBackPanelTemp;

		public byte[] byRes1;

		public byte[] byLeftDecResource;

		public float fNetworkFlow;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ACCESS_CAMERA_INFO
	{
		public uint dwSize;

		public sbyte[] sCameraInfo;

		public byte byInterfaceType;

		public byte[] byRes1;

		public uint dwChannel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_AUDIO_INPUT_PARAM
	{
		public byte byAudioInputType;

		public byte byVolume;

		public byte byEnableNoiseFilter;

		public byte[] byres;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CAMERA_DEHAZE_CFG
	{
		public uint dwSize;

		public byte byDehazeMode;

		public byte byLevel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INPUT_SIGNAL_LIST
	{
		public uint dwSize;

		public uint dwInputSignalNums;

		public unsafe byte* pBuffer;

		public byte[] byRes1;

		public uint dwBufLen;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RECORD_TIME_SPAN_INQUIRY
	{
		public uint dwSize;

		public byte byType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RECORD_TIME_SPAN
	{
		public uint dwSize;

		public NET_DVR_TIME strBeginTime;

		public NET_DVR_TIME strEndTime;

		public byte byType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DRAWFRAME_DISK_QUOTA_CFG
	{
		public uint dwSize;

		public byte byPicQuota;

		public byte byRecordQuota;

		public byte byDrawFrameRecordQuota;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_NAT_PORT
	{
		public ushort wEnable;

		public ushort wExtPort;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_NAT_CFG
	{
		public uint dwSize;

		public ushort wEnableUpnp;

		public ushort wEnableNat;

		public NET_DVR_IPADDR struIpAddr;

		public NET_DVR_NAT_PORT struHttpPort;

		public NET_DVR_NAT_PORT struCmdPort;

		public NET_DVR_NAT_PORT struRtspPort;

		public byte[] byFriendName;

		public byte byNatType;

		public byte[] byRes1;

		public NET_DVR_NAT_PORT struHttpsPort;

		public byte[] byres;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_UPNP_PORT_STATE
	{
		public uint dwEnabled;

		public ushort wInternalPort;

		public ushort wExternalPort;

		public uint dwStatus;

		public NET_DVR_IPADDR struNatExternalIp;

		public NET_DVR_IPADDR struNatInternalIp;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_UPNP_NAT_STATE
	{
		public NET_DVR_UPNP_PORT_STATE[] strUpnpPort;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PLAYCOND
	{
		public uint dwChannel;

		public NET_DVR_TIME struStartTime;

		public NET_DVR_TIME struStopTime;

		public byte byDrawFrame;

		public byte byStreamType;

		public byte[] byStreamID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ATMFINDINFO
	{
		public byte byTransactionType;

		public byte[] byRes;

		public uint dwTransationAmount;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_SPECIAL_FINDINFO_UNION
	{
		[FieldOffset (0)]
		public byte[] byLenth;

		[FieldOffset (0)]
		public NET_DVR_ATMFINDINFO struATMFindInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FILECOND_V40
	{
		public int lChannel;

		public uint dwFileType;

		public uint dwIsLocked;

		public uint dwUseCardNo;

		public byte[] sCardNumber;

		public NET_DVR_TIME struStartTime;

		public NET_DVR_TIME struStopTime;

		public byte byDrawFrame;

		public byte byFindType;

		public byte byQuickSearch;

		public byte bySpecialFindInfoType;

		public uint dwVolumeNum;

		public byte[] byWorkingDeviceGUID;

		public NET_DVR_SPECIAL_FINDINFO_UNION uSpecialFindInfo;

		public byte byStreamType;

		public byte byAudioFile;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_AES_KEY_INFO
	{
		public byte[] sAESKey;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_POE_CFG
	{
		public NET_DVR_IPADDR struIP;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CUSTOM_PROTOCAL
	{
		public uint dwSize;

		public uint dwEnabled;

		public sbyte[] sProtocalName;

		public byte[] byRes1;

		public uint dwEnableSubStream;

		public byte byMainProType;

		public byte byMainTransType;

		public ushort wMainPort;

		public sbyte[] sMainPath;

		public byte bySubProType;

		public byte bySubTransType;

		public ushort wSubPort;

		public sbyte[] sSubPath;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIX_CHAN_INFO_EX
	{
		public uint dwEnable;

		public byte byType;

		public byte[] byRes;

		public NET_DVR_STREAM_MEDIA_SERVER_CFG streamMediaServerCfg;

		public NET_DVR_DEV_CHAN_INFO struDevChanInfo;

		public byte[] sRtspUrl;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIX_LOOP_DECINFO_EX
	{
		public uint dwSize;

		public uint dwPoolTime;

		public NET_DVR_MATRIX_CHAN_INFO_EX[] struchanConInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PU_STREAM_CFG_EX
	{
		public uint dwSize;

		public byte byType;

		public byte[] byRes;

		public NET_DVR_STREAM_MEDIA_SERVER_CFG struStreamMediaSvrCfg;

		public NET_DVR_DEV_CHAN_INFO struDevChanInfo;

		public byte[] sRtspUrl;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIX_TRUNKCFG
	{
		public uint dwGlobalIndex;

		public uint dwInterIndex;

		public byte[] sTrunkName;

		public byte byType;

		public byte byDir;

		public byte byAbility;

		public byte bySubsys;

		public byte byChan;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct LPNET_DVR_DECSUBSYSTEMJIONSTATUS_V41
	{
		public byte byJoinStatus;

		public byte byJoinSubSystem;

		public byte byJoinDispNum;

		public byte byJoinSubWindowNum;

		public byte byDecodeAbility;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct LPNET_DVR_SINGLESUBSYSTEMJOININFO_V41
	{
		public byte bySubSystemType;

		public byte byConnectStatus;

		public byte byMatrixNum;

		public byte bySubSystemNum;

		public NET_DVR_DECSUBSYSTEMJIONSTATUS_V41[] struSubSystem;

		public byte byBindStatus;

		public byte bySlotNum;

		public byte byUsedTrunk;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALLDECSUBSYSTEMJOININFO_V41
	{
		public uint dwSize;

		public NET_DVR_SINGLESUBSYSTEMJOININFO_V41[] struSingleSubSystemJoinInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PUBLIC_SUB_SYSTEM
	{
		public uint dwJointSubSystem;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_NOAMAL_SUB_SYSTEM
	{
		public uint dwBeJoinedSubSystem;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_JOINT_SUB_SYSTEM
	{
		[FieldOffset (0)]
		public NET_DVR_NOAMAL_SUB_SYSTEM struNormalSubSystem;

		[FieldOffset (0)]
		public NET_DVR_PUBLIC_SUB_SYSTEM struPublicSubSystem;

		[FieldOffset (0)]
		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMSUBSYSTEMPARAM
	{
		public uint dwSize;

		public ushort wEnterDelay;

		public ushort wExitDelay;

		public byte byHostageReport;

		public byte bySubsystemEnable;

		public byte byKeyToneOfArmOrDisarm;

		public byte byKeyToneOfManualTestReport;

		public ushort wDelayTime;

		public byte byEnableAlarmInDelay;

		public byte byPublicAttributeEnable;

		public NET_DVR_JOINT_SUB_SYSTEM struJointSubSystem;

		public byte byKeyZoneArm;

		public byte byKeyZoneArmReport;

		public byte byKeyZoneDisarm;

		public byte byKeyZoneDisarmReport;

		public byte[] bySubSystemID;

		public byte byKeyZoneArmReportEnable;

		public byte byKeyZoneArmEnable;

		public byte byOneKeySetupAlarmEnable;

		public byte bySingleZoneSetupAlarmEnable;

		public byte byCenterType;

		public byte[] sCenterAccount;

		public byte[] sCenterAccountV40;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_REMIND_TIME
	{
		public byte byEnable;

		public byte byHour;

		public byte byMinute;

		public byte bySecond;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SUBSYSTEM_PARAM_EX
	{
		public uint dwSize;

		public NET_DVR_SCHEDTIME[][] struAlarmTime;

		public byte byAlarmInAdvance;

		public byte[] byRes1;

		public byte[] byJointAlarmIn;

		public byte[] byJointKeyboard;

		public byte[] byJointOpetaterUser;

		public NET_DVR_REMIND_TIME[][] struAlarmRemindTime;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_PRINTER_CFG
	{
		public uint dwSize;

		public byte byPrinterEnable;

		public byte byPrintTime;

		public byte byFaultDetect;

		public byte byRes1;

		public uint dwAlarmInfo;

		public uint dwDeviceInfo;

		public uint dwOperateInfo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_NETPARAM
	{
		public uint dwSize;

		public NET_DVR_IPADDR struIP;

		public ushort wPort;

		public byte byAddressType;

		public byte[] byRes1;

		public byte[] byDomainName;

		public byte byReportProtocol;

		public byte[] byDevID;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_REGISTER_RS485CFG
	{
		public uint dwSize;

		public ushort wDeviceProtocol;

		public byte[] byRes;

		public uint dwBaudRate;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_WIRELESS_NETWORK_CFG
	{
		public uint dwSize;

		public NET_DVR_ALARMHOST_NETPARAM[] struNetCenter;

		public byte[] byAPNName;

		public byte[] byAPNUserName;

		public byte[] byAPNPassWord;

		public byte byReconnTime;

		public byte byOverTime;

		public byte byDetectLinkTime;

		public byte byRes1;

		public byte[] bySIMNum;

		public NET_DVR_IPADDR struSIMIP;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_NETCFG
	{
		public uint dwSize;

		public NET_DVR_ALARMHOST_NETPARAM[] struNetCenter;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_REPORTCENTER_CFG
	{
		public uint dwSize;

		public byte byValid;

		public byte[] byRes;

		public byte[] byChanAlarmMode;

		public byte[] byDealFailCenter;

		public byte byDataType;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_REPORT_CENTER_CFG_V40
	{
		public uint dwSize;

		public byte byValid;

		public byte byDataType;

		public byte[] byRes;

		public byte[] byChanAlarmMode;

		public byte[] byDealFailCenter;

		public byte[] byZoneReport;

		public byte[] byNonZoneReport;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_SAFETYCABINSTATE
	{
		public uint dwSize;

		public byte byEnterButton;

		public byte byExitButton;

		public byte byDoorState;

		public byte byLockState;

		public byte byUrgencyButton;

		public byte byManState;

		public byte byAbnormal;

		public byte byLightState;

		public byte byFanState;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_ALARMOUTSTATUS
	{
		public uint dwSize;

		public byte[] byName;

		public byte byAlarmType;

		public ushort wChan;

		public byte byAlarmStatus;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_AUDIO_PARAM
	{
		public uint dwSize;

		public byte byAudioFormat;

		public byte byRes1;

		public ushort wChannels;

		public uint dwSamplesPerSec;

		public byte[] byRes2;

		public uint dwAudioSize;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PREVIEWINFO
	{
		public int lChannel;

		public uint dwStreamType;

		public uint dwLinkMode;

		public unsafe void* hPlayWnd;

		public uint bBlocked;

		public uint bPassbackRecord;

		public byte byPreviewMode;

		public byte[] byStreamID;

		public byte byProtoType;

		public byte byRes1;

		public byte byVideoCodingType;

		public uint dwDisplayBufNum;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TRIGGER_EVENT
	{
		public uint dwSize;

		public uint dwOverallEventTriggerAlarmoutOn;

		public uint dwOverallEventTriggerAlarmoutOff;

		public uint[] dwSubSystemEventTriggerAlarmoutOn;

		public uint[] dwSubSystemEventTriggerAlarmoutOff;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_FAULT_CFG
	{
		public uint dwSize;

		public uint dwCheckFault;

		public uint dwOverallFaultJointLED;

		public uint dwOverallFaultJointSound;

		public uint[] dwSubSystemFaultJointLED;

		public uint[] dwSubSystemFaultJointSound;

		public uint dwFaultJointFaultLight;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LIST_INFO
	{
		public uint dwSize;

		public byte byIndex;

		public byte[] byRes;
	}

	public enum NetDvrAlarmhostReportType : uint
	{
		DefenceAlarm = 1,
		VideoAlarm,
		VirtualDefenceAlarm,
		HostageAlarm,
		KnockDownAlarm,
		OperateAlarm,
		OhterAbnormalAlarm
	}

	public enum NetDvrAlarmhostCidMainType : uint
	{
		Nter = 1000,
		Xit = 3000
	}

	public enum NetDvrAlarmhostCidMinorType : uint
	{
		Alarm = 103,
		FireAlarm = 110,
		AbductReport = 121,
		Silent24 = 122,
		Audio24 = 123,
		Auxiliary24 = 124,
		Shock24 = 125,
		PerimeterAlarm = 131,
		InnetAlarm = 132,
		EnterExit = 134,
		DeviceOpen = 137,
		ZoneBusBreak = 141,
		ZoneBusShort = 142,
		AcLoss = 301,
		LowBattVol = 302,
		DevReset = 305,
		MbusModelFault = 333,
		PrinterFail = 336,
		LineLoss = 354,
		BusLoss = 382,
		DetectorOpen = 383,
		Guard = 401,
		GuardAuto = 403,
		CancelArm = 406,
		GuardImme = 408,
		KeyZoneGuard = 409,
		GuardStay = 441,
		ForcedArm = 442,
		AutoctrlTrig = 443,
		OnetouchAwayArming = 444,
		OnetouchStayArming = 445,
		CardArmingOrDisarming = 446,
		AutoguardFail = 455,
		AopenTrigFail = 460,
		AcloseTrigFail = 461,
		AutounguardFail = 462,
		Bypass = 570,
		GroupBypass = 574,
		ManualTestRpt = 601,
		AutoTestRpt = 602,
		EnterProg = 627,
		ExitProg = 628,
		SoftInstand = 810,
		SoftFire = 811,
		SoftMobs = 812,
		KeyFail = 910,
		TriggerFail = 911,
		GpkFail = 912,
		ModuleFail = 913,
		WirelessDetectorFail = 914,
		WirelessDetectorBatteryLow = 915,
		WrieLessNet = 920,
		SimFault = 921,
		WifiAbnormal = 922,
		RfAbnormal = 923,
		IpaddrConflict = 930,
		EthernetBroken = 931,
		GroupOutRp = 932,
		GroupInRp = 933,
		MotionDectect = 940,
		MaskAlarm = 941,
		ViLost = 942,
		VsMismatch = 943,
		ViException = 944,
		HdFull = 945,
		HdError = 946,
		PicSendFailed = 947,
		KeyLocked = 948,
		ZoneBusSearch = 970,
		ZoneBusRegist = 971,
		GuardDelayOp = 972,
		GuardSingle = 973,
		ZoneAssociatedDetector = 975
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CID_ALARM
	{
		public uint dwSize;

		public byte[] sCIDCode;

		public byte[] sCIDDescribe;

		public NET_DVR_TIME_EX struTriggerTime;

		public NET_DVR_TIME_EX struUploadTime;

		public byte[] sCenterAccount;

		public byte byReportType;

		public byte byUserType;

		public byte[] sUserName;

		public ushort wKeyUserNo;

		public byte byKeypadNo;

		public byte bySubSysNo;

		public ushort wDefenceNo;

		public byte byVideoChanNo;

		public byte byDiskNo;

		public ushort wModuleAddr;

		public byte byCenterType;

		public byte byRes1;

		public byte[] sCenterAccountV40;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_MODULE_CFG
	{
		public uint dwSize;

		public byte byModuleType;

		public byte byZoneType;

		public byte byTriggerType;

		public byte[] byRes1;

		public sbyte[] sModelInfo;

		public sbyte[] sDeviceVersionInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DECCARD_ABILITY_V41
	{
		public byte byCardType;

		public byte byDecNums;

		public byte byDispNums;

		public byte byDecStartIdx;

		public byte byDispStartIdx;

		public byte[] byRes1;

		public uint[] dwVgaSupportResolution;

		public uint[] dwHdmiSupportResolution;

		public uint[] dwDviSupportResolution;

		public uint[] dwYpbprSupportResolution;

		public byte[] byDispFormat;

		public byte[][] byWindowMode;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DECODESVR_ABILITY_V41
	{
		public uint dwSize;

		public byte byCardNums;

		public byte byStartChan;

		public byte[] byRes1;

		public NET_DVR_DECCARD_ABILITY_V41[] struDecCardAbility;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_STREAM_RECORD_STATUS
	{
		public uint dwSize;

		public byte byRecord;

		public byte byOffLineRecord;

		public byte[] byRes1;

		public uint dwRelatedHD;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DIRECT_CONNECT_CHAN_INFO
	{
		public byte byEnable;

		public byte byProType;

		public byte byZeroChan;

		public byte byPriority;

		public byte[] sUserName;

		public byte[] sPassword;

		public byte[] byDomain;

		public NET_DVR_IPADDR struIP;

		public ushort wDVRPort;

		public byte byStreamType;

		public byte byOnline;

		public uint dwChannel;

		public byte byTransProtocol;

		public byte byLocalBackUp;

		public ushort wDirectLastTime;

		public byte[] byChanNo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DIRECT_CONNECT_CHAN_INFO_V40
	{
		public byte byEnable;

		public byte byProType;

		public byte byZeroChan;

		public byte byRes1;

		public byte[] sUserName;

		public byte[] sPassword;

		public byte[] byAddress;

		public ushort wDVRPort;

		public byte byStreamType;

		public byte byOnline;

		public uint dwChannel;

		public byte byTransProtocol;

		public byte byLocalBackUp;

		public byte[] byRes2;

		public byte[] byVAGChanNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PU_STREAM_URL_CFG
	{
		public byte byEnable;

		public byte[] byRes;

		public byte[] byStreamMediaIP;

		public ushort wStreamMediaPort;

		public byte byTransmitType;

		public byte[] byRes1;

		public byte[] byDevIP;

		public ushort wDevPort;

		public byte byChannel;

		public byte byTransMode;

		public byte byProType;

		public byte byTransProtocol;

		public byte[] byRes3;

		public byte[] sUserName;

		public byte[] sPassWord;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PU_STREAM_URL_CFG_V40
	{
		public byte byEnable;

		public byte[] byRes;

		public byte[] byStreamMediaIP;

		public ushort wStreamMediaPort;

		public byte byTransmitType;

		public byte byRes1;

		public byte[] byDevIP;

		public ushort wDevPort;

		public byte byChannel;

		public byte byTransMode;

		public byte byProType;

		public byte byTransProtocol;

		public byte[] byRes3;

		public byte[] sUserName;

		public byte[] sPassWord;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_STREAM_URL_V40
	{
		public byte byEnable;

		public byte byStreamType;

		public byte byLocalBackUp;

		public byte byRes;

		public byte[] strURL;

		public uint dwProtocalType;

		public byte[] sUserName;

		public byte[] sPassWord;

		public byte[] byAddress;

		public ushort wIPPort;

		public ushort wChanNo;

		public byte[] byVAGChanNo;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_STREAM_TYPE_UNION
	{
		[FieldOffset (0)]
		public NET_DVR_DIRECT_CONNECT_CHAN_INFO struChanInfo;

		[FieldOffset (0)]
		public NET_DVR_PU_STREAM_URL struStreamUrl;

		[FieldOffset (0)]
		public NET_DVR_PU_STREAM_URL_CFG struStreamUrlCfg;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_STREAM_TYPE_V40_UNION
	{
		[FieldOffset (0)]
		public NET_DVR_DIRECT_CONNECT_CHAN_INFO_V40 struChanInfo;

		[FieldOffset (0)]
		public NET_DVR_PU_STREAM_URL struPuStreamUrl;

		[FieldOffset (0)]
		public NET_DVR_PU_STREAM_URL_CFG_V40 struStreamUrlCfg;

		[FieldOffset (0)]
		public NET_DVR_RTSP_PROTOCAL_CFG struRtspCfg;

		[FieldOffset (0)]
		public NET_DVR_STREAM_URL_V40 struStreamUrlV40;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_STREAM_MODE_TYPE
	{
		public byte byGetStreamType;

		public byte[] byRes;

		public NET_DVR_STREAM_TYPE_UNION uGetStream;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_STREAM_SRC_INFO
	{
		public uint dwSize;

		public NET_DVR_STREAM_MODE_TYPE struStreamSrcInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_STREAM_SRC_INFO_V40
	{
		public uint dwSize;

		public byte byGetStreamType;

		public byte[] byRes1;

		public NET_DVR_STREAM_TYPE_V40_UNION uGetStream;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_STREAM_RECORD_INFO
	{
		public uint dwSize;

		public NET_DVR_RECORD_V30 struRecordInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_STREAM_TIME_LOCK
	{
		public uint dwSize;

		public NET_DVR_TIME strBeginTime;

		public NET_DVR_TIME strEndTime;

		public NET_DVR_STREAM_INFO struStreamInfo;

		public uint dwRecordType;

		public uint dwLockDuration;

		public NET_DVR_TIME_EX strUnlockTimePoint;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VOD_DRAWFRAME_PARA
	{
		public NET_DVR_TIME_EX struTime;

		public uint dwDrawType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VOD_PARA
	{
		public uint dwSize;

		public NET_DVR_STREAM_INFO struIDInfo;

		public NET_DVR_TIME struBeginTime;

		public NET_DVR_TIME struEndTime;

		public unsafe void* hWnd;

		public byte byDrawFrame;

		public byte byVolumeType;

		public byte byVolumeNum;

		public byte byStreamType;

		public uint dwFileIndex;

		public byte byAudioFile;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MANUAL_RECORD_PARA
	{
		public NET_DVR_STREAM_INFO struStreamInfo;

		public uint lRecordType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_STREAM_CABAC
	{
		public uint dwSize;

		public byte byCabacEnable;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_IOOUT_PARAM
	{
		public uint dwSize;

		public byte byDefaultStatus;

		public byte byIOOutStatus;

		public byte byMode;

		public byte byIOWorkMode;

		public uint dwTimeDelay;

		public ushort wAheadTime;

		public byte byFreqMulti;

		public byte byDutyRate;

		public byte byDetectBrightness;

		public byte byBrightnessThreld;

		public byte byFlashLightEnable;

		public byte byStartHour;

		public byte byStartMinute;

		public byte byEndHour;

		public byte byEndMinute;

		public byte byAutoPlateBrightness;

		public byte byIncrBrightEnable;

		public byte byIncrBrightPercent;

		public ushort wIncrBrightTime;

		public byte byBrightness;

		public byte[] byRes;
	}

	public enum ItcTriggermodeType : uint
	{
		TcPostIospeedType = 1,
		TcPostSingleioType = 2,
		TcPostRs485Type = 4,
		TcPostRs485RadarType = 8,
		TcPostVirtualcoilType = 16,
		TcPostHvtTypeV50 = 32,
		TcPostMprType = 64,
		TcPostPrsType = 128,
		TcEpoliceIoTrafficlightsType = 256,
		TcEpoliceRs485Type = 512,
		TcPostHvtType = 1024,
		TcPeRs485Type = 65536,
		TcVideoEpoliceType = 131072,
		TcViaVirtualcoilType = 262144,
		TcPostImtType = 524288,
		PcPostHvtType = 1048576,
		TcPostMobileType = 2097152,
		TcRedlightPedestrianType = 4194304,
		TcNocomityPedestrianType = 8388608
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_TRIGGERMODE_ABILITY
	{
		public uint dwSize;

		public uint dwTriggerType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_INTERVAL_PARAM
	{
		public byte byIntervalType;

		public byte[] byRes1;

		public ushort[] wInterval;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_PLATE_RECOG_PARAM
	{
		public byte[] byDefaultCHN;

		public byte byEnable;

		public uint dwRecogMode;

		public byte byVehicleLogoRecog;

		public byte byProvince;

		public byte byRegion;

		public byte byRes1;

		public ushort wPlatePixelWidthMin;

		public ushort wPlatePixelWidthMax;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_POLYGON
	{
		public uint dwPointNum;

		public NET_VCA_POINT[] struPos;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_PLATE_RECOG_REGION_PARAM
	{
		public byte byMode;

		public byte[] byRes1;

		[StructLayout (LayoutKind.Explicit)]
		public struct URegion
		{
			[FieldOffset (0)]
			public NET_VCA_RECT struRect;

			[FieldOffset (0)]
			public NET_ITC_POLYGON struPolygon;
		}


		public URegion uRegion;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_SINGLE_IOSPEED_PARAM
	{
		public byte byEnable;

		public byte byTrigCoil1;

		public byte byCoil1IOStatus;

		public byte byTrigCoil2;

		public byte byCoil2IOStatus;

		public byte byRelatedDriveWay;

		public byte byTimeOut;

		public byte byRelatedIOOutEx;

		public uint dwDistance;

		public byte byCapSpeed;

		public byte bySpeedLimit;

		public byte bySpeedCapEn;

		public byte bySnapTimes1;

		public byte bySnapTimes2;

		public byte byBigCarSpeedLimit;

		public byte byBigCarSignSpeed;

		public byte byIntervalType;

		public ushort[] wInterval1;

		public ushort[] wInterval2;

		public byte[] byRelatedIOOut;

		public byte byFlashMode;

		public byte byLaneType;

		public byte byCarSignSpeed;

		public byte byUseageType;

		public NET_ITC_PLATE_RECOG_REGION_PARAM[] struPlateRecog;

		public byte byRelaLaneDirectionType;

		public byte byLowSpeedLimit;

		public byte byBigCarLowSpeedLimit;

		public byte byLowSpeedCapEn;

		public byte byEmergencyCapEn;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_POST_IOSPEED_PARAM
	{
		public NET_ITC_PLATE_RECOG_PARAM struPlateRecog;

		public NET_ITC_SINGLE_IOSPEED_PARAM[] struSingleIOSpeed;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_SINGLEIO_PARAM
	{
		public byte byDefaultStatus;

		public byte byRelatedDriveWay;

		public byte bySnapTimes;

		public byte byRelatedIOOutEx;

		public NET_ITC_INTERVAL_PARAM struInterval;

		public byte[] byRelatedIOOut;

		public byte byFlashMode;

		public byte byEnable;

		public byte byUseageType;

		public byte byEmergencyCapEn;

		public NET_ITC_PLATE_RECOG_REGION_PARAM[] struPlateRecog;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_POST_SINGLEIO_PARAM
	{
		public NET_ITC_PLATE_RECOG_PARAM struPlateRecog;

		public NET_ITC_SINGLEIO_PARAM[] struSingleIO;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_LANE_PARAM
	{
		public byte byEnable;

		public byte byRelatedDriveWay;

		public ushort wDistance;

		public ushort wTrigDelayTime;

		public byte byTrigDelayDistance;

		public byte bySpeedCapEn;

		public byte bySignSpeed;

		public byte bySpeedLimit;

		public byte bySnapTimes;

		public byte byOverlayDriveWay;

		public NET_ITC_INTERVAL_PARAM struInterval;

		public byte[] byRelatedIOOut;

		public byte byFlashMode;

		public byte byCartSignSpeed;

		public byte byCartSpeedLimit;

		public byte byRelatedIOOutEx;

		public NET_ITC_PLATE_RECOG_REGION_PARAM[] struPlateRecog;

		public byte byLaneType;

		public byte byUseageType;

		public byte byRelaLaneDirectionType;

		public byte byLowSpeedLimit;

		public byte byBigCarLowSpeedLimit;

		public byte byLowSpeedCapEn;

		public byte byEmergencyCapEn;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_POST_RS485_PARAM
	{
		public byte byRelatedLaneNum;

		public byte byTriggerSpareMode;

		public byte byFaultToleranceTime;

		public byte byRes1;

		public NET_ITC_PLATE_RECOG_PARAM struPlateRecog;

		public NET_ITC_LANE_PARAM[] struLane;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_RADAR_PARAM
	{
		public byte byRadarType;

		public byte byLevelAngle;

		public ushort wRadarSensitivity;

		public ushort wRadarSpeedValidTime;

		public byte[] byRes1;

		public float fLineCorrectParam;

		public int iConstCorrectParam;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_RS485_ACCESS_INFO_COND
	{
		public uint dwSize;

		public uint dwChannel;

		public uint dwTriggerModeType;

		public byte byAssociateRS485No;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_RADAR_INFO_PARAM
	{
		public NET_ITC_RADAR_PARAM struRadarParam;

		public byte byAssociateLaneNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_ITC_ACCESS_DEVINFO_PARAM_UNION
	{
		[FieldOffset (0)]
		public byte[] uLen;

		[FieldOffset (0)]
		public NET_ITC_RADAR_INFO_PARAM struRadarInfoParam;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_RS485_ACCESS_CFG
	{
		public uint dwSize;

		public byte byModeType;

		public byte[] byRes;

		public NET_ITC_ACCESS_DEVINFO_PARAM_UNION uITCAccessDevinfoParam;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_RS485_ACCESS_INFO
	{
		public uint dwSize;

		public NET_ITC_RADAR_PARAM[] struRadar;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_POST_RS485_RADAR_PARAM
	{
		public byte byRelatedLaneNum;

		public byte[] byRes1;

		public NET_ITC_PLATE_RECOG_PARAM struPlateRecog;

		public NET_ITC_LANE_PARAM[] struLane;

		public NET_ITC_RADAR_PARAM struRadar;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_VTLANE_PARAM
	{
		public byte byRelatedDriveWay;

		public byte bySpeedCapEn;

		public byte bySignSpeed;

		public byte bySpeedLimit;

		public byte bySnapTimes;

		public byte byBigCarSignSpeed;

		public byte byBigCarSpeedLimit;

		public byte byRelatedIOOutEx;

		public NET_ITC_INTERVAL_PARAM struInterval;

		public byte[] byRelatedIOOut;

		public byte byFlashMode;

		public byte byLowSpeedLimit;

		public byte byBigCarLowSpeedLimit;

		public byte byRelaLaneDirectionType;

		public NET_ITC_PLATE_RECOG_REGION_PARAM[] struPlateRecog;

		public NET_VCA_LINE struLine;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_VTCOIL_INFO
	{
		public NET_VCA_RECT struLaneRect;

		public byte byTrigFlag;

		public byte byTrigSensitive;

		public byte[] byRelatedIOOut;

		public byte byFlashMode;

		public byte byLaneType;

		public byte byEnableRadar;

		public NET_ITC_VTLANE_PARAM struLane;

		public byte byUseageType;

		public byte byCarDriveDirect;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_POST_VTCOIL_PARAM
	{
		public byte byRelatedLaneNum;

		public byte byIsDisplay;

		public byte byLoopPos;

		public byte byPolarLenType;

		public byte byDayAuxLightMode;

		public byte byVideoLaneNO;

		public byte byVideoLowTh;

		public byte byVideoHighTh;

		public byte byRecordMode;

		public byte bySnapMode;

		public byte bySpeedDetector;

		public byte byRes2;

		public ushort wResolutionX;

		public ushort wResolutionY;

		public uint dwDayInitExp;

		public uint dwDayMaxExp;

		public uint dwNightExp;

		public uint dwSnapExp;

		public byte byDayInitGain;

		public byte byDayMaxGain;

		public byte byNightGain;

		public byte bySnapGain;

		public uint dwSceneMode;

		public NET_DVR_GEOGLOCATION struGeogLocation;

		public NET_ITC_PLATE_RECOG_PARAM struPlateRecog;

		public NET_ITC_VTCOIL_INFO[] struVtCoil;

		public NET_ITC_RADAR_PARAM struRadar;

		public NET_VCA_LINE struLine;

		public uint dwVioDetectType;

		public byte byDebugMode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_SINGLE_IOTL_PARAM
	{
		public byte byEnable;

		public byte byLightIO;

		public byte byTrafficLight;

		public byte byTrigIO;

		public byte byTrigIOStatus;

		public byte byRelatedDriveWay;

		public byte byRecordEnable;

		public byte byRecordType;

		public byte byPreRecordTime;

		public byte byRecordDelayTime;

		public byte byRecordTimeOut;

		public byte byRedSnapTimes;

		public byte byGreenSnapTimes;

		public byte byRelatedIOOutEx;

		public byte byRes1;

		public byte byIntervalType;

		public ushort[] wRedInterval;

		public ushort[] wGreenInterval;

		public byte[] byRelatedIOOut;

		public byte byFlashMode;

		public byte[] byRes2;

		public NET_ITC_PLATE_RECOG_REGION_PARAM[] struPlateRecog;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_EPOLICE_IOTL_PARAM
	{
		public NET_ITC_PLATE_RECOG_PARAM struPlateRecog;

		public NET_ITC_SINGLE_IOTL_PARAM[] struSingleIOTL;

		public byte[] byRes;
	}

	public enum ItcSerialProtocol : uint
	{
		ProtocolUnknow = 0,
		SingleCoilProtocolMode1 = 1,
		DoubleCoilProtocolMode1 = 2,
		DoubleCoilProtocolMode2 = 3,
		DoubleCoilProtocolMode3 = 4,
		DoubleCoilProtocolMode4 = 5,
		DoubleCoilProtocolMode5 = 6,
		DoubleCoilProtocolMode6 = 7,
		DoubleCoilProtocolMode7 = 8,
		DoubleCoilProtocolMode8 = 9,
		SingleCoilProtocolMode2 = 10,
		OtherProtocol = 255
	}

	public enum ItcNormalPassSerialProtocol : uint
	{
		SerialUnknow = 0,
		ProtocolMode1 = 1,
		ProtocolMode2 = 2,
		ProtocolMode3 = 3,
		ProtocolMode4 = 4,
		ProtocolMode5 = 5
	}

	public enum ItcInverseSerialProtocol : uint
	{
		SerialUnknow = 0,
		ProtocolMode1 = 1,
		ProtocolMode2 = 2,
		ProtocolMode3 = 3
	}

	public enum ItcSpeedSerialProtocol : uint
	{
		SerialUnknow = 0,
		ProtocolMode1 = 1,
		ProtocolMode2 = 2,
		ProtocolMode3 = 3
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_SERIAL_INFO
	{
		public byte bySerialProtocol;

		public byte byIntervalType;

		public ushort wInterval;

		public byte byNormalPassProtocol;

		public byte byInverseProtocol;

		public byte bySpeedProtocol;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_EPOLICE_LANE_PARAM
	{
		public byte byEnable;

		public byte byRelatedDriveWay;

		public ushort wDistance;

		public byte byRecordEnable;

		public byte byRecordType;

		public byte byPreRecordTime;

		public byte byRecordDelayTime;

		public byte byRecordTimeOut;

		public byte bySignSpeed;

		public byte bySpeedLimit;

		public byte byOverlayDriveWay;

		public NET_ITC_SERIAL_INFO struSerialInfo;

		public byte[] byRelatedIOOut;

		public byte byFlashMode;

		public byte bySerialType;

		public byte byRelatedIOOutEx;

		public byte bySnapPicPreRecord;

		public NET_ITC_PLATE_RECOG_REGION_PARAM[] struPlateRecog;

		public byte byBigCarSignSpeed;

		public byte byBigCarSpeedLimit;

		public byte byRedTrafficLightChan;

		public byte byYellowTrafficLightChan;

		public byte byRelaLaneDirectionType;

		public byte[] byRes3;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_EPOLICE_RS485_PARAM
	{
		public byte byRelatedLaneNum;

		public byte byTrafficLightSignalSrc;

		public byte[] byRes1;

		public NET_ITC_PLATE_RECOG_PARAM struPlateRecog;

		public NET_ITC_EPOLICE_LANE_PARAM[] struLane;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_LANE_LOGIC_PARAM
	{
		public byte byUseageType;

		public byte byDirectionType;

		public byte byCarDriveDirect;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_LINE
	{
		public NET_VCA_LINE struLine;

		public byte byLineType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_SNAPMODE_PARAM
	{
		public byte byVehicleCapMode;

		public byte byNoVehicleCapMode;

		public byte byPasserCapMode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_HVT_EC_PARAM
	{
		public uint dwCapShutter;

		public ushort wCapGain;

		public byte[] byRes;

		public uint dwDayTimeVideoShutter;

		public ushort wDayTimeVideoGain;

		public ushort wNightVideoGain;

		public uint wNightVideoShutter;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_LANE_HVT_PARAM
	{
		public byte byLaneNO;

		public byte bySignSpeed;

		public byte bySpeedLimit;

		public byte byBigCarSignSpeed;

		public byte byBigCarSpeedLimit;

		public byte bySpeedCapEn;

		public byte byCaptureCount;

		public byte byRelatedIOOut;

		public byte byFlashMode;

		public byte byEnableRadar;

		public byte[] byRes2;

		public uint dwCapTarget;

		public NET_ITC_INTERVAL_PARAM struInterval;

		public byte[] byRes3;

		public NET_ITC_LANE_LOGIC_PARAM struLane;

		public NET_ITC_LINE struLeftLaneLine;

		public NET_ITC_LINE struRightLaneLine;

		public NET_ITC_POLYGON struPlateRecog;

		public NET_ITC_POLYGON struTraceArea;

		public NET_VCA_LINE struForwardTrigLine;

		public NET_VCA_LINE struBackwardTrigLine;

		public NET_VCA_LINE struLeftTrigLine;

		public NET_VCA_LINE struRightTrigLine;

		public byte[] byRes4;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_POST_HVT_PARAM
	{
		public byte byLaneNum;

		public byte bySceneMode;

		public byte byRoadExpBright;

		public byte byPlateExpBright;

		public NET_ITC_POLYGON struDetectArea;

		public NET_ITC_SNAPMODE_PARAM struCapMode;

		public NET_ITC_HVT_EC_PARAM struEcParam;

		public NET_ITC_LANE_HVT_PARAM[] struLaneParam;

		public NET_ITC_PLATE_RECOG_PARAM struPlateRecog;

		public NET_DVR_GEOGLOCATION struGeogLocation;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_LANE_MPR_PARAM
	{
		public byte byLaneNO;

		[StructLayout (LayoutKind.Explicit)]
		public struct UTssParamInfo
		{
			[FieldOffset (0)]
			public byte[] uLen;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruIO
			{
				public byte byIONo;

				public byte byTriggerType;

				public byte[] byRes1;
			}


			[FieldOffset (0)]
			public StruIO struIO;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruRS485
			{
				public byte byRelateChan;

				public byte[] byRes2;
			}


			[FieldOffset (0)]
			public StruRS485 struRS485;
		}


		public UTssParamInfo uTssParamInfo;

		public byte byCarDriveDirect;

		public byte[] byRes;

		public NET_ITC_LINE struLaneLine;

		public NET_ITC_POLYGON struPlateRecog;

		public byte byRelaLaneDirectionType;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_POST_MPR_PARAM
	{
		public byte byEnable;

		public byte byLaneNum;

		public byte bySourceType;

		public byte byPicUploadType;

		public byte byRoadType;

		public byte byRes2;

		public ushort wCustomDelayTime;

		public byte[] byRes;

		public NET_ITC_LINE struLaneBoundaryLine;

		public NET_ITC_PLATE_RECOG_PARAM struPlateRecog;

		public NET_ITC_LANE_MPR_PARAM[] struLaneParam;

		public sbyte[] szSceneName;

		public NET_VCA_LINE struSnapLine;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VIA_LANE_PARAM
	{
		public byte byLaneNO;

		public byte[] byRes;

		public NET_ITC_LANE_LOGIC_PARAM struLogicParam;

		public NET_ITC_LINE struLaneLine;

		public NET_ITC_POLYGON struPlateRecog;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VIA_VTCOIL_PARAM
	{
		public byte byEnable;

		public byte byLaneNum;

		public byte[] byRes;

		public NET_ITC_LINE struLaneBoundaryLine;

		public NET_DVR_VIA_LANE_PARAM[] struLaneParam;

		public NET_ITC_PLATE_RECOG_PARAM struPlateRecog;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TRIGGER_COND
	{
		public uint dwSize;

		public uint dwChannel;

		public uint dwTriggerMode;

		public byte byDetSceneID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_LANE_IMT_PARAM
	{
		public byte byLaneNO;

		public byte byRelaLaneDirectionType;

		public byte[] byRes;

		public NET_ITC_LINE struLaneLine;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_POST_IMT_PARAM
	{
		public byte byEnable;

		public byte byLaneNum;

		public byte bySnapMode;

		public byte[] byRes;

		public NET_ITC_PLATE_RECOG_PARAM struPlateRecog;

		public NET_ITC_LINE struLaneBoundaryLine;

		public NET_ITC_LANE_IMT_PARAM[] struLaneParam;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_LANE_PRS_PARAM
	{
		public byte byLaneNO;

		[StructLayout (LayoutKind.Explicit)]
		public struct UTssParamInfo
		{
			[FieldOffset (0)]
			public byte[] uLen;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruIO
			{
				public byte byIONo;

				public byte byTriggerType;

				public byte[] byRes1;
			}


			[FieldOffset (0)]
			public StruIO struIO;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruRS485
			{
				public byte byRelateChan;

				public byte[] byRes2;
			}


			[FieldOffset (0)]
			public StruRS485 struRS485;
		}


		public UTssParamInfo uTssParamInfo;

		public byte[] byRes;

		public NET_ITC_LINE struLaneLine;

		public NET_ITC_POLYGON struPlateRecog;

		public byte byRelaLaneDirectionType;

		public byte[] byRes2;

		public NET_ITC_LINE struTrigLine;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_POST_PRS_PARAM
	{
		public byte byEnable;

		public byte byLaneNum;

		public byte bySourceType;

		public byte bySnapMode;

		public byte byCapMode;

		public byte byNoPlatCarCap;

		public byte bySceneMode;

		public byte[] byRes;

		public NET_ITC_LINE struLaneBoundaryLine;

		public NET_ITC_PLATE_RECOG_PARAM struPlateRecog;

		public NET_ITC_LANE_PRS_PARAM[] struLaneParam;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_IPC_LANE_HVT_PARAM
	{
		public byte byLaneNO;

		public byte byCarDriveDirect;

		public byte[] byRes;

		public NET_ITC_LINE struLaneLine;

		public NET_ITC_POLYGON struPlateRecog;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_IPC_POST_HVT_PARAM
	{
		public byte byEnable;

		public byte byLaneNum;

		public byte[] byRes;

		public NET_ITC_LINE struLaneBoundaryLine;

		public NET_ITC_PLATE_RECOG_PARAM struPlateRecog;

		public NET_IPC_LANE_HVT_PARAM[] struLaneParam;

		public sbyte[] szSceneName;

		public NET_VCA_LINE struSnapLine;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_LANE_HVT_PARAM_V50
	{
		public byte byLaneNO;

		public byte byFlashMode;

		public byte bySignSpeed;

		public byte bySpeedLimit;

		public byte bySignLowSpeed;

		public byte byLowSpeedLimit;

		public byte byBigCarSignSpeed;

		public byte byBigCarSpeedLimit;

		public byte byBigCarSignLowSpeed;

		public byte byBigCarLowSpeedLimit;

		public byte bySnapTimes;

		public byte byDriveLineSnapTime;

		public byte byHighSpeedSnapTime;

		public byte byLowSpeedSnapTime;

		public byte byBanSnapTime;

		public byte byReverseSnapTime;

		public byte byRelatedDriveWay;

		public byte byLaneType;

		public byte byRelaLaneDirectionType;

		public byte[] byRes1;

		public uint dwVioDetectType;

		public uint dwRelatedIOOut;

		public NET_ITC_LINE struTrigLine;

		public NET_ITC_LINE struLineLeft;

		public NET_ITC_POLYGON struPlateRecog;

		public NET_ITC_LANE_LOGIC_PARAM struLane;

		public NET_ITC_INTERVAL_PARAM struInterval;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_POST_HVT_PARAM_V50
	{
		public byte byLaneNum;

		public byte byCapType;

		public byte byCapMode;

		public byte bySecneMode;

		public byte bySpeedMode;

		public byte byLineRuleEffect;

		public byte[] byRes1;

		public NET_ITC_LINE struLeftTrigLine;

		public NET_ITC_LINE struRigtTrigLine;

		public NET_ITC_LINE struLaneBoundaryLine;

		public NET_ITC_POLYGON struDetectArea;

		public NET_DVR_GEOGLOCATION struGeogLocation;

		public NET_ITC_LANE_HVT_PARAM_V50[] struLaneParam;

		public NET_ITC_PLATE_RECOG_PARAM struPlateRecog;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_LANE_NOCOMITY_PEDESTRIAN_PARAM
	{
		public byte byRelatedDriveWay;

		public byte byRelaLaneDirectionType;

		public byte byPedestriansNum;

		public byte byVehicleSpeed;

		public uint dwVehicleInterval;

		public byte byPedesDetRule;

		public byte[] byRes;

		public NET_ITC_LINE struLaneLine;

		public NET_ITC_LINE struStopLine;

		public NET_ITC_POLYGON struPlateRecog;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_NOCOMITY_PEDESTRIAN_PARAM
	{
		public byte byEnable;

		public byte byLaneNum;

		public byte[] byRes;

		public NET_ITC_LINE struLaneBoundaryLine;

		public NET_ITC_LINE struTriggerLine;

		public NET_ITC_POLYGON struPedesDetRecog;

		public NET_ITC_LANE_NOCOMITY_PEDESTRIAN_PARAM[] struLaneParam;

		public NET_ITC_PLATE_RECOG_PARAM struPlateRecog;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_SINGLE_IO_LIGHT_PARAM
	{
		public byte byLightType;

		public byte byRelatedIO;

		public byte byRedLightState;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_IO_LIGHT_PARAM
	{
		public NET_ITC_SINGLE_IO_LIGHT_PARAM[] struIOLight;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_SINGLE_RS485_LIGHT_PARAM
	{
		public byte byLightType;

		public byte byRelatedLightChan;

		public byte byInputLight;

		public byte byRelatedYLightChan;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_RS485_LIGHT_PARAM
	{
		public NET_ITC_SINGLE_RS485_LIGHT_PARAM[] struRS485Light;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_POS_PARAM
	{
		public ushort wLeft;

		public ushort wTop;

		public ushort wRight;

		public ushort wBottom;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_SINGLE_VIDEO_DETECT_LIGHT_PARAM
	{
		public byte byLightNum;

		public byte byStraightLight;

		public byte byLeftLight;

		public byte byRightLight;

		public byte byRedLight;

		public byte byGreenLight;

		public byte byYellowLight;

		public byte byYellowLightTime;

		public NET_POS_PARAM struLightRect;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_VIDEO_DETECT_LIGHT_PARAM
	{
		public NET_ITC_SINGLE_VIDEO_DETECT_LIGHT_PARAM[] struTrafficLight;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_ITC_LIGHT_ACCESSPARAM_UNION
	{
		[FieldOffset (0)]
		public uint[] uLen;

		[FieldOffset (0)]
		public NET_ITC_IO_LIGHT_PARAM struIOLight;

		[FieldOffset (0)]
		public NET_ITC_RS485_LIGHT_PARAM struRS485Light;

		[FieldOffset (0)]
		public NET_ITC_VIDEO_DETECT_LIGHT_PARAM struVideoDelectLight;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_TRAFFIC_LIGHT_PARAM
	{
		public byte bySource;

		public byte[] byRes1;

		public NET_ITC_LIGHT_ACCESSPARAM_UNION struLightAccess;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_VIOLATION_DETECT_LINE
	{
		public NET_ITC_LINE struLaneLine;

		public NET_ITC_LINE struStopLine;

		public NET_ITC_LINE struRedLightLine;

		public NET_ITC_LINE struCancelLine;

		public NET_ITC_LINE struWaitLine;

		public NET_ITC_LINE[] struRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_REDLIGHT_PEDESTRIAN_PARAM
	{
		public byte byEnable;

		public byte bySnapNumTimes;

		public byte byPedesDir;

		public byte byDelayTime;

		public byte byStackTargetEnble;

		public byte byCalibRecogCtrl;

		public byte[] byRes1;

		public NET_ITC_TRAFFIC_LIGHT_PARAM struTrafficLight;

		public NET_ITC_LINE struStopLine;

		public NET_ITC_POLYGON[] struCalibRecog;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_POST_MOBILE_PARAM
	{
		public byte byEnable;

		public byte bySceneMode;

		public ushort wExpressWayCapType;

		public ushort wUrbanRoadCapType;

		public byte byCapNum;

		public byte byRecordEnable;

		public uint dwPreRecordTime;

		public uint dwOverRecordTime;

		public NET_ITC_LANE_LOGIC_PARAM struLane;

		public NET_ITC_POLYGON[] struPolygon;

		public NET_ITC_VIOLATION_DETECT_LINE[] struLine;

		public NET_ITC_LINE struLaneBoundaryLine;

		public NET_ITC_PLATE_RECOG_PARAM struPlateRecog;

		public NET_ITC_INTERVAL_PARAM struInterval;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_ITC_TRIGGER_PARAM_UNION
	{
		[FieldOffset (0)]
		public uint[] uLen;

		[FieldOffset (0)]
		public NET_ITC_POST_IOSPEED_PARAM struIOSpeed;

		[FieldOffset (0)]
		public NET_ITC_POST_SINGLEIO_PARAM struSingleIO;

		[FieldOffset (0)]
		public NET_ITC_POST_RS485_PARAM struPostRs485;

		[FieldOffset (0)]
		public NET_ITC_POST_RS485_RADAR_PARAM struPostRadar;

		[FieldOffset (0)]
		public NET_ITC_POST_VTCOIL_PARAM struVtCoil;

		[FieldOffset (0)]
		public NET_ITC_POST_HVT_PARAM struHvt;

		[FieldOffset (0)]
		public NET_ITC_EPOLICE_IOTL_PARAM struIOTL;

		[FieldOffset (0)]
		public NET_ITC_EPOLICE_RS485_PARAM struEpoliceRs485;

		[FieldOffset (0)]
		public NET_ITC_EPOLICE_RS485_PARAM struPERs485;

		[FieldOffset (0)]
		public NET_ITC_POST_MPR_PARAM struPostMpr;

		[FieldOffset (0)]
		public NET_DVR_VIA_VTCOIL_PARAM struViaVtCoil;

		[FieldOffset (0)]
		public NET_ITC_POST_IMT_PARAM struPostImt;

		[FieldOffset (0)]
		public NET_ITC_POST_PRS_PARAM struPostPrs;

		[FieldOffset (0)]
		public NET_IPC_POST_HVT_PARAM struIpcHvt;

		[FieldOffset (0)]
		public NET_ITC_POST_HVT_PARAM_V50 struHvtV50;

		[FieldOffset (0)]
		public NET_ITC_POST_MOBILE_PARAM struPostMobile;

		[FieldOffset (0)]
		public NET_ITC_NOCOMITY_PEDESTRIAN_PARAM struNoComityPed;

		[FieldOffset (0)]
		public NET_ITC_REDLIGHT_PEDESTRIAN_PARAM struRedLightPed;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_SINGLE_TRIGGERCFG
	{
		public byte byEnable;

		public byte[] byRes1;

		public uint dwTriggerType;

		public NET_ITC_TRIGGER_PARAM_UNION uTriggerParam;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_TRIGGERCFG
	{
		public uint dwSize;

		public NET_ITC_SINGLE_TRIGGERCFG struTriggerParam;

		public byte[] byRes;
	}

	public enum ItcViolationDetectType : uint
	{
		Post = 1,
		Driveline = 2,
		Reverse = 4,
		Redlight = 8,
		Direction = 16,
		IntersectionCongest = 32,
		Nondriveway = 64,
		Changelane = 128,
		Ban = 256,
		IntersectionPark = 512,
		GreenPark = 1024,
		HighSpeed = 2048,
		LowSpeed = 4096,
		Emergency = 8192,
		TurnAround = 32768,
		Congestion = 65536
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_VIOLATION_DETECT_PARAM
	{
		public uint dwVioDetectType;

		public byte byDriveLineSnapTimes;

		public byte byReverseSnapTimes;

		public ushort wStayTime;

		public byte byNonDriveSnapTimes;

		public byte byChangeLaneTimes;

		public byte bybanTimes;

		public byte byDriveLineSnapSen;

		public ushort wSnapPosFixPixel;

		public byte bySpeedTimes;

		public byte byTurnAroundEnable;

		public byte byThirdPlateRecogTime;

		public byte byPostSnapTimes;

		public byte[] byRes1;

		public ushort wStopLineDis;

		public byte[] byRes;
	}

	public enum ItcRelaLaneDirectionType : uint
	{
		DirectionUnknow = 0,
		EastWest = 1,
		WestEast = 2,
		SouthNorth = 3,
		NorthSouth = 4,
		EastsouthWestnorth = 5,
		WestnorthEastsouth = 6,
		EastnorthWestsouth = 7,
		WestsouthEastnorth = 8
	}

	public enum ItcLaneUseageType : uint
	{
		UseageUnknow = 0,
		Carriageway = 1,
		Bus = 2,
		Fast = 3,
		Slow = 4,
		Motor = 5,
		Nonmotor = 6,
		ReverseLane = 7,
		BanTrucks = 8,
		Mix = 9,
		Emergency = 10,
		BanLeft = 11,
		BanRight = 12
	}

	public enum ItcLaneDirectionType : uint
	{
		DirectionUnknow = 0,
		Left = 1,
		Straight = 2,
		LeftStraight = 3,
		Right = 4,
		LeftRight = 5,
		RightStraight = 6,
		LeftRightStraight = 7,
		LeftWait = 9,
		StraightWait = 10,
		Forward = 11,
		Backward = 12,
		Bothway = 13,
		StraightWaitRight = 14
	}

	public enum ItcLaneCarDriveDirect : uint
	{
		Unknow = 0,
		UpToDown = 1,
		DownToUp = 2
	}

	public enum ItcLineType : uint
	{
		TUnknow = 0,
		EWhite = 1,
		EStop = 2,
		ESingleYellow = 3,
		EDoubleYellow = 4,
		EGuardRail = 5,
		ENoCross = 6,
		EDotted = 7
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_LANE_VIDEO_EPOLICE_PARAM
	{
		public byte byLaneNO;

		public byte bySensitivity;

		public byte byEnableRadar;

		public byte byRelaLaneDirectionType;

		public NET_ITC_LANE_LOGIC_PARAM struLane;

		public NET_ITC_VIOLATION_DETECT_PARAM struVioDetect;

		public NET_ITC_VIOLATION_DETECT_LINE struLine;

		public NET_ITC_POLYGON struPlateRecog;

		public byte byRecordEnable;

		public byte byRecordType;

		public byte byPreRecordTime;

		public byte byRecordDelayTime;

		public byte byRecordTimeOut;

		public byte byCarSpeedLimit;

		public byte byCarSignSpeed;

		public byte bySnapPicPreRecord;

		public NET_ITC_INTERVAL_PARAM struInterval;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_VIDEO_EPOLICE_PARAM
	{
		public byte byEnable;

		public byte byLaneNum;

		public byte byLogicJudge;

		public byte byRes1;

		public NET_ITC_PLATE_RECOG_PARAM struPlateRecog;

		public NET_ITC_TRAFFIC_LIGHT_PARAM struTrafficLight;

		public NET_ITC_LANE_VIDEO_EPOLICE_PARAM[] struLaneParam;

		public NET_ITC_LINE struLaneBoundaryLine;

		public NET_ITC_LINE struLeftLine;

		public NET_ITC_LINE struRightLine;

		public NET_ITC_LINE struTopZebraLine;

		public NET_ITC_LINE struBotZebraLine;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_ITC_VIDEO_TRIGGER_PARAM_UNION
	{
		[FieldOffset (0)]
		public uint[] uLen;

		[FieldOffset (0)]
		public NET_ITC_VIDEO_EPOLICE_PARAM struVideoEP;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_VIDEO_TRIGGER_PARAM
	{
		public uint dwSize;

		public uint dwMode;

		public NET_ITC_VIDEO_TRIGGER_PARAM_UNION uVideoTrigger;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_STATUS_DETECTCFG
	{
		public uint dwSize;

		public byte byEnableTrigIODetect;

		public byte byEnableFlashOutDetect;

		public byte byEnableRS485Detect;

		public byte byEnableTrafficLightDetect;

		public byte[] byRes;
	}

	public enum ItcStatusDetectType : uint
	{
		Null = 0,
		Triggerio,
		Flashout,
		Rs485,
		Triggertype,
		TrafficlightColor,
		TrafficlightTurn
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_TRIGGERIO_INFO
	{
		public byte[] byTriggerIOIndex;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_FLASHOUT_INFO
	{
		public byte[] byFlashOutIndex;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_SERIAL_CHECKINFO
	{
		public byte[] bySerialIndex;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_TRIGGERTYPE_INFO
	{
		public byte byTrigTypeIndex;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_TRAFFIC_LIGHT_COLOR
	{
		public byte byLeftLight;

		public byte byRightLight;

		public byte byStraightLight;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_TRAFFIC_LIGHT_TURN
	{
		public byte[] byLightType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_ITC_STATUS_UNION
	{
		[FieldOffset (0)]
		public byte[] uLen;

		[FieldOffset (0)]
		public NET_ITC_TRIGGERIO_INFO struTrigIO;

		[FieldOffset (0)]
		public NET_ITC_FLASHOUT_INFO struFlashOut;

		[FieldOffset (0)]
		public NET_ITC_SERIAL_CHECKINFO struSerial;

		[FieldOffset (0)]
		public NET_ITC_TRIGGERTYPE_INFO struTrigType;

		[FieldOffset (0)]
		public NET_ITC_TRAFFIC_LIGHT_COLOR struTrafficLightColor;

		[FieldOffset (0)]
		public NET_ITC_TRAFFIC_LIGHT_TURN struTrafficLightTurn;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_STATUS_DETECT_RESULT
	{
		public ItcStatusDetectType dwStatusType;

		public NET_ITC_STATUS_UNION uStatusParam;

		public uint dwHoldTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SETUPALARM_PARAM
	{
		public uint dwSize;

		public byte byLevel;

		public byte byAlarmInfoType;

		public byte byRetAlarmTypeV40;

		public byte byRetDevInfoVersion;

		public byte byRetVQDAlarmType;

		public byte byFaceAlarmDetection;

		public byte bySupport;

		public byte byBrokenNetHttp;

		public ushort wTaskNo;

		public byte[] byRes1;

		public byte byCustomCtrl;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_VIDEO_TRIGGER_COND
	{
		public uint dwSize;

		public uint dwChannel;

		public uint dwTriggerMode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_FTP_TYPE_COND
	{
		public uint dwChannel;

		public byte byWorkMode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITC_FTP_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte byAddressType;

		public ushort wFTPPort;

		[StructLayout (LayoutKind.Explicit)]
		public struct UnionServer
		{
			[StructLayout (LayoutKind.Sequential)]
			public struct StruDomain
			{
				public byte[] szDomain;

				public byte[] byRes1;
			}


			[FieldOffset (0)]
			public StruDomain struDomain;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruAddrIP
			{
				public NET_DVR_IPADDR struIp;
			}


			[FieldOffset (0)]
			public StruAddrIP struAddrIP;
		}


		public UnionServer unionServer;

		public byte[] szUserName;

		public byte[] szPassWORD;

		public byte byRes4;

		public byte byDirLevel;

		public byte byIsFilterCarPic;

		public byte byUploadDataType;

		public NET_DVR_PICTURE_NAME struPicNameRule;

		public byte byTopDirMode;

		public byte bySubDirMode;

		public byte byThreeDirMode;

		public byte byFourDirMode;

		public byte[] szPicNameCustom;

		public byte[] szTopCustomDir;

		public byte[] szSubCustomDir;

		public byte[] szThreeCustomDir;

		public byte[] szFourCustomDir;

		public byte[] byRes3;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LATITUDE_PARAM
	{
		public byte byDegree;

		public byte byMinute;

		public byte bySec;

		public byte byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LONGITUDE_PARAM
	{
		public byte byDegree;

		public byte byMinute;

		public byte bySec;

		public byte byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_GPS_DATACFG
	{
		public uint dwSize;

		public byte byGpsDataMode;

		public byte byLongitudeType;

		public byte byLatitudeType;

		public byte byRes;

		public NET_DVR_LATITUDE_PARAM struLatitude;

		public NET_DVR_LONGITUDE_PARAM struLongitude;

		public byte[] byRes1;
	}

	public enum VcaDatabaseType : uint
	{
		Null = 0,
		Snap,
		Face
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_DATABASE_PARAM
	{
		public uint dwSize;

		public uint dwDataBaseID;

		public uint dwDataBaseType;

		public byte[] byDataBaseName;

		public byte[] byAttribute;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_FIND_DATABASE_COND
	{
		public uint dwDataBaseType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_DELETE_DATABASE_COND
	{
		public uint dwSize;

		public uint dwDataBaseType;

		public uint dwDataBaseID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_INQUIRE_SNAPDB_COND
	{
		public uint dwChannel;

		public NET_DVR_TIME struStartTime;

		public NET_DVR_TIME struStopTime;

		public byte bySex;

		public byte[] byRes1;

		public byte[] byStartBirthDate;

		public byte[] byEndBirthDate;

		public byte[] byAttribute1;

		public byte[] byAttribute2;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_INQUIRE_SNAPRECORD_RESULT
	{
		public uint dwSize;

		public uint dwDataBaseID;

		public uint dwRecordID;

		public NET_DVR_TIME struSnapTime;

		public byte bySex;

		public byte[] byRes1;

		public byte[] byStartBirthDate;

		public byte[] byEndBirthDate;

		public byte[] byAttribute1;

		public byte[] byAttribute2;

		public uint dwFacePicID;

		public uint dwFacePicLen;

		public byte[] byRes;

		public unsafe byte* pFacePic;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_VCA_DELETE_SNAPRECORD_COND_UNION
	{
		[FieldOffset (0)]
		public NET_VCA_INQUIRE_SNAPDB_COND struAttribute;

		[FieldOffset (0)]
		public uint dwRecordID;
	}

	public enum VcaDeleteRecordType : uint
	{
		Single = 0,
		Batch
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_DELETE_SNAPRECORD_COND
	{
		public VcaDeleteRecordType dwDeleteType;

		public NET_VCA_DELETE_SNAPRECORD_COND_UNION uDeleteCond;

		public byte[] byRes;
	}

	public enum VcaSearchDatabaseType : uint
	{
		NormalSearchDatabase = 0,
		AdvanceSearchDatabase = 1
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_ADVANCE_SEARCH_DATABASE_COND
	{
		public uint dwDataBaseType;

		public uint dwDataBaseID;

		public uint dwFacePicID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_VCA_SEARCH_DATABASE_COND_UNION
	{
		[FieldOffset (0)]
		public uint[] uLen;

		[FieldOffset (0)]
		public NET_VCA_REGISTER_PIC struNormalFind;

		[FieldOffset (0)]
		public NET_VCA_ADVANCE_SEARCH_DATABASE_COND struAdvanceFind;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_SEARCH_DATABASE_PARAM
	{
		public uint dwSearchType;

		public NET_VCA_SEARCH_DATABASE_COND_UNION uSearchCond;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_SEARCH_SNAPDB_COND
	{
		public uint dwChannel;

		public uint dwDataBaseID;

		public NET_DVR_TIME struStartTime;

		public NET_DVR_TIME struStopTime;

		public byte bySex;

		public byte[] byRes1;

		public byte[] byStartBirthDate;

		public byte[] byEndBirthDate;

		public byte[] byAttribute1;

		public byte[] byAttribute2;

		public NET_VCA_SEARCH_DATABASE_PARAM struSearchParam;

		public uint dwMaxSearchNum;

		public ushort wThreshold;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_SEARCH_SNAPRECORD_RESULT
	{
		public uint dwSize;

		public uint dwDataBaseID;

		public uint dwRecordID;

		public NET_DVR_TIME struSnapTime;

		public byte bySex;

		public byte[] byRes1;

		public byte[] byStartBirthDate;

		public byte[] byEndBirthDate;

		public byte[] byAttribute1;

		public byte[] byAttribute2;

		public float fSimilarity;

		public uint dwFacePicID;

		public uint dwFacePicLen;

		public byte[] byRes;

		public unsafe byte* pFacePic;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_DATARECORD_INFO
	{
		public uint dwSize;

		public uint dwRecordID;

		public NET_VCA_HUMAN_ATTRIBUTE struAttribute;

		public NET_VCA_REGISTER_PIC struRegisterPic;

		public byte[] byRemark1;

		public byte[] byRemark2;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_FAST_DATARECORD_INFO
	{
		public uint dwSize;

		public NET_VCA_HUMAN_ATTRIBUTE struAttribute;

		public byte[] byRemark1;

		public byte[] byRemark2;

		public uint dwImageLen;

		public byte[] byRes;

		public unsafe byte* pImage;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_INQUIRE_DATARECORD_RESULT
	{
		public uint dwSize;

		public uint dwDataBaseID;

		public uint dwRecordID;

		public NET_VCA_HUMAN_ATTRIBUTE struAttribute;

		public byte[] byRemark1;

		public byte[] byRemark2;

		public uint dwFacePicID;

		public uint dwFacePicLen;

		public byte[] byRes;

		public unsafe byte* pFacePic;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_SEARCH_DATARECORD_RESULT
	{
		public uint dwSize;

		public uint dwDataBaseID;

		public uint dwRecordID;

		public NET_VCA_HUMAN_ATTRIBUTE struAttribute;

		public byte[] byRemark1;

		public byte[] byRemark2;

		public float fSimilarity;

		public uint dwFacePicID;

		public uint dwFacePicLen;

		public byte[] byRes;

		public unsafe byte* pFacePic;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_DATARECORD_COND
	{
		public uint dwDataBaseID;

		public NET_VCA_HUMANATTRIBUTE_COND struAttribute;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_VCA_DELETE_RECORD_COND_UNION
	{
		[FieldOffset (0)]
		public NET_VCA_HUMANATTRIBUTE_COND struAttribute;

		[FieldOffset (0)]
		public uint dwRecordID;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_DELETE_RECORD_COND
	{
		public VcaDeleteRecordType dwDeleteType;

		public NET_VCA_DELETE_RECORD_COND_UNION uDeleteCond;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_SEARCH_FACEDB_COND
	{
		public uint dwDataBaseID;

		public NET_VCA_HUMANATTRIBUTE_COND struAttribute;

		public NET_VCA_SEARCH_DATABASE_PARAM struSearchParam;

		public uint dwMaxSearchNum;

		public ushort wThreshold;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_FIND_MATCHPIC_COND
	{
		public uint dwSize;

		public uint dwDataBaseType;

		public uint dwDataBaseID;

		public uint dwRecordID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_FIND_MATCHPIC_RESULT
	{
		public uint dwSize;

		public uint dwDataBaseType;

		public uint dwDataBaseID;

		public uint dwRecordID;

		public uint dwPicLen;

		public byte[] byRes;

		public unsafe byte* pPicBuffer;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_REMOTECONTROL_ALARM_PARAM
	{
		public uint dwSize;

		public uint dwChannel;

		public ushort wDealyTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_REMOTECONTROL_STUDY_PARAM
	{
		public uint dwSize;

		public uint dwChannel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WIRELESS_ALARM_STUDY_PARAM
	{
		public uint dwSize;

		public uint dwChannel;

		public byte byIndex;

		public byte[] byRes;
	}

	public enum IpcAuxAlarmType : uint
	{
		Unknow = 0,
		Pir = 1,
		Wireless = 2,
		Callhelp = 3
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_IPC_AUDIO_LIMIT_ALARM_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes1;

		public uint dwDecibelLimit;

		public NET_DVR_HANDLEEXCEPTION_V30 struHandleException;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_IPC_BUTTON_DOWN_ALARM_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes1;

		public NET_DVR_HANDLEEXCEPTION_V30 struHandleException;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_IPC_PIR_ALARMCFG
	{
		public byte[] byAlarmName;

		public byte byAlarmHandle;

		public byte[] byRes1;

		public NET_DVR_HANDLEEXCEPTION_V30 struAlarmHandleType;

		public byte[] byRelRecordChan;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_IPC_PIR_ALARMCFG_EX
	{
		public byte[] byAlarmName;

		public byte byAlarmHandle;

		public byte[] byRes1;

		public NET_DVR_HANDLEEXCEPTION_V30 struAlarmHandleType;

		public byte[] byRelRecordChan;

		public NET_DVR_SCHEDTIME[][] struAlarmTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_IPC_CALLHELP_ALARMCFG
	{
		public byte byAlarmHandle;

		public byte[] byRes1;

		public NET_DVR_HANDLEEXCEPTION_V30 struAlarmHandleType;

		public byte[] byRelRecordChan;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_IPC_SINGLE_WIRELESS_ALARMCFG
	{
		public byte[] byAlarmName;

		public byte byAlarmHandle;

		public byte byID;

		public byte[] byRes1;

		public NET_DVR_HANDLEEXCEPTION_V30 struAlarmHandleType;

		public byte[] byRelRecordChan;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_IPC_WIRELESS_ALARMCFG
	{
		public NET_IPC_SINGLE_WIRELESS_ALARMCFG[] struWirelessAlarm;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_IPC_AUX_ALARMCFG_UNION
	{
		[FieldOffset (0)]
		public uint[] uLen;

		[FieldOffset (0)]
		public NET_IPC_PIR_ALARMCFG_EX struPIRAlarm;

		[FieldOffset (0)]
		public NET_IPC_WIRELESS_ALARMCFG struWirelessAlarm;

		[FieldOffset (0)]
		public NET_IPC_CALLHELP_ALARMCFG struCallHelpAlarm;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_IPC_SINGLE_AUX_ALARMCFG
	{
		public byte byAlarmType;

		public byte[] byRes1;

		public NET_IPC_AUX_ALARMCFG_UNION uAlarm;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_IPC_AUX_ALARMCFG
	{
		public uint dwSize;

		public NET_IPC_SINGLE_AUX_ALARMCFG[] struAlarm;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_IPC_AUXALARM_UPLOAD_UNION
	{
		[FieldOffset (0)]
		public uint[] uLen;

		[FieldOffset (0)]
		public NET_IPC_PIR_ALARMCFG struPIRAlarm;

		[FieldOffset (0)]
		public NET_IPC_SINGLE_WIRELESS_ALARMCFG struWirelessAlarm;

		[FieldOffset (0)]
		public NET_IPC_CALLHELP_ALARMCFG struCallHelpAlarm;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_IPC_AUXALARM_RESULT
	{
		public uint dwSize;

		public uint dwChannel;

		public byte byAlarmType;

		public byte[] byRes1;

		public NET_IPC_AUXALARM_UPLOAD_UNION struAuxAlarm;

		public byte[] byDeviceID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PREVIEW_DISPLAYCFG
	{
		public uint dwSize;

		public byte byCorrectMode;

		public byte byMountType;

		public byte byRealTimeOutput;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_REMOTECONTROL_PTZ_PARAM
	{
		public uint dwSize;

		public uint dwChannel;

		public uint dwPTZCommand;

		public NET_VCA_POINT struVcaPoint;

		public uint dwSpeed;

		public uint dwStop;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PRESET_POINT_PARAM
	{
		public uint dwSize;

		public uint dwChannel;

		public uint dwPTZPresetCmd;

		public NET_VCA_POINT struVcaPoint;

		public uint dwPresetIndex;

		public ushort wZoomCoordinate;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PTZ_CRUISE_PARAM
	{
		public uint dwSize;

		public uint dwChannel;

		public uint dwPTZCruiseCmd;

		public NET_VCA_POINT struVcaPoint;

		public ushort wCruiseRoute;

		public ushort wCruisePoint;

		public ushort wInput;

		public ushort wZoomCoordinate;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WPS_PARAM
	{
		public uint dwSize;

		public byte byEnableWps;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PIN_PARAM
	{
		public uint dwSize;

		public byte[] byPIN;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WPS_CONNECT_PARAM
	{
		public uint dwSize;

		public byte byConnectType;

		public byte[] byRes1;

		public byte[] byPIN;

		public byte[] byEssid;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DECODER_JOINT_PARAM
	{
		public uint dwSize;

		public byte byJointed;

		public byte[] byRes1;

		public NET_DVR_IPADDR struIP;

		public ushort wPort;

		public ushort wChannel;

		public byte[] sDeviceName;

		public byte[] sChanName;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PIC_VIEW_PARAM
	{
		public uint dwSize;

		public NET_DVR_IPADDR struCuIp;

		public ushort wPort;

		public byte bySourceIndex;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PICVIEW_CALLBACKPARAM
	{
		public uint dwUserID;

		public byte[] sDeviceID;

		public int nPicViewHandle;

		public ushort wSignalIndex;

		public ushort wHeadLen;

		public byte[] byHeadBuf;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEVICEID_INFO
	{
		public uint dwSize;

		public uint dwDeviceIndex;

		public byte byWallNo;

		public byte[] byRes1;

		public uint dwChan;

		public uint dwInputSignalIndex;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SINGLE_NETPARAM
	{
		public uint dwSize;

		public byte byUseDhcp;

		public byte[] byRes1;

		public NET_DVR_IPADDR struDevIP;

		public NET_DVR_IPADDR struSubnetMask;

		public NET_DVR_IPADDR struGateway;

		public ushort wDevPort;

		public byte[] byMACAddr;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CHAN_INFO
	{
		public uint dwSize;

		public byte byValid;

		public byte[] byRes1;

		public byte[] sChanName;

		public NET_DVR_COLOR struVideoColor;

		public ushort wResolutionX;

		public ushort wResolutionY;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CODEDEV_INFO
	{
		public NET_DVR_CHAN_INFO[] struChanInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DECODEDEV_INFO
	{
		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_NETSIGNAL_INFO
	{
		public uint dwSize;

		public byte[] byDevName;

		public NET_DVR_PU_STREAM_CFG struPuStream;

		public byte byValid;

		public byte[] byRes1;

		public byte[] sGroupName;

		public ushort wResolutionX;

		public ushort wResolutionY;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_NETSIGNALDEV_INFO
	{
		public NET_DVR_NETSIGNAL_INFO struDevInfo;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_DIFFDEV_INFO
	{
		[FieldOffset (0)]
		public NET_DVR_CODEDEV_INFO struCodeDevInfo;

		[FieldOffset (0)]
		public NET_DVR_DECODEDEV_INFO struDecodeDevInfo;

		[FieldOffset (0)]
		public NET_DVR_NETSIGNALDEV_INFO struNetSignalInfo;
	}

	public enum NetDvcsDeviceType : uint
	{
		BncProc = 1,
		RgbProc,
		StpProc,
		DispProc,
		Netsignal,
		SdiProc,
		BiwProc,
		DonProc,
		TviProc,
		Di2Proc
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SINGLE_DEV_INFO
	{
		public uint dwSize;

		public uint dwSoftVersion;

		public uint dwSoftwareBuildDate;

		public byte byUseInSys;

		public byte byDevStatus;

		public byte byDeviceType;

		public byte[] byRes1;

		public byte[] sDevName;

		public NET_DVR_SINGLE_NETPARAM[] struEtherNet;

		public byte[] sSerialNumber;

		public NET_DVR_DIFFDEV_INFO struSubDevInfo;

		public uint dwDeviceIndex;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEVLIST
	{
		public uint dwSize;

		public uint dwDevNums;

		public unsafe byte* pBuffer;

		public byte[] byRes1;

		public uint dwBufLen;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEV_BASE_INFO
	{
		public uint dwSize;

		public byte byEnable;

		public byte byDeviceType;

		public byte[] byRes1;

		public byte[] sDevName;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_NETPARAM
	{
		public uint dwSize;

		public NET_DVR_SINGLE_NETPARAM[] struEtherNet;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DISP_SCREEN
	{
		public uint dwSize;

		public ushort wScreenID;

		public byte byWallNo;

		public byte byRes1;

		public uint dwDeviceIndex;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TEXTSHOW
	{
		public uint dwSize;

		public byte byShowText;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCREENLIST
	{
		public uint dwSize;

		public byte byWallNo;

		public byte[] byRes;

		public uint dwScreenNums;

		public unsafe byte* pBuffer;

		public uint dwBufLen;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_OPERATE_DEVICE
	{
		public uint dwSize;

		public uint dwSubCommand;

		public uint dwDeviceIndex;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_UPGRADE_STATE
	{
		public uint dwProgress;

		public byte byState;

		public byte[] byRes2;
	}

	public enum PicPreviewDatatype : uint
	{
		DataBmp = 0,
		StartCallback,
		StreamSyshead,
		StreamData
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_START_PIC_VIEW_INFO
	{
		public uint dwSize;

		public uint dwSignalIndex;

		public uint dwDeviceIndex;

		public byte[] byRes1;

		public byte byChanIndex;

		public byte[] byRes2;

		public uint dwScreenNum;

		public uint dwLayer;

		public uint dwResolution;

		public byte byFrame;

		public byte bySupportStreamView;

		public byte[] byRes3;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DVCS_STATE_ALARM
	{
		public uint dwSize;

		public byte byAlarmType;

		public byte byDeviceType;

		public byte byWallNo;

		public byte byDeviceChanIndex;

		public uint dwDeviceIndex;

		public ushort wResolutionX;

		public ushort wResolutionY;

		public ushort wTemperature;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PIC_ADJUST
	{
		public uint dwSize;

		public byte bySubCommand;

		public byte byScale;

		public byte byPictureProportion;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PICTURE_PARAM
	{
		public uint dwSize;

		public byte byControlCommand;

		public byte byUseType;

		public byte byWallNo;

		public byte byPictureNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_POE_CHANNEL_ADD_MODE
	{
		public uint dwSize;

		public byte byAddMode;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ESATA_MINISAS_USAGE
	{
		public uint dwSize;

		public byte[] byESATAUsage;

		public byte[] byMiniSASUsage;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BACKUP_LOG_PARAM
	{
		public uint dwSize;

		public byte[] byDiskDesc;

		public byte[] byHardDisk;

		public byte byBackupHardDiskNum;

		public byte byContinue;

		public byte byAllLogBackUp;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DIGITAL_CHANNEL_STATE
	{
		public uint dwSize;

		public byte[] byDigitalAudioChanTalkState;

		public byte[] byDigitalChanState;

		public byte[] byDigitalAudioChanTalkStateEx;

		public byte[] byDigitalChanStateEx;

		public byte[] byAnalogChanState;

		public byte[] byRes;
	}

	public enum NetSdkDigitalChannelStatus : uint
	{
		Connected = 1,
		Connecting,
		BandWidthExceed,
		DomainError,
		ChannelError,
		AccountError,
		StreamTypeNotSupport,
		ConflictWithDvr,
		ConflictWithIpc,
		NetworkUnreachbale,
		IpcNotExist,
		IpcException,
		OtherError,
		ResolutionNotSupport,
		IpcLanErr = 15,
		UserLocked = 16,
		NotActivated = 17,
		UserNotExist = 18,
		IpcUnregistered = 19,
		PoePortDetecting = 20
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITS_BASEINFO
	{
		public uint dwSize;

		public byte[] byMainVer;

		public byte[] byMprVer;

		public byte[] byBvtVer;

		public byte[] byLptVer;

		public byte[] byTvdVer;

		public byte[] byTldVer;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITS_IMGMERGE_CFG
	{
		public uint dwSize;

		public byte byIsMerge;

		public byte byCloseupProportion;

		public byte[] byRes1;

		public uint dwOneMergeType;

		public uint dwTwoMergeType;

		public uint dwThreeMergeType;

		public uint dwJpegQuality;

		public uint dwCloseupIndex;

		public uint dwMerageMaxSize;

		public ushort wCloseupDeviation;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITS_TRAFFIC_DATA_HOST
	{
		public NET_DVR_IPADDR struHostAddr;

		public ushort wHostPort;

		public byte[] byRes1;

		public uint dwDataType;

		public byte bySuspendUpload;

		public byte byUploadStrategy;

		public ushort wUploadInterval;

		public uint dwUploadTimeOut;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITS_UPLOAD_CFG
	{
		public uint dwSize;

		public NET_ITS_TRAFFIC_DATA_HOST struRemoteDataHost1;

		public NET_ITS_TRAFFIC_DATA_HOST struRemoteDataHost2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SYSTEM_TIME
	{
		public ushort wYear;

		public ushort wMonth;

		public ushort wDay;

		public ushort wHour;

		public ushort wMinute;

		public ushort wSecond;

		public ushort wMilliSec;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITS_TRAFFIC_DATA_INFO
	{
		public uint dwDataQuantity;

		public uint dwDataRsendQuantity;

		public NET_DVR_SYSTEM_TIME struStartTime;

		public NET_DVR_SYSTEM_TIME struEndTime;

		public NET_DVR_IPADDR struDataHost;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITS_WORKSTATE
	{
		public uint dwSize;

		public byte[] byDevName;

		public uint dwRunTime;

		public NET_ITS_TRAFFIC_DATA_INFO[] struTrafficDataInfo;

		public uint dwMemoryUsage;

		public uint dwCpuUsage;

		public uint dwDevTemperature;

		public uint dwDeviceStatic;

		public NET_DVR_DISKSTATE[] struHardDiskStatic;

		public NET_DVR_CHANNELSTATE_V30[] struChanStatic;

		public byte[] byAlarmInStatic;

		public byte[] byAlarmOutStatic;

		public uint dwLocalDisplay;

		public byte[] byAudioInChanStatus;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITS_ECT_WORKSTATE_COMMAND
	{
		public uint dwSize;

		public uint dwChannel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITS_ECTWORKSTATE
	{
		public uint dwSize;

		public byte[] byDevName;

		public uint dwRunTime;

		public NET_ITS_TRAFFIC_DATA_INFO[] struTrafficDataInfo;

		public uint dwMemoryUsage;

		public uint dwCpuUsage;

		public uint dwDevTemperature;

		public uint dwDeviceStatic;

		public NET_DVR_DISKSTATE[] struHardDiskStatic;

		public byte[] byAlarmInStatic;

		public byte[] byAlarmOutStatic;

		public uint dwLocalDisplay;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITS_PICTURE_INFO
	{
		public uint dwDataLen;

		public byte byType;

		public byte byDataType;

		public byte byCloseUpType;

		public byte byPicRecogMode;

		public uint dwRedLightTime;

		public byte[] byAbsTime;

		public NET_VCA_RECT struPlateRect;

		public NET_VCA_RECT struPlateRecgRect;

		public unsafe byte* pBuffer;

		public uint dwUTCTime;

		public byte byCompatibleAblity;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITS_ILLEGAL_INFO
	{
		public byte[] byIllegalInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITS_PLATE_RESULT
	{
		public uint dwSize;

		public uint dwMatchNo;

		public byte byGroupNum;

		public byte byPicNo;

		public byte bySecondCam;

		public byte byFeaturePicNo;

		public byte byDriveChan;

		public byte byVehicleType;

		public byte byDetSceneID;

		public byte byVehicleAttribute;

		public ushort wIllegalType;

		public byte[] byIllegalSubType;

		public byte byPostPicNo;

		public byte byChanIndex;

		public ushort wSpeedLimit;

		public byte[] byRes2;

		public NET_DVR_PLATE_INFO struPlateInfo;

		public NET_DVR_VEHICLE_INFO struVehicleInfo;

		public byte[] byMonitoringSiteID;

		public byte[] byDeviceID;

		public byte byDir;

		public byte byDetectType;

		public byte byRelaLaneDirectionType;

		public byte byCarDirectionType;

		public uint dwCustomIllegalType;

		public unsafe byte* pIllegalInfoBuf;

		public byte byIllegalFromatType;

		public byte byPendant;

		public byte byDataAnalysis;

		public byte byYellowLabelCar;

		public byte byDangerousVehicles;

		public byte byPilotSafebelt;

		public byte byCopilotSafebelt;

		public byte byPilotSunVisor;

		public byte byCopilotSunVisor;

		public byte byPilotCall;

		public byte byBarrierGateCtrlType;

		public byte byAlarmDataType;

		public NET_DVR_TIME_V30 struSnapFirstPicTime;

		public uint dwIllegalTime;

		public uint dwPicNum;

		public NET_ITS_PICTURE_INFO[] struPicInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITS_GATE_VEHICLE
	{
		public uint dwSize;

		public uint dwMatchNo;

		public byte byGroupNum;

		public byte byPicNo;

		public byte bySecondCam;

		public byte byRes;

		public ushort wLaneid;

		public byte byCamLaneId;

		public byte byRes1;

		public byte[] byAlarmReason;

		public ushort wBackList;

		public ushort wSpeedLimit;

		public uint dwChanIndex;

		public NET_DVR_PLATE_INFO struPlateInfo;

		public NET_DVR_VEHICLE_INFO struVehicleInfo;

		public byte[] byMonitoringSiteID;

		public byte[] byDeviceID;

		public byte byDir;

		public byte byDetectType;

		public byte[] byRes2;

		public byte[] byCardNo;

		public uint dwPicNum;

		public NET_ITS_PICTURE_INFO[] struPicInfo;

		public byte[] bySwipeTime;

		public byte[] byRes3;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITS_GATE_FACE
	{
		public uint dwSize;

		public byte byGroupNum;

		public byte byPicNo;

		public byte byFeaturePicNo;

		public byte byRes;

		public ushort wLaneid;

		public byte byCamLaneId;

		public byte byDir;

		public uint dwChanIndex;

		public byte[] byMonitoringSiteID;

		public byte[] byDeviceID;

		public NET_VCA_FACESNAP_RESULT struFaceInfo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITS_PARK_VEHICLE
	{
		public uint dwSize;

		public byte byGroupNum;

		public byte byPicNo;

		public byte byLocationNum;

		public byte byParkError;

		public byte[] byParkingNo;

		public byte byLocationStatus;

		public byte bylogicalLaneNum;

		public ushort wUpLoadType;

		public byte[] byRes1;

		public uint dwChanIndex;

		public NET_DVR_PLATE_INFO struPlateInfo;

		public NET_DVR_VEHICLE_INFO struVehicleInfo;

		public byte[] byMonitoringSiteID;

		public byte[] byDeviceID;

		public uint dwPicNum;

		public NET_ITS_PICTURE_INFO[] struPicInfo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TFS_ALARM
	{
		public uint dwSize;

		public uint dwRelativeTime;

		public uint dwAbsTime;

		public uint dwIllegalType;

		public uint dwIllegalDuration;

		public byte[] byMonitoringSiteID;

		public byte[] byDeviceID;

		public NET_VCA_DEV_INFO struDevInfo;

		public NET_DVR_SCENE_INFO struSceneInfo;

		public NET_DVR_TIME_EX struBeginRecTime;

		public NET_DVR_TIME_EX struEndRecTime;

		public NET_DVR_AID_INFO struAIDInfo;

		public NET_DVR_PLATE_INFO struPlateInfo;

		public NET_DVR_VEHICLE_INFO struVehicleInfo;

		public uint dwPicNum;

		public NET_ITS_PICTURE_INFO[] struPicInfo;

		public byte bySpecificVehicleType;

		public byte byLaneNo;

		public byte[] byRes1;

		public NET_DVR_TIME_V30 struTime;

		public uint dwSerialNo;

		public byte byVehicleAttribute;

		public byte byPilotSafebelt;

		public byte byCopilotSafebelt;

		public byte byPilotSunVisor;

		public byte byCopilotSunVisor;

		public byte byPilotCall;

		public byte[] byRes2;

		public byte[] byIllegalCode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITS_ECT_BLACKLIST
	{
		public uint dwSize;

		public uint dwChannel;

		public byte bylogicalLaneNo;

		public byte[] byRes1;

		public byte[] byLaneName;

		public NET_DVR_PLATE_INFO struPlateInfo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITS_IPC_CHAN_CFG
	{
		public uint dwSize;

		public byte byCameraType;

		public byte[] byRes1;

		public byte[] byMonitoringSiteID;

		public byte[] byDeviceID;

		public byte byDirectionNo;

		public byte[] byMonitorInfo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITS_SINGLE_DEVICE_INFO
	{
		public uint dwDeviceType;

		public uint dwDirID;

		public uint dwLaneID;

		public uint dwDeviceState;

		public byte[] byDeviceName;

		public byte[] byDeviceID;

		public NET_DVR_TIME_V30 struTriggerTime;

		public byte byRelateChan;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITS_ROADINFO
	{
		public uint dwSize;

		public uint dwChannel;

		public byte byTriggerMode;

		public byte[] byRes1;

		public uint dwDeviceNum;

		public byte[] byMonitoringSiteID;

		public byte[] byRoadInfo;

		public NET_ITS_SINGLE_DEVICE_INFO[] struSingleDevice;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITS_TRAFFIC_DRIVE_CHAN
	{
		public byte byDriveChan;

		public byte[] byRes1;

		public ushort wCarFlux;

		public ushort wPasserbyFlux;

		public ushort wShayFlux;

		public float fAverOccpancy;

		public ushort wAverSpeed;

		public ushort wAverCarDis;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITS_TRAFFIC_COLLECT
	{
		public uint dwSize;

		public byte[] byMonitoringSiteID;

		public byte[] byDeviceID;

		public byte byLaneNum;

		public byte byDir;

		public byte byDetectType;

		public byte byRes1;

		public uint dwChannel;

		public NET_DVR_SYSTEM_TIME struStartTime;

		public uint dwSamplePeriod;

		public NET_ITS_TRAFFIC_DRIVE_CHAN[] struDriveChan;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITS_OVERLAPCFG_COND
	{
		public uint dwSize;

		public uint dwChannel;

		public uint dwConfigMode;

		public byte byPicModeType;

		public byte byRelateType;

		public byte[] byRes;
	}

	public enum ItsOverlapItemType : uint
	{
		Null = 0,
		Site,
		Roadnum,
		Instrumentnum,
		Direction,
		Directiondesc,
		Lanenum,
		Lanedes,
		Captime,
		CaptimeMillsecond,
		Platenum,
		Carcolor,
		Cartype,
		Carbrand,
		Carspeed,
		Speedlimit,
		Carlength,
		Illegalnum,
		MonitorInfo,
		Illegaldes,
		OverspeedPercent,
		RedStarttime,
		RedStoptime,
		RedDuration,
		SecunityCode,
		CapCode,
		Seatbelt,
		MonitorId,
		SunVisor,
		LaneDirection,
		LicensePlateColor,
		SceneNumber,
		SceneName,
		YellowSignCar,
		DangerousCar,
		CarSubbrand,
		CarDirection,
		Pendant,
		Call
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITS_OVERLAP_SINGLE_ITEM_PARAM
	{
		public byte[] byRes1;

		public byte byItemType;

		public byte byChangeLineNum;

		public byte bySpaceNum;

		public byte[] byRes2;

		public byte byEnablePos;

		public ushort wStartPosTop;

		public ushort wStartPosLeft;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITS_OVERLAP_ITEM_PARAM
	{
		public NET_ITS_OVERLAP_SINGLE_ITEM_PARAM[] struSingleItem;

		public uint dwLinePercent;

		public uint dwItemsStlye;

		public ushort wStartPosTop;

		public ushort wStartPosLeft;

		public ushort wCharStyle;

		public ushort wCharSize;

		public ushort wCharInterval;

		public byte[] byRes1;

		public uint dwForeClorRGB;

		public uint dwBackClorRGB;

		public byte byColorAdapt;

		public byte byParamFillZeroEnble;

		public byte byPlateLeftCornerEnable;

		public byte byRes2;

		public ushort wStartSPicPosTop;

		public ushort wStartSPicPosLeft;

		public byte byOsdLocate;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITS_OVERLAP_INFO_PARAM
	{
		public byte[] bySite;

		public byte[] byRoadNum;

		public byte[] byInstrumentNum;

		public byte[] byDirection;

		public byte[] byDirectionDesc;

		public byte[] byLaneDes;

		public byte[] byRes1;

		public byte[] byMonitoringSite1;

		public byte[] byMonitoringSite2;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITS_OVERLAP_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes1;

		public NET_ITS_OVERLAP_ITEM_PARAM struOverLapItem;

		public NET_ITS_OVERLAP_INFO_PARAM struOverLapInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITS_OVERLAP_SINGLE_ITEM_PARAM_V50
	{
		public byte[] byRes1;

		public byte byItemType;

		public byte byChangeLineNum;

		public byte bySpaceNum;

		public byte[] byRes2;

		public byte byEnablePos;

		public ushort wStartPosTop;

		public ushort wStartPosLeft;

		public byte[] byItemTypeCustom;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITS_OVERLAP_ITEM_PARAM_V50
	{
		public NET_ITS_OVERLAP_SINGLE_ITEM_PARAM_V50[] struSingleItem;

		public uint dwLinePercent;

		public uint dwItemsStlye;

		public ushort wStartPosTop;

		public ushort wStartPosLeft;

		public ushort wCharStyle;

		public ushort wCharSize;

		public ushort wCharInterval;

		public byte[] byRes1;

		public uint dwForeClorRGB;

		public uint dwBackClorRGB;

		public byte byColorAdapt;

		public byte byParamFillZeroEnble;

		public byte byPlateLeftCornerEnable;

		public byte byRes2;

		public ushort wStartSPicPosTop;

		public ushort wStartSPicPosLeft;

		public byte byOsdLocate;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITS_OVERLAP_CFG_V50
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes1;

		public NET_ITS_OVERLAP_ITEM_PARAM_V50 struOverLapItemV50;

		public NET_ITS_OVERLAP_INFO_PARAM struOverLapInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PRESET_INFO
	{
		public uint dwSize;

		public uint dwPresetNum;

		public uint dwGroupNum;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PRESET_COND
	{
		public uint dwSize;

		public uint dwChannel;

		public uint dwGroupNO;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PRESETCFG
	{
		public uint dwSize;

		public uint dwPresetIndex;

		public NET_VCA_POINT struVcaPoint;

		public ushort wZoomCoordinate;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PTZCRUISE_INFO
	{
		public uint dwSize;

		public uint dwPtzCruiseNum;

		public uint dwGroupNum;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PTZCRUISE_COND
	{
		public uint dwSize;

		public uint dwChannel;

		public uint dwGroupNO;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PTZCRUISE_POINTCFG
	{
		public uint dwSize;

		public uint dwPresetIndex;

		public NET_VCA_POINT struVcaPoint;

		public byte byDwell;

		public byte bySpeed;

		public ushort wZoomCoordinate;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PTZCRUISECFG
	{
		public uint dwSize;

		public uint dwCruiseRoute;

		public NET_DVR_PTZCRUISE_POINTCFG[] struCruisePoint;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MOTION_TRACK_CFG
	{
		public uint dwSize;

		public byte byEnableTrack;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DAY_SCHEDULE
	{
		public byte byWorkMode;

		public byte[] byRes1;

		public NET_DVR_SCHEDTIME[] struTime;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCHEDULE_AUTO_TRACK_CFG
	{
		public uint dwSize;

		public byte byEnableTrack;

		public byte[] byRes1;

		public NET_DVR_DAY_SCHEDULE[] struSchedule;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_I_FRAME
	{
		public uint dwSize;

		public byte[] sStreamID;

		public uint dwChan;

		public byte byStreamType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_REBOOT_TIME
	{
		public byte byDate;

		public byte byHour;

		public byte byMinute;

		public byte byRes1;

		public byte byRebootMode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_AUTO_REBOOT_CFG
	{
		public uint dwSize;

		public NET_DVR_REBOOT_TIME struRebootTime;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MENU_OUTPUT_MODE
	{
		public uint dwSize;

		public byte byMenuOutputMode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MB_IPADDR
	{
		public NET_DVR_IPADDR struIP;

		public ushort wPort;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MB_WVSPARA
	{
		public NET_DVR_MB_IPADDR struWVSAddr;

		public byte[] byPuid;

		public byte[] byPassword;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MB_EHOMEPARA
	{
		public NET_DVR_MB_IPADDR struEHomeAddr;

		public byte[] byPuid;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MB_PLATFORMPARA
	{
		public uint dwSize;

		public byte byNetEnvironment;

		public byte byCurPlatForm;

		public byte[] byRes1;

		public NET_DVR_MB_WVSPARA struWVSPara;

		public NET_DVR_MB_EHOMEPARA struMbEHpara;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MB_GPS_STATUS
	{
		public byte byGPSModule;

		public byte byPositionStatus;

		public byte bySignalStrength;

		public byte[] byres;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MB_GSENSOR_STATUS
	{
		public byte byGsensorModule;

		public byte[] byCurAccX;

		public byte[] byCurAccY;

		public byte[] byCurAccZ;

		public byte[] byRefAccX;

		public byte[] byRefAccY;

		public byte[] byRefAccZ;

		public byte[] byres;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MB_WIFI_STATUS
	{
		public byte byEnableWiFi;

		public byte byWiFiConnectStatus;

		public byte bySignalStrength;

		public byte[] byIPaddress;

		public byte[] byEssid;

		public byte[] byres;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MB_PLATFORM_STATUS
	{
		public byte byCurPlat;

		public byte byLoginStatus;

		public byte byExceptionInfo;

		public byte[] byres;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MB_MOBILEDEV_STATUS
	{
		public uint dwSize;

		[StructLayout (LayoutKind.Explicit)]
		public struct MobileStatus
		{
			[FieldOffset (0)]
			public NET_DVR_MB_GPS_STATUS struGPSStatus;

			[FieldOffset (0)]
			public NET_DVR_MB_GSENSOR_STATUS struGSensorStatus;

			[FieldOffset (0)]
			public NET_DVR_MB_WIFI_STATUS struWiFiStatus;

			[FieldOffset (0)]
			public NET_DVR_MB_PLATFORM_STATUS struPlatformStatus;
		}


		public MobileStatus mobileStatus;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_GPS_INFO
	{
		public byte[] byDirection;

		public byte bySvs;

		public byte byLocateMode;

		public ushort wHDOP;

		public ushort wHeight;

		public uint dwLatitude;

		public uint dwLongitude;

		public uint dwVehicleSpeed;

		public uint dwVehicleDirection;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_GPS_DATA
	{
		public NET_DVR_GPS_INFO struGPSInfo;

		public NET_DVR_TIME struTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_GET_GPS_DATA_PARAM
	{
		public uint dwCmdType;

		[StructLayout (LayoutKind.Explicit)]
		public struct _GpsDataParam
		{
			[StructLayout (LayoutKind.Sequential)]
			public struct _TimeSeg
			{
				public NET_DVR_TIME struBeginTime;

				public NET_DVR_TIME struEndTime;

				public uint dwInterval;

				public byte[] byRes;
			}


			[FieldOffset (0)]
			public _TimeSeg TimeSeg;

			[StructLayout (LayoutKind.Sequential)]
			public struct _TimePoint
			{
				public NET_DVR_TIME struTimePoint;

				public byte[] byRes;
			}


			[FieldOffset (0)]
			public _TimePoint TimePoint;
		}


		public _GpsDataParam GpsDataParam;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SDKLOCAL_CFG
	{
		public byte byEnableAbilityParse;

		public byte byVoiceComMode;

		public byte byLoginWithSimXml;

		public byte byCompatibleType;

		public byte[] byRes;

		public byte[] byProtectKey;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LOCAL_ABILITY_PARSE_CFG
	{
		public byte byEnableAbilityParse;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LOCAL_TALK_MODE_CFG
	{
		public byte byTalkMode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LOCAL_PROTECT_KEY_CFG
	{
		public byte[] byProtectKey;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SIMXML_LOGIN
	{
		public byte byLoginWithSimXml;

		public byte[] byRes;
	}

	public enum NetSdkLocalCfgType : uint
	{
		SdkLocalCfgTypeTcpPortBind = 0,
		SdkLocalCfgTypeUdpPortBind,
		SdkLocalCfgTypeMemPool,
		SdkLocalCfgTypeModuleRecvTimeout,
		SdkLocalCfgTypeAbilityParse,
		SdkLocalCfgTypeTalkMode,
		SdkLocalCfgTypeProtectKey,
		SdkLocalCfgTypeCfgVersion,
		SdkLocalCfgTypeRtspParams,
		SdkLocalCfgTypeSimxmlLogin,
		SdkLocalCfgTypeCheckDev,
		SdkLocalCfgTypeSecurity,
		SdkLocalCfgTypeEzvizlibPath,
		SdkLocalCfgTypeCharEncode,
		SdkLocalCfgTypeProxys,
		DvrLocalCfgTypeLog,
		DvrLocalCfgTypeStreamCallback
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LOCAL_STREAM_CALLBACK_CFG
	{
		public byte byPlayBackEndFlag;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LOCAL_LOG_CFG
	{
		public ushort wSDKLogNum;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LOCAL_BYTE_ENCODE_CONVERT
	{
		public unsafe CHAR_ENCODE_CONVERT* fnCharConvertCallBack;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LOCAL_SECURITY
	{
		public byte bySecurityLevel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LOCAL_CHECK_DEV
	{
		public uint dwCheckOnlineTimeout;

		public uint dwCheckOnlineNetFailMax;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LOCAL_CFG_VERSION
	{
		public byte byVersion;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LOCAL_TCP_PORT_BIND_CFG
	{
		public ushort wLocalBindTcpMinPort;

		public ushort wLocalBindTcpMaxPort;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LOCAL_UDP_PORT_BIND_CFG
	{
		public ushort wLocalBindUdpMinPort;

		public ushort wLocalBindUdpMaxPort;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LOCAL_MEM_POOL_CFG
	{
		public uint dwAlarmMaxBlockNum;

		public uint dwAlarmReleaseInterval;

		public uint dwObjectReleaseInterval;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LOCAL_MODULE_RECV_TIMEOUT_CFG
	{
		public uint dwPreviewTime;

		public uint dwAlarmTime;

		public uint dwVodTime;

		public uint dwElse;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RTSP_PARAMS_CFG
	{
		public uint dwMaxBuffRoomNum;

		public byte byUseSort;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_OPTICAL_CHANNEL_BIND
	{
		public ushort wChannelIndex;

		public ushort wSubChannel;

		public byte byBind;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_OPTICAL_CHANNEL_CFG
	{
		public uint dwSize;

		public NET_DVR_OPTICAL_CHANNEL_BIND struBindVideo;

		public NET_DVR_OPTICAL_CHANNEL_BIND struBindAudio;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_OPTICAL_INFO
	{
		public uint dwSize;

		public byte bySlotNum;

		public byte byChannel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_AUDIO_SURCHAN_CFG
	{
		public uint dwSize;

		public byte byStatus;

		public byte[] byRes1;

		public uint dwSubWinNum;

		public uint dwSurChanNum;

		public NET_DVR_IPADDR struIpaddr;

		public ushort wPort;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ETHERNET_CHANNEL_INFO
	{
		public uint dwSize;

		public byte[] byConverge;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SPARTAN_INFO
	{
		public uint dwSize;

		public byte bySpartanStatus;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IPADDR_FILTERCFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte byFilterType;

		public byte[] byRes;

		public byte[] byIPAddr;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LOGO_OVERLAYCFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes1;

		public uint dwCoordinateX;

		public uint dwCoordinateY;

		public ushort wPicWidth;

		public ushort wPicHeight;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INVALID_DISK_PARAM
	{
		public NET_DVR_STRUCTHEAD struStructHead;

		public uint dwDiskNo;

		public byte byDelAll;

		public byte[] byres;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MOUNT_DISK_PARAM
	{
		public NET_DVR_STRUCTHEAD struStructHead;

		public uint dwDiskNo;

		public byte[] byres;
	}

	public enum NetSdkCallbackType : uint
	{
		Status = 0,
		Progress,
		Data
	}

	public enum NetSdkCallbackStatusNormal : uint
	{
		SdkCallbackStatusSuccess = 1000,
		SdkCallbackStatusProcessing,
		SdkCallbackStatusFailed,
		SdkCallbackStatusException,
		SdkCallbackStatusLanguageMismatch,
		SdkCallbackStatusDevTypeMismatch,
		DvrCallbackStatusSendWait
	}

	public enum NetSdkGetNextStatus : uint
	{
		XtStatusSuccess = 1000,
		TxStatusNeedWait,
		XtStatusFinish,
		XtStatusFailed
	}

	public enum NetSdkIpcCfgFileErrCode : uint
	{
		NoErr = 0,
		ErrCodeChannelInvalid = 1,
		ErrCodeChannelDuplicate,
		ErrCodeIpInvalid,
		ErrCodeIpDuplicate,
		ErrCodeIpConflictWithLocal,
		ErrCodeProtocolInvalid,
		ErrCodePortInvalid,
		ErrCodeDeviceChannelErr,
		ErrCodeUserNameErr,
		ErrCodePasswdErr,
		ErrCodeTransportProtocolInvalid
	}

	public enum NetSdkUpgradeIpcErrCode : uint
	{
		Invalid = 0,
		Success,
		Offline,
		NotSupport,
		LanguageMismatch,
		WriteFlashFailed,
		OtherError
	}

	public enum NetSdkRemoteConfigStatus : uint
	{
		Success = 1001,
		Failed,
		Processing
	}

	public enum BoardType : uint
	{
		Ds4004hcBoard = 2,
		Ds4008hcBoard = 3,
		Ds4016hcBoard = 4,
		Ds4001hfBoard = 5,
		Ds4004hfBoard = 6,
		Ds4002mdBoard = 7,
		Ds4004mdBoard = 8,
		Ds4016hcsBoard = 9,
		Ds4004hcPlusBoard = 13,
		Ds4008hcPlusBoard = 14,
		Ds4016hcPlusBoard = 15,
		Ds4008hfBoard = 16,
		Ds4008mdBoard = 17,
		Ds4008hsBoard = 18,
		Ds4016hsBoard = 19,
		Ds4108hcvBoard = 20,
		Ds4116hcvBoard = 21,
		Ds5016hcBoard = 22,
		Ds4208hfvBoard = 23,
		Ds4216hcBoard = 24,
		Ds4216hfvBoard = 25,
		Ds5008hfBoard = 26,
		Ds5116hfBoard = 27,
		Ds5216hcBoard = 28,
		Ds5208hfBoard = 29,
		Ds5216hfBoard = 30,
		Ds4101hdBoard = 31,
		Ds4102hdBoard = 32,
		Ds4104hdBoard = 33,
		Ds4002mdPlusBoard = 34,
		Ds4004mdPlusBoard = 35,
		Ds4204hfvBoard = 36,
		Ds4308hcvBoard = 37,
		Ds4308hfvBoard = 38,
		Ds4316hcvBoard = 39,
		Ds4316hfvBoard = 40,
		Ds4304hdBoard = 41,
		Ds4304hfhBoard = 42,
		Ds4304hfvBoard = 43,
		Ds4302hfhBoard = 44,
		Ds5316hfBoard = 45,
		Ds4308hwBoard = 46,
		Ds4316hwBoard = 47,
		Ds4308mdBoard = 48,
		UnknownBoardType = 4294967295u
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CODECARD_ABILITY
	{
		public byte byCardType;

		public byte byCodeNums;

		public byte byDispNums;

		public byte byCodeStartIdx;

		public byte byDispStartIdx;

		public byte[] byRes1;

		public uint[] dwVgaSupportResolution;

		public uint[] dwHdmiSupportResolution;

		public uint[] dwDviSupportResolution;

		public uint[] dwYpbprSupportResolution;

		public byte[] byDispFormat;

		public byte[][] byWindowMode;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CODESVR_ABILITY
	{
		public uint dwSize;

		public byte byCardNums;

		public byte byStartChan;

		public byte[] byRes1;

		public NET_DVR_CODECARD_ABILITY[] struCodeCardAbility;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CODER_SERVER_OUTPUT_CFG
	{
		public uint dwSize;

		public byte byDispChanType;

		public byte byVedioFormat;

		public byte[] byRes1;

		public uint dwResolution;

		public uint dwWindowMode;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DISPLAY_START_INFO
	{
		public uint dwSize;

		public uint dwDisplayChan;

		public uint dwCodeChan;

		public uint dwWinNum;

		public byte byEnableAudio;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CODER_WINDOW_INFO
	{
		public uint dwSize;

		public uint dwDisplayChan;

		public uint dwWinNum;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WINDOW_STATUS
	{
		public uint dwSize;

		public uint dwCodeChan;

		public byte byDisplay;

		public byte byAudio;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RECORD_LOCK_PERCENTAGE
	{
		public uint dwSize;

		public byte byPercentage;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_UPDATE_RECORD_INFO
	{
		public uint dwSize;

		public NET_DVR_STREAM_INFO struStreasmInfo;

		public uint dwBeginTime;

		public uint dwEndTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CMD_TRIGGER_PERIOD_RECORD_PARA
	{
		public NET_DVR_STREAM_INFO struStreamInfo;

		public uint dwCmdType;

		public uint dwRecordTimeLen;

		public byte[] byEventID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LOCK_FILE_BY_NAME_PARA
	{
		public byte[] byFileName;

		public uint dwLockDuration;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MULTI_STREAM_COMPRESSIONCFG_COND
	{
		public uint dwSize;

		public NET_DVR_STREAM_INFO struStreamInfo;

		public uint dwStreamType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MULTI_STREAM_COMPRESSIONCFG
	{
		public uint dwSize;

		public uint dwStreamType;

		public NET_DVR_COMPRESSION_INFO_V30 struStreamPara;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PUSHALARMINFO_V40
	{
		public uint dwAlarmType;

		[StructLayout (LayoutKind.Explicit)]
		public struct UAlarmInfo
		{
			[FieldOffset (0)]
			public byte[] byRes;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruIOAlarm
			{
				public uint dwAlarmInputNumber;

				public byte[] byAlarmOutputNumber;

				public byte[] byAlarmRelateChannel;

				public byte[] byRes1;

				public byte[] byDeviceID;

				public byte[] byRes2;
			}


			[FieldOffset (0)]
			public StruIOAlarm struIOAlarm;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruStreamIDorChannel
			{
				public byte[] byStreamID;

				public byte[] byRes1;

				public byte[] byChannel;

				public byte[] byRes2;

				public byte[] byDeviceID;

				public byte[] byRes3;
			}


			[FieldOffset (0)]
			public StruStreamIDorChannel struStreamIDorChannel;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruDiskAlarm
			{
				public byte[] byRes1;

				public byte[] byDiskNumber;

				public byte[] byDeviceID;

				public byte[] byRes2;
			}


			[FieldOffset (0)]
			public StruDiskAlarm struDiskAlarm;
		}


		public UAlarmInfo uAlarmInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RECORD_PACK
	{
		public NET_DVR_STRUCTHEAD struStruceHead;

		public uint dwPackageInterval;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_NET_DISK_SERACH_PARAM
	{
		public NET_DVR_IPADDR struIP;

		public ushort wPort;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_NET_DISK_SERACH_RET
	{
		public byte[] byDirectory;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WD1_CFG
	{
		public NET_DVR_STRUCTHEAD struStruceHead;

		public byte byWD1Enable;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FTPCFG_V40
	{
		public NET_DVR_STRUCTHEAD struStruceHead;

		public byte byEnableFTP;

		public byte byProtocolType;

		public ushort wFTPPort;

		[StructLayout (LayoutKind.Explicit)]
		public struct UnionServer
		{
			[StructLayout (LayoutKind.Sequential)]
			public struct StruDomain
			{
				public byte[] szDomain;

				public byte[] byRes1;
			}


			[FieldOffset (0)]
			public StruDomain struDomain;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruAddrIP
			{
				public NET_DVR_IPADDR struIp;
			}


			[FieldOffset (0)]
			public StruAddrIP struAddrIP;
		}


		public UnionServer unionServer;

		public byte[] szUserName;

		public byte[] szPassWORD;

		public byte[] szTopCustomDir;

		public byte[] szSubCustomDir;

		public byte byDirLevel;

		public byte byTopDirMode;

		public byte bySubDirMode;

		public byte byType;

		public byte byEnableAnony;

		public byte byAddresType;

		public byte byFTPPicType;

		public byte byPicArchivingInterval;

		public NET_DVR_PICTURE_NAME_EX struPicNameRule;

		public byte byPicNameRuleType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FTP_TYPE
	{
		public byte byType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FTP_SERVER_TEST_PARA
	{
		public uint dwSize;

		public byte byEnableFTP;

		public byte byProtocolType;

		public ushort wFTPPort;

		[StructLayout (LayoutKind.Explicit)]
		public struct UnionServer
		{
			[FieldOffset (0)]
			public byte[] byRes;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruDomain
			{
				public byte[] szDomain;

				public byte[] byRes1;
			}


			[FieldOffset (0)]
			public StruDomain struDomain;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruAddrIP
			{
				public NET_DVR_IPADDR struIp;
			}


			[FieldOffset (0)]
			public StruAddrIP struAddrIP;
		}


		public UnionServer unionServer;

		public byte[] szUserName;

		public byte[] szPassWORD;

		public byte[] szTopCustomDir;

		public byte[] szSubCustomDir;

		public byte byDirLevel;

		public byte byTopDirMode;

		public byte bySubDirMode;

		public byte byType;

		public byte byEnableAnony;

		public byte byAddresType;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SERVER_TEST_PARA
	{
		public uint dwSize;

		[StructLayout (LayoutKind.Explicit)]
		public struct UnionServerPara
		{
			[FieldOffset (0)]
			public byte[] byRes;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruNtpPara
			{
				public NET_DVR_NTPPARA struNtpPara;

				public byte[] byRes1;
			}


			[FieldOffset (0)]
			public StruNtpPara struNtpPara;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruNasPara
			{
				public NET_DVR_SINGLE_NET_DISK_INFO_V40 struNasPara;

				public byte[] byRes1;
			}


			[FieldOffset (0)]
			public StruNasPara struNasPara;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruFtpPara
			{
				public NET_DVR_FTP_SERVER_TEST_PARA struFtpPara;

				public byte[] byRes1;
			}


			[FieldOffset (0)]
			public StruFtpPara struFtpPara;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruEmailPara
			{
				public NET_DVR_EMAILCFG_V30 struEmailPara;

				public byte[] byRes1;
			}


			[FieldOffset (0)]
			public StruEmailPara struEmailPara;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruIpPara
			{
				public NET_DVR_IPADDR struIp;

				public byte[] byRes1;
			}


			[FieldOffset (0)]
			public StruIpPara struIpPara;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruCloudStoragePara
			{
				public NET_DVR_IPADDR struIPAdder;

				public ushort wPort;

				public byte[] byRes2;

				public sbyte[] szUser;

				public sbyte[] szPassword;

				public NET_DVR_POOLPARAM[] struPoolInfo;

				public byte[] byRes1;
			}


			[FieldOffset (0)]
			public StruCloudStoragePara struCloudStoragePara;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruPhoneNumPara
			{
				public byte[] byPhoneNum;

				public byte[] byRes1;
			}


			[FieldOffset (0)]
			public StruPhoneNumPara struPhoneNumPara;
		}


		public UnionServerPara unionServerPara;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_GOP_INFO
	{
		public uint dwSize;

		public int lChannel;

		public NET_DVR_TIME_EX struStartTime;

		public NET_DVR_TIME_EX struEndTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_GOP_INFO_RET
	{
		public NET_DVR_TIME_V30 struGopTime;

		public uint dwDuration;

		public uint dwDataSize;

		public byte[] byRes;

		public unsafe sbyte* pBuf;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_GOP_INFO_PASSBACK
	{
		public uint dwSize;

		public NET_DVR_TIME_V30 struTime;

		public uint dwDuration;

		public uint dwMetaDataSize;

		public uint dwPicDataSize;

		public unsafe sbyte* pMetaDataBuffer;

		public unsafe sbyte* pPicDataBuf;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SINGLEWALLPARAM
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes1;

		public uint dwWallNum;

		public NET_DVR_RECTCFG struRectCfg;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WALLWINCFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes1;

		public uint dwWinNum;

		public uint dwLayerIndex;

		public NET_DVR_RECTCFG struWinPosition;

		public uint dwDeviceIndex;

		public ushort wInputIndex;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WALL_INDEX
	{
		public uint dwSize;

		public byte byWallNo;

		public byte bySceneNo;

		public byte[] byRes1;

		public uint dwDeviceID;

		public uint dwWindowNo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WALLWINPARAM
	{
		public uint dwSize;

		public byte byTransparency;

		public byte byWinMode;

		public byte byEnableSpartan;

		public byte byDecResource;

		public byte byWndShowMode;

		public byte[] byRes1;

		public uint dwAmplifyingSubWndNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WALLSCENECFG
	{
		public uint dwSize;

		public byte[] sSceneName;

		public byte byEnable;

		public byte bySceneIndex;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WALLWIN_INFO
	{
		public uint dwSize;

		public uint dwWinNum;

		public uint dwSubWinNum;

		public uint dwWallNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WALL_WIN_STATUS
	{
		public uint dwSize;

		public byte byDecodeStatus;

		public byte byStreamType;

		public byte byPacketType;

		public byte byFpsDecV;

		public byte byFpsDecA;

		public byte[] byRes1;

		public uint dwDecodedV;

		public uint dwDecodedA;

		public ushort wImgW;

		public ushort wImgH;

		public byte byStreamMode;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WININDEX_INFO
	{
		public uint dwWinIndex;

		public uint dwSubWinIndex;

		public byte byType;

		public byte byWallNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ASSOCIATEDDEV_CHAN_INFO
	{
		public uint dwSize;

		public byte[] sAddress;

		public ushort wDVRPort;

		public ushort wChannel;

		public byte[] sUserName;

		public byte[] sPassword;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WALLOUTPUTPARAM
	{
		public uint dwSize;

		public uint dwResolution;

		public NET_DVR_VIDEOEFFECT struRes;

		public byte byVideoFormat;

		public byte byDisplayMode;

		public byte byBackgroundColor;

		public byte byUseEDIDResolution;

		public ushort wLEDWidth;

		public ushort wLEDHeight;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SUBMATRIXSYSTEMINFO
	{
		public uint dwSequence;

		public byte[] sAddress;

		public ushort wSubMatrixPort;

		public byte[] byRes1;

		public byte[] sUserName;

		public byte[] sPassword;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_UNITEDMATRIXSYSTEMINFO
	{
		public uint dwSize;

		public NET_DVR_SUBMATRIXSYSTEMINFO[] struMatrixInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SUBSTREAM_SWITCH_CFG
	{
		public byte byAutoSwitchEnable;

		public byte[] byRes1;

		public ushort wSubWndWidth;

		public ushort wSubWndHeight;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WALL_CFG
	{
		public uint dwSize;

		public byte byTransparency;

		public byte byWinStaticMode;

		public byte byStreamFailedMode;

		public byte byRes1;

		public NET_DVR_SUBSTREAM_SWITCH_CFG struSubStreamSwitch;

		public byte byLEDShowMode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LEDDISPLAYINFO
	{
		public uint dwSize;

		public byte byAddressType;

		public byte[] byRes1;

		[StructLayout (LayoutKind.Explicit)]
		public struct UnionServer
		{
			[StructLayout (LayoutKind.Sequential)]
			public struct StruDomain
			{
				public byte[] szDomain;

				public byte[] byRes1;
			}


			[FieldOffset (0)]
			public StruDomain struDomain;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruAddrIP
			{
				public NET_DVR_IPADDR struIp;
			}


			[FieldOffset (0)]
			public StruAddrIP struAddrIP;
		}


		public UnionServer unionServer;

		public sbyte[] szDisplayInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LOW_LIGHT_CFG
	{
		public uint dwSize;

		public byte byLowLightLimt;

		public byte byLowLightLimtLevel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FOCUSMODE_CFG
	{
		public uint dwSize;

		public byte byFocusMode;

		public byte byAutoFocusMode;

		public ushort wMinFocusDistance;

		public byte byZoomSpeedLevel;

		public byte byFocusSpeedLevel;

		public byte byOpticalZoom;

		public byte byDigtitalZoom;

		public float fOpticalZoomLevel;

		public uint dwFocusPos;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INFRARE_CFG
	{
		public uint dwSize;

		public byte byIrControlMode;

		public byte byIrBrightness;

		public byte byIrSensitivity;

		public byte byIrTrigMode;

		public byte byIrBrightnessLimit;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_AEMODECFG
	{
		public uint dwSize;

		public int iIrisSet;

		public int iGainSet;

		public int iGainLimit;

		public int iExposureCompensate;

		public byte byExposureModeSet;

		public byte byShutterSet;

		public byte byImageStabilizeLevel;

		public byte byCameraIrCorrect;

		public byte byHighSensitivity;

		public byte byInitializeLens;

		public byte byChromaSuppress;

		public byte byMaxShutterSet;

		public byte byMinShutterSet;

		public byte byMaxIrisSet;

		public byte byMinIrisSet;

		public byte byExposureLevel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FLASH_CFG
	{
		public uint dwSize;

		public uint dwChan;

		public uint dwInNumbers;

		public uint dwOutNumbers;

		public uint dwStartTime;

		public uint dwEndTime;

		public uint dwEhomeFlag;

		public uint dwAlarmFlag;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_EXTERNAL_MATRIX_CFG
	{
		public uint dwSize;

		public byte byValid;

		public byte[] byRes1;

		public byte[] sMatrixName;

		public uint dwMatrixID;

		public ushort wMatrixInputChanNum;

		public ushort wMatrixOutputChanNum;

		public ushort[] wMatrixOutputChanRef;

		public byte byMatrixChanType;

		public byte byMatrixProtocol;

		public byte byMatrixType;

		public byte byRes2;

		public NET_MATRIX_UNION struMatrixUnion;

		public byte[] byRes3;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ASSOCIATE_INPUT_PARAM
	{
		public byte byEnable;

		public byte[] byRes1;

		public uint dwDeviceIndex;

		public ushort wInputIndex;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ASSOCIATE_OUTPUT_PARAM
	{
		public byte byEnable;

		public byte byWallNo;

		public byte[] byRes1;

		public uint dwOutputIndex;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VCS_USER_INFO
	{
		public uint dwSize;

		public byte[] sUserName;

		public byte[] sPassWord;

		public NET_DVR_IPADDR struUserIP;

		public byte[] byMacAddr;

		public byte byPriority;

		public byte byRes1;

		public uint dwRight;

		public NET_DVR_ASSOCIATE_INPUT_PARAM[] struInputParam;

		public NET_DVR_ASSOCIATE_OUTPUT_PARAM[] struOutputParam;

		public NET_DVR_RECTCFG_EX struManageRegion;

		public byte byWallNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_STREAM_MEDIA_SERVER_CFG_V41
	{
		public byte byValid;

		public byte[] byRes1;

		public byte[] byAddress;

		public ushort wDevPort;

		public byte byTransmitType;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEV_CHAN_INFO_V41
	{
		public byte[] byAddress;

		public ushort wDVRPort;

		public byte byChannel;

		public byte byTransProtocol;

		public byte byTransMode;

		public byte byFactoryType;

		public byte byDeviceType;

		public byte byDispChan;

		public byte bySubDispChan;

		public byte byResolution;

		public byte byUseZeroChan;

		public byte byRes;

		public byte[] sUserName;

		public byte[] sPassword;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEV_CHAN_INFO_EX
	{
		public byte byChanType;

		public byte[] byStreamId;

		public byte[] byRes1;

		public uint dwChannel;

		public byte[] byRes2;

		public byte[] byAddress;

		public ushort wDVRPort;

		public byte byChannel;

		public byte byTransProtocol;

		public byte byTransMode;

		public byte byFactoryType;

		public byte byDeviceType;

		public byte byDispChan;

		public byte bySubDispChan;

		public byte byResolution;

		public byte[] byRes;

		public byte[] sUserName;

		public byte[] sPassword;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_STREAM_MEDIA_SERVER
	{
		public byte byValid;

		public byte[] byRes1;

		public byte[] byAddress;

		public ushort wDevPort;

		public byte byTransmitType;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEV_DDNS_INFO
	{
		public byte[] byDevAddress;

		public byte byTransProtocol;

		public byte byTransMode;

		public byte byDdnsType;

		public byte byRes1;

		public byte[] byDdnsAddress;

		public ushort wDdnsPort;

		public byte byChanType;

		public byte byFactoryType;

		public uint dwChannel;

		public byte[] byStreamId;

		public byte[] sUserName;

		public byte[] sPassword;

		public ushort wDevPort;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEC_STREAM_DEV_EX
	{
		public NET_DVR_STREAM_MEDIA_SERVER struStreamMediaSvrCfg;

		public NET_DVR_DEV_CHAN_INFO_EX struDevChanInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEC_DDNS_DEV
	{
		public NET_DVR_DEV_DDNS_INFO struDdnsInfo;

		public NET_DVR_STREAM_MEDIA_SERVER struMediaServer;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_DEC_STREAM_MODE
	{
		[FieldOffset (0)]
		public NET_DVR_DEC_STREAM_DEV_EX struDecStreamDev;

		[FieldOffset (0)]
		public NET_DVR_PU_STREAM_URL struUrlInfo;

		[FieldOffset (0)]
		public NET_DVR_DEC_DDNS_DEV struDdnsDecInfo;

		[FieldOffset (0)]
		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PU_STREAM_CFG_V41
	{
		public uint dwSize;

		public byte byStreamMode;

		public byte[] byRes1;

		public NET_DVR_DEC_STREAM_MODE uDecStreamMode;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIX_CHAN_INFO_V41
	{
		public byte byEnable;

		public byte byStreamMode;

		public byte[] byRes;

		public NET_DVR_DEC_STREAM_MODE uDecStreamMode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIX_LOOP_DECINFO_V41
	{
		public uint dwSize;

		public uint dwPoolTime;

		public NET_DVR_MATRIX_CHAN_INFO_V41[] struchanConInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIX_DEC_CHAN_INFO_V41
	{
		public uint dwSize;

		public byte byStreamMode;

		public byte[] byRes1;

		public NET_DVR_DEC_STREAM_MODE uDecStreamMode;

		public uint dwPlayMode;

		public NET_DVR_TIME StartTime;

		public NET_DVR_TIME StopTime;

		public byte[] sFileName;

		public uint dwGetStreamMode;

		public NET_DVR_MATRIX_PASSIVEMODE struPassiveMode;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IP_ADDRESS
	{
		public byte[] byDevAddress;

		public ushort wDevPort;

		public byte[] byres;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DDNS_ADDRESS
	{
		public byte[] byDevAddress;

		public byte[] byDevDdns;

		public byte byDdnsType;

		public byte[] byRes1;

		public ushort wDevPort;

		public ushort wDdnsPort;

		public byte[] byres;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PLAY_BACK_BY_TIME
	{
		public NET_DVR_TIME StartTime;

		public NET_DVR_TIME StopTime;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIX_DEC_REMOTE_PLAY_EX
	{
		public uint dwSize;

		public uint dwDecChannel;

		public byte byAddressType;

		public byte byChannelType;

		public byte[] byres;

		public byte[] sUserName;

		public byte[] sPassword;

		public uint dwChannel;

		public byte[] byStreamId;

		public uint dwPlayMode;

		[StructLayout (LayoutKind.Explicit)]
		public struct UnionAddr
		{
			[FieldOffset (0)]
			public byte[] byRes;

			[FieldOffset (0)]
			public NET_DVR_IP_ADDRESS struIpAddr;

			[FieldOffset (0)]
			public NET_DVR_DDNS_ADDRESS struDdnsAddr;
		}


		public UnionAddr unionAddr;

		[StructLayout (LayoutKind.Explicit)]
		public struct UnionPlayBackInfo
		{
			[FieldOffset (0)]
			public byte[] byRes;

			[FieldOffset (0)]
			public NET_DVR_PLAY_BACK_BY_TIME struPlayBackByTime;

			[FieldOffset (0)]
			public sbyte[] sFileName;
		}


		public UnionPlayBackInfo unionPlayBackInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DISPLAY_EFFECT_CFG
	{
		public uint dwSize;

		public NET_DVR_COLOR struColor;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TRUNK_USE_STATE
	{
		public uint dwSize;

		public uint dwTrunkID;

		public ushort wReserveUserID;

		public byte byStatus;

		public byte byRes1;

		public byte[] byUserId;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PTZ_CTRL_INFO
	{
		public uint dwSize;

		public uint dwCtrlDelayTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIX_ROUTE_INFO
	{
		public uint dwSize;

		public uint dwCamNo;

		public uint dwMonNo;

		public uint dwSubWin;

		public uint dwUserId;

		public uint[] dwTrunkId;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PTZ_STATUS
	{
		public uint dwSize;

		public uint dwUserID;

		public uint dwStatus;

		public uint dwRestTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SAFETYCABIN_WORK_MODE
	{
		public uint dwSize;

		public byte byWorkMode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SAFETYCABIN_PERSON_SIGNAL_CFG
	{
		public uint dwSize;

		public byte bySensorType;

		public byte bySensitivity;

		public byte byDevUseTimeout;

		public byte byRes1;

		public ushort wCurtainDelayTime;

		public ushort wCurtainResponseTime;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ETHERNET_IPV6_COND
	{
		public uint dwSize;

		public byte[] byMACAddr;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ETHERNET_IPV6_CFG
	{
		public uint dwSize;

		public byte byState;

		public byte[] byRes1;

		public byte[] byIPv6;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DAYTIME
	{
		public byte byHour;

		public byte byMinute;

		public byte bySecond;

		public byte byRes;

		public ushort wMilliSecond;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCHEDULE_DAYTIME
	{
		public NET_DVR_DAYTIME struStartTime;

		public NET_DVR_DAYTIME struStopTime;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DNMODE
	{
		public byte byObjectSize;

		public byte byMotionSensitive;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MOTION_MULTI_AREAPARAM
	{
		public byte byAreaNo;

		public byte[] byRes;

		public NET_VCA_RECT struRect;

		public NET_DVR_DNMODE struDayNightDisable;

		public NET_DVR_DNMODE struDayModeParam;

		public NET_DVR_DNMODE struNightModeParam;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MOTION_MULTI_AREA
	{
		public byte byDayNightCtrl;

		public byte byAllMotionSensitive;

		public byte[] byRes;

		public NET_DVR_SCHEDULE_DAYTIME struScheduleTime;

		public NET_DVR_MOTION_MULTI_AREAPARAM[] struMotionMultiAreaParam;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MOTION_SINGLE_AREA
	{
		public byte[][] byMotionScope;

		public byte byMotionSensitive;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MOTION_MODE_PARAM
	{
		public NET_DVR_MOTION_SINGLE_AREA struMotionSingleArea;

		public NET_DVR_MOTION_MULTI_AREA struMotionMultiArea;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MOTION_V40
	{
		public NET_DVR_MOTION_MODE_PARAM struMotionMode;

		public byte byEnableHandleMotion;

		public byte byEnableDisplay;

		public byte byConfigurationMode;

		public byte byRes1;

		public uint dwHandleType;

		public uint dwMaxRelAlarmOutChanNum;

		public uint[] dwRelAlarmOut;

		public NET_DVR_SCHEDTIME[][] struAlarmTime;

		public uint dwMaxRecordChanNum;

		public uint[] dwRelRecordChan;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_HIDEALARM_V40
	{
		public uint dwEnableHideAlarm;

		public ushort wHideAlarmAreaTopLeftX;

		public ushort wHideAlarmAreaTopLeftY;

		public ushort wHideAlarmAreaWidth;

		public ushort wHideAlarmAreaHeight;

		public uint dwHandleType;

		public uint dwMaxRelAlarmOutChanNum;

		public uint[] dwRelAlarmOut;

		public NET_DVR_SCHEDTIME[][] struAlarmTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VILOST_V40
	{
		public uint dwEnableVILostAlarm;

		public uint dwHandleType;

		public uint dwMaxRelAlarmOutChanNum;

		public uint[] dwRelAlarmOut;

		public NET_DVR_SCHEDTIME[][] struAlarmTime;

		public byte byVILostAlarmThreshold;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VICOLOR
	{
		public NET_DVR_COLOR[] struColor;

		public NET_DVR_SCHEDTIME[] struHandleTime;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PICCFG_V40
	{
		public uint dwSize;

		public byte[] sChanName;

		public uint dwVideoFormat;

		public NET_DVR_VICOLOR struViColor;

		public uint dwShowChanName;

		public ushort wShowNameTopLeftX;

		public ushort wShowNameTopLeftY;

		public uint dwEnableHide;

		public NET_DVR_SHELTER[] struShelter;

		public uint dwShowOsd;

		public ushort wOSDTopLeftX;

		public ushort wOSDTopLeftY;

		public byte byOSDType;

		public byte byDispWeek;

		public byte byOSDAttrib;

		public byte byHourOSDType;

		public byte byFontSize;

		public byte byOSDColorType;

		public byte byAlignment;

		public byte byOSDMilliSecondEnable;

		public NET_DVR_VILOST_V40 struVILost;

		public NET_DVR_VILOST_V40 struAULost;

		public NET_DVR_MOTION_V40 struMotion;

		public NET_DVR_HIDEALARM_V40 struHideAlarm;

		public NET_DVR_RGB_COLOR struOsdColor;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ISP_CAMERAPARAMCFG
	{
		public uint dwSize;

		public byte byWorkType;

		public byte[] byRes;

		public NET_DVR_SCHEDULE_DAYTIME struDayNightScheduleTime;

		public NET_DVR_CAMERAPARAMCFG_EX struSelfAdaptiveParam;

		public NET_DVR_CAMERAPARAMCFG_EX struDayIspAdvanceParam;

		public NET_DVR_CAMERAPARAMCFG_EX struNightIspAdvanceParam;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEVSERVER_CFG
	{
		public uint dwSize;

		public byte byIrLampServer;

		public byte bytelnetServer;

		public byte byABFServer;

		public byte byEnableLEDStatus;

		public byte byEnableAutoDefog;

		public byte byEnableSupplementLight;

		public byte byEnableDeicing;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_GBT28181_ACCESS_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte byTransProtocol;

		public ushort wLocalSipPort;

		public sbyte[] szServerID;

		public sbyte[] szServerDomain;

		public sbyte[] szSipServerAddress;

		public ushort wServerSipPort;

		public byte byProtocolVersion;

		public byte byRes3;

		public sbyte[] szSipUserName;

		public sbyte[] szSipAuthenticateID;

		public sbyte[] szSipAuthenticatePasswd;

		public uint dwRegisterValid;

		public byte byHeartbeatInterval;

		public byte byMaxHeartbeatTimeOut;

		public byte byStreamType;

		public byte byDeviceStatus;

		public uint dwRegisterInterval;

		public uint dwAutoAllocChannelID;

		public sbyte[] szDeviceDomain;

		public byte[] byRes4;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_GBT28181_CHANINFO_CFG
	{
		public uint dwSize;

		public sbyte[] szVideoChannelNumID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMIN_INFO
	{
		public NET_DVR_STREAM_INFO struStreamInfo;

		public uint dwAlarmInChannel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_GBT28181_ALARMINCFG
	{
		public uint dwSize;

		public sbyte[] szAlarmInNumID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CAMERA_SETUPCFG
	{
		public uint dwSize;

		public ushort wSetupHeight;

		public byte byLensType;

		public byte bySetupHeightUnit;

		public uint dwSceneDis;

		public float fPitchAngle;

		public float fInclineAngle;

		public float fRotateAngle;

		public ushort wVideoDetCoefficient;

		public byte byErectMethod;

		public byte byCameraViewAngle;

		public uint dwHorizontalDistance;

		public byte byDetailLensType;

		public byte[] byRes;

		public float fHorFieldAngle;

		public float fVerFieldAngle;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCHEDDATE
	{
		public byte byStartMonth;

		public byte byStartDay;

		public byte byStopMonth;

		public byte byStopDay;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_OUTPUT_SCHEDULE
	{
		public NET_DVR_SCHEDTIME struTime;

		public byte byState;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ONE_OUTPUT_SCHEDULE_RULE
	{
		public byte byEnable;

		public byte[] byRes1;

		public NET_DVR_SCHEDDATE struDate;

		public NET_DVR_OUTPUT_SCHEDULE[] struOutputSchedule;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_OUTPUT_SCHEDULE_RULECFG
	{
		public uint dwSize;

		public NET_DVR_ONE_OUTPUT_SCHEDULE_RULE[] struOutputRule;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TPS_ALARMCFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes1;

		public uint dwInterval;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DOWNLOAD_ALARM_RECORD_COND
	{
		public uint dwSize;

		public ushort wAlarmRecordID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CABINET_AlARM_PARAMCFG
	{
		public sbyte[] sCabinetName;

		public byte byAssociateIO;

		public byte byCabinetState;

		public byte byAlarmIntervalTime;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CABINET_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes;

		public NET_DVR_CABINET_AlARM_PARAMCFG[] struCabinetCfg;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITS_GATE_LANE_CFG
	{
		public byte[] byGateSiteID;

		public byte[] byGateInfo;

		public byte[] byLaneName;

		public byte byValid;

		public byte byCamLaneId;

		public ushort wLaneid;

		public byte byRelativeIoNum;

		public byte byDirection;

		public byte byLprMode;

		public byte byCardMode;

		public byte byGateLaneMode;

		public byte byCharge;

		public byte byChargeMode;

		public byte byRes1;

		public byte[] byLedRelativeIndex;

		public byte byGateRelativeIndex;

		public byte byFarRrRelativeIndex;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITS_IPC_CHAN_LANE_CFG
	{
		public uint dwSize;

		public byte byIpcType;

		public byte[] byRes;

		public NET_ITS_GATE_LANE_CFG[] struGateLane;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITS_REMOTE_COMMAND
	{
		public ushort wLaneid;

		public byte byCamLaneId;

		public byte byRes;

		public uint dwCode;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITS_REMOTE_CONTROL
	{
		public uint dwSize;

		public NET_ITS_REMOTE_COMMAND struRemoteCommand;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITS_ECT_CHANNELSTATE
	{
		public uint dwSize;

		public byte byRecordStatic;

		public byte bySignalStatic;

		public byte byHardwareStatic;

		public byte byChannelArmState;

		public uint dwChannel;

		public uint dwBitRate;

		public uint dwLinkNum;

		public NET_DVR_IPADDR[] struClientIP;

		public uint dwIPLinkNum;

		public byte byExceedMaxLink;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PARK_EXTERNAL_SUBINFO
	{
		public byte byEnable;

		public byte byFlicker;

		public byte byIOState;

		public byte byLampColor;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PARK_INLAY_SUBINFO
	{
		public byte byEnable;

		public byte byFlicker;

		public byte byLampColor;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PARKINFO
	{
		public NET_DVR_PARK_EXTERNAL_SUBINFO struNormalParkIOState;

		public NET_DVR_PARK_EXTERNAL_SUBINFO struNormalNoParkIOState;

		public NET_DVR_PARK_EXTERNAL_SUBINFO struSpecialParkIOState;

		public NET_DVR_PARK_EXTERNAL_SUBINFO struSpecialNoParkIOState;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_EXTERNAL_LAMP_CTRL_MODE
	{
		public NET_DVR_PARKINFO[] struParkInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INLAY_LAMP_CTRL_MODE
	{
		public NET_DVR_PARK_INLAY_SUBINFO[] struLampStateCtrl;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LAMP_INFO
	{
		public byte byEnable;

		public byte byFlicker;

		public byte byLampColor;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PARKLAMP_CTRL_MODE
	{
		public NET_DVR_LAMP_INFO[] struLampInfo;

		public byte byLampType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LAMP_PARAM
	{
		public byte byEnable;

		public byte byFlicker;

		public byte byLampColor;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_EXTERNAL_PARKLAMP
	{
		public NET_DVR_LAMP_PARAM[] struLampParam;

		public byte byLampType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BUILTIN_PARKLAMP
	{
		public byte byEnable;

		public byte byFlicker;

		public byte byLampColor;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MIXLAMP_CTRL_MODE
	{
		public NET_DVR_EXTERNAL_PARKLAMP[] struExternalParkLamp;

		public NET_DVR_BUILTIN_PARKLAMP[] struBuiltInParkLamp;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SINGLELAMP_CTRL_MODE
	{
		public NET_DVR_PARK_EXTERNAL_SUBINFO[] struExternLampStateCtrl;

		public byte byLampType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_LAMP_CTRL_MODE_UNION
	{
		[FieldOffset (0)]
		public byte[] uLen;

		[FieldOffset (0)]
		public NET_DVR_INLAY_LAMP_CTRL_MODE struInlayLampCtrlMode;

		[FieldOffset (0)]
		public NET_DVR_EXTERNAL_LAMP_CTRL_MODE struExternalLampCtrlMode;

		[FieldOffset (0)]
		public NET_DVR_PARKLAMP_CTRL_MODE[] struParkLampCtrlMode;

		[FieldOffset (0)]
		public NET_DVR_MIXLAMP_CTRL_MODE struMixLampCtrlMode;

		[FieldOffset (0)]
		public NET_DVR_SINGLELAMP_CTRL_MODE struSingleExternalLampCtrlMode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LAMP_CTRL_INFO
	{
		public uint dwSize;

		public byte byLampCtrlMode;

		public byte byCtrlChannelIndex;

		public byte[] byRes;

		public NET_DVR_LAMP_CTRL_MODE_UNION uLampCtrlMode;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PARKSPACE_INFO
	{
		public byte byParkSpaceAttribute;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PARKSPACE_ATTRIBUTE
	{
		public uint dwSize;

		public NET_DVR_PARKSPACE_INFO[] struParkSpaceInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LAMP_STATE
	{
		public byte byFlicker;

		public byte byParkingIndex;

		public byte[] byRes1;

		public uint dwIONo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LAMP_EXTERNAL_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes1;

		public NET_DVR_LAMP_STATE struLampStateCtrl;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_COMPEL_CAPTURE
	{
		public uint dwSize;

		public byte byParkIndex;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_EXTERNAL_CONTROL_ALARM
	{
		public uint dwSize;

		public uint dwChannelNo;

		public NET_DVR_LAMP_STATE struLampStateCtrl;

		public NET_DVR_TIME struExternalBeginTime;

		public byte[] byRes1;
	}

	public enum ExternalDevicesType : uint
	{
		Res1 = 0,
		FarScr = 1,
		EntranceControl = 2,
		WjLedDev = 3,
		NjLedDev = 4,
		VehDetectDev = 5,
		DzDev = 6,
		PxScrDev = 7,
		KjScrDev = 8,
		FkjDev = 9,
		SkjDev = 10,
		HddDev = 11,
		DzLock = 12,
		PaperPrinter = 13,
		PaperScanners = 14,
		IpcAlarm = 15
	}

	public enum ExternalDevicesStatus : uint
	{
		DevicesStatusNormal = 0,
		DevicesStatusAbnormal = 1,
		DevicesStatusTooLessCard = 20,
		DevicesStatusNoCard = 21,
		DevicesStatusSendcardError = 22,
		DevicesStatusCardBlocked = 23,
		DevicesStatusCardFull = 24,
		DevicesStatusOpening = 40,
		DevicesStatusClosing = 41,
		DevicesStatusOpened = 42,
		DevicesStatusClosed = 43,
		DevicesStatusNosignal = 44,
		DevicesStatusLock = 45,
		PpStatusOffline = 61,
		PpStatusPrintHeaderUp,
		PpStatusFeedButtonFeeding,
		PpStatusOnlineWaiting,
		PpStatusFeedButtonEnable,
		PpStatusJamrPaperError,
		PpStatusCutPaperError,
		PpStatusAutoFeedError,
		PpStatusExitRecoveryError,
		PpStatusExitAutoRecoveryError,
		PpStatusPullPaperError,
		PpStatusLessPaper,
		PpStatusNoPaper,
		PpStatusPrintFail,
		PpStatusPrinting
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_GATE_ALARMINFO
	{
		public uint dwSize;

		public byte byAlarmType;

		public byte byExternalDevType;

		public byte byExternalDevStatus;

		public byte byRes;

		public NET_DVR_TIME_V30 struAlarmTime;

		[StructLayout (LayoutKind.Explicit)]
		public struct UAlarmInfo
		{
			[FieldOffset (0)]
			public byte[] uLen;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruVehicleInfo
			{
				public sbyte[] sLicense;

				public byte byVehicleType;

				public byte[] byRes1;
			}


			[FieldOffset (0)]
			public StruVehicleInfo struVehicleInfo;
		}


		public UAlarmInfo uAlarmInfo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VOLTAGE
	{
		public int iPhaseAVol;

		public int iPhaseBVol;

		public int iPhaseCVol;

		public int iAveragePhaseVol;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LINE_VOLTAGE
	{
		public int iLineVolAB;

		public int iLineVolBC;

		public int iLineVolCA;

		public int iAverageLineVol;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CURRENT
	{
		public int iPhaseACurrent;

		public int iPhaseBCurrent;

		public int iPhaseCCurrent;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_POWER
	{
		public int iPhaseAPower;

		public int iPhaseBPower;

		public int iPhaseCPower;

		public int iSysTotalPower;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_POWER_FACTOR
	{
		public int iPhaseAPowerFactor;

		public int iPhaseBPowerFactor;

		public int iPhaseCPowerFactor;

		public int iTotalPowerFactor;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FREQUENCY
	{
		public int iPhaseAFrequency;

		public int iPhaseBFrequency;

		public int iPhaseCFrequency;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LOAD_FACTOR
	{
		public int iPhaseALoadFactor;

		public int iPhaseBLoadFactor;

		public int iPhaseCLoadFactor;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_UPS_STATE
	{
		public NET_DVR_VOLTAGE struInputVoltage;

		public NET_DVR_VOLTAGE struBypassVoltage;

		public NET_DVR_VOLTAGE struOutputVoltage;

		public int iRectifierVol;

		public int iInverterVol;

		public NET_DVR_CURRENT struInputCurrent;

		public NET_DVR_CURRENT struBypassCurrent;

		public NET_DVR_CURRENT struOutputCurrent;

		public int iInverterCurrent;

		public NET_DVR_FREQUENCY struInputFrequency;

		public NET_DVR_FREQUENCY struBypassFrequency;

		public NET_DVR_FREQUENCY struOutputFrequency;

		public int iInverterFre;

		public NET_DVR_POWER struInputPower;

		public NET_DVR_POWER struBypassPower;

		public NET_DVR_POWER struOutputPower;

		public NET_DVR_POWER struComplexPower;

		public int iNormalPower;

		public int iPowerFacter;

		public NET_DVR_LOAD_FACTOR struBatteryLoadFactor;

		public int iBatteryEstimated;

		public int iBatteryTemperature;

		public int iBatteryVoltage;

		public byte byRectifierState;

		public byte byInverterState;

		public byte byChargeState;

		public byte byBatteryState;

		public byte byAutoBypassState;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_SWITCH_POWER_SUPPLY_STATE
	{
		public NET_DVR_VOLTAGE struACVoltage;

		public int iDCConvertVoltage;

		public NET_DVR_CURRENT struACCurrent;

		public int iTotalCurrent;

		public int iBattery1Temperature;

		public int iBattery2Temperature;

		public int iBattery1Current;

		public int iBattery2Current;

		public int iBattery3Current;

		public int iBattery4Current;

		public int iBatteryTestVoltage;

		public int iRectifierOutputVoltage;

		public int iRectifierOutputCurrent;

		public int iDCOutputVoltage;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_GAS_DETECTOR_STATE
	{
		public int iSF6;

		public int iFlow;

		public int iTemperature;

		public int iO2;

		public int iHumidity;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_TEMP_HUMI_SENSOR_STATE
	{
		public int iTemperature;

		public int iHumidity;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_AIRCONDITION_STATE
	{
		public int iTemperature;

		public int iHumidity;

		public byte byRunState;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_ELECTRICITY_STATE
	{
		public int iDCVoltage;

		public int iDCCurrent;

		public NET_DVR_VOLTAGE struPhaseVoltage;

		public NET_DVR_LINE_VOLTAGE struLineVoltage;

		public NET_DVR_CURRENT[] struCurrent;

		public int iAverageCurrent;

		public int iNeutralCurrent;

		public NET_DVR_POWER[] struActivePower;

		public NET_DVR_POWER[] struReactivePower;

		public NET_DVR_POWER[] struApparentPower;

		public NET_DVR_POWER_FACTOR[] struPowerFactor;

		public NET_DVR_FREQUENCY struFrequency;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_TRANSFORMER_TEMP_STATE
	{
		public int iPhaseATemperature;

		public int iPhaseBTemperature;

		public int iPhaseCTemperature;

		public int iPhaseDTemperature;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_WATERLEVEL_SENSOR
	{
		public int iWaterLevel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_DUSTNOISE_SENSOR
	{
		public int iDust;

		public int iNoise;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_ENVIRONMENTAL_LOGGER
	{
		public int iAmmoniaNitrogen;

		public int iCOD;

		public int iPH;

		public int iOxygen;

		public int iSulfurDioxide;

		public int iSoot;

		public int iFluoride;

		public int iPollutedWater;

		public int iTotalPhosphorus;

		public int iExhaust;

		public int iNitrogenOxides;

		public int iFlueGasTemperature;

		public int iFlueGasPressure;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_EXTERNAL_DEVICE_STATE_UNION
	{
		[FieldOffset (0)]
		public NET_DVR_ALARMHOST_UPS_STATE struUpsState;

		[FieldOffset (0)]
		public NET_DVR_ALARMHOST_SWITCH_POWER_SUPPLY_STATE struSwitchPowerState;

		[FieldOffset (0)]
		public NET_DVR_ALARMHOST_GAS_DETECTOR_STATE struGasDetectorState;

		[FieldOffset (0)]
		public NET_DVR_ALARMHOST_TEMP_HUMI_SENSOR_STATE struTempHumiSensorState;

		[FieldOffset (0)]
		public NET_DVR_ALARMHOST_AIRCONDITION_STATE struAirConditionState;

		[FieldOffset (0)]
		public NET_DVR_ALARMHOST_ELECTRICITY_STATE struElectricityState;

		[FieldOffset (0)]
		public NET_DVR_ALARMHOST_TRANSFORMER_TEMP_STATE struTransformerTempState;

		[FieldOffset (0)]
		public NET_DVR_ALARMHOST_WATERLEVEL_SENSOR struWaterLevelSensor;

		[FieldOffset (0)]
		public NET_DVR_ALARMHOST_DUSTNOISE_SENSOR struDustNoiseSensor;

		[FieldOffset (0)]
		public NET_DVR_ALARMHOST_ENVIRONMENTAL_LOGGER struEnvironmentLogger;

		[FieldOffset (0)]
		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_EXTERNAL_DEVICE_STATE
	{
		public uint dwSize;

		public byte byDevType;

		public byte[] byRes1;

		public NET_DVR_EXTERNAL_DEVICE_STATE_UNION struDevState;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_UPS_LIMIT_VALUE
	{
		public int iInputVolHigh;

		public int iInputVolLow;

		public int iInputFreHigh;

		public int iInputFreLow;

		public int iOutputVolHigh;

		public int iOutputVolLow;

		public int iBatteryVoltageLow;

		public int iBatterySurplus;

		public int iBatteryTemperatureHigh;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_TEMP_HUMIDITY_SENSOR_LIMIT_VALUE
	{
		public int iTemperatureHighLimit;

		public int iTemperatureLowLimit;

		public int iHumidityHighLimit;

		public int iHumidityLowLimit;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_EXTERNAL_DEVICE_LIMIT_VALUE_UNION
	{
		[FieldOffset (0)]
		public NET_DVR_ALARMHOST_UPS_LIMIT_VALUE struUpsLimitValue;

		[FieldOffset (0)]
		public NET_DVR_ALARMHOST_TEMP_HUMIDITY_SENSOR_LIMIT_VALUE struTempHumidityLimitValue;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_EXTERNAL_DEVICE_LIMIT_VALUE
	{
		public uint dwSize;

		public byte byDevType;

		public byte[] byRes1;

		public NET_DVR_EXTERNAL_DEVICE_LIMIT_VALUE_UNION struAlarmValue;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_SENSOR_JOINT_CFG
	{
		public uint dwSize;

		public byte[] bySensorJointAlarmOut;

		public byte[] bySensorJointSiren;

		public byte[] bySensorAlarmTypeJointAlarmOut;

		public byte[] bySesorAlarmTypeJointSiren;

		public byte byChan;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_UPS_ALARMINFO
	{
		public byte byAlarmType;

		public byte byChanNo;

		public byte bySlotNo;

		public byte byRes1;

		public int iAlarmValue;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_SWITCH_POWER_SUPPLY_ALARMINFO
	{
		public byte byAlarmType;

		public byte byChanNo;

		public byte bySlotNo;

		public byte byRes1;

		public int iAlarmValue;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_GAS_DETECT_SYS_ALARMINFO
	{
		public byte byAlarmType;

		public byte byChanNo;

		public byte bySlotNo;

		public byte byRes1;

		public int iAlarmValue;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_TEMP_HUMIDITY_SENSOR_ALARMINFO
	{
		public byte byAlarmType;

		public byte byChanNo;

		public byte bySlotNo;

		public byte byRes1;

		public int iAlarmValue;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_485_DEVICE_ALARM_UNION
	{
		[FieldOffset (0)]
		public NET_DVR_ALARMHOST_UPS_ALARMINFO struUPSAlarm;

		[FieldOffset (0)]
		public NET_DVR_ALARMHOST_SWITCH_POWER_SUPPLY_ALARMINFO struSwitchPowerAlarm;

		[FieldOffset (0)]
		public NET_DVR_ALARMHOST_GAS_DETECT_SYS_ALARMINFO struGasDetectSystemAlarm;

		[FieldOffset (0)]
		public NET_DVR_ALARMHOST_TEMP_HUMIDITY_SENSOR_ALARMINFO struTempHumiditySensorAlarm;

		[FieldOffset (0)]
		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_485_EXTERNAL_DEVICE_ALARMINFO
	{
		public uint dwSize;

		public byte byAlarmType;

		public byte[] byRes1;

		public NET_DVR_485_DEVICE_ALARM_UNION struAlarmInfo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_RS485_SLOT_CFG
	{
		public uint dwSize;

		public byte[] sDeviceName;

		public ushort wDeviceType;

		public ushort wDeviceProtocol;

		public ushort wAddress;

		public byte byChannel;

		public byte bySlotChan;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CORRIDOR_MODE
	{
		public uint dwSize;

		public byte byEnableCorridorMode;

		public byte byMirrorMode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DETECT_FACE
	{
		public uint dwSize;

		public byte byEnableDetectFace;

		public byte byDetectSensitive;

		public byte byEnableDisplay;

		public byte byEnableFaceRecog;

		public NET_DVR_HANDLEEXCEPTION_V40 struAlarmHandleType;

		public NET_DVR_SCHEDTIME[][] struAlarmTime;

		public uint dwMaxRelRecordChanNum;

		public uint dwRelRecordChanNum;

		public uint[] dwRelRecordChan;

		public NET_DVR_SCHEDTIME[] struHolidayTime;

		public ushort wDuration;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MUL_STREAM_CHANNEL_GROUP
	{
		public uint dwSize;

		public uint dwGroup;

		public NET_DVR_MULTI_STREAM_COMPRESSIONCFG_COND struMultiStreamCfg;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CHANNEL_GROUP
	{
		public uint dwSize;

		public uint dwChannel;

		public uint dwGroup;

		public byte byID;

		public byte[] byRes1;

		public uint dwPositionNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TIME_DETECTION
	{
		public NET_DVR_SCHEDTIME struSchedTime;

		public byte byDetSceneID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_GUARD_COND
	{
		public uint dwSize;

		public uint dwChannel;

		public byte byRelateType;

		public byte byGroupNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_GUARD_CFG
	{
		public uint dwSize;

		public NET_DVR_TIME_DETECTION[][] struAlarmSched;

		public NET_DVR_HANDLEEXCEPTION_V40 struHandleException;

		public uint dwMaxRelRecordChanNum;

		public uint dwRelRecordChanNum;

		public uint[] dwRelRecordChan;

		public NET_DVR_TIME_DETECTION[] struHolidayTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SNAPINFO_COND
	{
		public uint dwSize;

		public uint dwChan;

		public byte byRelateType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SNAPINFOCFG
	{
		public uint dwSize;

		public byte byCurPicType;

		public byte byPicQuality;

		public byte[] byRes1;

		public uint dwPicSize;

		public byte[] byRes2;
	}

	public enum PtzTrackMode : uint
	{
		Always = 1,
		Bytime = 2,
		Next = 3
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PTZ_TRACK_PARAM
	{
		public uint dwSize;

		public byte byTrackMode;

		public byte byLinkageTarget;

		public byte byAutoTrackEnable;

		public byte byRes1;

		public uint dwTrackTime;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_TRAVERSE_PLANE_DETECTION
	{
		public uint dwSize;

		public byte byEnable;

		public byte byEnableDualVca;

		public byte[] byRes1;

		public NET_VCA_TRAVERSE_PLANE[] struAlertParam;

		public NET_DVR_SCHEDTIME[][] struAlarmSched;

		public NET_DVR_HANDLEEXCEPTION_V40 struHandleException;

		public uint dwMaxRelRecordChanNum;

		public uint dwRelRecordChanNum;

		public uint[] byRelRecordChan;

		public NET_DVR_SCHEDTIME[] struHolidayTime;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_FIELDDETECION
	{
		public uint dwSize;

		public byte byEnable;

		public byte byEnableDualVca;

		public byte[] byRes1;

		public NET_VCA_INTRUSION[] struIntrusion;

		public NET_DVR_SCHEDTIME[][] struAlarmSched;

		public NET_DVR_HANDLEEXCEPTION_V40 struHandleException;

		public uint dwMaxRelRecordChanNum;

		public uint dwRelRecordChanNum;

		public uint[] byRelRecordChan;

		public NET_DVR_SCHEDTIME[] struHolidayTime;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ROI_DETECT_NUM
	{
		public uint dwSize;

		public uint dwGroup;

		public uint dwStreamType;

		public uint dwRoiFixNum;

		public uint[] dwRoiFixID;

		public byte[][] szFixRoiName;

		public uint dwRoiTrackNum;

		public uint[] dwRoiTrackID;

		public byte[] byRes;
	}

	public enum DetectRoiType : uint
	{
		FixRoi = 0,
		TrackRoi = 1
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ROI_DETECT_COND
	{
		public uint dwSize;

		public uint dwRoiID;

		public NET_DVR_MULTI_STREAM_COMPRESSIONCFG_COND struMultiStreamCfg;

		public byte byRoiDetectType;

		public byte byRoiDetectTrackType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ROI_FIX_RECT_CFG
	{
		public byte byEnableFixRoi;

		public byte byImageQualityLevel;

		public byte[] byRes;

		public byte[] szFixRoiName;

		public NET_VCA_RECT struRoiRect;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ROI_TRACK_RECT_CFG
	{
		public byte byEnableTrackRoi;

		public byte byImageQualityLevel;

		public byte byModeType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_ROI_DETECT_UNION
	{
		[FieldOffset (0)]
		public uint[] uLen;

		[FieldOffset (0)]
		public NET_DVR_ROI_FIX_RECT_CFG strRoiFixRectCfg;

		[FieldOffset (0)]
		public NET_DVR_ROI_TRACK_RECT_CFG strRoiTrackRectCfg;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ROI_DETECT_CFG
	{
		public uint dwSize;

		public uint dwStreamType;

		public byte byRoiDetectType;

		public byte[] byRes;

		public NET_DVR_ROI_DETECT_UNION uRoiDetectInfo;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_VCA_DEFOCUSPARAM
	{
		public uint dwSize;

		public byte byEnable;

		public byte bySensitiveLevel;

		public byte[] byRes1;

		public NET_DVR_HANDLEEXCEPTION_V40 struHandleException;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PRESET_NAME
	{
		public uint dwSize;

		public ushort wPresetNum;

		public byte[] byRes1;

		public sbyte[] byName;

		public ushort wPanPos;

		public ushort wTiltPos;

		public ushort wZoomPos;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCHEDTASK
	{
		public NET_DVR_SCHEDTIME struSchedTime;

		public ushort wAction;

		public ushort wActionNum;

		public byte[] byres;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TIME_TASK
	{
		public uint dwSize;

		public byte byTaskEnable;

		public byte[] byRes;

		public NET_DVR_SCHEDTASK[][] struTask;

		public uint dwParkTime;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CHANNEL_INDEX
	{
		public uint dwSize;

		public uint dwChannel;

		public uint dwIndex;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_AUDIO_NAME
	{
		public uint dwSize;

		public sbyte[] cName;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LOGIN_DEVICE_PARAM
	{
		public uint dwSize;

		public byte byMobileDev;

		public byte[] byRes;
	}

	public enum RecvDataType : uint
	{
		EnumRecvErrcode = 0
	}

	public enum FisheyeStreamOutputMode : uint
	{
		Fisheye = 1,
		Ptz = 2,
		Panorama = 3
	}

	public enum CallbackTypeDataEnum : uint
	{
		StreamStatus = 1,
		Ptzpos = 2,
		RealtimeOutput = 3
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FISHEYE_STREAM_STATUS
	{
		public uint dwSize;

		public byte byStreamMode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CALLBACK_TYPE_DATA
	{
		public uint dwChannel;

		public uint dwDataType;

		public uint dwDataLen;

		public unsafe byte* pData;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DRAG_POS_PARAM
	{
		public uint dwChannel;

		public uint dwPtzChannel;

		public NET_VCA_POINT struToPoint;

		public NET_VCA_POINT struOriPoint;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_QUERY_STATUS
	{
		public uint dwSize;

		public byte byCpuLoad;

		public byte byMemLoad;

		public ushort wAbility;

		public ushort wRemainAbility;

		public ushort wTotalPlanNum;

		public ushort wCurPlanNum;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MONITOR_VQDCFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte byDevType;

		public byte bySignalPoint;

		public byte byBlurPoint;

		public byte byLumaPoint;

		public byte byChromaPoint;

		public byte bySnowPoint;

		public byte byStreakPoint;

		public byte byFreezePoint;

		public byte byPTZPoint;

		public byte byMonitorDel;

		public byte byContrastThreshold;

		public byte byMonoThreshold;

		public byte byShakeThreshold;

		public byte byFlashThreshold;

		public byte byCoverThreshold;

		public byte bySceneThreshold;

		public byte byDarkThreshold;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DIAGNOSIS_UPLOAD
	{
		public uint dwSize;

		public sbyte[] sStreamID;

		public sbyte[] sMonitorIP;

		public uint dwChanIndex;

		public uint dwWidth;

		public uint dwHeight;

		public NET_DVR_TIME struCheckTime;

		public byte byResult;

		public byte bySignalResult;

		public byte byBlurResult;

		public byte byLumaResult;

		public byte byChromaResult;

		public byte bySnowResult;

		public byte byStreakResult;

		public byte byFreezeResult;

		public byte byPTZResult;

		public byte byContrastResult;

		public byte byMonoResult;

		public byte byShakeResult;

		public sbyte[] sSNapShotURL;

		public byte byFlashResult;

		public byte byCoverResult;

		public byte bySceneResult;

		public byte byDarkResult;

		public byte byStreamType;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DOWN_LOAD_REQUEST
	{
		public NET_DVR_STREAM_INFO struStreamInfo;

		public sbyte[] sSnapShotURL;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VQD_RESULT_INFO
	{
		public uint dwSize;

		public sbyte[] sStreamID;

		public uint dwPicLength;

		public byte byStatus;

		public byte[] byRes;

		public unsafe sbyte* pSnapShot;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PLAN_VQD_CFG
	{
		public uint dwSize;

		public byte[] sPlanID;

		public NET_DVR_SCHEDTIME[][] struDetectTime;

		public byte byPlanMode;

		public byte byRes1;

		public byte byCheckFlag;

		public byte bySignal;

		public byte byBlur;

		public byte byLuma;

		public byte byChroma;

		public byte bySnow;

		public byte byStreak;

		public byte byFreeze;

		public byte byPTZ;

		public byte byEnablePlanRound;

		public byte byContrast;

		public byte byMono;

		public byte byShake;

		public byte byFlash;

		public byte byCover;

		public byte byScene;

		public byte byDark;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TEST_SPOTCFG
	{
		public uint dwSize;

		public byte byStepCount;

		public byte byStepIndex;

		public byte[] byRes;
	}

	public enum NetDvrIpcEnum
	{
		BusinessInvalid = -1,
		BusinessHikvision = 0,
		BusinessPanasonic,
		BusinessSony,
		BusinessAxis,
		BusinessSanyo,
		BusinessBosch,
		BusinessZavio,
		BusinessGrandeye,
		BusinessProvideo,
		BusinessArecont,
		BusinessActi,
		BusinessPelco,
		BusinessVivotek,
		BusinessInfinova,
		BusinessDahua,
		BusinessHikStdH264 = 32,
		BusinessHikStdMpeg4,
		BusinessSunell,
		BusinessAteme,
		BusinessLaunch,
		BusinessYaan,
		BusinessBluesky,
		BusinessBlueskylimit,
		BusinessTdwy,
		BusinessHbgk,
		BusinessSantachi,
		BusinessHigheasy,
		BusinessSamsung,
		BusinessUrlRtsp = 64,
		BusinessOnvif,
		MaxBusinessType
	}

	public enum NetDvrIpcEnumUnify
	{
		Invalid = -1,
		Hikvision = 0,
		Panasonic,
		Sony,
		Axis = 4,
		Sanyo,
		Bosch,
		Zavio,
		Grandeye,
		Provideo,
		Arecont,
		Acti,
		Pelco,
		Vivotek,
		Dahua,
		Samsung,
		Psia = 17,
		Onvif,
		Brickcom,
		Gb28181,
		Canon = 23,
		Huint = 32,
		Infinova,
		HikStdH264,
		HikStdMpeg4,
		Sunell,
		Ateme,
		Launch,
		Yaan,
		Bluesky,
		Blueskylimit,
		Tdwy,
		Hbgk,
		Santachi,
		Higheasy,
		Hanbang,
		Samsung3120,
		Samsung3080,
		Samsung2000,
		Samsung5200,
		Jingyuan,
		Videotrec,
		Chenova,
		Fenghuo,
		Zb5301,
		Zb5401,
		Haixin,
		Zhongyingxin,
		Avun,
		Govty,
		Sae,
		Dongfangwangli,
		Changhong,
		H3c,
		Baian,
		Hat,
		Yuanye,
		Hikcard,
		Haixincap,
		Wenancap,
		Xunmei,
		Baiwo,
		Apd,
		Reachdev,
		XunmeiDahua,
		Huanghe,
		Lianchen,
		Chengye,
		Visiondigi,
		Henghe,
		Kodak,
		Aironix,
		Lg,
		Hasee,
		EnumIpcProtocol8000me,
		Povitel,
		Yiview,
		Tianyue,
		Howell,
		Wapa,
		Sanle,
		HikcardEncryption,
		Junsda,
		Liyuan,
		Xinchan,
		Bite,
		Meian,
		Roseek,
		Aebell,
		JslSt,
		Vimicro,
		Type
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MRD_SEARCH_PARAM
	{
		public uint dwSize;

		public NET_DVR_STREAM_INFO struStreamInfo;

		public ushort wYear;

		public byte byMonth;

		public byte byDrawFrame;

		public byte byStreamType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MRD_SEARCH_RESULT
	{
		public uint dwSize;

		public byte[] byRecordDistribution;

		public byte[] byHasEventRecode;

		public byte byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ACCESS_DEVICE_INFO
	{
		public uint dwSize;

		public byte byGroup;

		public byte byProType;

		public byte byAccessMode;

		public byte byRes1;

		public sbyte[] szUserName;

		public sbyte[] szPassword;

		public sbyte[] szDomain;

		public NET_DVR_IPADDR struIP;

		public ushort wPort;

		public byte[] szGB28181DevID;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ACCESS_DEVICE_CHANNEL_INFO
	{
		public uint dwSize;

		public uint dwTotalChannelNum;

		public byte[] byChannel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PREVIEW_SWITCH_COND
	{
		public uint dwSize;

		public byte byGroup;

		public byte byVideoOutType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PREVIEW_SWITCH_CFG
	{
		public uint dwSize;

		public ushort[] wSwitchSeq;

		public byte byPreviewNumber;

		public byte byEnableAudio;

		public byte bySwitchTime;

		public byte bySameSource;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_USER_COND
	{
		public sbyte[] szUserName;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_USER_RIGHT_CFG
	{
		public uint dwSize;

		public byte byAddMonitoringPointRight;

		public byte byModMonitoringPointRight;

		public byte byDelMonitoringPointRight;

		public byte bySetRecordPlanRight;

		public byte byDelRecordPlanRight;

		public byte byEnableOrDisableRecordPlanRight;

		public byte byManualRecordRight;

		public byte bySetAlarmRecordRight;

		public byte byRecordBackupRight;

		public byte byRecordDownloadRight;

		public byte byRecordDeleteRight;

		public byte byDelBackupRecordRight;

		public byte bySetBackupVolumeRight;

		public byte byRecordPlayBackRight;

		public byte byLogDeleteRight;

		public byte byLogDownloadRight;

		public byte byAddUserRight;

		public byte byDelUserRight;

		public byte byModUserRight;

		public byte byAllocUserRight;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MACHINE_MAX_NUM_CFG
	{
		public uint dwSize;

		public uint dwMaxNum;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_N_PLUS_ONE_WORK_MODE_CFG
	{
		public uint dwSize;

		public byte byWorkMode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ADD_PARAM
	{
		public NET_DVR_IPADDR struIP;

		public sbyte[] szPassword;

		public byte byAddType;

		public byte byDisableBackup;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEL_PARAM
	{
		public NET_DVR_IPADDR struIP;

		public byte byDelType;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_NPO_PARAM_UNION
	{
		[FieldOffset (0)]
		public NET_DVR_ADD_PARAM struAddParam;

		[FieldOffset (0)]
		public NET_DVR_DEL_PARAM struDelParam;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_N_PLUS_ONE_DEVICE_PARAM
	{
		public uint dwSize;

		public NET_DVR_NPO_PARAM_UNION unionParam;

		public byte byType;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DATA_CALLBACK_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte byDelData;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_HD_STATUS
	{
		public uint dwSize;

		public byte bySleepStatus;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RAID_BTS_CFG
	{
		public uint dwSize;

		public byte bySpeed;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LUN_CLONE
	{
		public uint dwSize;

		public uint dwSrcLunID;

		public uint dwDstLunID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LUN_EXPAND
	{
		public uint dwSize;

		public uint dwLunID;

		public uint dwHSize;

		public uint dwLSize;

		public sbyte[] szArrayIDGroup;

		public sbyte[] szNewLunName;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DVR_NET_DISK_MODIFY
	{
		public uint dwSize;

		public sbyte[] szOldDvrNetDiskName;

		public sbyte[] szNewDvrNetDiskName;

		public NET_DVR_IPADDR struWarrantIP;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_NAS_PARAM
	{
		public uint dwSize;

		public uint dwLunID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ISCSI_PARAM
	{
		public uint dwSize;

		public uint dwTargetID;

		public uint dwLunID;

		public uint dwAccessMode;

		public NET_DVR_IPADDR struClientIP;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FC_PARAM
	{
		public uint dwSize;

		public uint dwStoreLunID;

		public uint dwLogicLunID;

		public uint dwHbaID;

		public uint dwAccessMode;

		public sbyte[] szClientWWWPN;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LUN_PARAM
	{
		public uint dwHCapacity;

		public uint dwLCapacity;

		public sbyte[] szName;

		public uint dwBlockSize;

		public sbyte[] szArrayIDGroup;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DVR_PARAM
	{
		public uint dwHCapacity;

		public uint dwLCapacity;

		public sbyte[] szName;

		public uint dwBlockSize;

		public NET_DVR_IPADDR struWarrantIP;

		public sbyte[] szArrayIDGroup;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_VD_UNION
	{
		[FieldOffset (0)]
		public byte[] byUnionLen;

		[FieldOffset (0)]
		public NET_DVR_OPERATE_VD_PARAM struHikVDParam;

		[FieldOffset (0)]
		public NET_DVR_LUN_PARAM struLunParam;

		[FieldOffset (0)]
		public NET_DVR_DVR_PARAM struDvrParam;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_OPERATE_VD_PARAM_EX
	{
		public byte byVDType;

		public byte[] byRes1;

		public NET_DVR_VD_UNION uVDParam;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CVR_ALARM
	{
		public sbyte[] szFirstType;

		public sbyte[] szFirstIndex;

		public sbyte[] szSecondType;

		public NET_DVR_TIME struTime;

		public byte byStatus;

		public byte byAlarmLevel;

		public byte[] byRes1;

		public sbyte[] szSecondIndex;

		public sbyte[] szThirdType;

		public sbyte[] szThirdIndex;

		public sbyte[] szFourthType;

		public sbyte[] szFourthIndex;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WORKING_DEVICE_INFO
	{
		public NET_DVR_IPADDR struIP;

		public byte byLinkStatus;

		public byte byWorkStatus;

		public byte byBacupStatus;

		public byte bySyncProgress;

		public NET_DVR_TIME_EX struSyncBeginTime;

		public NET_DVR_TIME_EX struSyncEndTime;

		public sbyte[] szSerialNumber;

		public uint dwSoftwareVersion;

		public byte[] byWorkingDeviceGUID;

		public sbyte[] szDevTypeName;

		public ushort wDevType;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_REDUNDANT_DEVICE_INFO
	{
		public NET_DVR_IPADDR struIP;

		public byte byWorkStatus;

		public byte byBackupStatus;

		public ushort wBackupPort;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_NPO_DEV_INFO_UNION
	{
		[FieldOffset (0)]
		public byte[] byUnionLen;

		[FieldOffset (0)]
		public NET_DVR_WORKING_DEVICE_INFO struWorkingDeviceInfo;

		[FieldOffset (0)]
		public NET_DVR_REDUNDANT_DEVICE_INFO struRedundantDeviceInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_N_PLUS_ONE_DEVICE_INFO
	{
		public uint dwSize;

		public NET_DVR_NPO_DEV_INFO_UNION unionDevInfo;

		public byte byType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_UPGRADE_IPC_PARAM
	{
		public NET_DVR_STREAM_INFO[] struStreamInfo;

		public sbyte[] szFileName;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_UPGRADE_IPC_ERR_INFO_SINGLE
	{
		public NET_DVR_STREAM_INFO struStreamInfo;

		public ushort wErrCode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_UPGRADE_IPC_ERR_INFO
	{
		public NET_DVR_UPGRADE_IPC_ERR_INFO_SINGLE[] struErrInfoSingle;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IPC_CFG_FILE_PARAM
	{
		public sbyte[] szFileName;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IPC_CFG_FILE_ERR_INFO_SINGLE
	{
		public ushort wRow;

		public ushort wErrCode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IPC_CFG_FILE_ERR_INFO
	{
		public NET_DVR_IPC_CFG_FILE_ERR_INFO_SINGLE[] struErrInfoSingle;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PTZ_PATTERN
	{
		public uint dwSize;

		public uint dwChannel;

		public uint dwPatternCmd;

		public uint dwPatternID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PTZ_PARKACTION_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte byOneTouchSwitch;

		public byte[] byRes1;

		public uint dwParkTime;

		public ushort wActionType;

		public ushort wID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PTZ_MANUALTRACE
	{
		public uint dwSize;

		public uint dwChannel;

		public NET_VCA_POINT struPoint;

		public byte byTrackType;

		public byte byLinkageType;

		public byte[] byRes;

		public NET_VCA_POINT struPointEnd;

		public NET_DVR_TIME_V30 struTime;

		public uint dwSerialNo;

		public byte[] byRes1;
	}

	public enum VqdType : uint
	{
		BlurFlag = 1,
		LumaFlag = 2,
		ChromaFlag = 4,
		SnowFlag = 8,
		StreakFlag = 16,
		FreezeFlag = 32,
		SigloseFlag = 64,
		PtzFlag = 128
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VQD_LOOP_DIAGNOSE_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes1;

		public byte[] byVQDTypeEnable;

		public byte[] byThresholdValue;

		public NET_DVR_HANDLEEXCEPTION_V40 struAlarmHandleType;

		public NET_DVR_SCHEDTIME[][] struAlarmTime;

		public NET_DVR_SCHEDTIME[] struHolidayAlarmTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VQD_DIAGNOSE_EXCEPTION_INFO
	{
		public uint dwChannelNO;

		public uint dwVQDType;

		public NET_DVR_TIME struDiagnoseTime;

		public byte byScoreValue;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VQD_DIAGNOSE_INFO
	{
		public uint dwSize;

		public NET_DVR_VQD_DIAGNOSE_EXCEPTION_INFO struVQDDiagnoseExceptionInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEC_RESOURCE_LIST
	{
		public uint dwSize;

		public byte[] byDecStatus;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEC_APPLICANT_INFO
	{
		public uint dwSize;

		public uint dwDecResource;

		public uint dwChannel;

		public NET_DVR_IPADDR struIP;

		public ushort wPort;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEC_RESOURCE_INFO
	{
		public uint dwSize;

		public uint dwSlotNum;

		public NET_DVR_IPADDR struIP;

		public ushort wPort;

		public byte[] byRes1;

		public uint dwDecChan;

		public byte[] sUserName;

		public byte[] sPassword;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEC_CHAN_COND
	{
		public uint dwSize;

		public uint dwSlotNum;

		public uint dwDecChan;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEC_YUV_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes1;

		public uint[] dwYUVAddress;

		public ushort wWidth;

		public ushort wHeight;

		public byte byEnableAudio;

		public byte[] byRes2;

		public uint dwAudioAddr;

		public byte[] byRes3;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INPUT_INFO
	{
		public uint dwSize;

		public byte byChanType;

		public byte[] byRes1;

		public uint dwChanNo;

		public uint dwSubChanNo;

		public uint dwVariableNo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARM_VARIABLE_CFG
	{
		public uint dwSize;

		public ushort wVariableIndex;

		public ushort wVariableType;

		public byte[] sDescribe;

		public byte byLimitLineType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARM_SENSOR_POINT_CFG
	{
		public int nMeasureHigh;

		public int nMeasureLow;

		public byte byAlarmMode;

		public byte[] byRes1;

		public int[] nAlarmValue;

		public uint dwOsdCfg;

		public uint dwSensitive;

		public uint dwIPChanOsd;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARM_SWITCH_POINT_CFG
	{
		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_ALARM_POINT_PARAM_UNION
	{
		[FieldOffset (0)]
		public byte[] byLength;

		[FieldOffset (0)]
		public NET_DVR_ALARM_SENSOR_POINT_CFG struSensor;

		[FieldOffset (0)]
		public NET_DVR_ALARM_SWITCH_POINT_CFG struSwitch;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARM_POINT_CFG
	{
		public uint dwSize;

		public uint dwPointNo;

		public byte[] sPointDescribe;

		public NET_DVR_ALARM_POINT_PARAM_UNION struPointParam;

		public byte byPointType;

		public byte byChanType;

		public byte[] byRes1;

		public uint dwChanNo;

		public uint dwSubChanNo;

		public uint dwVariableNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SEARCH_CONDITION
	{
		public uint dwSize;

		public byte byMajorType;

		public byte byMinorType;

		public byte[] byRes1;

		public NET_DVR_TIME struStartTime;

		public NET_DVR_TIME struStopTime;

		public byte byChanType;

		public byte[] byRes2;

		public uint dwChanNo;

		public uint dwSubChanNo;

		public uint dwVariableNo;

		public uint dwPointNo;

		public byte[] byRes3;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_HISTORY_DATA
	{
		public uint dwSize;

		public NET_DVR_TIME struTime;

		public byte byChanType;

		public byte[] byRes1;

		public uint dwChanNo;

		public uint dwSubChanNo;

		public uint dwVariableNo;

		public uint dwPointNo;

		public int iData;

		public byte byDataType;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_ALARM_MODE_CFG
	{
		public uint dwSize;

		public byte byDataUploadMode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_POINT_VALUE
	{
		public byte byChanType;

		public byte byPointType;

		public byte[] byRes1;

		public uint dwChanNo;

		public uint dwSubChanNo;

		public uint dwVariableNo;

		public uint dwPointNo;

		public int iValue;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_ALARMHOST_DATA_UNION
	{
		[FieldOffset (0)]
		public byte[] byLength;

		[FieldOffset (0)]
		public NET_DVR_ALARMHOST_POINT_VALUE struPointValue;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_DATA_UPLOAD
	{
		public uint dwSize;

		public byte byDataType;

		public byte[] byRes1;

		public NET_DVR_ALARMHOST_DATA_UNION struAlarmData;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INPUTVOLUME
	{
		public uint dwSize;

		public byte byAudioInputChan;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_AUDIOOUT_VOLUME
	{
		public uint dwSize;

		public byte byAudioOutVolume;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FUZZY_UPGRADE
	{
		public uint dwSize;

		public sbyte[] sUpgradeInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RS485_WORK_MODE
	{
		public uint dwSize;

		public byte byWorkMode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TRANSPARENT_CLIENT_SINGLE
	{
		public byte byEnable;

		public byte[] byRes1;

		public NET_DVR_IPADDR struIP;

		public ushort wPort;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TRANSPARENT_SERVER_SINGLE
	{
		public byte byEnable;

		public byte[] byRes1;

		public NET_DVR_IPADDR struIP;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TRANSPARENT_CLIENT_MODE
	{
		public NET_DVR_TRANSPARENT_CLIENT_SINGLE[] struClientSingle;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TRANSPARENT_SERVER_MODE
	{
		public ushort wPort;

		public byte[] byRes1;

		public NET_DVR_TRANSPARENT_SERVER_SINGLE[] struServerSingle;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_TRANSPARENT_CHAN_WORK_MODE_UNION
	{
		[FieldOffset (0)]
		public byte[] byRes;

		[FieldOffset (0)]
		public NET_DVR_TRANSPARENT_CLIENT_MODE struClientMode;

		[FieldOffset (0)]
		public NET_DVR_TRANSPARENT_SERVER_MODE struServerMode;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TRANSPARENT_CHAN_CFG
	{
		public uint dwSize;

		public byte byWorkMode;

		public byte[] byRes;

		public NET_DVR_TRANSPARENT_CHAN_WORK_MODE_UNION struTransparentPara;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_NAKED_DATA_INFO
	{
		public sbyte[] sSocketIP;

		public ushort wSocktPort;

		public byte[] byRes;
	}

	public enum NakedDataType : uint
	{
		NotDefined = 0,
		PosInfo
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_NAKED_DATA_PARAM
	{
		public ushort wPort;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_POS_INFO
	{
		public NET_DVR_STRUCTHEAD struVerHead;

		public uint dwChannelNum;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_POS_OSD_REGION
	{
		public NET_VCA_POINT struStart;

		public NET_VCA_POINT struEnd;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_POS_ACTION
	{
		public uint dwDelayTime;

		public byte byPrevOsd;

		public byte[] byRes1;

		public NET_DVR_POS_OSD_REGION struOsdPosInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_GENERIC_START
	{
		public byte[] sData;

		public byte byExclusive;

		public byte byFlagType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_GENERIC_END
	{
		public byte[] sData;

		public byte byExclusive;

		public byte byFlagType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_GENERIC_DATA_CFG
	{
		public byte[] sData;

		public byte byFlagType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IGNORE_STRING
	{
		public byte[] sData;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_POS_GENERIC
	{
		public byte byCaseSensitive;

		public byte[] byRes1;

		public NET_DVR_GENERIC_START struTransactionStart;

		public NET_DVR_GENERIC_END struTransactionEnd;

		public NET_DVR_GENERIC_DATA_CFG struLineDeli;

		public NET_DVR_IGNORE_STRING[] struIgnoreString;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_POS_AVE
	{
		public uint dwPosAddr;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_POS_NUCLEUS
	{
		public sbyte[] szEmployeeNo;

		public sbyte[] szTerminalNo;

		public sbyte[] szShiftNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_POS_PROTOCOL_UNION
	{
		[FieldOffset (0)]
		public byte[] byLenth;

		[FieldOffset (0)]
		public NET_DVR_POS_GENERIC struGeneric;

		[FieldOffset (0)]
		public NET_DVR_POS_AVE struAve;

		[FieldOffset (0)]
		public NET_DVR_POS_NUCLEUS struNUCLEUS;
	}

	public enum NetDvrCharsetEnum : uint
	{
		Utf8 = 0,
		Gb2312,
		Latin1,
		Latin2,
		Latin3,
		Latin4,
		Cyrillic,
		Arabic,
		Greek,
		Hebrew,
		Turkish,
		Nordic,
		Thai,
		Latin7,
		Latin8,
		Latin9,
		Latin10,
		CentralEuropean,
		CyrillicScript,
		HebrewDos862
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_POS_FILTER_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte byCharSetType;

		public byte byRes1;

		public byte byProtocolType;

		public NET_DVR_POS_PROTOCOL_UNION uPosProtocol;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_NET_SNIFF
	{
		public byte byEnableSourcePort;

		public byte byEnableDestAddr;

		public byte byEnableDestPort;

		public byte byRes1;

		public byte[] bySourceIpAddr;

		public byte[] byDestinationIpAddr;

		public ushort wSourcePort;

		public ushort wDestinationPort;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_NET_RECEIVE
	{
		public ushort wNetPort;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MONITOR_INFO
	{
		public ushort wPort;

		public byte[] byRes1;

		public NET_DVR_IPADDR struRestrictRemoteIP;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ADDRESS
	{
		public NET_DVR_IPADDR struIP;

		public ushort wPort;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_POS_CONNECTMODE_UNION
	{
		[FieldOffset (0)]
		public byte[] byLen;

		[FieldOffset (0)]
		public NET_DVR_NET_RECEIVE struNetRecv;

		[FieldOffset (0)]
		public NET_DVR_MONITOR_INFO struTcpMonitor;

		[FieldOffset (0)]
		public NET_DVR_SINGLE_RS232 struRS232;

		[FieldOffset (0)]
		public NET_DVR_MONITOR_INFO struUdpMonitor;

		[FieldOffset (0)]
		public NET_DVR_NET_SNIFF struSniff;

		[FieldOffset (0)]
		public NET_DVR_ADDRESS struMcast;

		[FieldOffset (0)]
		public NET_DVR_USB_RS232 struUSBRS232;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CONNECT_POS_CFG
	{
		public uint dwSize;

		public byte byConnectMode;

		public byte[] byRes1;

		public NET_DVR_POS_CONNECTMODE_UNION uPosConnMode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CHAN_FILTER_CFG
	{
		public uint dwSize;

		public byte byFilterID;

		public byte byFontSize;

		public byte byShowPosInfo;

		public byte byOverlayMode;

		public uint dwDelayTime;

		public NET_DVR_POS_OSD_REGION struOsdPosInfo;

		public NET_DVR_RGB_COLOR struOsdColor;

		public NET_DVR_SCHEDTIME[][] struAlarmSched;

		public NET_DVR_HANDLEEXCEPTION_V40 struHandleException;

		public uint dwMaxRelRecordChanNum;

		public uint dwRelRecordChanNum;

		public uint[] dwRelRecordChan;

		public uint dwTimeOut;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEVICE_LAN_ENCODE
	{
		public uint dwSize;

		public byte[] byLanEncode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCENECHANGE_DETECTION
	{
		public uint dwSize;

		public byte byEnable;

		public byte bySensitiveLevel;

		public byte[] byRes1;

		public NET_DVR_SCHEDTIME[][] struAlarmSched;

		public NET_DVR_HANDLEEXCEPTION_V40 struHandleException;

		public uint dwMaxRelRecordChanNum;

		public uint dwRelRecordChanNum;

		public uint[] dwRelRecordChan;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCENECHANGE_DETECTION_RESULT
	{
		public uint dwSize;

		public NET_VCA_DEV_INFO struDevInfo;

		public byte[] byRes;
	}

	public enum ModuleType : uint
	{
		PreviewMod = 0,
		AlarmMod,
		PlaybackMod,
		MaxType
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PARK_INFO
	{
		public sbyte[] sPlateNo;

		public sbyte[] sParkIndex;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CROSSLINE_ALARM
	{
		public uint dwSize;

		public NET_VCA_DEV_INFO struDevInfo;

		public NET_DVR_TIME_EX struTriggerTime;

		public NET_DVR_PARK_INFO struParkInfo;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_STREAM_SRC_CFG
	{
		public uint dwSize;

		public NET_DVR_STREAM_INFO struStreamID;

		public NET_DVR_STREAM_SRC_INFO struStreamSrcInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ENCODEINFO
	{
		public byte byFormatType;

		public byte byVideoEncType;

		public ushort wWidth;

		public ushort wHeight;

		public byte[] byRes1;

		public uint dwVideoBitrate;

		public uint dwVideoFrameRate;

		public byte byAudioEncType;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TRANSSTATUS
	{
		public uint dwSize;

		public NET_DVR_STREAM_INFO struStreamInfo;

		public byte byMode;

		public byte byLinkNums;

		public byte byPassiveTransMode;

		public byte byRes;

		public NET_DVR_ADDRESS[] struDstIPInfo;

		public byte byTransResource;

		public byte[] byRes1;

		public NET_DVR_ENCODEINFO struSrcEncodeInfo;

		public NET_DVR_ENCODEINFO[] struDstEncodeInfo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TRANSDEVICE_STATUS
	{
		public uint dwSize;

		public uint dwTotalResource;

		public uint dwIdleResource;

		public byte byCpuLoad;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEV_WORK_MODE
	{
		public uint dwSize;

		public byte byWorkMode;

		public byte byDisplayMode;

		public byte byEnableVcaDec;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PASSIVETRANSINFO
	{
		public uint dwSize;

		public byte byStreamType;

		public byte byLinkMode;

		public byte byPassiveTransMode;

		public byte[] byRes1;

		public byte byDataType;

		public byte byRes2;

		public ushort wDataLength;

		public unsafe sbyte* pBuffer;

		public byte[] byRes3;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BASEMAP_CONTROL_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte byBaseMapType;

		public byte[] byRes1;

		public uint dwBaseMapNo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VIRTUAL_SCREEN_CFG
	{
		public uint dwSize;

		public uint dwResolution;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BASEMAP_WINCFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes1;

		public NET_DVR_RECTCFG_EX struWinPosition;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BASEMAP_PIC_INFO
	{
		public uint dwSize;

		public byte[] sPicName;

		public byte byUsed;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIX_LOGO_INFO
	{
		public uint dwSize;

		public uint dwLogoSize;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIX_LOGO_CFG
	{
		public uint dwSize;

		public byte byExist;

		public byte[] byRes1;

		public uint dwLogoSize;

		public byte[] byLogoName;

		public uint dwLogoNo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WIN_LOGO_CFG
	{
		public uint dwSize;

		public uint dwLogoNo;

		public byte byEnable;

		public byte[] byRes1;

		public uint dwCoordinateX;

		public uint dwCoordinateY;

		public byte byFlash;

		public byte byTranslucent;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BIG_SCREEN_AUDIO_CFG
	{
		public uint dwSize;

		public uint dwWinIndex;

		public byte byEnable;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WIN_ZOOM_STATUS
	{
		public uint dwSize;

		public byte byZoomStatus;

		public byte[] byRes1;

		public NET_DVR_POINT_FRAME struPointFrame;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RESUME_INITRACKPOS_CFG
	{
		public uint dwSize;

		public uint dwChannel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TEST_SELFCHECK_RESULT
	{
		public uint dwSize;

		public uint dwChannel;

		public byte bySelfCheckStatus;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TEST_COMMAND
	{
		public uint dwSize;

		public uint dwChannel;

		public byte[] byTestCommand;

		public ushort wICRIntervalTime;

		public byte byElectronicCompassState;

		public byte[] byRes1;

		public float fDeviceTem;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_AGING_TRICK_SCAN
	{
		public uint dwSize;

		public uint dwChannel;

		public byte byAging;

		public byte byWriteReadEnalbe;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IPC_PARAM_TYPE
	{
		public uint dwSize;

		public uint dwParamType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ECCENTRIC_CORRECT_STATE
	{
		public uint dwSize;

		public uint dwChannel;

		public byte byEccentricCorrectState;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TEST_DEVMODULE_CFG
	{
		public uint dwSize;

		public uint dwChannel;

		public byte[] byDevFanModuleType;

		public byte[] byDevHeaterModuleType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BARRIERGATE_COND
	{
		public byte byLaneNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VEHICLE_CONTROL
	{
		public byte byGateOperateType;

		public byte byRes1;

		public ushort wAlarmOperateType;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RELAY_PARAM
	{
		public byte byAccessDevInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ENTRANCE_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte byBarrierGateCtrlMode;

		public byte[] byRes1;

		public uint dwRelateTriggerMode;

		public uint dwMatchContent;

		public NET_DVR_RELAY_PARAM[] struRelayRelateInfo;

		public byte[] byGateSingleIO;

		public NET_DVR_VEHICLE_CONTROL[] struVehicleCtrl;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BARRIERGATE_CFG
	{
		public uint dwSize;

		public uint dwChannel;

		public byte byLaneNo;

		public byte byBarrierGateCtrl;

		public byte byEntranceNo;

		public byte byUnlock;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VEHICLE_CONTROL_LIST_INFO
	{
		public uint dwSize;

		public uint dwChannel;

		public uint dwDataIndex;

		public sbyte[] sLicense;

		public byte byListType;

		public byte byPlateType;

		public byte byPlateColor;

		public byte[] byRes;

		public sbyte[] sCardNo;

		public NET_DVR_TIME_V30 struStartTime;

		public NET_DVR_TIME_V30 struStopTime;

		public sbyte[] sOperateIndex;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VEHICLE_CONTROL_COND
	{
		public uint dwChannel;

		public uint dwOperateType;

		public sbyte[] sLicense;

		public sbyte[] sCardNo;

		public byte byListType;

		public byte[] byRes1;

		public uint dwDataIndex;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VEHICLE_CONTROL_LIST_DSALARM
	{
		public uint dwSize;

		public uint dwDataIndex;

		public sbyte[] sOperateIndex;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VEHICLE_CONTROL_ALARM
	{
		public uint dwSize;

		public byte byListType;

		public byte byPlateType;

		public byte byPlateColor;

		public byte byRes1;

		public sbyte[] sLicense;

		public sbyte[] sCardNo;

		public NET_DVR_TIME_V30 struAlarmTime;

		public uint dwChannel;

		public uint dwPicDataLen;

		public byte byPicType;

		public byte[] byRes3;

		public unsafe sbyte* pPicData;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FIRE_ALARM
	{
		public uint dwSize;

		public NET_DVR_TIME_V30 struAlarmTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VEHICLE_CONTROL_DELINFO
	{
		public uint dwSize;

		public uint dwDelType;

		public sbyte[] sLicense;

		public sbyte[] sCardNo;

		public byte byPlateType;

		public byte byPlateColor;

		public byte byOperateType;

		public byte byListType;

		public uint dwDataIndex;

		public sbyte[] sOperateIndex;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_GATELAMP_INFO
	{
		public uint dwSize;

		public uint dwChannel;

		public byte byLaneNo;

		public byte byBrightlampCtrl;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIX_BASE_CFG
	{
		public uint dwSize;

		public uint dwValidInputNum;

		public uint dwValidOutputNum;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIX_SWITCH_INFO
	{
		public uint dwSize;

		public uint dwInputChan;

		public uint dwOutputChan;

		public uint dwMatrixID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IO_RELATION_INFO
	{
		public uint dwSize;

		public uint[] dwIORelation;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_EXTERNAL_DEVCOND
	{
		public uint dwSize;

		public byte byExternalDevTpye;

		public byte byRelativeIndex;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_EXTERNAL_DEVCFG
	{
		public uint dwSize;

		public byte byExternalDevTpye;

		public byte[] byRes2;

		public sbyte[] sDevName;

		[StructLayout (LayoutKind.Explicit)]
		public struct UExternalDevInfo
		{
			[FieldOffset (0)]
			public byte[] byUnionLen;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruRrReader
			{
				public NET_DVR_IPADDR struDevIP;

				public ushort wDevPort;

				public byte[] byRes;
			}


			[FieldOffset (0)]
			public StruRrReader struRrReader;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruGateway
			{
				public byte byRs485No;

				public byte byDevCtrlCode;

				public byte byAutoIssuedData;

				public byte byOfflineDetEnable;

				public byte byDetCycle;

				public byte[] byRes;
			}


			[FieldOffset (0)]
			public StruGateway struGateway;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruLed
			{
				public byte byExternalMode;

				public byte[] byRes;

				public NET_DVR_IPADDR struDevIP;

				public ushort wDevPort;

				public byte byRs485No;

				public byte byDevCtrlCode;

				public byte byCtrlCardType;

				public byte byLedScreenType;

				public byte byLedScreenUse;

				public byte byLedDisplayMode;

				public sbyte[] sLedCustomInfo;

				public uint dwLedScreenH;

				public uint dwLedScreenW;

				public byte[] byRes1;
			}


			[FieldOffset (0)]
			public StruLed struLed;
		}


		public UExternalDevInfo uExternalDevInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_EXTERNAL_DEVSTATUS
	{
		public uint dwSize;

		public sbyte[] sDevName;

		public byte byExternalDevTpye;

		public byte byRelativeIndex;

		public byte byOnline;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ENTRANCEDET_CFG
	{
		public uint dwSize;

		public byte byOfflineDetEnable;

		public byte byDetCycle;

		public byte byDevCtrlCode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ENTRANCEDEV_COMMAND
	{
		public uint dwSize;

		public byte byDevCtrlCode;

		public byte byManualIssuedData;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ENISSUED_DATADEL
	{
		public uint dwSize;

		public byte byDevCtrlCode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITS_PASSVEHICLE_COST_ITEM
	{
		public uint dwSize;

		public uint dwPassVehicleID;

		public byte[] byIntime;

		public byte[] byOuttime;

		public byte[] byCardNo;

		public byte[] byPlateInfo;

		public float fPayCost;

		public byte[] byOperatorName;

		public byte byVehicleType;

		public byte[] byRes1;

		public uint dwPayRuleID;

		public uint dwFreeRuleID;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ITS_HANDOVER_INFO
	{
		public uint dwSize;

		public byte[] byOperatorName;

		public byte[] byOperatorCard;

		public byte[] byStartTime;

		public byte[] byEndTime;

		public float fTotal_Pay;

		public uint dwTotal_Records;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CURTRIGGERMODE
	{
		public uint dwSize;

		public uint dwTriggerType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TEMP_HUMI
	{
		public uint dwSize;

		public uint dwChannel;

		public int iHumidity;

		public int iTemp;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMSOUNDMODE_CFG
	{
		public uint dwSize;

		public uint dwChannel;

		public uint dwSoundMode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SECURITYMODE
	{
		public uint dwSize;

		public uint dwChannel;

		public uint dwMode;

		public sbyte[] szRandCode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MOBILE_CAPTUREPIC_CFG
	{
		public uint dwSize;

		public byte byPreviewFpsAdjMode;

		public byte bySelPeccType;

		public byte byOptHabit;

		public byte byEnablePeccRec;

		public byte byPicSize;

		public byte byPicQuality;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CMS_PARAM
	{
		public uint dwSize;

		public NET_DVR_IPADDR struAddr;

		public ushort wServerPort;

		public byte bySeverProtocolType;

		public byte byStatus;

		public byte[] sDeviceId;

		public sbyte[] sPassWord;

		public byte[] sPlatformEhomeVersion;

		public byte byNetWork;

		public byte byAddressType;

		public byte[] byRes1;

		public byte[] sDomainName;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_HEATMAP_COND
	{
		public uint dwSize;

		public uint dwChannel;

		public byte byDetSceneID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_HEATMAP_PARAM
	{
		public byte byTargetTrackEnable;

		public byte bySensitivity;

		public byte byBackgroundUpdateRate;

		public byte bySceneChangeLevel;

		public byte byMinTargetSize;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_HEATMAP_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes;

		public NET_VCA_POLYGON[] struRegion;

		public NET_DVR_HEATMAP_PARAM struHeatMap;

		public NET_DVR_HANDLEEXCEPTION_V40 struHandleException;

		public NET_DVR_SCHEDTIME[][] struAlarmSched;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_HEATMAP_RESULT
	{
		public uint dwSize;

		public NET_VCA_DEV_INFO struDevInfo;

		public NET_DVR_TIME_EX struStartTime;

		public NET_DVR_TIME_EX struEndTime;

		public uint dwMaxHeatMapValue;

		public uint dwMinHeatMapValue;

		public uint dwTimeHeatMapValue;

		public ushort wArrayLine;

		public ushort wArrayColumn;

		public unsafe byte* pBuffer;

		public byte byDetSceneID;

		public byte byBrokenNetHttp;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_HEATMAP_QUERY_COND
	{
		public uint dwSize;

		public uint dwChannel;

		public NET_DVR_TIME_EX struStartTime;

		public NET_DVR_TIME_EX struEndTime;

		public byte byReportType;

		public byte byDetSceneID;

		public byte byHeatMapInfoType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_HEATMAP_INFO
	{
		public uint dwSize;

		public NET_DVR_TIME_EX struStartTime;

		public NET_DVR_TIME_EX struEndTime;

		public uint dwHeatMapPicLen;

		public unsafe byte* pBuffer;

		public uint dwTimeHeatMapValue;

		public uint dwHeatMapMaxValue;

		public uint dwHeatMapMinValue;

		public ushort wArrayLine;

		public ushort wArrayColumn;

		public unsafe byte* pArrayBuffer;

		public byte byArrayUnitType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PDC_QUERY_COND
	{
		public uint dwSize;

		public uint dwChannel;

		public NET_DVR_TIME_EX struStartTime;

		public NET_DVR_TIME_EX struEndTime;

		public byte byReportType;

		public byte byEnableProgramStatistics;

		public byte[] byRes1;

		public uint dwPlayScheduleNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PROGRAM_INFO
	{
		public uint dwProgramNo;

		public byte[] sProgramName;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PDC_RESULT
	{
		public uint dwSize;

		public NET_DVR_TIME_EX struStartTime;

		public NET_DVR_TIME_EX struEndTime;

		public uint dwEnterNum;

		public uint dwLeaveNum;

		public NET_DVR_PROGRAM_INFO struProgramInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MOBILE_PLATE_RECOGCFG
	{
		public uint dwSize;

		public byte[] byDefaultCHN;

		public byte byTimeOsd;

		public byte byRecogResultOsd;

		public byte byRecogHint;

		public byte byRecogDir;

		public byte byRecogEnv;

		public byte byRecogPlateType;

		public byte byUploadPlate;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MOBILE_RADAR_CFG
	{
		public uint dwSize;

		public byte byEnableRadar;

		public byte byEnableAlarm;

		public ushort wOverSpeed;

		public byte bySpeedUnits;

		public byte bydirection;

		public byte byMeasureMode;

		public byte byTargetType;

		public byte bySensitivity;

		public byte byCaptureNum;

		public byte byUploadPlate;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MOBILE_LOCALPLATECHK_CFG
	{
		public uint dwSize;

		public byte byCheck;

		public byte byCheckAlarm;

		public byte byCheckHint;

		public byte byUploadBlackCar;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VEHICLE_CHECK
	{
		public uint dwSize;

		public uint dwChannel;

		public NET_DVR_PLATE_INFO struPlateInfo;

		public ushort wIllegalType;

		public byte[] byRes;

		public sbyte[] sIllegalTypeInfo;

		public NET_DVR_TIME_V30 struIllegalTime;

		public byte byIllegalVehicleNum;

		public byte[] byRes1;

		public sbyte[] sCustomInfo;

		public byte[] byRes2;
	}

	public enum LongCfgSendDataTypeEnum : uint
	{
		DvrVehicleCheck = 1,
		MscSendData = 2,
		AcsSendData = 3,
		TmeCardSendData = 4,
		TmeVehicleSendData = 5,
		DvrDebugCmd = 6,
		DvrScreenCtrlCmd = 7,
		CvrPassbackSendData = 8
	}

	public enum LongCfgRecvDataTypeEnum : uint
	{
		DvrErrorCode = 1,
		MscRecvData = 2,
		AcsRecvData = 3
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WIPER_CONTINUEWORK_PARAM
	{
		public byte byWorkTimeInterval;

		public byte[] byRes;

		public uint dwContinueWorkTime;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_WIPERMODE_PARAM_UNION
	{
		[FieldOffset (0)]
		public byte[] uLen;

		[FieldOffset (0)]
		public NET_DVR_WIPER_CONTINUEWORK_PARAM struWiperContinueWorkParam;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WIPERINFO_CFG
	{
		public uint dwSize;

		public byte byWiperWorkMode;

		public byte[] byRes;

		public NET_DVR_WIPERMODE_PARAM_UNION ustruWiperModeParam;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_AUTOFOCUS_TESTCFG
	{
		public uint dwSize;

		public uint dwChannel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VIDEO_OUT_CFG
	{
		public byte byDisplayMode;

		public byte byBrightnessLevel;

		public byte byContrastLevel;

		public byte bySharpnessLevel;

		public byte bySaturationLevel;

		public byte byHueLevel;

		public byte byImageMode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_COLOR_TEMPERATURE_CFG
	{
		public byte byRed;

		public byte byGreen;

		public byte byBlue;

		public byte byRedOffset;

		public byte byGreenOffset;

		public byte byBlueOffset;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ADC_CFG
	{
		public byte byGainR;

		public byte byGainG;

		public byte byGainB;

		public byte byOffsetR;

		public byte byOffsetG;

		public byte byOffsetB;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCREEN_EDGE_CFG
	{
		public byte byEnable;

		public byte byLeftEdge;

		public byte byRightEdge;

		public byte byTopEdge;

		public byte byLowerEdge;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCREEN_DISPLAY_CFG
	{
		public uint dwSize;

		public byte byCfgType;

		public byte byBackLight;

		public byte[] byRes1;

		public NET_DVR_VIDEO_OUT_CFG struVideoOutCfg;

		public NET_DVR_COLOR_TEMPERATURE_CFG struColorTempCfg;

		public NET_DVR_ADC_CFG struAdcCfg;

		public NET_DVR_SCREEN_EDGE_CFG struScreenEdgeCfg;

		public byte[] byRes;
	}

	public enum ScreenRemoteCtrlType : uint
	{
		PowersupplyOpen = 1,
		PowersupplyClose = 2,
		Signalsource,
		Menu,
		Determination,
		On,
		Under,
		Left,
		Right,
		Info,
		Return,
		Num
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SIMULATE_SCREEN_REMOTE_CTRL
	{
		public uint dwSize;

		public byte byControlType;

		public byte byControlParam;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCREEN_SIGNAL_CFG
	{
		public uint dwSize;

		public byte bySignalSourceType;

		public byte byNoSignalPic;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCREEN_SPLICE_CFG
	{
		public uint dwSize;

		public byte bySpliceIndex;

		public byte bySpliceX;

		public byte bySpliceY;

		public byte byWidth;

		public byte byHeight;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCREEN_FAN_WORK_MODE_CFG
	{
		public uint dwSize;

		public byte byWorkMode;

		public byte byTemperatureLimitValue;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCREEN_VGA_CFG
	{
		public uint dwSize;

		public byte byEnableAutoAdjust;

		public byte byHorizontalPosition;

		public byte byVerticalPosition;

		public byte byClock;

		public byte byPhase;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCREEN_MENU_CFG
	{
		public uint dwSize;

		public byte byMenuLanguage;

		public byte byTransparency;

		public byte byDuration;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PIP_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte bySubWindowSource;

		public byte bySubWindowBorderColor;

		public byte byRes1;

		public NET_DVR_RECTCFG struPosition;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEFOG_LCD
	{
		public uint dwSize;

		public byte byDefogEnable;

		public byte byDefogModel;

		public byte byDefogLevel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCREEN_WALL_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCREEN_POS_CFG
	{
		public uint dwSize;

		public byte byScreenRowNum;

		public byte byScreenColNum;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VIDEO_AUDIOIN_CFG
	{
		public uint dwSize;

		public uint dwChanNo;

		public byte byEnable;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VCA_DETION_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes1;

		public NET_DVR_SCHEDTIME[][] struAlarmSched;

		public NET_DVR_HANDLEEXCEPTION_V40 struHandleException;

		public uint dwMaxRelRecordChanNum;

		public uint dwRelRecordChanNum;

		public uint[] dwRelRecordChan;

		public byte[] byEnablePreset;

		public byte[] byPresetNo;

		public byte[] byEnableCruise;

		public byte[] byCruiseNo;

		public byte[] byEnablePtzTrack;

		public byte[] byPTZTrack;

		public NET_DVR_SCHEDTIME[] struHolidayTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VCA_DETECTION_CFG_V40
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes1;

		public NET_DVR_SCHEDTIME[][] struAlarmSched;

		public uint dwHandleType;

		public uint dwMaxRelAlarmOutChanNum;

		public uint[] dwRelAlarmOut;

		public uint dwMaxRecordChanNum;

		public uint[] dwRelRecordChan;

		public uint dwEnablePresetChanNum;

		public NET_DVR_PRESETCHAN_INFO[] struPresetChanInfo;

		public byte[] byRes2;

		public uint dwEnableCruiseChanNum;

		public NET_DVR_CRUISECHAN_INFO[] struCruiseChanInfo;

		public uint dwEnablePtzTrackChanNum;

		public NET_DVR_PTZTRACKCHAN_INFO[] struPtzTrackInfo;

		public NET_DVR_SCHEDTIME[] struHolidayTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CLOUD_STORAGE_CFG
	{
		public uint dwSize;

		public byte byEnableCS;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CHAN_RECORD_STATUS_CFG
	{
		public uint dwSize;

		public byte byValid;

		public byte byRecord;

		public uint dwRelatedHD;

		public byte byOffLineRecord;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_UPLOAD_RECORD_INFO
	{
		public uint dwSize;

		public uint dwRecordType;

		public byte[] sCameraID;

		public NET_DVR_TIME_EX struStartTime;

		public NET_DVR_TIME_EX struStopTime;

		public uint dwStoragePoolID;

		public byte byFormatType;

		public byte byVideoEncType;

		public byte byAudioEncType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IOOUT_COND
	{
		public uint dwSize;

		public byte bySyncOutputNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IOOUT_CFG
	{
		public uint dwSize;

		public byte byWorkMode;

		public byte[] byRes1;

		[StructLayout (LayoutKind.Explicit)]
		public struct UWorkModeInfo
		{
			[FieldOffset (0)]
			public byte[] byUnionLen;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruStrobeLamp
			{
				public byte byDefaultState;

				public byte byWorkState;

				public byte byFreqMulti;

				public byte byDutyRatio;

				public byte[] byRes;

				public byte byFlashLightEnable;

				public NET_DVR_SCHEDTIME struFlashLightTime;

				public byte[] byRes1;
			}


			[FieldOffset (0)]
			public StruStrobeLamp struStrobeLamp;
		}


		public UWorkModeInfo uWorkModeInfo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SIGNAL_SYNCCFG
	{
		public uint dwSize;

		public ushort wPhase;

		public byte byLineLock;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_EZVIZ_ACCESS_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte byDeviceStatus;

		public byte byAllowRedirect;

		public byte[] byDomainName;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARM_RELATE_COND
	{
		public uint dwSize;

		public byte byAlarmType;

		public byte byRelateActType;

		public byte[] byRes;

		public uint dwChannel;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARM_RELATE_CFG
	{
		public uint dwSize;

		public uint dwMaxRelateChanNum;

		public uint[] dwRelateChan;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PTZ_BASICPARAMCFG
	{
		public uint dwSize;

		public byte byProportionalPan;

		public byte byPresetFreezing;

		public byte byPresetSpeed;

		public byte byKeyboardCtrlSpeed;

		public byte byAutoScanSpeed;

		public byte byZoomingSpeed;

		public byte byManualControlSpeed;

		public byte byPTZMotionTrack;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PTZ_OSDCFG
	{
		public uint dwSize;

		public byte byZoomStatus;

		public byte byPtStatus;

		public byte byPresetStatus;

		public byte byPositionDisplayFormat;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PTZ_POWEROFFMEMCFG
	{
		public uint dwSize;

		public byte byResumeTimePoint;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PTZ_LIMITCOND
	{
		public uint dwSize;

		public uint dwChan;

		public byte byLimitMode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PTZ_LIMITCFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte byLimitStatus;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PTZ_LIMITCTRL
	{
		public uint dwSize;

		public uint dwChan;

		public byte byLimitMode;

		public byte byWorkMode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PTZ_LOCKCFG
	{
		public uint dwSize;

		public byte byWorkMode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PTZLOCKINFO_COND
	{
		public uint dwSize;

		public uint dwChannel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PTZLOCKINFO
	{
		public uint dwSize;

		public uint dwRemainingSec;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CRUISEPOINT_COND
	{
		public uint dwSize;

		public uint dwChan;

		public ushort wRouteNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CRUISEPOINT_PARAM
	{
		public ushort wPresetNo;

		public ushort wDwell;

		public byte bySpeed;

		public byte bySupport256PresetNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CRUISEPOINT_V40
	{
		public uint dwSize;

		public NET_DVR_CRUISEPOINT_PARAM[] struCruisePoint;

		public byte[] Res;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TEST_VERSION_HEAD
	{
		public uint dwSize;

		public uint dwParam1;

		public byte byParam2;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TEST_VERSION_HEAD_V1
	{
		public uint dwSize;

		public uint dwParam1;

		public byte byParam2;

		public byte[] byRes;

		public uint dwParam1_1;

		public byte byParam1_2;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TEST_VERSION_HEAD_V2
	{
		public uint dwSize;

		public uint dwParam1;

		public byte byParam2;

		public byte[] byRes;

		public uint dwParam1_1;

		public byte byParam1_2;

		public byte[] byRes1;

		public uint dwParam2_1;

		public byte byParam2_2;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VIDEOWALLDISPLAYMODE
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes1;

		public NET_DVR_RECTCFG_EX struRect;

		public byte[] sName;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DISPLAYPARAM
	{
		public uint dwDisplayNo;

		public byte byDispChanType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DISPLAYCFG
	{
		public uint dwSize;

		public NET_DVR_DISPLAYPARAM[] struDisplayParam;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VIDEOWALLDISPLAYPOSITION
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes1;

		public uint dwVideoWallNo;

		public uint dwDisplayNo;

		public NET_DVR_RECTCFG_EX struRectCfg;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VIDEOWALLWINDOWPOSITION
	{
		public uint dwSize;

		public byte byEnable;

		public byte byWndOperateMode;

		public byte[] byRes1;

		public uint dwWindowNo;

		public uint dwLayerIndex;

		public NET_DVR_RECTCFG_EX struRect;

		public NET_DVR_RECTCFG_EX struResolution;

		public uint dwXCoordinate;

		public uint dwYCoordinate;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VIDEO_WALL_INFO
	{
		public uint dwSize;

		public uint dwWindowNo;

		public uint dwSceneNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VIRTUALLED_PARAM
	{
		public uint dwSize;

		public byte byEnable;

		public byte byDispMode;

		public byte[] byRes1;

		public NET_DVR_RGB_COLOR struContentColor;

		public NET_DVR_RGB_COLOR struBackColor;

		public NET_DVR_RECTCFG_EX struRect;

		public uint dwContentNum;

		public byte[] byLedContent;

		public byte byMoveMode;

		public byte byFontSize;

		public byte byMoveDirection;

		public byte byMoveSpeed;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IMAGE_CUT_MODE
	{
		public uint dwSize;

		public byte byCutMode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_USING_SERIALPORT
	{
		public uint dwSize;

		public uint dwSerialPort;

		public byte byProtocolType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VIDEOWALLSCENECFG
	{
		public uint dwSize;

		public byte[] sSceneName;

		public byte byEnable;

		public byte bySceneIndex;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCENE_CONTROL_INFO
	{
		public uint dwSize;

		public NET_DVR_VIDEO_WALL_INFO struVideoWallInfo;

		public uint dwCmd;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SHOW_CONTROL_INFO
	{
		public uint dwSize;

		public uint dwDisplayNo;

		public byte byEnable;

		public byte byChanType;

		public byte[] byRes1;

		public uint dwWallNo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BUF_INFO
	{
		public unsafe void* pBuf;

		public uint nLen;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct LPNET_DVR_IN_PARAM
	{
		public NET_DVR_BUF_INFO struCondBuf;

		public NET_DVR_BUF_INFO struInParamBuf;

		public uint dwRecvTimeout;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct LPNET_DVR_OUT_PARAM
	{
		public NET_DVR_BUF_INFO struOutBuf;

		public unsafe void* lpStatusList;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_AUDIO_CHAN_INFO
	{
		public uint dwSize;

		public uint dwChannel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_AUDIO_CHAN_CFG
	{
		public uint dwSize;

		public byte[] sChanName;

		public byte byEnable;

		public byte byAudioSwitchType;

		public byte[] byRes;

		public NET_DVR_PU_STREAM_CFG_V41 struAudioSrcInfo;

		public uint dwWindowNo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MAINBOARD_SERIAL_CFG
	{
		public uint dwSize;

		public byte bySerialWorkMode;

		public byte byFunType;

		public byte byDataBit;

		public byte byStopBit;

		public uint dwBaudRate;

		public byte byParity;

		public byte byFlowcontrol;

		public ushort wProtocol;

		public byte byVariable;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SUBBOARD_INFO
	{
		public uint dwSize;

		public byte byBoardType;

		public byte byInterfaceNum;

		public byte byStatus;

		public byte[] byRes;

		public uint dwSlotNo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEVICE_SUBBOARD_INFO
	{
		public uint dwSize;

		public byte byBackBoardType;

		public byte bySoltNum;

		public byte byBoardNum;

		public byte[] byRes1;

		public NET_DVR_SUBBOARD_INFO[] struSubBoadInfo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEVICE_BOARD_EXCEPINFO
	{
		public uint dwSize;

		public byte byExceptNum;

		public byte[] byRes1;

		public byte[] byMajor;

		public ushort[] wMinor;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LINEARSCAN
	{
		public uint dwSize;

		public uint dwChan;

		public byte byLinearScanType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_STREAM_ATTACHINFO_CFG
	{
		public uint dwSize;

		public byte byStreamWithVca;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SUBSYSTEM_NETCFG
	{
		public uint dwSize;

		public byte byDefaultRoute;

		public byte byNetworkCardNum;

		public byte[] byRes1;

		public NET_DVR_ETHERNET_MULTI[] struEtherNet;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CLEARCTRL
	{
		public uint dwSize;

		public uint dwChan;

		public byte byAllPreset;

		public byte byAllPatrols;

		public byte byAllPatterms;

		public byte byAllPrivacyMasks;

		public byte byAllPTZLimited;

		public byte byAllScheduledTasks;

		public byte byAllParkAction;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PTZ_PRIORITIZECFG
	{
		public uint dwSize;

		public byte byPTZPrioritize;

		public byte[] byRes;

		public uint dwDelay;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INITIALPOSITIONCTRL
	{
		public uint dwSize;

		public uint dwChan;

		public byte byWorkMode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PRIVACY_MASKS_COND
	{
		public uint dwSize;

		public uint dwChan;

		public byte byRegionalID;

		public byte byDelPrivacyMaskCfg;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PRIVACY_MASKS_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte byPrivacyMaskCfgEnable;

		public byte byColorType;

		public byte byActiveZoomRatio;

		public sbyte[] sPrivacyMaskName;

		public NET_VCA_POLYGON struRegion;

		public byte byCurrentRegionEnable;

		public byte byCurZoomRatio;

		public byte[] byRes;

		public float fActiveZoomRatio;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PRIVACY_MASKS_ENABLECFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SMARTTRACKCFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes;

		public uint dwDuration;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ZOOMRATIOCTRL
	{
		public uint dwSize;

		public uint dwChan;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DIAL_SWITCH_CFG
	{
		public uint dwSize;

		public uint dwSwitchState;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ALARM_RECORDFILE_LOSS
	{
		public NET_DVR_TIME_EX struInspectStart;

		public NET_DVR_TIME_EX struInspectEnd;

		public NET_DVR_IPADDR struIP;

		public uint dwChanNo;

		public uint dwIDIndex;

		public byte[] sName;

		public NET_DVR_TIME_EX struLossStartTime;

		public NET_DVR_TIME_EX struLossEndTime;

		public uint dwLostNum;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ALARM_STREAM_EXCEPTION
	{
		public NET_DVR_IPADDR struIP;

		public uint dwChanNo;

		public uint dwIDIndex;

		public byte[] sName;

		public byte byExceptionCase;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ALARM_RESOURCE_USAGE
	{
		public byte byLevel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_ALARM_RECORD_EXCEPTION
	{
		public byte byReason;

		public byte[] byRes1;

		public byte[] sVolumeName;

		public uint dwVolumeID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_ALARM_CVR_SUBINFO_UNION
	{
		[FieldOffset (0)]
		public byte[] byLen;

		[FieldOffset (0)]
		public NET_ALARM_RECORDFILE_LOSS struRecordLost;

		[FieldOffset (0)]
		public NET_ALARM_STREAM_EXCEPTION struStreamException;

		[FieldOffset (0)]
		public NET_ALARM_RESOURCE_USAGE struResourceUsage;

		[FieldOffset (0)]
		public NET_ALARM_RECORD_EXCEPTION struRecordException;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMINFO_DEV_V40
	{
		public uint dwAlarmType;

		public NET_DVR_TIME struTime;

		public NET_ALARM_CVR_SUBINFO_UNION uSubAlarmInfo;

		public byte[] byRes;

		public uint dwNumber;

		public unsafe ushort* pNO;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CONTROL_START_CFG
	{
		public byte byUseDefine;

		public byte byRes1;

		public ushort wCourseIndex;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CONTROL_DELAY_CFG
	{
		public byte byUseDefine;

		public byte byRes1;

		public ushort wDelayTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_CONTROL_INFO_UNION
	{
		[FieldOffset (0)]
		public byte[] byLen;

		[FieldOffset (0)]
		public NET_DVR_CONTROL_START_CFG struStartCfg;

		[FieldOffset (0)]
		public NET_DVR_CONTROL_DELAY_CFG struDelayCfg;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RECORDING_CONTROL_CFG
	{
		public uint dwSize;

		public ushort wCmdType;

		public byte[] byRes1;

		public NET_DVR_CONTROL_INFO_UNION struControlInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RECORDING_HOST_CFG
	{
		public uint dwSize;

		public uint dwOneKeyDelayTime;

		public byte byDirectedMode;

		public byte byClassroomType;

		public byte byCourseDataStorageEnabled;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_STATISTIC_DATA_COND
	{
		public uint dwSize;

		public uint dwTypeTarget;

		public NET_DVR_TIME struStartTime;

		public NET_DVR_TIME struStopTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_STATISTIC_DATA_CFG
	{
		public uint dwSize;

		public uint dwTypeTarget;

		public NET_DVR_TIME struStartTime;

		public NET_DVR_TIME struStopTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_AUTO_TRACK_CFG
	{
		public uint dwSize;

		public NET_DVR_DIRECT_CONNECT_CHAN_INFO[] struSDIInfo;

		public byte[] byCameraType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PUBLISH_FTP_CFG
	{
		public byte byProtocolType;

		public byte byRes1;

		public ushort wFTPPort;

		public byte[] byAddress;

		public byte[] szUserName;

		public byte[] szPassWord;

		public byte[] szCustomDir;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PUBLISH_HTTP_CFG
	{
		public byte[] strUrl;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PUBLISH_FTP_CFG_DIR
	{
		public byte byProtocolType;

		public byte byRes1;

		public ushort wFTPPort;

		public byte[] byAddress;

		public byte[] szUserName;

		public byte[] szPassWord;

		public byte byDirLevel;

		public byte byTopDirMode;

		public byte bySubDirMode;

		public byte byRes2;

		public byte[] byTopCustomDir;

		public byte[] bySubCustomDir;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_PUBLISH_ADD_UNION
	{
		[FieldOffset (0)]
		public byte[] byLen;

		[FieldOffset (0)]
		public NET_DVR_PUBLISH_HTTP_CFG struHttpCfg;

		[FieldOffset (0)]
		public NET_DVR_PUBLISH_FTP_CFG struFtpCfg;

		[FieldOffset (0)]
		public NET_DVR_PUBLISH_FTP_CFG_DIR struDirFtpCfg;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RECORD_PUBLISH_INFO
	{
		public byte byPublish;

		public byte[] byRes1;

		public uint dwStreamType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PUBLISH_CFG
	{
		public uint dwSize;

		public byte byPublishType;

		public byte[] byRes1;

		public NET_DVR_PUBLISH_ADD_UNION struPublishAddr;

		public NET_DVR_RECORD_PUBLISH_INFO[] struChanPublish;

		public NET_DVR_RECORD_PUBLISH_INFO struDirectChanPublish;

		public byte byUploadTime;

		public byte byTimerMode;

		public byte byUploadStartHour;

		public byte byUoploadStartMin;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ONEKEY_PUBLISH_CFG
	{
		public uint dwSize;

		public byte byUseDefine;

		public byte[] byRes1;

		public NET_DVR_RECORD_PUBLISH_INFO[] struChanPublish;

		public NET_DVR_RECORD_PUBLISH_INFO struDirectChanPublish;

		public NET_DVR_TIME_EX struStartTime;

		public NET_DVR_TIME_EX struEndTime;

		public byte bySchedulePublish;

		public byte[] sFileName;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_COURSE_RECORDING_INFO
	{
		public uint dwSize;

		public sbyte[] sCourseName;

		public sbyte[] sInstructorName;

		public sbyte[] sCourseDescription;

		public byte byIndex;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_EACH_LESSON_INFO
	{
		public NET_DVR_SCHEDTIME struSchedTime;

		public ushort wCourseIndex;

		public ushort wSessionIndex;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CURRICULUM_CFG
	{
		public uint dwSize;

		public NET_DVR_EACH_LESSON_INFO[] struLessonInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DATE
	{
		public ushort wYear;

		public byte byMonth;

		public byte byDay;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PPT_DETECT_CFG
	{
		public uint dwSize;

		public byte byEnablePPTDetect;

		public byte byPptDetLevel;

		public byte byEnablePartScreen;

		public byte byRes1;

		public ushort wX;

		public ushort wY;

		public ushort wWidth;

		public ushort wHeight;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PPT_CHANNEL_CFG
	{
		public uint dwSize;

		public byte[] byChan;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BACKUP_RECORD_INFO
	{
		public byte byEnable;

		public byte[] byRes;

		public uint dwStreamType;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BACKUP_RECORD_PARAM
	{
		public uint dwSize;

		public NET_DVR_BACKUP_RECORD_INFO[] struChanBackUp;

		public NET_DVR_BACKUP_RECORD_INFO struDirectedChanBackUp;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INDOOR_UNIT_DEVICEID
	{
		public short wFloorNumber;

		public ushort wRoomNumber;

		public ushort wDevIndex;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_OUTDOOR_UNIT_DEVICEID
	{
		public ushort wPeriod;

		public ushort wBuildingNumber;

		public ushort wUnitNumber;

		public short wFloorNumber;

		public ushort wDevIndex;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_OUTDOOR_FENCE_DEVICEID
	{
		public ushort wPeriod;

		public ushort wDevIndex;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MANAGE_UNIT_DEVICEID
	{
		public ushort wPeriod;

		public ushort wDevIndex;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_VIDEO_INTERCOM_UNIT_DEVICEID_UNION
	{
		[FieldOffset (0)]
		public byte[] byLen;

		[FieldOffset (0)]
		public NET_DVR_INDOOR_UNIT_DEVICEID struIndoorUnit;

		[FieldOffset (0)]
		public NET_DVR_OUTDOOR_UNIT_DEVICEID struOutdoorUnit;

		[FieldOffset (0)]
		public NET_DVR_MANAGE_UNIT_DEVICEID struManageUnit;

		[FieldOffset (0)]
		public NET_DVR_OUTDOOR_FENCE_DEVICEID struFenceUnit;

		[FieldOffset (0)]
		public NET_DVR_OUTDOOR_UNIT_DEVICEID struVillaOutdoorUnit;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VIDEO_INTERCOM_DEVICEID_CFG
	{
		public uint dwSize;

		public byte byUnitType;

		public byte byIsAutoReg;

		public byte[] byRes1;

		public NET_DVR_VIDEO_INTERCOM_UNIT_DEVICEID_UNION uVideoIntercomUnit;

		public byte[] byRes2;
	}

	public enum PrivilegePasswordTypeEnum : uint
	{
		Engineering = 1,
		Setupalarm = 2,
		HouseholderUnlock = 3,
		AntiHijacking = 4
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PRIVILEGE_PASSWORD_CFG
	{
		public uint dwSize;

		public byte byPwdType;

		public byte[] byRes1;

		public byte[] byOldPassword;

		public byte[] byNewPassword;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INDOOR_UNIT_OPERATION_TIME_CFG
	{
		public uint dwMaxMonitoringTime;

		public uint dwMaxRingTime;

		public uint dwCallForwardingTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_OUTDOOR_UNIT_OPERATION_TIME_CFG
	{
		public uint dwMaxMessageTime;

		public uint dwMaxTalkTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MANAGE_UNIT_OPERATION_TIME_CFG
	{
		public uint dwMaxMonitoringTime;

		public uint dwMaxRingTime;

		public uint dwMaxTalkTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_VIDEO_INTERCOM_OPERATION_TIME_UNION
	{
		[FieldOffset (0)]
		public byte[] byLen;

		[FieldOffset (0)]
		public NET_DVR_INDOOR_UNIT_OPERATION_TIME_CFG struIndoorUnit;

		[FieldOffset (0)]
		public NET_DVR_OUTDOOR_UNIT_OPERATION_TIME_CFG struOutdoorUnit;

		[FieldOffset (0)]
		public NET_DVR_MANAGE_UNIT_OPERATION_TIME_CFG struManageUnit;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VIDEO_INTERCOM_OPERATION_TIME_CFG
	{
		public uint dwSize;

		public byte byUnitType;

		public byte[] byRes1;

		public NET_DVR_VIDEO_INTERCOM_OPERATION_TIME_UNION uVideoIntercomUnit;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INDOOR_UNIT_RELATEDEV
	{
		public NET_DVR_IPADDR struOutdoorUnit;

		public NET_DVR_IPADDR struManageUnit;

		public NET_DVR_IPADDR struSIPServer;

		public NET_DVR_IPADDR struAgainUnit;

		public byte byOutDoorType;

		public byte byOutInConnectMode;

		public byte byIndoorConnectMode;

		public byte byRes1;

		public NET_DVR_IPADDR struIndoorUnit;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_OUTDOOR_UNIT_RELATEDEV
	{
		public NET_DVR_IPADDR struMainOutdoorUnit;

		public NET_DVR_IPADDR struManageUnit;

		public NET_DVR_IPADDR struSIPServer;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_AGAIN_RELATEDEV
	{
		public NET_DVR_IPADDR struSIPServer;

		public NET_DVR_IPADDR struCenterAddr;

		public ushort wCenterPort;

		public byte[] byRes1;

		public NET_DVR_IPADDR struIndoorUnit;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MANAGE_UNIT_RELATEDEV
	{
		public NET_DVR_IPADDR struSIPServer;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_VIDEO_INTERCOM_UNIT_RELATEDEV_UNION
	{
		[FieldOffset (0)]
		public uint[] dwRes;

		[FieldOffset (0)]
		public NET_DVR_INDOOR_UNIT_RELATEDEV struIndoorUnit;

		[FieldOffset (0)]
		public NET_DVR_OUTDOOR_UNIT_RELATEDEV struMainOutdoorUnit;

		[FieldOffset (0)]
		public NET_DVR_MANAGE_UNIT_RELATEDEV struManageUnit;

		[FieldOffset (0)]
		public NET_DVR_OUTDOOR_UNIT_RELATEDEV struVillaUnit;

		[FieldOffset (0)]
		public NET_DVR_AGAIN_RELATEDEV struAgainUnit;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VIDEO_INTERCOM_RELATEDEV_CFG
	{
		public uint dwSize;

		public byte byUnitType;

		public byte[] byRes1;

		public NET_DVR_VIDEO_INTERCOM_UNIT_RELATEDEV_UNION uVideoIntercomUnit;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CONTROL_GATEWAY
	{
		public uint dwSize;

		public uint dwGatewayIndex;

		public byte byCommand;

		public byte byLockType;

		public ushort wLockID;

		public byte[] byControlSrc;

		public byte byControlType;

		public byte[] byRes3;

		public byte[] byPassword;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_NOTICE_PIC
	{
		public unsafe byte* pPicData;

		public uint dwPicDataLen;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_NOTICE_DATA
	{
		public uint dwSize;

		public NET_DVR_TIME_EX struTime;

		public byte[] byNoticeNumber;

		public byte[] byNoticeTheme;

		public byte[] byNoticeDetail;

		public byte byLevel;

		public byte byPicNum;

		public byte[] byRes1;

		public NET_DVR_NOTICE_PIC[] struNoticePic;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_OPERATION_AUTH
	{
		public uint dwSize;

		public byte[] byPassword;

		public byte[] byRes;
	}

	public enum UnlockTypeEnum : uint
	{
		Password = 1,
		Hijacking = 2,
		Card = 3,
		Householder = 4,
		CenterPlatform = 5
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_UNLOCK_RECORD_INFO
	{
		public byte byUnlockType;

		public byte[] byRes1;

		public byte[] byControlSrc;

		public uint dwPicDataLen;

		public unsafe byte* pImage;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_NOTICEDATA_RECEIPT_INFO
	{
		public byte[] byNoticeNumber;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_VIDEO_INTERCOM_EVENT_INFO_UINON
	{
		[FieldOffset (0)]
		public byte[] byLen;

		[FieldOffset (0)]
		public NET_DVR_UNLOCK_RECORD_INFO struUnlockRecord;

		[FieldOffset (0)]
		public NET_DVR_NOTICEDATA_RECEIPT_INFO struNoticedataReceipt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VIDEO_INTERCOM_EVENT
	{
		public uint dwSize;

		public NET_DVR_TIME_EX struTime;

		public byte[] byDevNumber;

		public byte byEventType;

		public byte[] byRes1;

		public NET_DVR_VIDEO_INTERCOM_EVENT_INFO_UINON uEventInfo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ZONE_ALARM_INFO
	{
		public byte[] byZoneName;

		public uint dwZonendex;

		public byte byZoneType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_VIDEO_INTERCOM_ALARM_INFO_UNION
	{
		[FieldOffset (0)]
		public byte[] byLen;

		[FieldOffset (0)]
		public NET_DVR_ZONE_ALARM_INFO struZoneAlarm;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VIDEO_INTERCOM_ALARM
	{
		public uint dwSize;

		public NET_DVR_TIME_EX struTime;

		public byte[] byDevNumber;

		public byte byAlarmType;

		public byte[] byRes1;

		public NET_DVR_VIDEO_INTERCOM_ALARM_INFO_UNION uAlarmInfo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PEOPLE_REGION
	{
		public byte byID;

		public byte byNumber;

		public byte byDressType;

		public byte byRes;

		public NET_VCA_RECT struRegion;

		public uint dwPicLen;

		public unsafe sbyte* pPicBuffer;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PEOPLE_DETECTION_RESULT
	{
		public uint dwSize;

		public uint dwRelativeTime;

		public uint dwAbsTime;

		public NET_VCA_DEV_INFO struDevInfo;

		public NET_DVR_PEOPLE_REGION[] struPeopleRegion;

		public byte byPeopleAlarmType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SUPPLEMENTLIGHT
	{
		public byte byEnable;

		public byte byMode;

		public byte byHighBeamBrightness;

		public byte byLowBeamBrightness;

		public NET_DVR_SCHEDULE_DAYTIME struSchedTime;

		public ushort wFilteringTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_EXTERNALDEVICE
	{
		public uint dwSize;

		public NET_DVR_SUPPLEMENTLIGHT struSupplementLight;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TEMPERATURE_TRIGGER_COND
	{
		public uint dwSize;

		public uint dwChan;

		public uint dwPreset;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BUILTIN_SUPPLEMENTLIGHT
	{
		public uint dwSize;

		public byte byMode;

		public byte byBrightnessLimit;

		public byte[] byRes;

		public NET_DVR_SCHEDULE_DAYTIME struSchedTime;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_OIS_CFG
	{
		public uint dwSize;

		public byte byMode;

		public byte byOISLevel;

		public byte byOISSensitivity;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MACFILTER_CFG
	{
		public uint dwSize;

		public byte byEnabled;

		public byte byPermissionType;

		public byte[] byRes1;

		public byte[][] szMacAddress;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_EAGLEFOCUSING_SENCE
	{
		public byte byRuleType;

		public byte[] byRes1;

		public NET_VCA_POLYGON struRegion;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_EAGLEFOCUSING_CALCFG
	{
		public uint dwSize;

		public byte byEnabled;

		public byte[] byRes1;

		public NET_DVR_EAGLEFOCUSING_SENCE[] struEagleFoucsing;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_EAGLEFOCUSING_CTRL
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SMARTCALIBRATION_REGION
	{
		public byte byRuleID;

		public byte[] byRes;

		public NET_VCA_POLYGON struMaxTargetSize;

		public NET_VCA_POLYGON struMinTargetSize;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SMARTCALIBRATION_CFG
	{
		public uint dwSize;

		public byte bySmartType;

		public byte[] byRes;

		public NET_DVR_SMARTCALIBRATION_REGION[] strRegion;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_OSD_BATTERY_POWER_CFG
	{
		public uint dwSize;

		public NET_VCA_POINT struOSDBatteryPower;

		public byte byOSDBatteryPower;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VALID_PERIOD_CFG
	{
		public byte byEnable;

		public byte[] byRes1;

		public NET_DVR_TIME_EX struBeginTime;

		public NET_DVR_TIME_EX struEndTime;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CARD_CFG
	{
		public uint dwSize;

		public uint dwModifyParamType;

		public byte[] byCardNo;

		public byte byCardValid;

		public byte byCardType;

		public byte byLeaderCard;

		public byte byRes1;

		public uint dwDoorRight;

		public NET_DVR_VALID_PERIOD_CFG struValid;

		public uint dwBelongGroup;

		public byte[] byCardPassword;

		public byte[][] byCardRightPlan;

		public uint dwMaxSwipeTime;

		public uint dwSwipeTime;

		public ushort wRoomNumber;

		public short wFloorNumber;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CARD_CFG_COND
	{
		public uint dwSize;

		public uint dwCardNum;

		public byte byCheckCardNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CARD_CFG_SEND_DATA
	{
		public uint dwSize;

		public byte[] byCardNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CARD_USER_INFO_CFG
	{
		public uint dwSize;

		public byte[] sUsername;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ACS_PARAM_TYPE
	{
		public uint dwSize;

		public uint dwParamType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VIDEO_INTERCOM_IOIN_CFG
	{
		public uint dwSize;

		public byte byIOUseType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VIDEO_INTERCOM_IOOUT_CFG
	{
		public uint dwSize;

		public byte byIOUseType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ELEVATORCONTROL_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte byRes1;

		public byte byInterfaceType;

		public byte byRS485Protocol;

		public byte byNetworkType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ELEVATORCONTROL_CFG_V40
	{
		public uint dwSize;

		public byte byEnable;

		public byte byRes1;

		public byte byInterfaceType;

		public byte byRS485Protocol;

		public byte byNetworkType;

		public byte byRes2;

		public ushort wServerPort;

		public NET_DVR_IPADDR struServerIP;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct LPNET_DVR_VIDEOINTERCOM_STREAM
	{
		public uint dwSize;

		public byte[] byVisDevID;

		public byte[] byDeviceName;

		public byte bySourceType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DOOR_CFG
	{
		public uint dwSize;

		public byte[] byDoorName;

		public byte byMagneticType;

		public byte byOpenButtonType;

		public byte byOpenDuration;

		public byte byDisabledOpenDuration;

		public byte byMagneticAlarmTimeout;

		public byte byEnableDoorLock;

		public byte byEnableLeaderCard;

		public byte byRes1;

		public uint dwLeaderCardOpenDuration;

		public byte[] byStressPassword;

		public byte[] bySuperPassword;

		public byte[] byUnlockPassword;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VIS_DEV_INFO
	{
		public uint dwSize;

		public byte[] szDevNumber;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VIS_REGISTER_INFO
	{
		public uint dwSize;

		public uint dwID;

		public byte[] szDevNumber;

		public byte[] byMACAddr;

		public byte[] byRes1;

		public byte[] sSerialNumber;

		public NET_DVR_IPADDR struDevIP;

		public NET_DVR_TIME_EX struRegisterTime;

		public byte byRegisterType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CALLER_INFO
	{
		public uint dwSize;

		public ushort wBuildingNo;

		public short wFloorNo;

		public byte byZoneNo;

		public byte byUnitNo;

		public byte byDevNo;

		public byte byDevType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CALL_STATUS
	{
		public uint dwSize;

		public byte byCallStatus;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SERVER_DEVICE_CFG
	{
		public byte[] byDeviceName;

		public byte byDeviceType;

		public byte byDeviceID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SERVER_DEVICE_INFO
	{
		public uint dwSize;

		public uint dwDeviceNum;

		public NET_DVR_SERVER_DEVICE_CFG[] struDeviceCfg;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VIDEO_CALL_PARAM
	{
		public uint dwSize;

		public uint dwCmdType;

		public ushort wPeriod;

		public ushort wBuildingNumber;

		public ushort wUnitNumber;

		public short wFloorNumber;

		public ushort wRoomNumber;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEV_IP_INFO
	{
		public byte[] byUserName;

		public byte[] byPassWord;

		public NET_DVR_IPADDR struIPAddr;

		public ushort wPort;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_SCREEN_BASE_INFO
	{
		[FieldOffset (0)]
		public byte[] byScreenAddress;

		[FieldOffset (0)]
		public NET_DVR_DEV_IP_INFO struIPInfo;

		[FieldOffset (0)]
		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCREEN_INDEX_CFG
	{
		public uint dwSize;

		public byte byEnbale;

		public byte byDevAddType;

		public byte[] byRes1;

		public NET_DVR_SCREEN_BASE_INFO struScreenBaseInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SIMULATE_REMOTE_CTRL
	{
		public byte byControlType;

		public byte byControlParam;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCREEN_WALL_CTRL
	{
		public byte byEnable;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_AREA_ZOOM_CFG
	{
		public byte byCmd;

		public byte[] byRes;

		public NET_DVR_RECTCFG struArea;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_SCREEN_CONTROL_PARAM
	{
		[FieldOffset (0)]
		public NET_DVR_INPUT_INTERFACE_CTRL struInputCtrl;

		[FieldOffset (0)]
		public NET_DVR_DISPLAY_COLOR_CTRL struDisplayCtrl;

		[FieldOffset (0)]
		public NET_DVR_DISPLAY_POSITION_CTRL struPositionCtrl;

		[FieldOffset (0)]
		public NET_DVR_SIMULATE_REMOTE_CTRL struSimulateRemoteCrtl;

		[FieldOffset (0)]
		public NET_DVR_SCREEN_WALL_CTRL struScreenWallCtrl;

		[FieldOffset (0)]
		public NET_DVR_AREA_ZOOM_CFG struZoomArea;

		[FieldOffset (0)]
		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCREEN_CONTROL
	{
		public uint dwSize;

		public uint dwCommand;

		public byte byProtocol;

		public byte[] byRes1;

		public NET_DVR_SCREEN_CONTROL_PARAM struControlParam;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCREEN_CONTROL_V41
	{
		public uint dwSize;

		public byte bySerialNo;

		public byte[] byRes;

		public byte byProtocol;

		public uint dwCommand;

		public NET_DVR_SCREEN_CONTROL_PARAM struControlParam;

		public byte byWallNo;

		public byte[] byRes1;

		public NET_DVR_RECTCFG_EX struRect;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MSC_SPLICE_CFG
	{
		public uint dwSize;

		public byte bySpliceNo;

		public byte byWallNo;

		public byte byEnable;

		public byte[] byRes1;

		public NET_DVR_RECTCFG_EX struRectCfg;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MSC_SCREEN_INTERFACE_CFG
	{
		public uint dwSize;

		public byte byInterfaceType;

		public byte byNoSignalPic;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MSC_SCREEN_BACKLIGHT_CFG
	{
		public uint dwSize;

		public byte byBacklight;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MSC_SCREEN_PIP_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte bySubWindowSource;

		public byte bySubWindowBorderColor;

		public byte byRes1;

		public NET_DVR_RECTCFG_EX struPosition;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCREEN_WORK_STATE
	{
		public uint dwSize;

		public byte byFanStatus;

		public byte byFanExceptionStatus;

		public byte[] byRes1;

		public uint dwWorkingHours;

		public byte[] byVersion;

		public int iTemperature;

		public byte byTempState;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BOOT_LOGO_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LCD_AUDIO_CFG
	{
		public uint dwSize;

		public byte byMute;

		public byte byVolume;

		public sbyte byBalance;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_MSC_SCREEN_PARAM
	{
		[FieldOffset (0)]
		public NET_DVR_MSC_SCREEN_INTERFACE_CFG struInterfaceCfg;

		[FieldOffset (0)]
		public NET_DVR_SCREEN_FAN_WORK_MODE_CFG struFanWorkMode;

		[FieldOffset (0)]
		public NET_DVR_SCREEN_VGA_CFG struVgaCfg;

		[FieldOffset (0)]
		public NET_DVR_SCREEN_MENU_CFG struMenuCfg;

		[FieldOffset (0)]
		public NET_DVR_VIDEO_OUT_CFG struOutEffectCfg;

		[FieldOffset (0)]
		public NET_DVR_COLOR_TEMPERATURE_CFG struColorTemperatureCfg;

		[FieldOffset (0)]
		public NET_DVR_ADC_CFG struAdcCfg;

		[FieldOffset (0)]
		public NET_DVR_SCREEN_EDGE_CFG struScreenEdgeCfg;

		[FieldOffset (0)]
		public NET_DVR_MSC_SCREEN_BACKLIGHT_CFG struBacklight;

		[FieldOffset (0)]
		public NET_DVR_MSC_SCREEN_PIP_CFG struPicInPicCfg;

		[FieldOffset (0)]
		public NET_DVR_DEFOG_LCD struDefog;

		[FieldOffset (0)]
		public NET_DVR_SCREEN_WORK_STATE struWorkState;

		[FieldOffset (0)]
		public NET_DVR_BOOT_LOGO_CFG struBootLogoCfg;

		[FieldOffset (0)]
		public NET_DVR_LCD_AUDIO_CFG struAudioCfg;

		[FieldOffset (0)]
		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MSC_SCREEN_PARAM_CFG
	{
		public uint dwSize;

		public byte byParamType;

		public byte[] byRes1;

		public NET_DVR_MSC_SCREEN_PARAM struParam;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MSC_SCREEN_REMOTE_CFG
	{
		public uint dwSize;

		public byte byWallNo;

		public byte[] byRes1;

		public NET_DVR_RECTCFG_EX struRectCfg;

		public NET_DVR_MSC_SCREEN_PARAM_CFG struScreenParam;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MSC_SCREEN_PARAM_COND
	{
		public uint dwSize;

		public byte byWallNo;

		public byte byParamType;

		public byte[] byRes1;

		public NET_DVR_RECTCFG_EX struRectCfg;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SWITCH_DAY_TIME
	{
		public byte byEnable;

		public byte bySwitchType;

		public byte[] byRes1;

		public NET_DVR_DAYTIME struTimePoint;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SWITCH_TIME_POINT
	{
		public byte byEnable;

		public byte bySwitchType;

		public byte[] byRes1;

		public NET_DVR_SYSTEM_TIME struTimePoint;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TIME_SWITCH_CFG
	{
		public uint dwSize;

		public NET_DVR_SWITCH_DAY_TIME[][] struSwitchDayTime;

		public NET_DVR_SWITCH_TIME_POINT[] struSwitchTimePoint;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VIDEO_WALL_AREA
	{
		public uint dwSize;

		public byte byWallNo;

		public byte[] byRes1;

		public NET_DVR_RECTCFG_EX struRect;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DELAY_TIME
	{
		public uint dwSize;

		public uint dwDelayTime;

		public byte[] byRes;
	}

	public enum BvCalibrationTypeEnum : uint
	{
		None = 0,
		Direct = 1,
		Sample = 2
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BV_SAMPLE_CALIB_POINT
	{
		public byte byCalibPtID;

		public byte[] byRes1;

		public NET_VCA_POINT struPoint;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BV_SAMPLE_CALIB_BEGIN_PARAM
	{
		public uint dwCameraHeight;

		public uint dwHumanHeight;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BV_SAMPLE_CALIB_SET_PARAM
	{
		public NET_DVR_BV_SAMPLE_CALIB_POINT struCalibPoint;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BV_SAMPLE_CALIB_END_PARAM
	{
		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_BV_SAMPLE_CALIB_PARAM_UNION
	{
		[FieldOffset (0)]
		public byte[] byRes;

		[FieldOffset (0)]
		public NET_DVR_BV_SAMPLE_CALIB_BEGIN_PARAM struCalibBegin;

		[FieldOffset (0)]
		public NET_DVR_BV_SAMPLE_CALIB_SET_PARAM struCalibSet;

		[FieldOffset (0)]
		public NET_DVR_BV_SAMPLE_CALIB_END_PARAM struCalibEnd;
	}

	public enum BvSampleCalibCmdEnum : uint
	{
		Begin = 1,
		Setting = 2,
		End = 3
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BV_SAMPLE_CALIBRATION
	{
		public uint dwSize;

		public uint dwChannel;

		public byte byCommand;

		public byte[] byRes1;

		public NET_DVR_BV_SAMPLE_CALIB_PARAM_UNION uCalibParam;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BV_SAMPLE_CALIB_CFG
	{
		public uint dwSize;

		public uint dwCameraHeight;

		public float fPitchAngle;

		public float fInclineAngle;

		public NET_DVR_BV_SAMPLE_CALIB_POINT[] struCalibPoint;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BINOC_RECTIFY_PARAM
	{
		public float[][] fCamInternalMatrix;

		public float[] fDistCoeffs;

		public float[][] fRotateMatrix;

		public float[][] fProjectMatrix;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BV_CORRECT_PARAM
	{
		public uint dwSize;

		public float[][] fReprojectMatrix;

		public NET_DVR_BINOC_RECTIFY_PARAM struLCamParam;

		public NET_DVR_BINOC_RECTIFY_PARAM struRCamParam;

		public byte byLensType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_OUTPUT_VIDEO_TYPE
	{
		public uint dwSize;

		public byte byType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEVICE_SELF_CHECK_STATE
	{
		public uint dwSize;

		public uint[] dwRS485Chan;

		public uint[] dwSensorChan;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_COMPLETE_RESTORE_INFO
	{
		public uint dwSize;

		public uint dwChannel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_UPLOAD_PICTURE_INFO
	{
		public uint dwSize;

		public uint dwChannel;

		public byte byPictureType;

		public byte[] byRes1;

		public NET_DVR_TIME_V30 struTime;

		public unsafe sbyte* sPictureBuffer;

		public uint dwPictureLength;

		public uint dwPicMangeNo;

		public byte[] sPicName;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_UPLOAD_FILE_RET
	{
		public byte[] sUrl;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FACE_EXTRA_INFO
	{
		public NET_VCA_RECT[] struVcaRect;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_PIC_EXTRA_INFO_UNION
	{
		[FieldOffset (0)]
		public byte[] byUnionLen;

		[FieldOffset (0)]
		public NET_DVR_FACE_EXTRA_INFO struFaceExtraInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FIND_PICTURE_V40
	{
		public sbyte[] sFileName;

		public NET_DVR_TIME struTime;

		public uint dwFileSize;

		public sbyte[] sCardNum;

		public byte byPlateColor;

		public byte byVehicleLogo;

		public byte byFileType;

		public byte byRecogResult;

		public sbyte[] sLicense;

		public byte byEventSearchStatus;

		public byte[] byRes;

		public NET_DVR_PIC_EXTRA_INFO_UNION uPicExtraInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_REGIONENTRANCE_REGION
	{
		public NET_VCA_POLYGON struRegion;

		public byte bySensitivity;

		public byte byDetectionTarget;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_REGION_ENTRANCE_DETECTION
	{
		public uint dwSize;

		public byte byEnabled;

		public byte[] byRes1;

		public NET_DVR_REGIONENTRANCE_REGION[] struRegion;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SMART_REGION_COND
	{
		public uint dwSize;

		public uint dwChannel;

		public uint dwRegion;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ENTRANCE_REGION
	{
		public NET_VCA_POLYGON struRegion;

		public byte bySensitivity;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_EVENT_TRIGGER
	{
		public uint dwSize;

		public NET_DVR_HANDLEEXCEPTION_V41 struHandleException;

		public uint[] dwRelRecordChan;

		public NET_DVR_PRESETCHAN_INFO[] struPresetChanInfo;

		public NET_DVR_CRUISECHAN_INFO[] struCruiseChanInfo;

		public NET_DVR_PTZTRACKCHAN_INFO[] struPtzTrackInfo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_EVENT_SCHEDULE
	{
		public uint dwSize;

		public NET_DVR_SCHEDTIME[][] struAlarmTime;

		public NET_DVR_SCHEDTIME[] struHolidayAlarmTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ANR_ARMING_HOST
	{
		public uint dwSize;

		public NET_DVR_IPADDR struANRArmingHostIpAddr;

		public ushort wANRAlarmHostPort;

		public byte byANRAlarmType;

		public byte byConfirmMechanismEnabled;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_REGIONEXITING_REGION
	{
		public NET_VCA_POLYGON struRegion;

		public byte bySensitivity;

		public byte byDetectionTarget;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_REGION_EXITING_DETECTION
	{
		public uint dwSize;

		public byte byEnabled;

		public byte[] byRes1;

		public NET_DVR_REGIONEXITING_REGION[] struRegion;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LOITERING_REGION
	{
		public NET_VCA_POLYGON struRegion;

		public byte bySensitivity;

		public byte byTimeThreshold;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LOITERING_DETECTION
	{
		public uint dwSize;

		public byte byEnabled;

		public byte[] byRes1;

		public NET_DVR_LOITERING_REGION[] struRegion;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_GROUPDETECTION_REGION
	{
		public NET_VCA_POLYGON struRegion;

		public byte byObjectOccup;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_POS_HIDDEN_INFORMATION
	{
		public sbyte[][] szKeyWord;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_HIDDEN_INFORMATION_CFG
	{
		public uint dwSize;

		public byte byFuncType;

		public byte[] Res1;

		public NET_DVR_POS_HIDDEN_INFORMATION struPosInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_GROUP_DETECTION
	{
		public uint dwSize;

		public byte byEnabled;

		public byte[] byRes1;

		public NET_DVR_GROUPDETECTION_REGION[] struRegion;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RAPIDMOVE_REGION
	{
		public NET_VCA_POLYGON struRegion;

		public byte bySensitivity;

		public byte byDetectionTarget;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RAPIDMOVE_DETECTION
	{
		public uint dwSize;

		public byte byEnabled;

		public byte[] byRes1;

		public NET_DVR_RAPIDMOVE_REGION[] struRegion;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PARKING_REGION
	{
		public NET_VCA_POLYGON struRegion;

		public byte bySensitivity;

		public byte byTimeThreshold;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PARKING_DETECTION
	{
		public uint dwSize;

		public byte byEnabled;

		public byte[] byRes1;

		public NET_DVR_PARKING_REGION[] struRegion;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_UNATTENDED_BAGGAGE_REGION
	{
		public NET_VCA_POLYGON struRegion;

		public byte bySensitivity;

		public byte byTimeThreshold;

		public ushort wTimeThreshold;

		public byte byTimeThresholdMode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_UNATTENDED_BAGGAGE_DETECTION
	{
		public uint dwSize;

		public byte byEnabled;

		public byte[] byRes1;

		public NET_DVR_UNATTENDED_BAGGAGE_REGION[] struRegion;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ATTENDED_BAGGAGE_REGION
	{
		public NET_VCA_POLYGON struRegion;

		public byte bySensitivity;

		public byte byTimeThreshold;

		public ushort wTimeThreshold;

		public byte byTimeThresholdMode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ATTENDED_BAGGAGE_DETECTION
	{
		public uint dwSize;

		public byte byEnabled;

		public byte[] byRes1;

		public NET_DVR_ATTENDED_BAGGAGE_REGION[] struRegion;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_REGION_CLIP_COND
	{
		public uint dwSize;

		public uint dwChannel;

		public uint dwStreamType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_REGION_CLIP_CFG
	{
		public uint dwSize;

		public byte byEnabled;

		public byte[] byRes1;

		public ushort wResolutionWidth;

		public ushort wResolutionHeight;

		public NET_VCA_POLYGON[] struRegion;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WIRELESSDIAL_CFG
	{
		public uint dwSize;

		public byte byEnabled;

		public byte byDialMode;

		public byte byNetworkMode;

		public byte byRes1;

		public byte[] byDialNum;

		public byte[] byUserName;

		public byte[] byPassword;

		public byte[] byAPNName;

		public byte[] byUIMCardNum;

		public byte byVerifProtocol;

		public byte byRes2;

		public ushort wMTU;

		public uint dwOffineTime;

		public byte[] byRes3;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WIRELESSDIAL_SCHEDULE
	{
		public uint dwSize;

		public NET_DVR_SCHEDTIME[][] struAlarmTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WIRELESSDIAL_STATUS
	{
		public uint dwSize;

		public byte[] byRealtimeMode;

		public byte[] byUIMStatus;

		public uint dwSignalQuality;

		public byte[] byDialStatus;

		public NET_DVR_IPADDR struIpAddr;

		public NET_DVR_IPADDR struIPMask;

		public NET_DVR_IPADDR struGatewayIPMask;

		public NET_DVR_IPADDR struDnsServerIpAddr;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WIRELESSDIAL_CONNECT_PARAM
	{
		public uint dwSize;

		public uint dwInterface;

		public byte byEnableConnect;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LITESTORAGE
	{
		public uint dwSize;

		public byte byEnable;

		public byte byStorageTime;

		public byte byLevel;

		public byte byRes;

		public float fCapacity;

		public byte byDefLowStorageTime;

		public byte byDefMediumStorageTime;

		public byte byDefHighStorageTime;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CALIBRATION
	{
		public uint dwSize;

		public NET_VCA_POLYGON struRegion;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_STD_CONFIG
	{
		public unsafe void* lpCondBuffer;

		public uint dwCondSize;

		public unsafe void* lpInBuffer;

		public uint dwInSize;

		public unsafe void* lpOutBuffer;

		public uint dwOutSize;

		public unsafe void* lpStatusBuffer;

		public uint dwStatusSize;

		public unsafe void* lpXmlBuffer;

		public uint dwXmlSize;

		public byte byDataType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_STD_ABILITY
	{
		public unsafe void* lpCondBuffer;

		public uint dwCondSize;

		public unsafe void* lpOutBuffer;

		public uint dwOutSize;

		public unsafe void* lpStatusBuffer;

		public uint dwStatusSize;

		public uint dwRetSize;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_STD_CONTROL
	{
		public unsafe void* lpCondBuffer;

		public uint dwCondSize;

		public unsafe void* lpStatusBuffer;

		public uint dwStatusSize;

		public unsafe void* lpXmlBuffer;

		public uint dwXmlSize;

		public byte byDataType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_XML_CONFIG_INPUT
	{
		public uint dwSize;

		public unsafe void* lpRequestUrl;

		public uint dwRequestUrlLen;

		public unsafe void* lpInBuffer;

		public uint dwInBufferSize;

		public uint dwRecvTimeOut;

		public byte byForceEncrpt;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_XML_CONFIG_OUTPUT
	{
		public uint dwSize;

		public unsafe void* lpOutBuffer;

		public uint dwOutBufferSize;

		public uint dwReturnedXMLSize;

		public unsafe void* lpStatusBuffer;

		public uint dwStatusSize;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SIMPLE_DAYTIME
	{
		public byte byHour;

		public byte byMinute;

		public byte bySecond;

		public byte byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TIME_SEGMENT
	{
		public NET_DVR_SIMPLE_DAYTIME struBeginTime;

		public NET_DVR_SIMPLE_DAYTIME struEndTime;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SINGLE_PLAN_SEGMENT
	{
		public byte byEnable;

		public byte byDoorStatus;

		public byte byVerifyMode;

		public byte[] byRes;

		public NET_DVR_TIME_SEGMENT struTimeSegment;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WEEK_PLAN_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes1;

		public NET_DVR_SINGLE_PLAN_SEGMENT[][] struPlanCfg;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_HOLIDAY_PLAN_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes1;

		public NET_DVR_DATE struBeginDate;

		public NET_DVR_DATE struEndDate;

		public NET_DVR_SINGLE_PLAN_SEGMENT[] struPlanCfg;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_HOLIDAY_GROUP_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes1;

		public byte[] byGroupName;

		public uint[] dwHolidayPlanNo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PLAN_TEMPLATE
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes1;

		public byte[] byTemplateName;

		public uint dwWeekPlanNo;

		public uint[] dwHolidayGroupNo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DOOR_STATUS_PLAN
	{
		public uint dwSize;

		public uint dwTemplateNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CARD_READER_PLAN
	{
		public uint dwSize;

		public uint dwTemplateNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_GROUP_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes1;

		public NET_DVR_VALID_PERIOD_CFG struValidPeriodCfg;

		public byte[] byGroupName;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_GROUP_COMBINATION_INFO
	{
		public byte byEnable;

		public byte byMemberNum;

		public byte bySequenceNo;

		public byte byRes;

		public uint dwGroupNo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MULTI_CARD_GROUP_CFG
	{
		public byte byEnable;

		public byte byEnableOfflineVerifyMode;

		public byte[] byRes1;

		public uint dwTemplateNo;

		public NET_DVR_GROUP_COMBINATION_INFO[] struGroupCombination;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MULTI_CARD_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte bySwipeIntervalTimeout;

		public byte[] byRes1;

		public NET_DVR_MULTI_CARD_GROUP_CFG[] struGroupCfg;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_T1TEST_PARAMCFG
	{
		public uint dwSize;

		public ushort wPort;

		public byte byPortState;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ANTI_SNEAK_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes1;

		public uint dwStartCardReaderNo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CARD_READER_ANTI_SNEAK_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes1;

		public uint[] dwFollowUpCardReader;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PHONE_DOOR_RIGHT_CFG
	{
		public uint dwSize;

		public byte[] byOpenRight;

		public byte[] byCloseRight;

		public byte[] byNormalOpenRight;

		public byte[] byNormalCloseRight;

		public byte[] byArmRight;

		public byte[] byDisarmRight;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MULTI_DOOR_INTERLOCK_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes1;

		public uint[][] dwMultiDoorGroup;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CARD_READER_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte byCardReaderType;

		public byte byOkLedPolarity;

		public byte byErrorLedPolarity;

		public byte byBuzzerPolarity;

		public byte bySwipeInterval;

		public byte byPressTimeout;

		public byte byEnableFailAlarm;

		public byte byMaxReadCardFailNum;

		public byte byEnableTamperCheck;

		public byte byOfflineCheckTime;

		public byte byFingerPrintCheckLevel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ACS_WORK_STATUS
	{
		public uint dwSize;

		public byte[] byDoorLockStatus;

		public byte[] byDoorStatus;

		public byte[] byMagneticStatus;

		public byte[] byCaseStatus;

		public ushort wBatteryVoltage;

		public byte byBatteryLowVoltage;

		public byte byPowerSupplyStatus;

		public byte byMultiDoorInterlockStatus;

		public byte byAntiSneakStatus;

		public byte byHostAntiDismantleStatus;

		public byte byIndicatorLightStatus;

		public byte[] byCardReaderOnlineStatus;

		public byte[] byCardReaderAntiDismantleStatus;

		public byte[] byCardReaderVerifyMode;

		public byte[] bySetupAlarmStatus;

		public byte[] byAlarmInStatus;

		public byte[] byAlarmOutStatus;

		public uint dwCardNum;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CASE_SENSOR_CFG
	{
		public uint dwSize;

		public byte byHostBuzzer;

		public byte[] byRes1;

		public byte[] byCardReaderBuzzer;

		public byte[] byAssociateAlarmOut;

		public byte[] byDoorOpen;

		public byte[] byDoorClose;

		public byte[] byRes2;
	}

	public enum EnumUpgradeType : uint
	{
		Dvr = 0,
		Adapter = 1,
		Vcalib = 2,
		Optical = 3,
		Acs = 4,
		AuxiliaryDev = 5,
		Led = 6
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ACS_EVENT_INFO
	{
		public uint dwSize;

		public byte[] byCardNo;

		public byte byCardType;

		public byte byWhiteListNo;

		public byte byReportChannel;

		public byte byCardReaderKind;

		public uint dwCardReaderNo;

		public uint dwDoorNo;

		public uint dwVerifyNo;

		public uint dwAlarmInNo;

		public uint dwAlarmOutNo;

		public uint dwCaseSensorNo;

		public uint dwRs485No;

		public uint dwMultiCardGroupNo;

		public ushort wAccessChannel;

		public byte byDeviceNo;

		public byte[] byRes1;

		public uint dwEmployeeNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ACS_ALARM_INFO
	{
		public uint dwSize;

		public uint dwMajor;

		public uint dwMinor;

		public NET_DVR_TIME struTime;

		public byte[] sNetUser;

		public NET_DVR_IPADDR struRemoteHostAddr;

		public NET_DVR_ACS_EVENT_INFO struAcsEventInfo;

		public uint dwPicDataLen;

		public unsafe sbyte* pPicData;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_AUDIO_ACTIVATION_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes1;

		public uint dwChanNo;

		public byte bySensitivity;

		public byte byPriority;

		public ushort wDelayTime;

		public byte byRes2;

		public byte byEnablePreset;

		public ushort wPreset;

		public ushort wBase;

		public byte[] byRes3;

		public byte[] byVoChanNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INFRARED_OUTPUT_CTRL_CFG
	{
		public uint dwSize;

		public byte byIROutPort;

		public byte byIRCmdIndex;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INFRARED_CMD_INFO
	{
		public sbyte[] sCmdName;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INFRARED_CMD_NAME_CFG
	{
		public uint dwSize;

		public byte[] sIROutName;

		public NET_DVR_INFRARED_CMD_INFO[] struIRCmdInfo;

		public byte[] byRes;
	}

	public enum IrLearnSendDataTypeEnum : uint
	{
		Data = 0,
		LearnIrCmdStart,
		LearnIrCmdEnd = 2
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INFRARED_LEARN_INFO
	{
		public uint dwSize;

		public byte byIROutPort;

		public byte byIRCmdIndex;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INFRARED_LEARN_END
	{
		public uint dwSize;

		public byte bySaveLearnInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VIDEOIN_TYPE_INFO
	{
		public ushort wInType;

		public ushort wInNum;

		public ushort wStartNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TRIAL_SYSTEM_INFO
	{
		public uint dwSize;

		public byte byVideoInTypeNum;

		public byte[] byRes1;

		public NET_DVR_VIDEOIN_TYPE_INFO[] struVideoIn;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CASE_INFO
	{
		public uint dwSize;

		public byte[] byCaseNo;

		public byte[] byCaseName;

		public byte[] byLitigant1;

		public byte[] byLitigant2;

		public byte[] byChiefJudge;

		public byte byCaseType;

		public byte byShowCaseInfoTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_REMOTE_PLAY
	{
		public uint dwSize;

		public byte[] byFileName;

		public byte[] byVideoOut;

		public byte[] byRes1;

		public byte byType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TRIAL_MICROPHONE_STATUS
	{
		public uint dwSize;

		public byte[] byMicrophoneStatus;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TRIAL_HOST_STATUS
	{
		public uint dwSize;

		public uint[] dwFanSpeed;

		public ushort[] wMainBoardTemp;

		public byte[] byFpgaTempWarn;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LOCAL_INPUT_INFO
	{
		public uint dwSize;

		public byte[] byChannelName;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LAMP_STATUS
	{
		public byte byEnable;

		public byte[] byRes1;

		public byte[] byLampName;

		public byte[] byLampState1;

		public byte[] byLampState2;

		public byte[] byLampState3;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LAMP_OUT
	{
		public uint dwSize;

		public NET_DVR_LAMP_STATUS[] struLampInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LAMP_CONTROL
	{
		public uint dwSize;

		public byte byLampNo;

		public byte byLampStateNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TPS_PARAM
	{
		public byte byStart;

		public byte byCMD;

		public byte[] byRes;

		public ushort wDeviceID;

		public ushort wDataLen;

		public byte byLane;

		public byte bySpeed;

		public byte byLaneState;

		public byte byQueueLen;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TPS_REAL_TIME_INFO
	{
		public uint dwSize;

		public uint dwChan;

		public NET_DVR_TIME_V30 struTime;

		public NET_DVR_TPS_PARAM struTPSRealTimeInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TPS_LANE_PARAM
	{
		public byte byLane;

		public byte bySpeed;

		public byte[] byRes;

		public uint dwLightVehicle;

		public uint dwMidVehicle;

		public uint dwHeavyVehicle;

		public uint dwTimeHeadway;

		public uint dwSpaceHeadway;

		public float fSpaceOccupyRation;

		public float fTimeOccupyRation;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TPS_STATISTICS_PARAM
	{
		public byte byStart;

		public byte byCMD;

		public byte[] byRes;

		public ushort wDeviceID;

		public ushort wDataLen;

		public byte byTotalLaneNum;

		public byte[] byRes1;

		public NET_DVR_TIME_V30 struStartTime;

		public uint dwSamplePeriod;

		public NET_DVR_TPS_LANE_PARAM[] struLaneParam;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TPS_STATISTICS_INFO
	{
		public uint dwSize;

		public uint dwChan;

		public NET_DVR_TPS_STATISTICS_PARAM struTPSStatisticsInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DPC_PARAM
	{
		public uint dwSize;

		public uint dwChannel;

		public ushort wCtrlType;

		public byte[] byRes;

		public NET_VCA_POINT struPoint;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FFC_MANUAL_INFO
	{
		public uint dwSize;

		public uint dwChannel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FFC_BACKCOMP_INFO
	{
		public uint dwSize;

		public uint dwChannel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_STORAGE_SERVER_SWITCH_CFG
	{
		public uint dwSize;

		public byte[] byPicEnable;

		public byte[] byAddInfoEnable;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FORCESTOP_FORENSICS_CFG
	{
		public uint dwSize;

		public uint dwChannel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEC_VCA_ALARM
	{
		public uint dwSize;

		public uint dwDisplayNo;

		public byte bySubWinNo;

		public byte[] byRes1;

		public NET_DVR_TIME_V30 struTime;

		public NET_DVR_PU_STREAM_CFG_V41 struSourceInfo;

		public unsafe byte* byAlarmPic;

		public uint dwAlarmPicSize;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEC_VCA_ALARM_LOGO
	{
		public byte byEnableLogo;

		public byte byFlash;

		public ushort wFlashTime;

		public uint dwLogoX;

		public uint dwLogoY;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEC_VCA_ALARM_PIC
	{
		public byte byUploadPic;

		public byte byOverlayTargetInfo;

		public byte byOverlayRuleInfo;

		public byte byPicQuality;

		public byte byPicSize;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VCA_ALARM_CFG
	{
		public uint dwSize;

		public NET_DVR_DEC_VCA_ALARM_LOGO struAlarmLogo;

		public NET_DVR_DEC_VCA_ALARM_PIC struAlarmPic;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_OUTPUT_PIC_INFO
	{
		public uint dwSize;

		public byte[] sPicName;

		public byte byUsed;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_OUTPUT_PIC_CFG
	{
		public uint dwSize;

		public uint dwOutputPicNo;

		public byte byEnable;

		public byte[] byRes1;

		public NET_DVR_RECTCFG_EX struRect;

		public byte byFlash;

		public byte byTranslucent;

		public byte[] byRes2;

		public uint dwOutputPicWinNo;

		public byte[] byRes3;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_OUTPUT_OSD_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte byFontSize;

		public byte byOSDColor;

		public byte[] byRes1;

		public byte[] byOsdContent;

		public NET_DVR_RECTCFG_EX struRect;

		public uint dwOsdWinNo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CHAN_RELATION_RESOURCE
	{
		public uint dwSize;

		public uint dwDisplayChan;

		public byte byRelateAudio;

		public byte[] byRes1;

		public uint dwSubWinNo;

		public uint dwChannel;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARM_CHAN_ABLITITY
	{
		public uint dwSize;

		public byte[] bySensorChan;

		public byte[] byAlarmInChan;

		public byte[] byAlarmOutChan;

		public byte[] by485Chan;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_OUT_SCALE_CFG
	{
		public uint dwSize;

		public byte[] byOutScale;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MONITOR_LOCATION_COND
	{
		public uint dwSize;

		public uint dwChan;

		public byte byRelateType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MONITOR_LOCATION_CFG
	{
		public uint dwSize;

		public byte[] byMonitoringSiteID;

		public byte[] byDeviceID;

		public byte byDirectionNo;

		public byte[] byRes1;

		public byte[] byMonitorInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_REMOTECONTROL_COND
	{
		public uint dwSize;

		public uint dwChannel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_REMOTECONTROL_STATUS
	{
		public uint dwSize;

		public byte byAlarmStatus;

		public byte[] byRes;

		public ushort wAlarmDealyTime;

		public ushort wDisAlarmDealyTime;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SECURITY_CFG
	{
		public uint dwSize;

		public byte byCommuMode;

		public byte[] byRes1;

		public byte byWebAuthentication;

		public byte byRtspAuthentication;

		public byte byTelnetServer;

		public byte bySSHServer;

		public byte byIllegalLoginLock;

		public byte byStreamEncryption;

		public byte byAntiAttack;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PASSWORD_MANAGE_CFG
	{
		public uint dwSize;

		public byte[] byRes;

		public byte byLockCount;

		public uint dwLockTime;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_UNLOCK_INFO
	{
		public uint dwSize;

		public byte byUnlockType;

		public byte byIPVersion;

		public byte[] byRes1;

		public NET_DVR_IPADDR struIPAddr;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LOCKED_INFO
	{
		public uint dwSize;

		public byte byIPType;

		public byte[] byRes1;

		public NET_DVR_IPADDR struIPAddress;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VEHICLE_PARA
	{
		public byte[] sLicense;

		public byte byCountry;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FACE_PIC_DATA_INFO
	{
		public uint dwImageLen;

		public NET_VCA_RECT struVcaRect;

		public uint dwFaceScore;

		public byte[] byRes;

		public unsafe byte* pImage;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BEHAVIOUR_COND
	{
		public uint dwSearchType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_SMARTSEARCH_PIC_UNION
	{
		[FieldOffset (0)]
		public byte[] byLen;

		[FieldOffset (0)]
		public NET_DVR_VEHICLE_PARA struVehiclePara;

		[FieldOffset (0)]
		public NET_VCA_HUMAN_FEATURE struHumaFeature;

		[FieldOffset (0)]
		public NET_DVR_FACE_PIC_DATA_INFO struHumaPic;

		[FieldOffset (0)]
		public NET_DVR_BEHAVIOUR_COND struBehaviourCond;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SMART_SEARCH_PIC_PARA
	{
		public uint dwChanNo;

		public uint[] byStreamID;

		public NET_DVR_TIME_EX struStartTime;

		public NET_DVR_TIME_EX struEndTime;

		public ushort wSearchType;

		public byte[] byRes1;

		public NET_DVR_SMARTSEARCH_PIC_UNION uSmartSearchCond;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FACE_SUB_PIC_INFO
	{
		public uint dwSimilarity;

		public NET_VCA_RECT struVcaRect;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BEHAVIOR_INFO
	{
		public NET_VCA_RECT struVcaRect;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_PIC_FEATURE_UNION
	{
		[FieldOffset (0)]
		public byte[] byLen;

		[FieldOffset (0)]
		public NET_DVR_PLATE_INFO struPlateInfo;

		[FieldOffset (0)]
		public NET_DVR_FACE_SUB_PIC_INFO struFaceSubInfo;

		[FieldOffset (0)]
		public NET_DVR_BEHAVIOR_INFO struBehavior;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SMART_SEARCH_PIC_RET
	{
		public sbyte[] sFileName;

		public NET_DVR_TIME_EX struTime;

		public uint dwFileSize;

		public ushort wPicType;

		public byte[] byRes1;

		public NET_DVR_PIC_FEATURE_UNION uPicFeature;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_T1TEST_SEND_DATA_BUZZER
	{
		public byte byHearSound;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_T1TEST_DATA_UNION
	{
		[FieldOffset (0)]
		public byte[] byUnionLen;

		[FieldOffset (0)]
		public NET_DVR_T1TEST_SEND_DATA_BUZZER struBuzzer;

		[FieldOffset (0)]
		public NET_DVR_TIME_V30 struCurTime;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_T1TEST_SEND_DATA
	{
		public uint dwSize;

		public byte byDataType;

		public byte[] byRes1;

		public NET_DVR_T1TEST_DATA_UNION uSendData;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PIC_MODEL_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MOUSE_EVENT_PARAM
	{
		public uint dwSize;

		public byte byMouseEvent;

		public byte[] byRes1;

		public NET_VCA_POINT struPoint;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_AUTO_LIMIT_WAVE_CFG
	{
		public byte byFBCEnable;

		public byte byMode;

		public byte byFilterQValue;

		public byte byStaticFilterNum;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MIX_AUDIOIN_CFG
	{
		public uint dwSize;

		public uint dwHighPassFilter;

		public uint dwNoiseMargin;

		public NET_DVR_AUTO_LIMIT_WAVE_CFG struLimitWave;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MIX_AUDIOOUT_CFG
	{
		public uint dwSize;

		public byte byModulatorEnbale;

		public byte byPostFilter;

		public byte byLimitPressure;

		public byte byRes1;

		public ushort wModulatorValue;

		public ushort wTriggerTime;

		public ushort wFreeTime;

		public byte byCompressThreshold;

		public byte byCompressMode;

		public byte byCompressRate;

		public byte byRecoveryGain;

		public byte byOutputGain;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VOLUME_CFG
	{
		public uint dwSize;

		public ushort[] wVolume;

		public byte byPhantomPowerSupply;

		public byte byEnableAEC;

		public byte[] byRes1;

		public byte[] byEnableFBC;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VIDEOOUT_RESOLUTION_CFG
	{
		public uint dwSize;

		public byte byResolution;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ADDR_DOMAIN_INFO
	{
		public byte[] szDomainAddr;

		public ushort wPort;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMCENTER_NETCFG
	{
		public uint dwSize;

		public byte[] byAuxiliaryAlarmAddr;

		public ushort wAuxiliaryAlarmPort;

		public NET_DVR_ADDR_DOMAIN_INFO[] struHostAddr;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARM_RADARINFO
	{
		public uint dwSize;

		public uint dwRadarTriggerTimeSecond;

		public uint dwRadarTriggerTimeMSecond;

		public uint dwVedioTriggerTimeSecond;

		public uint dwVedioTriggerTimeMSecond;

		public uint dwVedioRadarDiffTimeMSecond;

		public uint dwRadarSpeed;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FINGER_PRINT_CFG
	{
		public uint dwSize;

		public byte[] byCardNo;

		public uint dwFingerPrintLen;

		public byte[] byEnableCardReader;

		public byte byFingerPrintID;

		public byte byFingerType;

		public byte[] byRes1;

		public byte[] byFingerData;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FINGER_PRINT_STATUS
	{
		public uint dwSize;

		public byte[] byCardNo;

		public byte[] byCardReaderRecvStatus;

		public byte byFingerPrintID;

		public byte byFingerType;

		public byte byTotalStatus;

		public byte byRes1;

		public byte[] byErrorMsg;

		public uint dwCardReaderNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FINGER_PRINT_INFO_COND
	{
		public uint dwSize;

		public byte[] byCardNo;

		public byte[] byEnableCardReader;

		public uint dwFingerPrintNum;

		public byte byFingerPrintID;

		public byte byCallbackMode;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FINGER_PRINT_BYCARD
	{
		public byte[] byCardNo;

		public byte[] byEnableCardReader;

		public byte[] byFingerPrintID;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FINGER_PRINT_BYREADER
	{
		public uint dwCardReaderNo;

		public byte byClearAllCard;

		public byte[] byRes1;

		public byte[] byCardNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_DEL_FINGER_PRINT_MODE
	{
		[FieldOffset (0)]
		public byte[] uLen;

		[FieldOffset (0)]
		public NET_DVR_FINGER_PRINT_BYCARD struByCard;

		[FieldOffset (0)]
		public NET_DVR_FINGER_PRINT_BYREADER struByReader;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FINGER_PRINT_INFO_CTRL
	{
		public uint dwSize;

		public byte byMode;

		public byte[] byRes1;

		public NET_DVR_DEL_FINGER_PRINT_MODE struProcessMode;

		public byte[] byRes;
	}

	public enum AcsDevSubeventEnum : uint
	{
		HostAntiDismantle = 0,
		OfflineEcentNearlyFull,
		NetBroken,
		NetResume,
		LowBattery,
		BatteryResume,
		AcOff,
		AcResume,
		SdCardFull,
		LinkageCapturePic,
		ImageQualityLow,
		FingerPrintQualityLow,
		BatteryElectricLow,
		BatteryElectricResume
	}

	public enum AcsAlarmSubeventEnum : uint
	{
		AlarminShortCircuit = 0,
		AlarminBrokenCircuit,
		AlarminException,
		AlarminResume,
		CaseSensorAlarm,
		CaseSensorResume
	}

	public enum AcsDoorSubeventEnum : uint
	{
		LeaderCardOpenBegin = 0,
		LeaderCardOpenEnd,
		AlwaysOpenBegin,
		AlwaysOpenEnd,
		AlwaysCloseBegin,
		AlwaysCloseEnd,
		LockOpen,
		LockClose,
		DoorButtonPress,
		DoorButtonRelease,
		DoorOpenNormal,
		DoorCloseNormal,
		DoorOpenAbnormal,
		DoorOpenTimeout,
		RemoteOpenDoor,
		RemoteCloseDoor,
		RemoteAlwaysOpen,
		RemoteAlwaysClose,
		NotBelongMultiGroup,
		InvalidMultiVerifyPeriod,
		MultiVerifySuperRightFail,
		MultiVerifyRemoteRightFail,
		MultiVerifySuccess,
		MultiVerifyNeedRemoteOpen,
		MultiVerifySuperpasswdVerifySuccess,
		MultiVerifyRepeatVerifyFail,
		MultiVerifyTimeout,
		RemoteCapturePic,
		DoorbellRinging,
		SecurityModuleDesmantleAlarm,
		CallCenter
	}

	public enum AcsCardReaderSubeventEnum : uint
	{
		StressAlarm = 0,
		CardReaderDesmantleAlarm,
		LegalCardPass,
		CardAndPswPass,
		CardAndPswFail,
		CardAndPswTimeout,
		CardMaxAuthenticateFail,
		CardNoRight,
		CardInvalidPeriod,
		CardOutOfDate,
		InvalidCard,
		AntiSneakFail,
		InterlockDoorNotClose,
		FingerprintComparePass,
		FingerprintCompareFail,
		CardFingerprintVerifyPass,
		CardFingerprintVerifyFail,
		CardFingerprintVerifyTimeout,
		CardFingerprintPasswdVerifyPass,
		CardFingerprintPasswdVerifyFail,
		CardFingerprintPasswdVerifyTimeout,
		FingerprintPasswdVerifyPass,
		FingerprintPasswdVerifyFail,
		FingerprintPasswdVerifyTimeout,
		FingerprintInexistence,
		FaceVerifyPass,
		FaceVerifyFail,
		FaceAndFpVerifyPass,
		FaceAndFpVerifyFail,
		FaceAndFpVerifyTimeout,
		FaceAndPwVerifyPass,
		FaceAndPwVerifyFail,
		FaceAndPwVerifyTimeout,
		FaceAndCardVerifyPass,
		FaceAndCardVerifyFail,
		FaceAndCardVerifyTimeout,
		FaceAndPwAndFpVerifyPass,
		FaceAndPwAndFpVerifyFail,
		FaceAndPwAndFpVerifyTimeout,
		FaceAndCardAndFpVerifyPass,
		FaceAndCardAndFpVerifyFail,
		FaceAndCardAndFpVerifyTimeout,
		EmployeenoAndFpVerifyPass,
		EmployeenoAndFpVerifyFail,
		EmployeenoAndFpVerifyTimeout,
		EmployeenoAndFpAndPwVerifyPass,
		EmployeenoAndFpAndPwVerifyFail,
		EmployeenoAndFpAndPwVerifyTimeout,
		EmployeenoAndFaceVerifyPass,
		EmployeenoAndFaceVerifyFail,
		EmployeenoAndFaceVerifyTimeout,
		FaceNoExist
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_EVENT_LINKAGE_INFO
	{
		public ushort wMainEventType;

		public ushort wSubEventType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_EVETN_CARD_LINKAGE_UNION
	{
		[FieldOffset (0)]
		public byte[] byCardNo;

		[FieldOffset (0)]
		public NET_DVR_EVENT_LINKAGE_INFO struEventLinkage;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_EVENT_CARD_LINKAGE_CFG
	{
		public uint dwSize;

		public byte byProMode;

		public byte[] byRes1;

		public uint dwEventSourceID;

		public NET_DVR_EVETN_CARD_LINKAGE_UNION uLinkageInfo;

		public byte[] byAlarmout;

		public byte[] byRes2;

		public byte[] byOpenDoor;

		public byte[] byCloseDoor;

		public byte[] byNormalOpen;

		public byte[] byNormalClose;

		public byte byMainDevBuzzer;

		public byte byCapturePic;

		public byte byRecordVideo;

		public byte[] byRes3;

		public byte[] byReaderBuzzer;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ANTI_SNEAK_HOST_INFO
	{
		public NET_DVR_ADDRESS struDVRIP;

		public byte byIsStartAddr;

		public byte byHostNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ANTI_SNEAK_HOST_READER_INFO
	{
		public byte byAntiSnealHostNo;

		public byte[] byRes;

		public ushort wFollowUpCardReader;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ANTI_SNEAK_MULTI_HOST_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes1;

		public NET_DVR_ANTI_SNEAK_HOST_INFO[] struSneakHost;

		public NET_DVR_ANTI_SNEAK_HOST_READER_INFO struStartReader;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ANTI_SNEAK_READER_CFG
	{
		public byte byEnable;

		public byte byAntiSnealHostNo;

		public ushort wReaderID;

		public NET_DVR_ANTI_SNEAK_HOST_READER_INFO[] struSneakReaderInfo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ANTI_SNEAK_MULTI_HOST_READERS_CFG
	{
		public uint dwSize;

		public NET_DVR_ANTI_SNEAK_READER_CFG[] struReaderCfg;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ACS_CFG
	{
		public uint dwSize;

		public byte byRS485Backup;

		public byte byShowCapPic;

		public byte byShowCardNo;

		public byte byShowUserInfo;

		public byte byOverlayUserInfo;

		public byte byVoicePrompt;

		public byte byUploadCapPic;

		public byte bySaveCapPic;

		public byte byInputCardNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PLATFORM_VERIFY_CFG
	{
		public uint dwSize;

		public uint dwDoorNo;

		public byte byResultType;

		public byte[] byRes1;

		public byte[] byScreenDisplay;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PERSON_STATISTICS_CFG
	{
		public uint dwSize;

		public byte byEnableStatistics;

		public byte byEnableOfflineStatistics;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ACS_SCREEN_DISPLAY_CFG
	{
		public uint dwSize;

		public uint dwFontSize;

		public uint dwRowSpacing;

		public uint dwColumnSpacing;

		public uint dwFirstRowPosition;

		public byte byDegree;

		public byte byScreenType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_GATE_TIME_CFG
	{
		public uint dwSize;

		public uint dwHoldOnALarmTime;

		public uint dwHoldOnGateOpenTime;

		public uint dwPostponeIntrusionAlarmTime;

		public uint dwNoLaneAccessTimeLimitTime;

		public uint dwSafetyZoneStayTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CARD_PASSWD_CFG
	{
		public uint dwSize;

		public byte[] byCardNo;

		public byte[] byCardPassword;

		public uint dwErrorCode;

		public byte byCardValid;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CARD_PASSWD_STATUS
	{
		public uint dwSize;

		public byte[] byCardNo;

		public uint dwErrorCode;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VEHICLE_RECOG_COND
	{
		public uint dwSize;

		public uint dwChannel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VEHICLE_RECOG_CFG
	{
		public uint dwSize;

		public sbyte[] sDataIndex;

		public ushort wTaskNo;

		public byte[] byRes1;

		public NET_VCA_RECT struPlateRect;

		public sbyte[] sLicense;

		public uint dwRecogOperate;

		public uint dwDataUploadType;

		public byte[] byRes;

		public byte byPicDataType;

		public sbyte[] sPicDataPath;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VEHICLE_RECOG_TASK_COND
	{
		public uint dwSize;

		public uint dwChannel;

		public sbyte[] sDataIndex;

		public ushort wTaskNo;

		public byte byTask;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VEHICLE_RECOG_TASK_INFO
	{
		public uint dwSize;

		public uint dwChannel;

		public sbyte[] sDataIndex;

		public ushort wTaskNo;

		public ushort wTaskProgress;

		public byte byTaskState;

		public byte[] byRes1;

		public uint dwRecogOperate;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VEHICLE_RECOG_RESULT
	{
		public uint dwSize;

		public sbyte[] sDataIndex;

		public ushort wTaskNo;

		public byte[] byRes;

		public NET_VCA_RECT struPlateRect;

		public sbyte[] sLicense;

		public byte byVehicleType;

		public byte byColorDepth;

		public byte byColor;

		public byte byVehicleLogoRecog;

		public byte byVehicleSubLogoRecog;

		public byte byPilotSafebelt;

		public byte byCopilotSafebelt;

		public byte byPilotSunVisor;

		public byte byCopilotSunVisor;

		public byte byVehicleModel;

		public ushort wVehicleLogoRecog;

		public byte[] byRes1;

		public byte byDataType;

		public uint dwPicType;

		public unsafe byte* pVehicleBuffer;

		public uint dwVehicleBufferLen;

		public unsafe byte* pPlateBuffer;

		public uint dwPlateBufferLen;

		public unsafe byte* pPilotFaceBuffer;

		public uint dwPilotFaceBufferLen;

		public unsafe byte* pCopilotFaceBuffer;

		public uint dwCopilotFaceBufferLen;

		public unsafe byte* pPilotSafebeltBuffer;

		public uint dwPilotSafebeltBufferLen;

		public unsafe byte* pCopilotSafebeltBuffer;

		public uint dwCopilotSafebeltBufferLen;

		public NET_VCA_RECT struVehicleRect;

		public NET_VCA_RECT struPilotRect;

		public NET_VCA_RECT struCopilotRect;

		public byte[] Res2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CENTER_SERVER_CFG
	{
		public uint dwSize;

		public byte byAddressType;

		public byte byRes1;

		public ushort wServerPort;

		[StructLayout (LayoutKind.Explicit)]
		public struct UnionServer
		{
			[StructLayout (LayoutKind.Sequential)]
			public struct StruDomain
			{
				public byte[] szDomain;

				public byte[] byRes2;
			}


			[FieldOffset (0)]
			public StruDomain struDomain;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruAddrIP
			{
				public NET_DVR_IPADDR struIp;
			}


			[FieldOffset (0)]
			public StruAddrIP struAddrIP;
		}


		public UnionServer unionServer;

		public ushort wInterval;

		public byte[] byRes3;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SINGLE_CHANNEL_LINKAGE_CFG
	{
		public byte byDDNSType;

		public byte byRes1;

		public ushort wDDNSPort;

		public byte[] byServerAddr;

		public byte[] byDevName;

		public byte[] byDevSerialNum;

		public byte byAddressType;

		public byte byRes2;

		public ushort wDevPort;

		[StructLayout (LayoutKind.Explicit)]
		public struct UnionDevAddr
		{
			[StructLayout (LayoutKind.Sequential)]
			public struct StruDomain
			{
				public byte[] szDomain;

				public byte[] byRes2;
			}


			[FieldOffset (0)]
			public StruDomain struDomain;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruAddrIP
			{
				public NET_DVR_IPADDR struIp;
			}


			[FieldOffset (0)]
			public StruAddrIP struAddrIP;
		}


		public UnionDevAddr unionDevAddr;

		public byte[] sUserName;

		public byte[] sPassword;

		public uint dwChannel;

		public byte[] byRes3;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ZONE_CHANNEL_LINKAGE_CFG
	{
		public uint dwSize;

		public NET_DVR_SINGLE_CHANNEL_LINKAGE_CFG[] struLinkChannels;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SINGLE_ASSOCIATED_CHAN_CFG
	{
		public byte[] byDevSerialNo;

		public uint dwChannel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMIN_ASSOCIATED_CHAN_CFG
	{
		public ushort wZoneNo;

		public byte[] byRes1;

		public NET_DVR_SINGLE_ASSOCIATED_CHAN_CFG[] struSingleChanCfg;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMIN_ASSOCIATED_CHAN_CFG_LIST
	{
		public uint dwSize;

		public NET_DVR_ALARMIN_ASSOCIATED_CHAN_CFG[] struAssociatedChanCfg;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LCD_ALARM
	{
		public uint dwSize;

		public uint dwScreenID;

		public byte byOnOffLine;

		public byte byTempState;

		public byte byFanState;

		public byte byFanException;

		public byte byTemperature;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SENSOR_INFO_UPLOAD
	{
		public uint dwSize;

		public NET_DVR_TIME_V30 struTime;

		public sbyte[] szSensorName;

		public sbyte[] szSensorChan;

		public byte byReboot;

		public byte byPowerSupply;

		public byte byStatusType;

		public byte bySensorType;

		public float fVoltageValue;

		public float fCurrentValue;

		public float fActualValue;

		public sbyte[] szDescription;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CAPTURE_UPLOAD
	{
		public uint dwSize;

		public NET_DVR_TIME_V30 struTime;

		public uint dwChannel;

		public sbyte[] szDevName;

		public uint dwPicLen;

		public unsafe byte* pBuffer;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_AREA_MASK_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte byMaskThick;

		public byte[] byRes1;

		public NET_VCA_RECT[] struRegion;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_AUDIO_DIACRITICAL_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public sbyte byBassValue;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RESOLUTION_SWITCH
	{
		public uint dwSize;

		public byte byResolutionType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WIFI_DHCP_ADDR_CFG
	{
		public uint dwSize;

		public NET_DVR_IPADDR struStartAddr;

		public NET_DVR_IPADDR struEndAddr;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WIFI_CLIENT_INFO
	{
		public uint dwSize;

		public NET_DVR_IPADDR struAddress;

		public byte[] byMACAddr;

		public ushort wConnSpeed;

		public byte byRSSIValue;

		public byte byRes1;

		public ushort wBandwidth;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MULTISTREAM_RELATION_CHAN_CFG
	{
		public uint dwSize;

		public uint dwChannel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RING_PORT_PROPERTY
	{
		public byte byPort;

		public byte byMasterSlaveProperty;

		public byte byPortEthernetType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_NS_RING_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte byProtoType;

		public byte byBandWidth;

		public byte byRes1;

		public NET_DVR_RING_PORT_PROPERTY[] struRingPort;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_NS_RING_STATUS
	{
		public uint dwSize;

		public byte byStatus;

		public byte byMasterSlaveProperty;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FIREDETECTION_ALARM
	{
		public uint dwSize;

		public uint dwRelativeTime;

		public uint dwAbsTime;

		public NET_VCA_DEV_INFO struDevInfo;

		public ushort wPanPos;

		public ushort wTiltPos;

		public ushort wZoomPos;

		public byte[] byRes1;

		public uint dwPicDataLen;

		public unsafe byte* pBuffer;

		public NET_VCA_RECT struRect;

		public NET_VCA_POINT struPoint;

		public ushort wFireMaxTemperature;

		public ushort wTargetDistance;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FIREDETECTION_CFG
	{
		public uint dwSize;

		public byte byEnabled;

		public byte bySensitivity;

		public byte byFireComfirmTime;

		public byte byFireRegionOverlay;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_AREA_MONITOR_COND
	{
		public uint dwSize;

		public uint dwAreaID;

		public uint dwMonitorID;

		public byte byIsNeedGroup;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEL_MONITOR_COND
	{
		public uint dwSize;

		public byte byDelType;

		public uint dwAreaID;

		public uint dwMonitorID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BLACKLIST_ALARM_COND
	{
		public uint dwSize;

		public byte byType;

		public byte[] byRes1;

		public uint dwFaceID;

		public uint dwMaxSnapNum;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_STORAGE_RESOURCE_COND
	{
		public uint dwSize;

		public uint dwStorageID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BLACKLIST_ALARM_RECORD
	{
		public uint dwSize;

		public uint dwSnapFacePicID;

		public uint dwRegisterID;

		public uint dwGroupNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BLACKLIST_GROUP_INFO
	{
		public uint dwSize;

		public uint dwGroupID;

		public uint dwGroupNo;

		public byte byGroupType;

		public byte byRes1;

		public ushort wThreshold;

		public uint dwListNum;

		public byte[] szGroupName;

		public byte[] szRemark;

		public byte[] byStorageAddr;

		public ushort wStoragePort;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SINGLE_BLACKLIST_GROUP_RECORD
	{
		public uint dwSize;

		public uint dwGroupRecordID;

		public uint dwGroupNo;

		public uint dwFaceDBID;

		public uint dwFaceRecordID;

		public byte byAlarmLevel;

		public byte[] byRes1;

		public NET_DVR_ADDR_DOMAIN_INFO struStorageAddr;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BLACKLIST_GROUP_RECORD_COND
	{
		public uint dwSize;

		public uint dwRecordID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BLACKLIST_GROUP_RECORD_CFG
	{
		public uint dwSize;

		public uint dwRecordNum;

		public NET_DVR_SINGLE_BLACKLIST_GROUP_RECORD[] struRecord;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BLACKLIST_GROUP_CFG
	{
		public uint dwSize;

		public uint dwGroupNum;

		public NET_DVR_BLACKLIST_GROUP_INFO[] struGroup;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BLACKLIST_GROUP_COND
	{
		public uint dwSize;

		public uint dwGroupID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SENSOR_VALUE
	{
		public float fMinValue;

		public float fMaxValue;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_HISTORICAL_QUERY_PARAM
	{
		public NET_DVR_TIME_V30 struStartTime;

		public NET_DVR_TIME_V30 struEndTime;

		public NET_DVR_SENSOR_VALUE struVoltageValue;

		public NET_DVR_SENSOR_VALUE struCurrentValue;

		public NET_DVR_SENSOR_VALUE struTemperatureValue;

		public NET_DVR_SENSOR_VALUE struHumidityValue;

		public byte bySwitchStatus;

		public byte bySensorStatus;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SENSOR_COND
	{
		public uint dwSize;

		public byte byQueryType;

		public byte byDeviceType;

		public byte byDeviceID;

		public byte byRes1;

		public NET_DVR_HISTORICAL_QUERY_PARAM struHistoricalQueryParam;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SENSOR_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte byDeviceType;

		public byte byDeviceID;

		public byte byRes1;

		public NET_DVR_TIME_V30 struTime;

		public byte byIsFirst;

		public byte byIsSwitchOn;

		public byte bySensorStatus;

		public byte bySensorType;

		public float fVoltage;

		public float fCurrent;

		public float fTemperatureValue;

		public float fHumidityValue;

		public byte[] bySensorName;

		public byte[] byDescription;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SENSOR_SWITCH_COND
	{
		public uint dwSize;

		public byte byDeviceType;

		public byte byDeviceID;

		public byte bySwitch;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_GB28181_SERVICE_CFG
	{
		public uint dwSize;

		public byte[] byServerID;

		public ushort wPort;

		public byte[] byRes1;

		public byte[] byAuthPasswd;

		public uint dwRegisterValid;

		public byte byMaxHeartbeatTimeOut;

		public byte byAutoAddIpc;

		public byte[] byAuthPasswdEx;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ACTIVATECFG
	{
		public uint dwSize;

		public byte[] sPassword;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IPDEVICE_ACTIVATE_CFG
	{
		public uint dwSize;

		public byte byMode;

		public byte bySelfDefinePassword;

		public byte[] sPassword;

		public byte[] sUserName;

		public byte[] byRes;

		[StructLayout (LayoutKind.Explicit)]
		public struct UnActivateDeviceInfo
		{
			[FieldOffset (0)]
			public byte[] byLen;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruChannelInfo
			{
				public uint dwChannelNo;

				public byte[] byRes;
			}


			[FieldOffset (0)]
			public StruChannelInfo struChannelInfo;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruAddrInfo
			{
				public NET_DVR_IPADDR struIp;

				public ushort wPort;

				public byte[] sProtocolDesc;

				public byte[] byMacAddr;

				public byte[] byRes;
			}


			[FieldOffset (0)]
			public StruAddrInfo struAddrInfo;
		}


		public UnActivateDeviceInfo unActivateDeviceInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DIGITAL_CHANNEL_SECURITY_STATUS
	{
		public uint dwSize;

		public byte[] byDigitalChanPasswordStatus;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CAMERACHAN_SERIALCFG
	{
		public uint dwSize;

		public uint dwBaudRate;

		public byte byDataBit;

		public byte byStopBit;

		public byte byParity;

		public byte byFlowcontrol;

		public ushort wPTZProtocol;

		public byte[] byRes1;

		public uint dwSerialPort;

		public byte bySerialAddress;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SUBSYSTEM_STATUS
	{
		public byte bySubSystemType;

		public byte bySubSystemNo;

		public byte byOnlineStatus;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIX_SUBBOARD
	{
		public byte byBoardNo;

		public byte byPcieConnectStatus;

		public byte[] byRes;

		public uint dwHardwareVersion;

		public uint dwPcieBandwidth;

		public uint dwTemperature;

		public NET_DVR_SUBSYSTEM_STATUS[] struSubsystemStatus;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MATRIX_STATUS
	{
		public uint dwSize;

		public byte byMainFrameType;

		public byte bySoltNum;

		public byte byBoardNum;

		public byte byRes;

		public NET_DVR_MATRIX_SUBBOARD[] struMatrixSubboard;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FUSION_SCALE
	{
		public uint dwSize;

		public ushort wWidth;

		public ushort wHeight;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FUSION_CFG
	{
		public uint dwSize;

		public byte byFusion;

		public byte byUseHistoryMap;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MULTIFUNCTION_SERIALCFG
	{
		public uint dwSize;

		public byte byVariable;

		public byte bySerialWorkMode;

		public byte byFunType;

		public byte byDataBit;

		public byte byStopBit;

		public byte byParity;

		public byte byFlowcontrol;

		public byte byRes1;

		public uint dwBaudRate;

		public ushort wProtocol;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PTZ_3D_SPEED_CONTROL
	{
		public uint dwSize;

		public uint dwChannel;

		public byte byPSpeed;

		public byte byTSpeed;

		public byte byZSpeed;

		public byte byPDirect;

		public byte byTDirect;

		public byte byZDirect;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SENSOR_PARAM
	{
		public byte bySensorType;

		public byte[] byRes;

		public float fHorWidth;

		public float fVerWidth;

		public float fFold;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LLI_PARAM
	{
		public float fSec;

		public byte byDegree;

		public byte byMinute;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PTZPOS_PARAM
	{
		public float fPanPos;

		public float fTiltPos;

		public float fZoomPos;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_GIS_UPLOADINFO
	{
		public uint dwSize;

		public uint dwRelativeTime;

		public uint dwAbsTime;

		public NET_VCA_DEV_INFO struDevInfo;

		public float fAzimuth;

		public byte byLatitudeType;

		public byte byLongitudeType;

		public byte[] byRes1;

		public NET_DVR_LLI_PARAM struLatitude;

		public NET_DVR_LLI_PARAM struLongitude;

		public float fHorizontalValue;

		public float fVerticalValue;

		public float fVisibleRadius;

		public float fMaxViewRadius;

		public NET_DVR_SENSOR_PARAM struSensorParam;

		public NET_DVR_PTZPOS_PARAM struPtzPos;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VANDALPROOF_ALARM
	{
		public uint dwSize;

		public uint dwRelativeTime;

		public uint dwAbsTime;

		public NET_VCA_DEV_INFO struDevInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CENTRALIZEDCTRL_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte byLatitudeType;

		public byte byLongitudeType;

		public byte byRes1;

		public NET_DVR_LLI_PARAM struLatitude;

		public NET_DVR_LLI_PARAM struLongitude;

		public uint dwTimeOut;

		public byte byControlType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_GIS_INFO
	{
		public uint dwSize;

		public float fAzimuth;

		public float fHorizontalValue;

		public float fVerticalValue;

		public float fVisibleRadius;

		public float fMaxViewRadius;

		public byte byLatitudeType;

		public byte byLongitudeType;

		public byte[] byRes1;

		public NET_DVR_LLI_PARAM struLatitude;

		public NET_DVR_LLI_PARAM struLongitude;

		public NET_DVR_PTZPOS_PARAM struPtzPos;

		public NET_DVR_SENSOR_PARAM struSensorParam;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VANDALPROOFALARM_CFG
	{
		public uint dwSize;

		public byte bySensitivity;

		public byte byUploadEnabled;

		public byte byVoiceWarningEnabled;

		public byte byEnable;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_AZIMUTHINFO
	{
		public uint dwSize;

		public float fDegree;

		public byte byAzimuth;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_COMPASS_COND
	{
		public uint dwSize;

		public uint dwChannel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_POSITION_CFG
	{
		public uint dwSize;

		public byte bySoftWorkMode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_STREAMING_COND
	{
		public uint dwSize;

		public uint dwChannel;

		public byte byStreamType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SATELLITETIME_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte byRes;

		public ushort wTimeInterval;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SIGNAL_JOINT_CFG
	{
		public uint dwSize;

		public byte[] sCamName;

		public byte byEnable;

		public byte byCamMode;

		public byte byRows;

		public byte byColumns;

		public uint[] dwSignalNo;

		public uint dwJointNo;

		public uint dwSignalNoJoint;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SIGNAL_CUTPARAM
	{
		public uint dwSize;

		public uint dwSignalNo;

		public uint dwCutTop;

		public uint dwCutBottom;

		public uint dwCutLeft;

		public uint dwCutRight;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WALL_RELATION_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte byRealWallNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INPUTSTREAMCFG_V40
	{
		public uint dwSize;

		public byte byValid;

		public byte byCamMode;

		public ushort wInputNo;

		public byte[] sCamName;

		public NET_DVR_VIDEOEFFECT struVideoEffect;

		public NET_DVR_PU_STREAM_CFG struPuStream;

		public ushort wBoardNum;

		public ushort wInputIdxOnBoard;

		public uint dwResolution;

		public byte byVideoFormat;

		public byte byStatus;

		public byte[] sGroupName;

		public byte byJointMatrix;

		public byte byJointNo;

		public byte byColorMode;

		public byte byScreenServer;

		public byte[] byRes1;

		public uint dwInputSignalNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INPUTSTREAM_PTZCFG_PARAM
	{
		public uint dwSize;

		public ushort wPTZProtocol;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VEHICLE_WEIGHT_RESULT
	{
		public byte byIsOverWeight;

		public byte byAxleNum;

		public byte[] byRes;

		public float fOverWeight;

		public float fWeight;

		public float fLimitWeight;

		public float fAxleLen;

		public sbyte[] sDevDescInfo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PLATE_RESULT_V50
	{
		public uint dwSize;

		public uint dwMatchNo;

		public byte byGroupNum;

		public byte byPicNo;

		public byte bySecondCam;

		public byte byFeaturePicNo;

		public byte byDriveChan;

		public byte byVehicleType;

		public byte byDetSceneID;

		public byte byVehicleAttribute;

		public ushort wIllegalType;

		public byte[] byIllegalSubType;

		public byte byPostPicNo;

		public byte byChanIndex;

		public ushort wSpeedLimit;

		public byte[] byRes2;

		public NET_DVR_PLATE_INFO struPlateInfo;

		public NET_DVR_VEHICLE_INFO struVehicleInfo;

		public byte[] byMonitoringSiteID;

		public byte[] byDeviceID;

		public byte byDir;

		public byte byDetectType;

		public byte byRelaLaneDirectionType;

		public byte byRes3;

		public uint dwCustomIllegalType;

		public byte[] byRes4;

		public byte byPilotSafebelt;

		public byte byCopilotSafebelt;

		public byte byPilotSunVisor;

		public byte byCopilotSunVisor;

		public byte byPilotCall;

		public byte byBarrierGateCtrlType;

		public byte byAlarmDataType;

		public NET_DVR_TIME_V30 struSnapFirstPicTime;

		public uint dwIllegalTime;

		public uint dwPicNum;

		public NET_ITS_PICTURE_INFO[] struPicInfo;

		public NET_DVR_VEHICLE_WEIGHT_RESULT struWeightResult;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_NORMAL_SCHEDTIME
	{
		public NET_DVR_SCHEDTIME struTime;

		public byte byAlarmType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SUBSYSTEM_ALARM
	{
		public uint dwSize;

		public NET_DVR_NORMAL_SCHEDTIME[][] struNormalSchedtime;

		public byte byNormalSchedTimeOn;

		public byte byMandatoryAlarm;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARM_PHONECFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes1;

		public byte[] byPhoneNumber;

		public uint dwArmRight;

		public uint dwDisArmRight;

		public uint dwClearAlarmRight;

		public byte[] byZoneReport;

		public uint dwNonZoneReport;

		public byte byIntervalTime;

		public byte byRes2;

		public ushort wDefineIntervalTime;

		public byte[] byRes3;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MODULE_INFO
	{
		public uint dwSize;

		public byte byModuleType;

		public byte byKeyBoardType;

		public byte byTriggerType;

		public byte byZoneType;

		public ushort wModuleAddress;

		public byte[] byRes2;

		public sbyte[] sModelInfo;

		public sbyte[] sDeviceVersionInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ONE_OUTPUT_SCHEDULE_RULE_V40
	{
		public byte byEnable;

		public byte[] byRes1;

		public NET_DVR_SCHEDDATE struDate;

		public NET_DVR_OUTPUT_SCHEDULE[] struOutputSchedule;

		public byte[] byTriggerIndex;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_OUTPUT_SCHEDULE_RULECFG_V40
	{
		public uint dwSize;

		public NET_DVR_ONE_OUTPUT_SCHEDULE_RULE_V40[] struOutputRule;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ONE_OUTPUT_SCH_RULECFG_V40
	{
		public uint dwSize;

		public NET_DVR_ONE_OUTPUT_SCHEDULE_RULE_V40 struOutputRule;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARM_CAPTRUE_CFG
	{
		public uint dwSize;

		public byte byBeforeAlarmPic;

		public byte byAfterAlarmPic;

		public ushort wInterval;

		public byte byResolution;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PRIOR_SCHEDTIME
	{
		public uint dwSize;

		public NET_DVR_SCHEDDATE struData;

		public NET_DVR_NORMAL_SCHEDTIME[] struOneDayTime;

		public byte byEnable;

		public byte[] byRes1;

		public byte[] bySubSystem;

		public byte byMandatoryAlarm;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TAMPER_ALARMIN_PARAM
	{
		public uint dwSize;

		public byte byTamperType;

		public byte byUploadAlarmRecoveryReport;

		public byte[] byRes1;

		public byte[] byAssociateAlarmOut;

		public byte[] byAssociateSirenOut;

		public byte byTamperResistor;

		public byte[] byRes2;

		public float fTamperResistorManual;

		public byte[] byRes3;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_REMOTECONTROLLER_PERMISSION_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte byRes1;

		public ushort wRemoteCtrllerID;

		public byte[] sDevSn;

		public byte byArmRight;

		public byte byDisArmRight;

		public byte byArmReportRight;

		public byte byDisArmReportRight;

		public byte byClearAlarmRight;

		public byte bySubSystemID;

		public byte byKeyboardAddr;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_KEYBOARD_CFG
	{
		public uint dwSize;

		public byte byEnableLock;

		public byte byErrorTimes;

		public ushort wLockTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_WIRELESS_BUSINESS_COND
	{
		public uint dwSize;

		public byte[] byCommOperatorNum;

		public byte[] byQueryCode;

		public byte byBusinessType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_WIRELESS_BUSINESS_INFO
	{
		public uint dwSize;

		public byte[] by3GBusiness;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PREVIEW_DELAY_CFG
	{
		public uint dwSize;

		public ushort wdelayTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_AUXILIARY_DEV_UPGRADE_PARAM
	{
		public uint dwSize;

		public uint dwDevNo;

		public byte byDevType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CALL_ROOM_CFG
	{
		public uint dwSize;

		public short nFloorNumber;

		public ushort wRoomNumber;

		public byte byManageCenter;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VIDEO_CALL_COND
	{
		public uint dwSize;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INQUEST_CASE_INFO
	{
		public uint dwSize;

		public byte[] sCaseNo;

		public byte[] sCaseName;

		public byte[] sCustomInfo1;

		public byte[] sCustomInfo2;

		public byte[] sCustomInfo3;

		public byte byShowCaseInfoTime;

		public byte byShowCaseInfo;

		public byte byPosition;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CASE_INFO_CTRL_PARAM
	{
		public uint dwSize;

		public uint dwChannel;

		public byte byShowCaseInfoTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INQUEST_USER_RIGHT_CFG
	{
		public uint dwSize;

		public byte[] byLocalRight;

		public byte[] byRemoteRight;

		public byte[] byNetAudioRight;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INQUEST_MIX_AUDIOIN_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes1;

		public uint dwMixCnt;

		public byte[] bySrcChan;

		public byte[] byLineIn;

		public byte[] byMic;

		public byte byMixAudioDelay;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FACECAPTURE_STATISTICS_COND
	{
		public uint dwSize;

		public uint dwChannel;

		public NET_DVR_TIME_EX struStartTime;

		public byte byReportType;

		public byte byStatType;

		public byte byEnableProgramStatistics;

		public byte byRes1;

		public uint dwPlayScheduleNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_AGEGROUP_PARAM
	{
		public uint dwTeenage;

		public uint dwYouth;

		public uint dwMidLife;

		public uint dwElderly;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SEXGROUP_PARAM
	{
		public uint dwMale;

		public uint dwFemale;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FACECAPTURE_STATISTICS_RESULT
	{
		public uint dwSize;

		public NET_DVR_TIME_EX struStartTime;

		public NET_DVR_TIME_EX struEndTime;

		public byte byStatType;

		public byte[] byRes;

		public uint dwPeopleNum;

		public NET_DVR_AGEGROUP_PARAM struAgeGroupParam;

		public NET_DVR_SEXGROUP_PARAM struSexGroupParam;

		public NET_DVR_PROGRAM_INFO struProgramInfo;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TRAFFIC_DATA_QUERY_COND
	{
		public uint dwSize;

		public uint dwQueryCond;

		public uint dwChannel;

		public NET_DVR_TIME_V30 struStartTime;

		public NET_DVR_TIME_V30 struEndTime;

		public sbyte[] sLicense;

		public uint dwPlateType;

		public uint dwPlateColor;

		public uint dwVehicleColor;

		public uint dwVehicleType;

		public uint dwIllegalType;

		public uint dwEventType;

		public uint dwForensiceType;

		public ushort wVehicleLogoRecog;

		public byte byLaneNo;

		public byte byDirection;

		public ushort wMinSpeed;

		public ushort wMaxSpeed;

		public byte byDataType;

		public byte byExecuteCtrl;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TRAFFIC_PICTURE_PARAM
	{
		public NET_DVR_TIME_V30 struRelativeTime;

		public NET_DVR_TIME_V30 struAbsTime;

		public sbyte[] szPicName;

		public byte byPicType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TRAFFIC_DATA_QUERY_RESULT
	{
		public uint dwSize;

		public uint dwChannel;

		public sbyte[] sLicense;

		public uint dwPlateType;

		public uint dwPlateColor;

		public uint dwVehicleColor;

		public uint dwVehicleType;

		public uint dwIllegalType;

		public uint dwEventType;

		public uint dwForensiceType;

		public ushort wVehicleLogoRecog;

		public byte byLaneNo;

		public byte byDirection;

		public ushort wSpeed;

		public byte byDataType;

		public byte[] byRes;

		public NET_DVR_TRAFFIC_PICTURE_PARAM[] struTrafficPic;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TRAFFIC_FLOW_QUERY_COND
	{
		public uint dwSize;

		public uint dwQueryCond;

		public uint dwChannel;

		public uint[] dwResChan;

		public NET_DVR_TIME_V30 struStartTime;

		public NET_DVR_TIME_V30 struEndTime;

		public byte byLaneNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TRAFFIC_FLOW_QUERY_RESULT
	{
		public uint dwSize;

		public NET_DVR_TIME_V30 struStartTime;

		public NET_DVR_TIME_V30 struEndTime;

		public uint dwChannel;

		public uint dwFlow;

		public byte byLaneNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PIC_INFO
	{
		public byte byPicType;

		public byte[] byRes1;

		public uint dwPicWidth;

		public uint dwPicHeight;

		public uint dwPicDataLen;

		public unsafe sbyte* byPicDataBuff;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VCA_RULE_COLOR_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte byRuleID;

		public byte byColorBlockNo;

		public byte byRes1;

		public NET_DVR_PIC_INFO struPicInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VCA_RULE_COLOR_COND
	{
		public uint dwSize;

		public uint dwChannel;

		public byte byRuleID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LLDP_PORT_CFG
	{
		public byte byCardNo;

		public byte byPortNo;

		public byte byEnabledTx;

		public byte byEnabledRx;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LLDP_CFG
	{
		public uint dwSize;

		public byte byEnabled;

		public byte[] byRes1;

		public uint dwHoldTime;

		public uint dwReiniTime;

		public uint dwPacketTime;

		public NET_DVR_LLDP_PORT_CFG[] struLLDPPortCfg;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CARD_PORT_INFO
	{
		public uint dwPortNo;

		public byte[] byPortName;

		public byte byWorkMode;

		public byte byBandWidth;

		public byte byPortType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_NETMGR_CARD_INFO
	{
		public byte[] byTypeName;

		public byte[] bySerialNo;

		public byte[] bySoftwareVersion;

		public NET_DVR_IPADDR struIPAddr;

		public uint dwSlotNo;

		public byte byStructureType;

		public byte[] byRes1;

		public NET_DVR_CARD_PORT_INFO[] struNetPortInfo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FUNC_CARD_INFO
	{
		public uint dwCardNo;

		public byte[] byTypeName;

		public byte[] bySerialNo;

		public byte[] bySoftwareVersion;

		public uint dwMainSlot;

		public byte byStructureType;

		public byte[] byRes1;

		public NET_DVR_CARD_PORT_INFO[] struFuncPortInfo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FIBER_CONVERT_BASIC
	{
		public uint dwSize;

		public byte byPowerType;

		public byte[] byRes1;

		public uint dwSlotNum;

		public NET_DVR_NETMGR_CARD_INFO struNetCardInfo;

		public NET_DVR_FUNC_CARD_INFO[] struFuncCardInfo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CARD_PORT_STATE
	{
		public byte byValid;

		public byte byPortType;

		public byte byLinkState;

		public byte byRes1;

		public uint dwSendBytes;

		public uint dwRecvBytes;

		public uint dwRecvLostPackets;

		public uint dwRecvCrcErrPackets;

		public uint dwRecvFragmentPackets;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_NET_CARD_STATE
	{
		public NET_DVR_CARD_PORT_STATE[] struNetPortState;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FUNC_CARD_STATE
	{
		public byte byEnabled;

		public byte[] byRes1;

		public uint dwCardNo;

		public NET_DVR_CARD_PORT_STATE[] struFuncCardPortState;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FIBER_CONVERT_STATE
	{
		public uint dwSize;

		public NET_DVR_NET_CARD_STATE struNetCardState;

		public NET_DVR_FUNC_CARD_STATE[] struFuncCardState;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FC_PORT_TOPOLOGY
	{
		public uint dwPortNo;

		public byte byPortType;

		public byte byLocalWorkMode;

		public byte byLocalBandWidth;

		public byte[] byRes1;

		public byte[] byPeerTypeName;

		public byte[] byPeerMac;

		public uint dwPeerPortNo;

		public byte byPeerWorkMode;

		public byte byPeerBandWidth;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FC_CARD_TOPOLOGY
	{
		public byte byEnable;

		public byte[] byRes1;

		public uint dwCardNo;

		public uint dwSlotNum;

		public byte[] byTypeName;

		public byte[] byLocalMac;

		public NET_DVR_FC_PORT_TOPOLOGY[] struFCPortTopology;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FIBER_CONVERT_TOPOLOGY
	{
		public uint dwSize;

		public NET_DVR_FC_CARD_TOPOLOGY[] struFCCardTopology;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FC_COND
	{
		public uint dwSize;

		public uint dwSlotNo;

		public uint dwPortNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FC_PORT_REMARKS
	{
		public uint dwSize;

		public byte[] byLocalRemarks;

		public byte[] byPeerRemarks;

		public byte[] byRes;
	}

	public enum EnFiberConvertAlarm : uint
	{
		OpticalPortLost = 1,
		ElectricalPortLost,
		FuncCardLost
	}

	public enum EnFiberConvertNotification : uint
	{
		OpticalPortConnected = 1,
		ElectricalPortConnected,
		FuncCardInsert
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FIBER_CONVERT_ALARM
	{
		public uint dwSize;

		public uint dwEventType;

		public uint dwEvent;

		public byte bySlotNum;

		public byte byCardType;

		public byte byPortNo;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SWITCH_LAMP_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte byTriggerMode;

		public byte byUploadPic;

		public byte byRes1;

		public uint dwTimeInterval;

		public NET_DVR_HANDLEEXCEPTION_V30 struHandleType;

		public byte[] byRelRecordChan;

		public NET_DVR_SCHEDTIME[][] struAlarmTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SWITCH_LAMP_ALARM
	{
		public uint dwSize;

		public NET_VCA_DEV_INFO struDevInfo;

		public NET_DVR_TIME_EX struTime;

		public byte byLampStatus;

		public byte[] byRes1;

		public uint dwPicDataLen;

		public unsafe sbyte* pPicData;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RS485_CASCADE_CFG
	{
		public uint dwSize;

		public byte byDevAddr;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PRIVATE_PROTOCOL_CFG
	{
		public uint dwSize;

		public NET_DVR_IPADDR struIP;

		public ushort wPort;

		public byte[] byRes;

		public uint dwInterval;

		public byte byServerType;

		public byte byEcryptedSMSEnable;

		public byte byAlgorithm;

		public byte byAcauisitionMode;

		public uint dwDistanceLimit;

		public byte[] byRes1;

		public sbyte[] szIndexCode;

		public uint dwSecretKeyLen;

		public sbyte[] szSecretKey;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEBUG_CMD
	{
		public uint dwSize;

		public sbyte[] szDebugCMD;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEBUG_INFO
	{
		public uint dwSize;

		public sbyte[] szDebugInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WIRELESSSERVER
	{
		public uint dwSize;

		public byte byWLanShare;

		public byte byBroadcastSSID;

		public byte bySecurityMode;

		public byte byAlgorithmType;

		public sbyte[] szSSID;

		public sbyte[] szPassWord;

		public byte byDefaultPassword;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CONNECTDEV_COND
	{
		public uint dwSize;

		public uint dwChannel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CONNECTDEV_CFG
	{
		public uint dwSize;

		public byte byID;

		public byte[] byRes;

		public byte[] byMACAddr;

		public NET_DVR_IPADDR struDVRIP;

		public NET_DVR_TIME struConnectTime;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_GIS_SERVER_INFO
	{
		public byte[] byUserName;

		public byte[] byPassword;

		public NET_DVR_IPADDR struServerIP;

		public ushort wPort;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BASEMAP_CONTROL_CFG_V40
	{
		public uint dwSize;

		public byte byEnable;

		public byte byBaseMapType;

		public byte[] byRes1;

		public uint dwBaseMapNo;

		public NET_DVR_GIS_SERVER_INFO struGisServer;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VIDEO_IMG_DB_CFG
	{
		public uint dwSize;

		public long i64Capacity;

		public long i64UsedSpace;

		public long i64AvailableSpace;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FILE_QUERY_INFO
	{
		public uint dwSize;

		public long i64FileLen;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FILE_INFO_IN
	{
		public sbyte[] szFileID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DOWNLOAD_CB_INFO
	{
		public uint dwType;

		public unsafe byte* pData;

		public uint dwDataLen;

		public unsafe void* pFileInfo;

		public uint dwFileInfoLen;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DOWNLOAD_CB_PARAM
	{
		public unsafe DOWNLOAD_DATA_CB* fnDownloadDataCB;

		public unsafe void* pUserData;

		public long i64Offset;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_UPLOAD_DB_IN
	{
		public long i64FileLen;

		public byte byContinueUpload;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_UPLOAD_DB_OUT
	{
		public sbyte[] szFileID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SEND_PARAM_IN
	{
		public unsafe byte* pSendData;

		public uint dwSendDataLen;

		public NET_DVR_TIME_V30 struTime;

		public byte byPicType;

		public byte[] byRes1;

		public uint dwPicMangeNo;

		public byte[] sPicName;

		public uint dwPicDisplayTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DOWNLOAD_QOS
	{
		public uint dwMaxSpeed;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FILM_MODE_CFG
	{
		public uint dwSize;

		public byte byScreenType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DIRECTED_STRATEGY_CFG
	{
		public uint dwSize;

		public byte byDirectedStrategyType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FRAME
	{
		public byte byFrameWide;

		public byte byRed;

		public byte byGreen;

		public byte byBlue;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FRAME_CFG
	{
		public uint dwSize;

		public NET_DVR_FRAME struTopFrame;

		public NET_DVR_FRAME struBottomFrame;

		public NET_DVR_FRAME struLeftFrame;

		public NET_DVR_FRAME struRightFrame;

		public byte byFrameEnable;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FRAME_COND
	{
		public uint dwSize;

		public uint dwPicNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_AUDIO_EFFECTIVE_CFG
	{
		public uint dwSize;

		public uint dwCheckDelay;

		public byte byThreshold;

		public byte byVolumePercent;

		public byte byPriority;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RECORD_VIDEO_CFG
	{
		public uint dwSize;

		public byte byExportType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RTMP_COND
	{
		public uint dwSize;

		public uint dwChannel;

		public byte byStreamType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RTMP_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes1;

		public uint dwPacketLen;

		public sbyte[] szURL;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RECORDING_PUBLISH_FILE_CFG
	{
		public uint dwSize;

		public byte[] byFileID;

		public NET_DVR_TIME_EX struStartTime;

		public NET_DVR_TIME_EX struEndTime;

		public byte byCmdType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PUBLISH_PROGRESS_COND
	{
		public uint dwSize;

		public uint dwChannel;

		public byte[] byFileID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PUBLISH_PROGRESS_CFG
	{
		public uint dwSize;

		public byte byPublishPercent;

		public byte byPublishStatus;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BACKGROUND_PIC_COND
	{
		public uint dwSize;

		public sbyte[] szFileID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BACKGROUND_PIC_CFG
	{
		public uint dwSize;

		public uint dwPicSize;

		public uint dwPicType;

		public ushort wPicWidth;

		public ushort wPicHeight;

		public byte[] byPicName;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BACKGROUND_PIC_INFO
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes1;

		public byte[] byPicID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BACKGROUND_PIC_PRARAM
	{
		public uint dwSize;

		public uint dwChannel;

		public uint dwPicSize;

		public ushort wPicWidth;

		public ushort wPicHeight;

		public sbyte[] szPicName;

		public byte byPicType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LOWPOWER
	{
		public uint dwSize;

		public byte byMode;

		public byte byEnabled;

		public byte[] byRes;

		public NET_DVR_SCHEDULE_DAYTIME struSchedTime;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_POINT
	{
		public uint dwX;

		public uint dwY;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ZOOMLINKAGE
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ONLINEUPGRADE_STATUS
	{
		public uint dwSize;

		public byte byUpgradeStatus;

		public byte byProgress;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FIRMWARECODE_COND
	{
		public uint dwSize;

		public uint dwStartIndex;

		public uint dwMaxNum;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FIRMWARECODE
	{
		public ushort wIndex;

		public ushort wCodeLen;

		public byte[] byCode;

		public byte[] byVersion;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FIRMWARECODE_LIST
	{
		public uint dwSize;

		public uint dwValidCodeNum;

		public NET_DVR_FIRMWARECODE[] struCode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ONLINEUPGRADE_SERVER
	{
		public uint dwSize;

		public byte byConnectStatus;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ONLINEUPGRADE_VERSION_COND
	{
		public uint dwSize;

		public byte byCheckFromSvr;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ONLINEUPGRADE_VERSION_RET
	{
		public uint dwSize;

		public byte byNewVersionAvailable;

		public byte[] byNewVersion;

		public byte[] byChangeLog;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RECOMMEN_VERSION_COND
	{
		public uint dwSize;

		public byte[] byFirmwareCode;

		public byte[] byFirmwareVersion;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RECOMMEN_VERSION_RET
	{
		public uint dwSize;

		public byte byRecommenUpgrade;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_THSCREEN
	{
		public uint dwSize;

		public byte byEnable;

		public byte byTHOSDDisplay;

		public byte[] byRes;

		public NET_VCA_POINT struTHOSDPoint;

		public byte byTimingMode;

		public byte byRes1;

		public ushort wInterval;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SENSOR_ADJUSTMENT
	{
		public uint dwSize;

		public byte byType;

		public byte bySensorNo;

		public byte[] byRes;

		public int iAdjustMentRange;

		public byte byR;

		public byte byG;

		public byte byB;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SENSOR_ADJUSTMENT_INFO
	{
		public uint dwSize;

		public int iPan;

		public int iTilt;

		public int iRotation;

		public int iFieldAngle;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SENSOR_RESET
	{
		public uint dwSize;

		public byte bySensorNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PANORAMAIMAGE
	{
		public uint dwSize;

		public byte byFusionMode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RELOCATE_INFO
	{
		public uint dwSize;

		public byte[] byTakeOverAddr;

		public ushort wPort;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CONFERENCE_REGION
	{
		public uint dwSize;

		public byte byEnabled;

		public byte[] byRes1;

		public NET_DVR_POINT[] struRegion;

		public uint dwOutputWidth;

		public uint dwOutputHeight;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TERMINAL_CALL_CFG
	{
		public uint dwSize;

		public byte byAnswerType;

		public byte byProtocolType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TERMINAL_CALL_INFO
	{
		public byte[] byTermianlURL;

		public uint dwCallRate;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TERMINAL_AUDIO_CTRL
	{
		public byte byMute;

		public byte byVolume;

		public byte byAudioInputDisabled;

		public byte byAudioInputVolume;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_HOWLING_SUPPRESSION
	{
		public byte byEnabled;

		public byte byHsSensibility;

		public byte byHsMode;

		public byte byRes1;

		public uint dwHsTime;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TERMINAL_INPUT_AUDIO
	{
		public uint dwChannel;

		public byte byGainType;

		public byte byEnableSimulate;

		public byte byVolumeSimulate;

		public byte byEnableDigital;

		public byte byVolumeDigital;

		public byte[] byRes1;

		public NET_DVR_HOWLING_SUPPRESSION struHsParam;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_TERMINAL_DETAIL_CTRL_PARAM
	{
		[FieldOffset (0)]
		public byte[] byRes;

		[FieldOffset (0)]
		public NET_DVR_TERMINAL_CALL_INFO struCallInfo;

		[FieldOffset (0)]
		public NET_DVR_TERMINAL_AUDIO_CTRL struAudioCtrl;

		[FieldOffset (0)]
		public NET_DVR_TERMINAL_INPUT_AUDIO struInputAudio;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TERMINAL_CTRL_PARAM
	{
		public uint dwSize;

		public byte byOperateType;

		public byte[] byRes1;

		public NET_DVR_TERMINAL_DETAIL_CTRL_PARAM struCtrlParam;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CALL_QUERY_COND
	{
		public uint dwSize;

		public byte[] bySearchID;

		public NET_DVR_TIME struStartTime;

		public NET_DVR_TIME struEndTime;

		public byte byCallType;

		public byte[] byRes1;

		public uint dwMaxResults;

		public uint dwSearchPos;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CALL_QUERY_SINGLE
	{
		public uint dwSize;

		public byte byCallType;

		public byte[] byRes1;

		public byte[] byTerminalName;

		public byte[] byAddressURL;

		public NET_DVR_TIME struStartTime;

		public NET_DVR_TIME struEndTime;

		public byte[] byRes2;
	}

	public enum CallQueryResultStatus : uint
	{
		Ok = 0,
		Fail,
		More,
		Nomatch,
		Paramerror,
		Invalidtime,
		Timeout
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CALL_QUERY_RESULT
	{
		public uint dwSize;

		public byte[] bySearchID;

		public byte byStatus;

		public byte[] byRes;

		public uint dwCount;

		public unsafe byte* pResults;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CONFERENCE_CALL_INFO
	{
		public byte[] byConferenceID;

		public byte[] byConferenceName;

		public NET_DVR_TIME struStartTime;

		public NET_DVR_TIME struEndTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_CALL_INFO
	{
		[FieldOffset (0)]
		public byte[] byRes;

		[FieldOffset (0)]
		public NET_DVR_TERMINAL_CALL_INFO struTerminalCallInfo;

		[FieldOffset (0)]
		public NET_DVR_CONFERENCE_CALL_INFO struConferenceCallInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CONFERENCE_CALL_ALARM
	{
		public uint dwSize;

		public byte byAlarmType;

		public byte byCallType;

		public byte byAutoAnswer;

		public byte byCallStatusSwitch;

		public NET_DVR_CALL_INFO struCallInfo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TERMINAL_INPUT_CFG
	{
		public uint dwSize;

		public uint dwInputNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_AUDIO_STATUS
	{
		public byte byMute;

		public byte byVolume;

		public byte byAudioInputDisabled;

		public byte byAudioInputVolume;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TERMINAL_CONFERENCE_STATUS
	{
		public uint dwSize;

		public byte byConferenceState;

		public byte byConferenceType;

		public byte byDualStreamEnabled;

		public byte byMicPowerEnabled;

		public uint dwInputNo;

		public NET_DVR_CALL_INFO struCallInfo;

		public NET_DVR_AUDIO_STATUS struAudioStatus;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TERMINAL_GK_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte byRegisterState;

		public byte[] byRes1;

		public NET_DVR_IPADDR struGKIP;

		public ushort wGKPort;

		public byte[] byRes2;

		public byte[] byRegisterName;

		public byte[] byPassword;

		public byte[] byRes3;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WIN_ROAM_SWITCH_CFG
	{
		public uint dwSize;

		public byte byEnableRoam;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LED_OUTPUT_CFG
	{
		public uint dwSize;

		public byte byEnableZoom;

		public byte byAutoCutBlackEdge;

		public byte[] byRes1;

		public ushort wLEDWidth;

		public ushort wLEDHeight;

		public uint dwRefreshRate;

		public uint dwInputNO;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LED_OUTPUT_PORT_CFG
	{
		public uint dwSize;

		public byte byEnabled;

		public byte[] byRes1;

		public uint dwPortNum;

		public uint[] dwPortNo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LINE_COLUMN_INFO
	{
		public ushort wLine;

		public ushort wColumn;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LED_DISPLAY_AREA
	{
		public uint dwSize;

		public NET_DVR_LINE_COLUMN_INFO struLCInfo;

		public ushort wWidth;

		public ushort wHeight;

		public ushort wRecvCardWidth;

		public ushort wRecvCardHeigt;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LED_RECV_CARD_INFO
	{
		public NET_DVR_LINE_COLUMN_INFO struPos;

		public ushort wRecvCardWidth;

		public ushort wRecvCardHeigt;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LED_PORT_BACKUP
	{
		public byte byEnabled;

		public byte byPortMode;

		public byte[] byRes1;

		public uint dwPairPort;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LED_PORT_CFG
	{
		public uint dwSize;

		public byte byEnabled;

		public byte[] byRes1;

		public NET_DVR_LED_PORT_BACKUP struLedPortBackup;

		public uint dwRecvCardNum;

		public NET_DVR_LED_RECV_CARD_INFO[] struRecvCard;

		public uint dwPortNo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LED_DISPLAY_CFG
	{
		public uint dwSize;

		public NET_DVR_COLOR_TEMPERATURE_CFG struColorTemp;

		public NET_DVR_VIDEO_OUT_CFG struVoutCfg;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LED_TEST_SIGNAL_CFG
	{
		public uint dwSize;

		public byte byEnabled;

		public byte bySignalType;

		public byte[] byRes1;

		public NET_DVR_RGB_COLOR struSignalColor;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LED_NOSIGNAL_CFG
	{
		public uint dwSize;

		public byte byNoSignalMode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LED_INPUT_CFG
	{
		public uint dwSize;

		public uint dwResolutionWidth;

		public uint dwResolutionHeight;

		public uint dwRefreshRate;

		public NET_DVR_SCREEN_VGA_CFG struVgaCfg;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LED_RECV_CARD_CFG_COND
	{
		public uint dwSize;

		public uint dwOutputNo;

		public NET_DVR_LINE_COLUMN_INFO struPosStart;

		public NET_DVR_LINE_COLUMN_INFO struPosEnd;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LED_GAMMA_CFG
	{
		public uint dwSize;

		public ushort[] wGammaValue;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LED_CLOCK_CFG
	{
		public uint dwDclkRate;

		public uint dwGclkRate;

		public uint dwGclkCountNum;

		public byte byDclkDutyRatio;

		public byte byDclkPhase;

		public byte byGclkNum;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LED_RECV_CFG
	{
		public uint dwSize;

		public NET_DVR_LED_CLOCK_CFG struClockCfg;

		public byte byGrayLevel;

		public byte byRefreshRate;

		public byte byLineScanNum;

		public byte byRefreshCompleteGrayNum;

		public uint dwHBlank;

		public uint dwAfterglowCtrl;

		public uint dwLineFeedTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LED_REGISTOR_VALUE
	{
		public byte byChip1High;

		public byte byChip1Low;

		public byte byChip2High;

		public byte byChip2Low;

		public byte byChip3High;

		public byte byChip3Low;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LED_RECV_REGISTOR
	{
		public byte byEliminateGhostShadowLevel;

		public byte byEliminateShadowy;

		public byte byGrayEqualize1;

		public byte byGrayEqualize2;

		public byte byEnableGrayUniformity;

		public byte byDisableHGrayStripes;

		public byte byGhostShadowEnhancedMode1;

		public byte byGhostShadowEnhancedMode2;

		public byte byClearBadPoint;

		public byte byEnableSelfDefineRegistor;

		public byte[] byRes1;

		public NET_DVR_LED_REGISTOR_VALUE struRegistorValue;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LED_RECV_ADVANCED_CFG
	{
		public uint dwSize;

		public NET_DVR_LED_RECV_REGISTOR struFirstRegistor;

		public NET_DVR_LED_RECV_REGISTOR struSecondRegistor;

		public NET_DVR_LED_RECV_REGISTOR struThirdRegistor;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LED_CHECK_COND
	{
		public uint dwSize;

		public uint dwOutputNo;

		public byte[] byRes;
	}

	public enum AddrQueryType : uint
	{
		QuerysvrByCountryid = 0,
		QuerysvrByServertype = 1,
		QuerydevByNicknameDdns = 2,
		QuerydevBySerialDdns = 3,
		CheckdevByNicknameDdns = 4,
		CheckdevBySerialDdns = 5,
		QuerydevByNicknameIpserver = 6,
		QuerydevBySerialIpserver = 7
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_QUERY_COUNTRYID_COND
	{
		public ushort wCountryID;

		public sbyte[] szSvrAddr;

		public sbyte[] szClientVersion;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_QUERY_COUNTRYID_RET
	{
		public sbyte[] szResolveSvrAddr;

		public sbyte[] szAlarmSvrAddr;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_QUERY_SERVERTYPE_COND
	{
		public ushort wSvrType;

		public sbyte[] szSvrAddr;

		public sbyte[] szClientVersion;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_QUERY_SERVERTYPE_RET
	{
		public sbyte[] szSvrAddr;

		public ushort wSvrPort;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_QUERY_DDNS_COND
	{
		public sbyte[] szResolveSvrAddr;

		public sbyte[] szDevNickName;

		public sbyte[] szDevSerial;

		public sbyte[] szClientVersion;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_QUERY_DDNS_RET
	{
		public sbyte[] szDevIP;

		public ushort wCmdPort;

		public ushort wHttpPort;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CHECK_DDNS_RET
	{
		public byte byDevStatus;

		public byte byRes1;

		public NET_DVR_QUERY_DDNS_RET struQueryRet;

		public ushort wRegionID;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_QUERY_IPSERVER_COND
	{
		public sbyte[] szResolveSvrAddr;

		public ushort wResolveSvrPort;

		public sbyte[] szDevNickName;

		public sbyte[] szDevSerial;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_QUERY_IPSERVER_RET
	{
		public sbyte[] szDevIP;

		public ushort wCmdPort;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CURRENT_VALID_PORT
	{
		public uint dwSize;

		public ushort wHTTPPort;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_AUDIO_CHANNEL
	{
		public uint dwChannelNum;

		public byte[] byres;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_STREAMENCRYPTION_COND
	{
		public uint dwSize;

		public uint dwChan;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_STREAMENCRYPTION_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_REVISE_GPS_CFG
	{
		public uint dwSize;

		public byte byLatitudeType;

		public byte byLongitudeType;

		public byte byMode;

		public byte byRes;

		public NET_DVR_LLI_PARAM struLatitude;

		public NET_DVR_LLI_PARAM struLongitude;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PDC_RECOMMEND
	{
		public uint dwSize;

		public ushort wWidth;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FLASHSTORAGE_REMOVE
	{
		public uint dwSize;

		public uint dwChannel;

		public byte byPDCRemoveEnable;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PARKING_CARD
	{
		public uint dwSize;

		public uint dwChannel;

		public sbyte[] szCardNo;

		public byte byCardType;

		public byte byCardStatus;

		public byte byChargeRuleID;

		public byte byDelete;

		public NET_DVR_TIME_V30 struStartTime;

		public NET_DVR_TIME_V30 struEndTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_GATE_CARDINFO
	{
		public uint dwSize;

		public NET_VCA_DEV_INFO struDevInfo;

		public uint dwRelativeTime;

		public uint dwAbsTime;

		public sbyte[] szCardNo;

		public sbyte[] szPassVehicleID;

		public sbyte[] szInVehicleID;

		public NET_DVR_TIME_V30 struSwipeTime;

		public NET_DVR_TIME_V30 struCardTime;

		public byte byLetPass;

		public byte byCardType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_GATE_CHARGEINFO
	{
		public uint dwSize;

		public NET_VCA_DEV_INFO struDevInfo;

		public uint dwRelativeTime;

		public uint dwAbsTime;

		public sbyte[] sLicense;

		public sbyte[] szCardNo;

		public NET_DVR_TIME_V30 struEntranceTime;

		public NET_DVR_TIME_V30 struDepartureTime;

		public sbyte[] szDepartureID;

		public sbyte[] szEntranceID;

		public uint dwTotalCost;

		public sbyte[] szOperateName;

		public byte byChargeRuleId;

		public byte byVehicleType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PARKING_CARD_CTRL_PARAM
	{
		public uint dwSize;

		public uint dwChannel;

		public byte byCardType;

		public byte byDeleteALL;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TME_VEHICLE_RESULT
	{
		public uint dwSize;

		public ushort wLaneid;

		public byte byCamLaneId;

		public byte byRes1;

		public uint dwChanIndex;

		public NET_DVR_PLATE_INFO struPlateInfo;

		public NET_DVR_VEHICLE_INFO struVehicleInfo;

		public byte[] byMonitoringSiteID;

		public byte[] byDeviceID;

		public byte byDir;

		public byte byRes2;

		public ushort wBackList;

		public uint dwPicNum;

		public NET_ITS_PICTURE_INFO[] struPicInfo;

		public byte[] byPassVehicleID;

		public byte[] byCardNo;

		public byte[] bySwipeTime;

		public uint dwCharge;

		public byte byHistory;

		public byte byLetPass;

		public byte[] byRes3;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PARKING_VEHICLE
	{
		public uint dwSize;

		public uint dwChannel;

		public sbyte[] szLicense;

		public sbyte[] szRelateCardNo;

		public NET_DVR_TIME_V30 struStartTime;

		public NET_DVR_TIME_V30 struEndTime;

		public byte byVehicleType;

		public byte byPlateColor;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CHARGEACCOUNT_CFG
	{
		public uint dwSize;

		public float fAccount;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PXMULTICTRL_CFG
	{
		public uint dwSize;

		public uint dwMultiChansWaitTime;

		public byte byMultiChansCapEnabled;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PXOFFLINE_CFG
	{
		public uint dwSize;

		public byte byEnabled;

		public byte byChargeEnabled;

		public byte byAlarmEnabled;

		public byte byRecordSource;

		public uint dwTimeWait;

		public uint dwRealeaseMode;

		public byte byVehCardmatch;

		public byte bySingleInSingleOut;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PARKINGSAPCE_CFG
	{
		public uint dwSize;

		public uint dwTotalParkingLot;

		public uint dwCurrParkingLot;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PAPERCHARGEINFO_CFG
	{
		public uint dwSize;

		public sbyte[] szBarCode;

		public sbyte[] szLicense;

		public sbyte[] szVehicleInTime;

		public sbyte[] szPaymentTime;

		public float fPaymentAmount;

		public uint dwPaymentOutFailureTime;

		public byte byVehicleOutEnabled;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ILLEGALCARDFILTERING_CFG
	{
		public uint dwSize;

		public sbyte[] sLEDDefaultInfo;

		public byte byillegalCardFilteringEnabled;

		public byte bySendCardSensingCoilEnabled;

		public byte byWiegendSensingCoilEnabled;

		public byte byGateSwitchEnabled;

		public byte byVerifyKeyWriteCardEnabled;

		public byte byNoplateTakeCardEnabled;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TME_CHARGERULE_COND
	{
		public uint dwSize;

		public uint dwChannel;

		public sbyte[] szCardNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LEDDISPLAY_CFG
	{
		public uint dwSize;

		public sbyte[] sDisplayInfo;

		public byte byDisplayMode;

		public byte bySpeedType;

		public byte[] byRes1;

		public uint dwShowTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VOICEBROADCAST_CFG
	{
		public uint dwSize;

		public sbyte[] sInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PAPERPRINTFORMAT_CFG
	{
		public uint dwSize;

		public sbyte[] sTitleInfo;

		public sbyte[] sCustomInfo;

		public sbyte[] sPhoneNum;

		public byte byPrintInTimeEnabled;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LOCKGATE_TIME_CFG
	{
		public sbyte[] sBeginTime;

		public sbyte[] sEndTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LOCKGATE_CFG
	{
		public uint dwSize;

		public NET_DVR_LOCKGATE_TIME_CFG[] struTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PARKING_DATASTATE_INFO
	{
		public uint dwSize;

		public sbyte[] szAppSerialNum;

		public uint dwParkingNum;

		public uint dwUpdataSerialNum;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_EPTZ_CFG
	{
		public uint dwSize;

		public byte byEnableEPTZ;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CENTER_POINT_CFG
	{
		public uint dwSize;

		public NET_VCA_POLYGON struRegion;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FTPUPLOAD_PARAM
	{
		public sbyte[] szRuleTypeItem;

		public sbyte[] szCameraName;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FTPUPLOADCFG
	{
		public uint dwSize;

		public byte byEventType;

		public byte byMode;

		public byte[] byRes;

		public NET_DVR_FTPUPLOAD_PARAM[] struCustomVehicle;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PUBLISH_UPGRADE_COND
	{
		public uint dwSize;

		public uint dwUpgradeType;

		public uint dwTerminalNum;

		public unsafe uint* pTerminalNo;

		public uint dwGroupNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WEP_KEY_CFG
	{
		public sbyte[] csWEPKey;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SUB_UPGRADE_PROGRESS
	{
		public uint dwTerminalNo;

		public uint dwProgress;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_UPGRADE_PROGRESS_RESULT
	{
		public uint dwSize;

		public uint dwMainProgress;

		public uint dwSubProgressNum;

		public unsafe LPNET_DVR_SUB_UPGRADE_PROGRESS* lpStruSubProgress;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCHEDULE_PROGRESS_COND
	{
		public uint dwSize;

		public uint dwScheduleNo;

		public byte byProgressType;

		public byte[] byRes1;

		public uint dwGroupNo;

		public uint dwTerminalNo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SUB_SCHEDULE_PROGRESS
	{
		public uint dwTerminalNo;

		public uint dwProgress;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCHEDULE_PROGRESS_RESULT
	{
		public uint dwSize;

		public uint dwMainProgress;

		public uint dwSubProgressNum;

		public unsafe LPNET_DVR_SUB_SCHEDULE_PROGRESS* lpStruSubProgress;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WEP_CFG
	{
		public byte byAuthenticationType;

		public byte byDefaultTransmitKeyIndex;

		public byte byWepKeyLenType;

		public byte byKeyType;

		public NET_DVR_WEP_KEY_CFG[] struWEPKeyCfg;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WPA_CFG
	{
		public byte byAlgorithmType;

		public byte byWPAKeyLen;

		public byte byDefaultPassword;

		public byte byRes1;

		public sbyte[] csSharedKey;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WIRELESS_SECURITY_CFG
	{
		public byte bySecurityMode;

		public NET_DVR_WEP_CFG struWEPCfg;

		public NET_DVR_WPA_CFG struWPACfg;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WIRELESSSERVER_FULLVERSION_CFG
	{
		public uint dwSize;

		public byte byWifiAPEnabled;

		public byte byBroadcastEnabled;

		public byte byWlanShareEnabled;

		public byte byDHCPEnabled;

		public byte[] bySSID;

		public byte[] byRes1;

		public byte byIPType;

		public NET_DVR_IPADDR struIPAddr;

		public NET_DVR_IPADDR struIPMask;

		public NET_DVR_IPADDR struGatewayIPMask;

		public NET_DVR_IPADDR struStartIPAddrPool;

		public NET_DVR_IPADDR struEndIPAddrPool;

		public NET_DVR_IPADDR[] struDNSServerIpAddr;

		public NET_DVR_WIRELESS_SECURITY_CFG struWirelessSecurityCfg;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_OPTICAL_DEV_CHAN_INFO
	{
		public uint dwChannel;

		public byte[] byChannelName;

		public byte bySignal;

		public byte bySignalType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_OPTICAL_DEV_NODE
	{
		public byte byValid;

		public byte[] byRes1;

		public uint dwDevNo;

		public byte[] byDevName;

		public byte[] byDevID;

		public NET_DVR_OPTICAL_DEV_CHAN_INFO[] struChannel;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_OPTICAL_PORT_INFO
	{
		public uint dwSize;

		public byte byValid;

		public byte byLinkType;

		public byte byPortWorkMode;

		public byte[] byRes1;

		public uint dwPairPort;

		public NET_DVR_OPTICAL_DEV_NODE[] struDevInfo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_OPTICAL_CHAN_RELATE_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes1;

		public uint dwDevNo;

		public uint dwOpticalPort;

		public byte[] byDevID;

		public uint dwInputChanNo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_START_FILE_TO_CLOUD_COND
	{
		public uint dwSize;

		public byte[] aCameraID;

		public uint dwPoolID;

		public uint dwRepPoolID;

		public ushort wReplication;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_START_PICTURE_FROM_CLOUD_COND
	{
		public uint dwSize;

		public byte[] aCameraID;

		public NET_DVR_TIME_V30 struBeginTime;

		public NET_DVR_TIME_V30 struEndTime;

		public uint dwPicType;

		public byte[] byRes1;

		public byte byZoomType;

		[StructLayout (LayoutKind.Explicit)]
		public struct UZoomParam
		{
			[FieldOffset (0)]
			public byte[] uLen;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruScale
			{
				public byte byScale;
			}


			[FieldOffset (0)]
			public StruScale struScale;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruQuality
			{
				public byte byQuality;
			}


			[FieldOffset (0)]
			public StruQuality struQuality;

			[StructLayout (LayoutKind.Sequential)]
			public struct StruResolution
			{
				public uint dwWidth;

				public uint dwHeight;
			}


			[FieldOffset (0)]
			public StruResolution struResolution;
		}


		public UZoomParam uZoomParam;

		public unsafe DOWNLOAD_DATA_CB* fnDownloadFileCallBack;

		public unsafe void* pUser;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_START_PICTURE_FROM_CLOUD_RET
	{
		public uint dwSize;

		public uint dwFileCount;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PICTURE_FROM_CLOUD_RET
	{
		public uint dwSize;

		public NET_DVR_TIME_V30 struTime;

		public uint dwPicLen;

		public byte byPicType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ACS_EXTERNAL_DEV_CFG
	{
		public uint dwSize;

		public byte byIDCardUpMode;

		public byte byRes1;

		public byte byCardVerifyMode;

		public byte byACSDevType;

		public byte byDoorMode;

		public byte byRes2;

		public ushort wDevDetailType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PERSONNEL_CHANNEL_CFG
	{
		public uint dwSize;

		public byte byInMode;

		public byte byOutMode;

		public byte byWorkMode;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ID_CARD_INFO
	{
		public uint dwSize;

		public byte[] byName;

		public NET_DVR_DATE struBirth;

		public byte[] byAddr;

		public byte[] byIDNum;

		public byte[] byIssuingAuthority;

		public NET_DVR_DATE struStartDate;

		public NET_DVR_DATE struEndDate;

		public byte byTermOfValidity;

		public byte bySex;

		public byte byNation;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ID_CARD_INFO_ALARM
	{
		public uint dwSize;

		public NET_DVR_ID_CARD_INFO struIDCardCfg;

		public uint dwMajor;

		public uint dwMinor;

		public NET_DVR_TIME_V30 struSwipeTime;

		public byte[] byNetUser;

		public NET_DVR_IPADDR struRemoteHostAddr;

		public uint dwCardReaderNo;

		public uint dwDoorNo;

		public uint dwPicDataLen;

		public unsafe sbyte* pPicData;

		public byte byCardType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PASSNUM_INFO_ALARM
	{
		public uint dwSize;

		public uint dwAccessChannel;

		public NET_DVR_TIME_V30 struSwipeTime;

		public byte[] byNetUser;

		public NET_DVR_IPADDR struRemoteHostAddr;

		public uint dwEntryTimes;

		public uint dwExitTimes;

		public uint dwTotalTimes;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_UPLOAD_VIDEO_INFO
	{
		public uint dwSize;

		public uint dwVideoMangeNo;

		public byte byVideoType;

		public byte[] byRes1;

		public byte[] sVideoName;

		public NET_DVR_TIME_V30 struTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEVICE_FILE_INFO
	{
		public uint dwSize;

		public byte[] sFileName;

		public uint dwManageNo;

		public NET_DVR_TIME_EX struTime;

		public byte byUsed;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PLAY_ITEM
	{
		public uint dwSize;

		public byte byItemType;

		public byte[] byRes;

		public uint dwPlayManageNo;

		public uint dwPlayPicTime;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEVICE_PLAYLIST
	{
		public uint dwSize;

		public byte byEnable;

		public byte byPlayType;

		public byte byVaildItemNum;

		public byte[] byRes;

		public NET_DVR_PLAY_ITEM[] struPlayItem;

		public byte[] byPlaylistName;

		public uint dwPlaylistNo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PLAYLIST_ITEM_CTRL
	{
		public uint dwSize;

		public byte byCtrlType;

		public byte byPlayIndex;

		public NET_DVR_PLAY_ITEM struPlayItem;

		public byte byNewPlayIndex;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PLAN_ITEM
	{
		public NET_DVR_PLAY_ITEM struPlanPlayItem;

		public NET_DVR_TIME_SEGMENT struTimeSegment;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PLAYPLAN_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte byPlanMode;

		public byte[] byRes;

		public NET_DVR_PLAN_ITEM[][] struPlanItem;

		public uint dwPlayPlanNo;

		public byte[] byPlayPlanName;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_WINDOW_PLAYPLAN_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes;

		public uint dwPlayPlanNo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEV_PLAYCTRL
	{
		public uint dwSize;

		public byte byControlType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_PLAYITEM_INFO
	{
		[StructLayout (LayoutKind.Sequential)]
		public struct StruPlayItem
		{
			public uint dwPlayItem;

			public byte[] byPlayItemName;

			public byte[] byRes2;
		}


		[FieldOffset (0)]
		public StruPlayItem struPlayItem;

		[StructLayout (LayoutKind.Sequential)]
		public struct StruPlaylistItem
		{
			public uint dwPlaylistNo;

			public byte[] byPlaylistName;

			public ushort wPlayIndex;

			public byte byPlayType;

			public byte[] byRes;

			public uint dwPlayItem;

			public byte[] byPlayItemName;

			public byte[] byRes2;
		}


		[FieldOffset (0)]
		public StruPlaylistItem struPlaylistItem;

		[StructLayout (LayoutKind.Sequential)]
		public struct StruPlayPlanItem
		{
			public uint dwPlayPlanNo;

			public NET_DVR_TIME_SEGMENT struTime;

			public byte byPlayType;

			public byte[] byRes;

			public uint dwPlaylistNo;

			public byte[] byPlaylistName;

			public uint dwPlayItem;

			public byte[] byPlayItemName;

			public ushort wPlayIndex;

			public byte[] byRes2;
		}


		[FieldOffset (0)]
		public StruPlayPlanItem struPlayPlanItem;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PLAYING_INFO
	{
		public uint dwSize;

		public byte byPlayWay;

		public byte byCurPlayType;

		public byte byPlayState;

		public byte byAudioState;

		public NET_DVR_PLAYITEM_INFO struPlayItemInfo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ONLINEUSER_COND
	{
		public uint dwSize;

		public uint dwChannel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ONLINEUSER_CFG
	{
		public uint dwSize;

		public byte byID;

		public byte byUserType;

		public byte byDataType;

		public byte byRes;

		public NET_DVR_IPADDR struIpAddr;

		public NET_DVR_TIME_V30 struLoginTime;

		public sbyte[] szUserName;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_STORAGE_DETECTION
	{
		public uint dwSize;

		public byte byHealthState;

		public byte bySDCardState;

		public ushort wAbnormalPowerLoss;

		public ushort wBadBlocks;

		public byte byRemainingLife;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_STORAGE_DETECTION_ALARM
	{
		public uint dwSize;

		public uint dwRelativeTime;

		public uint dwAbsTime;

		public NET_VCA_DEV_INFO struDevInfo;

		public uint dwCardID;

		public ushort wAbnormalPowerLoss;

		public ushort wBadBlocks;

		public byte byHealthState;

		public byte[] byRes1;

		public float fResidualLife;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_STORAGE_RWLOCK
	{
		public uint dwSize;

		public byte byEnabled;

		public byte[] byRes;

		public sbyte[] szPassWD;

		public sbyte[] szOriginalPassWD;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_STORAGE_UNLOCK
	{
		public uint dwSize;

		public sbyte[] szPassWD;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PTZTRACKSTATUS
	{
		public uint dwSize;

		public byte byID;

		public byte byLinkageType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SOCKS_PROXY_PARA
	{
		public byte[] byIP;

		public byte byAuthType;

		public ushort wPort;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SOCKS_PROXYS
	{
		public NET_DVR_SOCKS_PROXY_PARA[] struProxy;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_GET_FIGURE_COND
	{
		public uint dwLength;

		public uint dwChannel;

		public NET_DVR_TIME_V30 struTimePoint;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FIGURE_INFO
	{
		public uint dwPicLen;

		public unsafe sbyte* pPicBuf;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MANUALRANGING_CFG
	{
		public uint dwSize;

		public byte byEnabled;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VIDEO_INTERCOM_ALARM_CFG
	{
		public uint dwSize;

		public byte byDoorNotCloseAlarm;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PACKET_INFO_EX
	{
		public ushort wWidth;

		public ushort wHeight;

		public uint dwTimeStamp;

		public uint dwTimeStampHigh;

		public uint dwYear;

		public uint dwMonth;

		public uint dwDay;

		public uint dwHour;

		public uint dwMinute;

		public uint dwSecond;

		public uint dwMillisecond;

		public uint dwFrameNum;

		public uint dwFrameRate;

		public uint dwFlag;

		public uint dwFilePos;

		public uint dwPacketType;

		public uint dwPacketSize;

		public unsafe byte* pPacketBuffer;

		public byte[] byRes1;

		public uint dwPacketMode;

		public byte[] byRes2;

		public uint[] dwReserved;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CHECK_DEV_STATE
	{
		public uint dwTimeout;

		public unsafe DEV_WORK_STATE_CB* fnStateCB;

		public unsafe void* pUserData;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_COURSE_LIST_COND
	{
		public uint dwSize;

		public NET_DVR_TIME_V30 struStartTime;

		public NET_DVR_TIME_V30 struEndTime;

		public byte[] byCourseName;

		public byte[] byInstructorName;

		public byte byCourseType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_COURSE_CFG
	{
		public uint dwSize;

		public NET_DVR_TIME_V30 struStartTime;

		public NET_DVR_TIME_V30 struEndTime;

		public byte[] byCourseName;

		public byte[] byInstructorName;

		public byte[] byCourseDescription;

		public byte[] byRecUUID;

		public byte byCourseType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RECORD_STATUS
	{
		public uint dwSize;

		public byte[] byRecUUID;

		public byte byRecordStatus;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MANUAL_CURRICULUM_CFG
	{
		public uint dwSize;

		public byte[] byRecUUID;

		public byte[] byCourseName;

		public byte[] byInstructorName;

		public byte[] byCourseDescription;

		public byte byCmdType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_IMAGE_DIFF_DETECTION_CFG
	{
		public uint dwSize;

		public NET_VCA_POLYGON struRegion;

		public byte byEnabled;

		public byte byThreshold;

		public byte bySensitivity;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RECORDING_PUBLISH_FILE_COND
	{
		public uint dwSize;

		public uint dwChannel;

		public byte[] byFileID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RECORDING_PUBLISH_FILE_INFO
	{
		public uint dwSize;

		public NET_DVR_TIME_V30 struStartTime;

		public NET_DVR_TIME_V30 struEndTime;

		public byte[] byCourseName;

		public byte[] byInstructorName;

		public byte[] byCourseDescription;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCREEN_POINT
	{
		public ushort wX;

		public ushort wY;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MOUSE_PARAM
	{
		public byte byMouseEvent;

		public byte[] byRes1;

		public NET_DVR_SCREEN_POINT struMousePoint;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MARK_PARAM
	{
		public byte byMarkEvent;

		public byte byMarkTool;

		public byte byLineWidth;

		public byte byMouseEvent;

		public NET_DVR_RGB_COLOR struColor;

		public NET_DVR_SCREEN_POINT struPoint;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_KEYBOARD_PARAM
	{
		public uint dwKeyValue;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PPT_PARAM
	{
		public byte byPPTAction;

		public byte[] byRes1;

		public NET_DVR_SCREEN_POINT struPoint;

		public uint dwPPTNo;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_REMOTE_CTRL_PARAM
	{
		public byte byRemoteCtrlCmd;

		public byte[] byRes1;

		public uint dwCtrlParam;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SPOTLIGHT_PARAM
	{
		public byte byCmd;

		public byte[] byRes1;

		public NET_DVR_SCREEN_POINT struPoint;

		public uint dwRadius;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TOUCHPAD_PARAM
	{
		public byte byMouseEvent;

		public byte[] byRes1;

		public int iXDisplacement;

		public int iYDisplacement;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MEDIA_LIST_PARAM
	{
		public byte byOperateCmd;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_SCREEN_CTRL_PARAM
	{
		[FieldOffset (0)]
		public NET_DVR_MOUSE_PARAM struMouseParam;

		[FieldOffset (0)]
		public NET_DVR_MARK_PARAM struMarkParam;

		[FieldOffset (0)]
		public NET_DVR_KEYBOARD_PARAM struKeyboardInfo;

		[FieldOffset (0)]
		public NET_DVR_PPT_PARAM struPPTParam;

		[FieldOffset (0)]
		public NET_DVR_REMOTE_CTRL_PARAM struRemoteCtrlParam;

		[FieldOffset (0)]
		public NET_DVR_SPOTLIGHT_PARAM struSpotLight;

		[FieldOffset (0)]
		public NET_DVR_TOUCHPAD_PARAM struTouchPadParam;

		[FieldOffset (0)]
		public NET_DVR_MEDIA_LIST_PARAM struMediaListParam;

		[FieldOffset (0)]
		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCREEN_CTRL_CMD
	{
		public uint dwSize;

		public byte byCmdType;

		public byte[] byRes1;

		public NET_DVR_SCREEN_CTRL_PARAM struScreenCtrlParam;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_FILE_RESPONSE_PARAM
	{
		public byte byFileState;

		public byte[] byRes1;

		public uint dwErrorFileIndex;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PPT_RESPONSE_PARAM
	{
		public byte byCurrentState;

		public byte[] byRes1;

		public uint dwCurrentPage;

		public uint dwFileIndex;

		public uint dwTotalPageNum;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct NET_DVR_SCREEN_RESPONSE_PARAM
	{
		[FieldOffset (0)]
		public byte[] byRes;

		[FieldOffset (0)]
		public NET_DVR_PPT_RESPONSE_PARAM struPPTParam;

		[FieldOffset (0)]
		public NET_DVR_FILE_RESPONSE_PARAM struFileParam;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCREEN_RESPONSE_CMD
	{
		public uint dwSize;

		public byte byResponseCmd;

		public byte[] byRes1;

		public NET_DVR_SCREEN_RESPONSE_PARAM struResonseParam;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCREEN_FILE_COND
	{
		public uint dwSize;

		public byte byFileType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCREEN_FILE_INFO
	{
		public uint dwSize;

		public uint dwFileIndex;

		public byte byFileType;

		public byte byPictureFormat;

		public byte byVideoFormat;

		public byte byRes1;

		public byte[] byFileName;

		public uint dwFileSize;

		public uint dwPPTPage;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCREEN_CONFIG
	{
		public uint dwSize;

		public byte byVolume;

		public byte byContrast;

		public byte byBrightness;

		public byte byScreenShowEnabled;

		public byte byScreenLocked;

		public byte byBlackScreenEnabled;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCREEM_FILE_UPLOAD_PARAM
	{
		public uint dwSize;

		public byte byFileType;

		public byte byPictureFormat;

		public byte byVideoFormat;

		public byte byRes1;

		public byte[] byFileName;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCREEM_FILE_DOWNLOAD_PARAM
	{
		public uint dwSize;

		public uint dwFileIndex;

		public uint dwPPTPageNo;

		public byte[] byRes2;
	}

	public enum EnSwitchConvertAlarm : uint
	{
		OpticalPortLost = 1,
		NetworkPortLost
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_TMEVOICE_CFG
	{
		public uint dwSize;

		public byte byVoiceSpeed;

		public byte byVoicePitch;

		public byte byVoiceVolum;

		public byte byRes1;

		public uint dwVoiceRole;

		public sbyte[] sInfo;

		public sbyte[] sFileName;

		public byte[] byRes;
	}

	public enum EnSwitchConvertNotification : uint
	{
		OpticalPortConnected = 1,
		NetworkPortConnected
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SWITCH_CONVERT_ALARM
	{
		public uint dwSize;

		public byte byPortNo;

		public byte[] byRes1;

		public uint dwEventType;

		public uint dwEvent;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INPUT_BOARD_CFG
	{
		public uint dwSize;

		public uint dwSlotNo;

		public byte byFullFrameEnable;

		public byte[] byRes;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INPUT_BOARD_CFG_LIST
	{
		public uint dwSize;

		public NET_DVR_INPUT_BOARD_CFG[] struBoardList;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ENCRYPT_DEVICE_COND
	{
		public uint dwSize;

		public uint dwChannel;

		public byte byAlgorithm;

		public byte byModelLen;

		public byte byCERTSaveLocation;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ENCRYPT_DEVICE_INFO
	{
		public uint dwSize;

		public byte byAlgorithm;

		public byte byModelLen;

		public byte[] byRes1;

		public uint dwPublicKeyLen;

		public sbyte[] szPublicKey;

		public sbyte[] szChipSerialNumber;

		public sbyte[] szDeviceID;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ENCRYPT_CERT_PARAM
	{
		public uint dwSize;

		public ushort wCertType;

		public byte[] byRes1;

		public uint dwCertLen;

		public byte[] byRes2;

		public unsafe sbyte* pCertBuf;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RING_UPLOAD_CFG
	{
		public uint dwSize;

		public uint dwRingID;

		public byte[] byRingName;

		public uint dwRingSize;

		public byte byRingType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RING_SEARCH_COND
	{
		public uint dwSize;

		public uint dwRingID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RING_SEARCH_CFG
	{
		public uint dwSize;

		public uint dwRingID;

		public byte[] byRingName;

		public uint dwRingSize;

		public byte byRingType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMCTRL_CFG
	{
		public uint dwSize;

		public byte byListenPicUploadEnabled;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_POSTRADARSPEED_CFG
	{
		public uint dwSize;

		public byte byLaneType;

		public byte[] byRes1;

		public uint dwInterval;

		public uint dwSignSpeed;

		public uint dwSpeedLimit;

		public uint dwBigCarSignSpeed;

		public uint dwBigCarSpeedLimit;

		public uint dwLowSpeedLimit;

		public uint dwBigCarLowSpeedLimit;

		public byte byCheckPostEnabled;

		public byte byOverSpeedEnabled;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_POSTRADARPARAM_CFG
	{
		public uint dwSize;

		public byte[] bySoftWareVersion;

		public byte byID;

		public byte byWorkMode;

		public byte bySpeedType;

		public byte byDirectionFilter;

		public uint dwAngleCorrect;

		public uint dwSensitivity;

		public uint dwSpeedLowLimit;

		public uint dwTrigDistance;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CLOUD_URL_COND
	{
		public uint dwSize;

		public byte byType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CLOUD_URL
	{
		public uint dwSize;

		public sbyte[] szURL;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CLOUD_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte byType;

		public byte byStatus;

		public byte byRes1;

		public sbyte[] szAuthCode;

		public sbyte[] szAlias;

		public long i64TotalCapability;

		public long i64UsedSpace;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CLOUD_UPLOADSTRATEGY_COND
	{
		public uint dwSize;

		public uint dwChannel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CLOUD_UPLOADSTRATEGY
	{
		public uint dwSize;

		public byte byStrategyType;

		public byte[] byRes1;

		public uint dwRecordType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RECORD_CHECK_COND
	{
		public uint dwSize;

		public NET_DVR_STREAM_INFO struStreamInfo;

		public byte byCheckType;

		public byte[] byRes1;

		public NET_DVR_TIME_EX struBeginTime;

		public NET_DVR_TIME_EX struEndTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RECORD_CHECK_RET
	{
		public uint dwSize;

		public byte byRecordNotComplete;

		public byte[] byRes1;

		public NET_DVR_TIME_EX struBeginTime;

		public NET_DVR_TIME_EX struEndTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ADD_RECORD_PASSBACK_MANUAL_COND
	{
		public uint dwSize;

		public NET_DVR_STREAM_INFO struStreamInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ADD_RECORD_PASSBACK_MANUAL_CFG
	{
		public uint dwSize;

		public NET_DVR_TIME_EX struBeginTime;

		public NET_DVR_TIME_EX struEndTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RECORD_PASSBACK_TASK_CFG
	{
		public uint dwSize;

		public uint dwTaskID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RECORD_PASSBACK_MANUAL_COND
	{
		public uint dwSize;

		public byte byType;

		public byte byTimeSegmentQuety;

		public byte[] byRes1;

		public NET_DVR_STREAM_INFO struStreamInfo;

		public NET_DVR_TIME_EX struBeginTime;

		public NET_DVR_TIME_EX struEndTime;

		public uint dwTaskID;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RECORD_PASSBACK_MANUAL_TASK_RET
	{
		public uint dwSize;

		public NET_DVR_STREAM_INFO struStreamInfo;

		public uint dwTaskID;

		public NET_DVR_TIME_EX struStartTime;

		public NET_DVR_TIME_EX struStopTime;

		public byte byTaskStatus;

		public byte[] byRes1;

		public NET_DVR_TIME_EX struExecuteStartTime;

		public NET_DVR_TIME_EX struExecuteStopTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RECORD_PASSBACK_MANUAL_CTRL
	{
		public uint dwSize;

		public byte byControlType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEL_RECORD_PASSBACK_MANUAL_COND
	{
		public uint dwSize;

		public byte byDelType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEL_RECORD_PASSBACK_MANUAL_CFG
	{
		public uint dwSize;

		public uint dwTaskID;

		public NET_DVR_STREAM_INFO struStreamInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PASSBACK_DAY
	{
		public byte byAllDay;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_PASSBACK_SCHED
	{
		public NET_DVR_SCHEDTIME struPassBackTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RECORD_PASSBACK_SCH_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte byPassBackWeek;

		public byte[] byRes1;

		public NET_DVR_PASSBACK_DAY[] struPassBackDay;

		public NET_DVR_PASSBACK_SCHED[][] struPassBackSched;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RECORD_PASSBACK_HISTORY_PLAN_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes1;

		public NET_DVR_PASSBACK_DAY[] struPassBackDay;

		public NET_DVR_PASSBACK_SCHED[][] struPassBackSched;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DEV_STORAGE_CFG
	{
		public uint dwSize;

		public uint dwCapacityTotal;

		public uint dwFreeSpaceTotal;

		public uint dwLockedRecordSpace;

		public uint dwUnLockedSpace;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_REC_PASSBACK_BASIC_CFG
	{
		public uint dwSize;

		public uint dwStartTime;

		public uint dwStopTime;

		public ushort wMaxTotalConcurrenceNum;

		public ushort wMaxDvrConcurrenceNum;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ONLINE_USER_INFO
	{
		public uint dwSize;

		public ushort wOnlineUserCount;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RECORD_SEGMENT_COND
	{
		public uint dwSize;

		public NET_DVR_STREAM_INFO struStreanInfo;

		public NET_DVR_TIME_EX struStartTime;

		public NET_DVR_TIME_EX struStopTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RECORD_SEGMENT_RET
	{
		public uint dwSize;

		public uint dwRecordTotalSize;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ACCESSORY_CARD_INFO
	{
		public uint dwSize;

		public byte[] szAccessoryCardInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SEARCH_INFO_COND
	{
		public uint dwSize;

		public byte byCommand;

		public byte[] byRes1;

		public uint dwEmployeeNo;

		public byte[] byName;

		public NET_DVR_TIME_V30 struStartTime;

		public NET_DVR_TIME_V30 struEndTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCHEDULE_CHOICE
	{
		public byte byScheduleType;

		public byte byScheduleNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DISPINPUT_CFG
	{
		public uint dwSize;

		public uint dwDispInputNo;

		public uint dwEDIDFileNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCHEDULE_PLAN
	{
		public uint dwSize;

		public byte bySchedulePlanNo;

		public byte bySchedulePlanType;

		public byte byEnable;

		public byte byRes1;

		public NET_DVR_SCHEDULE_CHOICE[] struScheduleChoice;

		public NET_DVR_TIME_V30 struStartTime;

		public NET_DVR_TIME_V30 struEndTime;

		public byte byHolidayNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_DISPINPUT_CFG_LIST
	{
		public uint dwSize;

		public uint dwDispInputNum;

		public unsafe LPNET_DVR_DISPINPUT_CFG* lpstruBuffer;

		public uint dwBufferSize;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SCHEDULE_INFO_CFG
	{
		public uint dwSize;

		public uint dwEmployeeNo;

		public byte[] byName;

		public byte[] byDepartmentName;

		public NET_DVR_SCHEDULE_PLAN struSchedulePlan;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ATTENDANCE_SUMMARY_CFG
	{
		public uint dwSize;

		public uint dwEmployeeNo;

		public byte[] byName;

		public byte[] byDepartmentName;

		public uint dwWorkStandard;

		public uint dwWorkActual;

		public uint dwLateTimes;

		public uint dwLateMinutes;

		public uint dwLeaveEarlyTimes;

		public uint dwLeaveEarlyMinutes;

		public uint dwOvertimeStandard;

		public uint dwOvertimeActual;

		public uint dwAttendanceStandard;

		public uint dwAttendanceActual;

		public uint dwAbsentDays;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ATTENDANCE_RECORD_CFG
	{
		public uint dwSize;

		public uint dwEmployeeNo;

		public byte[] byName;

		public byte[] byDepartmentName;

		public NET_DVR_TIME_V30 struAttendanceTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ATTENDANCE_TIME
	{
		public NET_DVR_TIME_V30 struOnDutyTime;

		public NET_DVR_TIME_V30 struOffDutyTime;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ABNORMAL_CFG
	{
		public uint dwSize;

		public uint dwEmployeeNo;

		public byte[] byName;

		public byte[] byDepartmentName;

		public NET_DVR_ATTENDANCE_TIME[] struAttendanceTime;

		public uint dwLateMinutes;

		public uint dwLeaveEarlyMinutes;

		public uint dwAbsenceMinutes;

		public uint dwTotalMinutes;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CARD_CFG_V50
	{
		public uint dwSize;

		public uint dwModifyParamType;

		public byte[] byCardNo;

		public byte byCardValid;

		public byte byCardType;

		public byte byLeaderCard;

		public byte byRes1;

		public byte[] byDoorRight;

		public NET_DVR_VALID_PERIOD_CFG struValid;

		public byte[] byBelongGroup;

		public byte[] byCardPassword;

		public ushort[][] wCardRightPlan;

		public uint dwMaxSwipeTime;

		public uint dwSwipeTime;

		public ushort wRoomNumber;

		public short wFloorNumber;

		public uint dwEmployeeNo;

		public byte[] byName;

		public ushort wDepartmentNo;

		public ushort wSchedulePlanNo;

		public byte bySchedulePlanType;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CAPTURE_FINGERPRINT_COND
	{
		public uint dwSize;

		public byte byFingerPrintPicType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CAPTURE_FINGERPRINT_CFG
	{
		public uint dwSize;

		public uint dwFingerPrintDataSize;

		public byte[] byFingerData;

		public uint dwFingerPrintPicSize;

		public unsafe sbyte* pFingerPrintPicBuffer;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_REC_PASSBACK_MANUAL_EXECUTABLE_SEND
	{
		public uint dwSize;

		public NET_DVR_STREAM_INFO struStreamInfo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_REC_PASSBACK_MANUAL_EXECUTABLE_RET
	{
		public uint dwSize;

		public NET_DVR_STREAM_INFO struStreamInfo;

		public byte byExecutable;

		public byte byUnexecutableReason;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_STREAM_MEDIA_CFG
	{
		public uint dwSize;

		public byte[] sUrl;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SHIPSDETECTION_REGION_CFG
	{
		public byte byRuleID;

		public byte byEnable;

		public byte bySensitivity;

		public byte byFrameOverlayEnabled;

		public byte[] byRes;

		public NET_ITC_POLYGON struPolygon;

		public NET_VCA_LINE struTriggerLine;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SHIPSDETECTION_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes1;

		public float fLookDownUpAngle;

		public float fHorizontalHeight;

		public NET_DVR_SHIPSDETECTION_REGION_CFG[] struShipsDetectionRegion;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_THERMOMETRY_BASICPARAM
	{
		public uint dwSize;

		public byte byEnabled;

		public byte byStreamOverlay;

		public byte byPictureOverlay;

		public byte byThermometryRange;

		public byte byThermometryUnit;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_THERMOMETRY_COND
	{
		public uint dwSize;

		public uint dwChannel;

		public ushort wPresetNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_THERMOMETRY_PRESETINFO_PARAM
	{
		public byte byEnabled;

		public byte byRuleID;

		public ushort wDistance;

		public float fEmissivity;

		public byte[] byRes;

		public byte byReflectiveEnabled;

		public float fReflectiveTemperature;

		public sbyte[] szRuleName;

		public byte[] byRes1;

		public byte byRuleCalibType;

		public NET_VCA_POINT struPoint;

		public NET_VCA_POLYGON struRegion;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_THERMOMETRY_PRESETINFO
	{
		public uint dwSize;

		public ushort wPresetNo;

		public byte[] byRes;

		public NET_DVR_THERMOMETRY_PRESETINFO_PARAM[] struPresetInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_THERMOMETRY_ALARMRULE_PARAM
	{
		public byte byEnable;

		public byte byRuleID;

		public byte byRule;

		public byte byRes;

		public sbyte[] szRuleName;

		public float fAlert;

		public float fAlarm;

		public float fThreshold;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_THERMOMETRY_ALARMRULE
	{
		public uint dwSize;

		public NET_DVR_THERMOMETRY_ALARMRULE_PARAM[] struThermometryAlarmRuleParam;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_THERMOMETRY_DIFFCOMPARISON_PARAM
	{
		public byte byEnable;

		public byte byRuleID;

		public byte byAlarmID1;

		public byte byAlarmID2;

		public byte byRule;

		public byte[] byRes;

		public float fTemperatureDiff;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_THERMOMETRY_DIFFCOMPARISON
	{
		public uint dwSize;

		public NET_DVR_THERMOMETRY_DIFFCOMPARISON_PARAM[] struDiffComparison;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_REALTIME_THERMOMETRY_COND
	{
		public uint dwSize;

		public uint dwChan;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_POINT_THERM_CFG
	{
		public float fTemperature;

		public NET_VCA_POINT struPoint;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LINEPOLYGON_THERM_CFG
	{
		public float fMaxTemperature;

		public float fMinTemperature;

		public float fAverageTemperature;

		public float fTemperatureDiff;

		public NET_VCA_POLYGON struRegion;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_THERMOMETRY_UPLOAD
	{
		public uint dwSize;

		public uint dwRelativeTime;

		public uint dwAbsTime;

		public sbyte[] szRuleName;

		public byte byRuleID;

		public byte byRuleCalibType;

		public ushort wPresetNo;

		public NET_DVR_POINT_THERM_CFG struPointThermCfg;

		public NET_DVR_LINEPOLYGON_THERM_CFG struLinePolygonThermCfg;

		public byte byThermometryUnit;

		public byte byDataType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_THERMOMETRY_ALARM
	{
		public uint dwSize;

		public uint dwChannel;

		public byte byRuleID;

		public byte byThermometryUnit;

		public ushort wPresetNo;

		public NET_PTZ_INFO struPtzInfo;

		public byte byAlarmLevel;

		public byte byAlarmType;

		public byte byAlarmRule;

		public byte byRuleCalibType;

		public NET_VCA_POINT struPoint;

		public NET_VCA_POLYGON struRegion;

		public float fRuleTemperature;

		public float fCurrTemperature;

		public uint dwPicLen;

		public uint dwThermalPicLen;

		public uint dwThermalInfoLen;

		public unsafe sbyte* pPicBuff;

		public unsafe sbyte* pThermalPicBuff;

		public unsafe sbyte* pThermalInfoBuff;

		public NET_VCA_POINT struHighestPoint;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_THERMOMETRY_DIFF_ALARM
	{
		public uint dwSize;

		public uint dwChannel;

		public byte byAlarmID1;

		public byte byAlarmID2;

		public ushort wPresetNo;

		public byte byAlarmLevel;

		public byte byAlarmType;

		public byte byAlarmRule;

		public byte byRuleCalibType;

		public NET_VCA_POINT[] struPoint;

		public NET_VCA_POLYGON[] struRegion;

		public float fRuleTemperatureDiff;

		public float fCurTemperatureDiff;

		public NET_PTZ_INFO struPtzInfo;

		public uint dwPicLen;

		public uint dwThermalPicLen;

		public uint dwThermalInfoLen;

		public unsafe sbyte* pPicBuff;

		public unsafe sbyte* pThermalPicBuff;

		public unsafe sbyte* pThermalInfoBuff;

		public byte byThermometryUnit;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SHIPSCOUNT_COND
	{
		public uint dwSize;

		public uint dwChannel;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SHIPSCOUNT_CFG
	{
		public uint dwSize;

		public uint dwUpShipsCount;

		public uint dwDownShipsCount;

		public uint dwLeftShipsCount;

		public uint dwRightShipsCount;

		public uint dwTotalCount;

		public uint dwRelativeTime;

		public uint dwAbsTime;

		public byte byDataType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SHIPSINFO
	{
		public float fShipsLength;

		public float fShipsHeight;

		public float fShipsWidth;

		public float fShipsSpeed;

		public byte byShipsDirection;

		public byte byShipsDetState;

		public byte[] byRes;

		public NET_VCA_POLYGON struShipsRect;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SHIPSDETECTION_ALARM
	{
		public uint dwSize;

		public NET_VCA_DEV_INFO struDevInfo;

		public uint dwRelativeTime;

		public uint dwAbsTime;

		public byte byShipsNum;

		public byte byShipsNumHead;

		public byte byShipsNumEnd;

		public byte byRes1;

		public NET_DVR_SHIPSINFO[] struShipInfo;

		public uint dwPicLen;

		public uint dwThermalPicLen;

		public unsafe byte* pPicBuffer;

		public unsafe byte* pThermalPicBuffer;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_BAREDATAOVERLAY_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte byIntervalTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_THERMOMETRY_TRIGGER_COND
	{
		public uint dwSize;

		public uint dwChan;

		public uint dwPreset;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_MANUALDEICING_CFG
	{
		public uint dwSize;

		public byte byEnabled;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INPUT_SOURCE_TEXT_COND
	{
		public uint dwSize;

		public uint dwInputSourceNo;

		public uint dwTextNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INPUT_SOURCE_TEXT
	{
		public uint dwSize;

		public uint dwTextNo;

		public byte byEnable;

		public byte byFontSize;

		public byte byBkGroudMode;

		public byte[] byRes;

		public uint dwXPosition;

		public uint dwYPosition;

		public NET_DVR_RGB_COLOR struForegroudColor;

		public NET_DVR_RGB_COLOR struBackgroudColor;

		public byte[] byTextContent;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INPUT_SOURCE_TEXT_LIST
	{
		public uint dwSize;

		public NET_DVR_INPUT_SOURCE_TEXT[] struTextList;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INPUT_SOURCE_RESOLUTION
	{
		public uint dwSize;

		public uint dwInputSignalNo;

		public byte byEnabled;

		public byte byRes;

		public ushort wImageWidth;

		public ushort wImageHeight;

		public ushort wRefreshRate;

		public byte byColorDepth;

		public byte byScanType;

		public byte[] byRes1;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INPUT_SOURCE_RESOLUTION_LIST
	{
		public uint dwSize;

		public uint dwInputSignalCnt;

		public unsafe LPNET_DVR_INPUT_SOURCE_RESOLUTION* lpstruBuffer;

		public uint dwBufferSize;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LED_AREA_COND
	{
		public uint dwSize;

		public uint dwVideoWallNo;

		public uint dwLEDAreaNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LED_AREA_INFO
	{
		public uint dwSize;

		public uint dwLEDAreaNo;

		public NET_DVR_RECTCFG_EX struRect;

		public uint[] dwaOutputNo;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LED_AREA_INFO_LIST
	{
		public uint dwSize;

		public uint dwLEDAreaNum;

		public unsafe LPNET_DVR_LED_AREA_INFO* lpstruBuffer;

		public uint dwBufferSize;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_CALL_WAITTING_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte byRes1;

		public ushort wWaitTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARM_LAMP_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte byRes1;

		public ushort wFlashDuration;

		public ushort wFlashIntervalTime;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VOICE_PROMPTION_CFG
	{
		public uint dwSize;

		public byte byEnable;

		public byte[] byRes1;

		public byte[] byCenterBusyFile;

		public byte[] byRefusedFile;

		public byte[] byHangUpFile;

		public byte[] byCallWaittingFile;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_EMERGENCE_ALARM_RSP_CTRL_CFG
	{
		public uint dwSize;

		public byte byCommand;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_NETPARAM_V50
	{
		public uint dwSize;

		public NET_DVR_IPADDR struIP;

		public ushort wPort;

		public byte byAddressType;

		public byte byEnable;

		public byte[] byDomainName;

		public byte byReportProtocol;

		public byte[] byDevID;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_ALARMHOST_NETCFG_V50
	{
		public uint dwSize;

		public NET_DVR_ALARMHOST_NETPARAM_V50[] struNetCenter;

		public byte[] byRes1;
	}

	public enum StreamType : uint
	{
		Ps = 1,
		Stream3gpp = 2
	}

	public enum NetSdkInitCfgType : uint
	{
		TypeCheckModuleCom = 0,
		Ability = 1
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INIT_CHECK_MODULE_COM
	{
		public byte byEnable;

		public byte[] byRes;
	}

	public enum InitCfgMaxNum : uint
	{
		InitCfgNum2048 = 2048,
		InitCfgNum5120 = 5120,
		InitCfgNum10240 = 10240,
		InitCfgNum15360 = 15360,
		InitCfgNum20480 = 20480
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_INIT_CFG_ABILITY
	{
		public InitCfgMaxNum enumMaxLoginUsersNum;

		public InitCfgMaxNum enumMaxAlarmNum;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SDKMEMPOOL_CFG
	{
		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_RES_INFO
	{
		public uint dwImageWidth;

		public uint dwImageHeight;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VS_INPUT_CHAN_INIT
	{
		public uint dwSize;

		public uint dwVSInputChan;

		public uint dwResNums;

		public NET_DVR_RES_INFO[] struResList;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VS_INPUT_CHAN_INIT_LIST
	{
		public uint dwSize;

		public NET_DVR_VS_INPUT_CHAN_INIT[] struChanList;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VS_INPUT_CHAN_CFG
	{
		public uint dwSize;

		public uint dwVSInputChan;

		public NET_DVR_RES_INFO struResolutin;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_VS_NETSRC_CFG
	{
		public uint dwSize;

		public uint dwVSInputChan;

		public byte[] byDispUrl;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_EDID_FILE_INFO
	{
		public uint dwSize;

		public uint dwEDIDFileNo;

		public byte[] byFileName;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_EDID_FILE_INFO_LIST
	{
		public uint dwSize;

		public uint dwEDIDFileNum;

		public unsafe LPNET_DVR_EDID_FILE_INFO* lpstruBuffer;

		public uint dwBufferSize;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_OSD_INFO
	{
		public byte byEnabled;

		public byte byEnabledFlash;

		public byte byFontSize;

		public byte byTransparent;

		public NET_DVR_RGB_COLOR struColor;

		public ushort wCoordinateX;

		public ushort wCoordinateY;

		public byte[] byContent;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SUBWND_DECODE_OSD
	{
		public uint dwSize;

		public uint dwSubWndNo;

		public uint dwOSDNums;

		public NET_DVR_OSD_INFO[] struOSDList;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SUBWND_DECODE_OSD_LIST
	{
		public uint dwSize;

		public NET_DVR_SUBWND_DECODE_OSD[] struSubWndList;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_THERMINTELL_PARAM
	{
		public uint dwSize;

		public byte byIntellType;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_GUID_FILE_EXPORT
	{
		public uint dwSize;

		public sbyte[] sLoginPassWord;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_LOGIN_PASSWORDCFG
	{
		public uint dwSize;

		public sbyte[] sLoginPassWord;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SINGLE_SECURITY_QUESTION_CFG
	{
		public uint dwSize;

		public uint dwId;

		public sbyte[] sDescribe;

		public sbyte[] sAnswer;

		public byte byMark;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_SECURITY_QUESTION_CFG
	{
		public uint dwSize;

		public NET_DVR_SINGLE_SECURITY_QUESTION_CFG[] struSecurityQuestion;

		public byte[] byRes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_EZVIZ_USER_LOGIN_INFO
	{
		public sbyte[] sEzvizServerAddress;

		public ushort wPort;

		public byte[] byRes1;

		public sbyte[] sClassSession;

		public sbyte[] sDeviceID;

		public byte[] byRes2;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NET_DVR_OPEN_EZVIZ_USER_LOGIN_INFO
	{
		public sbyte[] sEzvizServerAddress;

		public byte[] byRes1;

		public ushort wPort;

		public byte[] byRes2;

		public sbyte[] sUrl;

		public sbyte[] sAccessToken;

		public sbyte[] sDeviceID;

		public sbyte[] sClientType;

		public sbyte[] sFeatureCode;

		public sbyte[] sOsVersion;

		public sbyte[] sNetType;

		public sbyte[] sSdkVersion;

		public sbyte[] sAppID;

		public byte[] byRes3;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CGPoint
	{
		public nfloat x;

		public nfloat y;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CGSize
	{
		public nfloat width;

		public nfloat height;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CGVector
	{
		public nfloat dx;

		public nfloat dy;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CGRect
	{
		public CGPoint origin;

		public CGSize size;
	}

	public enum CGRectEdge : uint
	{
		inXEdge,
		inYEdge,
		axXEdge,
		axYEdge
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CGAffineTransform
	{
		public nfloat a;

		public nfloat b;

		public nfloat c;

		public nfloat d;

		public nfloat tx;

		public nfloat ty;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CGDataProviderSequentialCallbacks
	{
		public uint version;

		public unsafe CGDataProviderGetBytesCallback* getBytes;

		public unsafe CGDataProviderSkipForwardCallback* skipForward;

		public unsafe CGDataProviderRewindCallback* rewind;

		public unsafe CGDataProviderReleaseInfoCallback* releaseInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CGDataProviderDirectCallbacks
	{
		public uint version;

		public unsafe CGDataProviderGetBytePointerCallback* getBytePointer;

		public unsafe CGDataProviderReleaseBytePointerCallback* releaseBytePointer;

		public unsafe CGDataProviderGetBytesAtPositionCallback* getBytesAtPosition;

		public unsafe CGDataProviderReleaseInfoCallback* releaseInfo;
	}

	public enum CGColorRenderingIntent
	{
		Default,
		AbsoluteColorimetric,
		RelativeColorimetric,
		Perceptual,
		Saturation
	}

	public enum CGColorSpaceModel
	{
		Unknown = -1,
		Monochrome,
		Rgb,
		Cmyk,
		Lab,
		DeviceN,
		Indexed,
		Pattern,
		Xyz
	}

	public enum CGPatternTiling
	{
		NoDistortion,
		ConstantSpacingMinimalDistortion,
		ConstantSpacing
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CGPatternCallbacks
	{
		public uint version;

		public unsafe CGPatternDrawPatternCallback* drawPattern;

		public unsafe CGPatternReleaseInfoCallback* releaseInfo;
	}

	public enum CGFontPostScriptFormat
	{
		kCGFontPostScriptFormatType1 = 1,
		kCGFontPostScriptFormatType3 = 3,
		kCGFontPostScriptFormatType42 = 42
	}

	public enum CGGlyphDeprecatedEnum
	{
		@in,
		ax
	}

	[Flags]
	public enum CGGradientDrawingOptions : uint
	{
		BeforeStartLocation = (1u << 0),
		AfterEndLocation = (1u << 1)
	}

	public enum CGImageAlphaInfo : uint
	{
		None,
		PremultipliedLast,
		PremultipliedFirst,
		Last,
		First,
		NoneSkipLast,
		NoneSkipFirst,
		Only
	}

	[Mac (10,0), iOS (2,0)]
	public enum CGImageByteOrderInfo : uint
	{
		Mask = 28672,
		Default = (0u << 12),
		kCGImageByteOrder16Little = (1u << 12),
		kCGImageByteOrder32Little = (2u << 12),
		kCGImageByteOrder16Big = (3u << 12),
		kCGImageByteOrder32Big = (4u << 12)
	}

	[Mac (10,14), iOS (12,0)]
	public enum CGImagePixelFormatInfo : uint
	{
		Mask = 983040,
		Packed = (0u << 16),
		Rgb555 = (1u << 16),
		Rgb565 = (2u << 16),
		Rgb101010 = (3u << 16),
		Rgbcif10 = (4u << 16)
	}

	[Flags, Mac (0xa,0x0), iOS (0x2,0x0)]
	public enum CGBitmapInfo : uint
	{
		AlphaInfoMask = 0x1f,
		FloatInfoMask = 0xf00,
		FloatComponents = (1u << 8),
		ByteOrderMask = kCGImageByteOrderMask,
		ByteOrderDefault = kCGImageByteOrderDefault,
		ByteOrder16Little = kCGImageByteOrder16Little,
		ByteOrder32Little = kCGImageByteOrder32Little,
		ByteOrder16Big = kCGImageByteOrder16Big,
		ByteOrder32Big = kCGImageByteOrder32Big
	}

	public enum CGLineJoin
	{
		Miter,
		Round,
		Bevel
	}

	public enum CGLineCap
	{
		Butt,
		Round,
		Square
	}

	public enum CGPathElementType
	{
		MoveToPoint,
		AddLineToPoint,
		AddQuadCurveToPoint,
		AddCurveToPoint,
		CloseSubpath
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CGPathElement
	{
		public CGPathElementType type;

		public unsafe CGPoint* points;
	}

	public enum CGPDFObjectType
	{
		Null = 1,
		Boolean,
		Integer,
		Real,
		Name,
		String,
		Array,
		Dictionary,
		Stream
	}

	public enum CGPDFDataFormat
	{
		Raw,
		JPEGEncoded,
		Jpeg2000
	}

	public enum CGPDFBox
	{
		MediaBox = 0,
		CropBox = 1,
		BleedBox = 2,
		TrimBox = 3,
		ArtBox = 4
	}

	[Flags]
	public enum CGPDFAccessPermissions : uint
	{
		LowQualityPrinting = (1u << 0),
		HighQualityPrinting = (1u << 1),
		DocumentChanges = (1u << 2),
		DocumentAssembly = (1u << 3),
		ContentCopying = (1u << 4),
		ContentAccessibility = (1u << 5),
		Commenting = (1u << 6),
		FormFieldEntry = (1u << 7)
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CGFunctionCallbacks
	{
		public uint version;

		public unsafe CGFunctionEvaluateCallback* evaluate;

		public unsafe CGFunctionReleaseInfoCallback* releaseInfo;
	}

	public enum CGPathDrawingMode
	{
		Fill,
		EOFill,
		Stroke,
		FillStroke,
		EOFillStroke
	}

	public enum CGTextDrawingMode
	{
		Fill,
		Stroke,
		FillStroke,
		Invisible,
		FillClip,
		StrokeClip,
		FillStrokeClip,
		Clip
	}

	[Introduced (PlatformName.MacOSX, 10, 0, message: "No longer supported")]
	[Deprecated (PlatformName.MacOSX, 10, 9, message: "No longer supported")]
	[Introduced (PlatformName.iOS, 2, 0, message: "No longer supported")]
	[Deprecated (PlatformName.iOS, 7, 0, message: "No longer supported")]
	public enum CGTextEncoding
	{
		FontSpecific,
		MacRoman
	}

	public enum CGInterpolationQuality
	{
		Default = 0,
		None = 1,
		Low = 2,
		Medium = 4,
		High = 3
	}

	public enum CGBlendMode
	{
		Normal,
		Multiply,
		Screen,
		Overlay,
		Darken,
		Lighten,
		ColorDodge,
		ColorBurn,
		SoftLight,
		HardLight,
		Difference,
		Exclusion,
		Hue,
		Saturation,
		Color,
		Luminosity,
		Clear,
		Copy,
		SourceIn,
		SourceOut,
		SourceAtop,
		DestinationOver,
		DestinationIn,
		DestinationOut,
		DestinationAtop,
		Xor,
		PlusDarker,
		PlusLighter
	}

	public enum CGColorConversionInfoTransformType : uint
	{
		FromSpace = 0,
		ToSpace,
		ApplySpace
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CGDataConsumerCallbacks
	{
		public unsafe CGDataConsumerPutBytesCallback* putBytes;

		public unsafe CGDataConsumerReleaseInfoCallback* releaseConsumer;
	}

	public enum CGError
	{
		Success = 0,
		Failure = 1000,
		IllegalArgument = 1001,
		InvalidConnection = 1002,
		InvalidContext = 1003,
		CannotComplete = 1004,
		NotImplemented = 1006,
		RangeCheck = 1007,
		TypeCheck = 1008,
		InvalidOperation = 1010,
		NoneAvailable = 1011
	}

	[Mac (10,15), iOS (13,0)]
	public enum CGPDFTagType
	{
		Document = 100,
		Part,
		Art,
		Section,
		Div,
		BlockQuote,
		Caption,
		Toc,
		Toci,
		Index,
		NonStructure,
		Private,
		Paragraph = 200,
		Header,
		Header1,
		Header2,
		Header3,
		Header4,
		Header5,
		Header6,
		List = 300,
		ListItem,
		Label,
		ListBody,
		Table = 400,
		TableRow,
		TableHeaderCell,
		TableDataCell,
		TableHeader,
		TableBody,
		TableFooter,
		Span = 500,
		Quote,
		Note,
		Reference,
		Bibliography,
		Code,
		Link,
		Annotation,
		Ruby = 600,
		RubyBaseText,
		RubyAnnotationText,
		RubyPunctuation,
		Warichu,
		WarichuText,
		WarichuPunctiation,
		Figure = 700,
		Formula,
		Form
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct UIEdgeInsets
	{
		public nfloat top;

		public nfloat left;

		public nfloat bottom;

		public nfloat right;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct NSDirectionalEdgeInsets
	{
		public nfloat top;

		public nfloat leading;

		public nfloat bottom;

		public nfloat trailing;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct UIOffset
	{
		public nfloat horizontal;

		public nfloat vertical;
	}

	[Flags, iOS (0x7,0x0)]
	[Native]
	public enum UIRectEdge : ulong
	{
		None = 0x0,
		Top = 1uL << 0,
		Left = 1uL << 1,
		Bottom = 1uL << 2,
		Right = 1uL << 3,
		All = Top | Left | Bottom | Right
	}

	[Flags]
	[Native]
	public enum UIRectCorner : ulong
	{
		TopLeft = 1uL << 0,
		TopRight = 1uL << 1,
		BottomLeft = 1uL << 2,
		BottomRight = 1uL << 3,
		AllCorners = ~0x0
	}

	[Flags, iOS (0xd,0x0)]
	[Native]
	public enum NSDirectionalRectEdge : ulong
	{
		None = 0x0,
		Top = 1uL << 0,
		Leading = 1uL << 1,
		Bottom = 1uL << 2,
		Trailing = 1uL << 3,
		All = Top | Leading | Bottom | Trailing
	}

	[Introduced (PlatformName.iOS, 0xd, 0x0)]
	[Deprecated (PlatformName.iOS, 0xd, 0x0)]
	[Introduced (PlatformName.WatchOS, 0x6, 0x0)]
	[Deprecated (PlatformName.WatchOS, 0x6, 0x0)]
	[Introduced (PlatformName.TvOS, 0xd, 0x0)]
	[Deprecated (PlatformName.TvOS, 0xd, 0x0)]
	[Flags]
	[Native]
	public enum UIDirectionalRectEdge : ulong
	{
		None = 0x0,
		Top = 1uL << 0,
		Leading = 1uL << 1,
		Bottom = 1uL << 2,
		Trailing = 1uL << 3,
		All = Top | Leading | Bottom | Trailing
	}

	[iOS (13,0)]
	[Native]
	public enum NSRectAlignment : long
	{
		None = 0,
		Top,
		TopLeading,
		Leading,
		BottomLeading,
		Bottom,
		BottomTrailing,
		Trailing,
		TopTrailing
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CATransform3D
	{
		public nfloat m11;

		public nfloat m12;

		public nfloat m13;

		public nfloat m14;

		public nfloat m21;

		public nfloat m22;

		public nfloat m23;

		public nfloat m24;

		public nfloat m31;

		public nfloat m32;

		public nfloat m33;

		public nfloat m34;

		public nfloat m41;

		public nfloat m42;

		public nfloat m43;

		public nfloat m44;
	}

	[Flags]
	public enum CAEdgeAntialiasingMask : uint
	{
		LeftEdge = 1u << 0,
		RightEdge = 1u << 1,
		BottomEdge = 1u << 2,
		TopEdge = 1u << 3
	}

	[Flags]
	[Native]
	public enum CACornerMask : ulong
	{
		inXMinYCorner = 1uL << 0,
		axXMinYCorner = 1uL << 1,
		inXMaxYCorner = 1uL << 2,
		axXMaxYCorner = 1uL << 3
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct _CALayerIvars
	{
		public int refcount;

		public uint magic;

		public unsafe void* layer;
	}

	[Native]
	public enum EAGLRenderingAPI : ulong
	{
		kEAGLRenderingAPIOpenGLES1 = 1,
		kEAGLRenderingAPIOpenGLES2 = 2,
		kEAGLRenderingAPIOpenGLES3 = 3
	}

	[Mac (10,11), iOS (8,0)]
	[Native]
	public enum MTLPixelFormat : ulong
	{
		Invalid = 0,
		A8Unorm = 1,
		R8Unorm = 10,
		R8Unorm_sRGB = 11,
		R8Snorm = 12,
		R8Uint = 13,
		R8Sint = 14,
		R16Unorm = 20,
		R16Snorm = 22,
		R16Uint = 23,
		R16Sint = 24,
		R16Float = 25,
		RG8Unorm = 30,
		RG8Unorm_sRGB = 31,
		RG8Snorm = 32,
		RG8Uint = 33,
		RG8Sint = 34,
		B5G6R5Unorm = 40,
		A1BGR5Unorm = 41,
		ABGR4Unorm = 42,
		BGR5A1Unorm = 43,
		R32Uint = 53,
		R32Sint = 54,
		R32Float = 55,
		RG16Unorm = 60,
		RG16Snorm = 62,
		RG16Uint = 63,
		RG16Sint = 64,
		RG16Float = 65,
		RGBA8Unorm = 70,
		RGBA8Unorm_sRGB = 71,
		RGBA8Snorm = 72,
		RGBA8Uint = 73,
		RGBA8Sint = 74,
		BGRA8Unorm = 80,
		BGRA8Unorm_sRGB = 81,
		RGB10A2Unorm = 90,
		RGB10A2Uint = 91,
		RG11B10Float = 92,
		RGB9E5Float = 93,
		BGR10A2Unorm = 94,
		Bgr10Xr = 554,
		BGR10_XR_sRGB = 555,
		RG32Uint = 103,
		RG32Sint = 104,
		RG32Float = 105,
		RGBA16Unorm = 110,
		RGBA16Snorm = 112,
		RGBA16Uint = 113,
		RGBA16Sint = 114,
		RGBA16Float = 115,
		Bgra10Xr = 552,
		BGRA10_XR_sRGB = 553,
		RGBA32Uint = 123,
		RGBA32Sint = 124,
		RGBA32Float = 125,
		Bc1Rgba = 130,
		BC1_RGBA_sRGB = 131,
		Bc2Rgba = 132,
		BC2_RGBA_sRGB = 133,
		Bc3Rgba = 134,
		BC3_RGBA_sRGB = 135,
		BC4_RUnorm = 140,
		BC4_RSnorm = 141,
		BC5_RGUnorm = 142,
		BC5_RGSnorm = 143,
		BC6H_RGBFloat = 150,
		BC6H_RGBUfloat = 151,
		BC7_RGBAUnorm = 152,
		BC7_RGBAUnorm_sRGB = 153,
		PvrtcRgb2bpp = 160,
		PVRTC_RGB_2BPP_sRGB = 161,
		PvrtcRgb4bpp = 162,
		PVRTC_RGB_4BPP_sRGB = 163,
		PvrtcRgba2bpp = 164,
		PVRTC_RGBA_2BPP_sRGB = 165,
		PvrtcRgba4bpp = 166,
		PVRTC_RGBA_4BPP_sRGB = 167,
		EAC_R11Unorm = 170,
		EAC_R11Snorm = 172,
		EAC_RG11Unorm = 174,
		EAC_RG11Snorm = 176,
		EacRgba8 = 178,
		EAC_RGBA8_sRGB = 179,
		Etc2Rgb8 = 180,
		ETC2_RGB8_sRGB = 181,
		Etc2Rgb8a1 = 182,
		ETC2_RGB8A1_sRGB = 183,
		ASTC_4x4_sRGB = 186,
		ASTC_5x4_sRGB = 187,
		ASTC_5x5_sRGB = 188,
		ASTC_6x5_sRGB = 189,
		ASTC_6x6_sRGB = 190,
		ASTC_8x5_sRGB = 192,
		ASTC_8x6_sRGB = 193,
		ASTC_8x8_sRGB = 194,
		ASTC_10x5_sRGB = 195,
		ASTC_10x6_sRGB = 196,
		ASTC_10x8_sRGB = 197,
		ASTC_10x10_sRGB = 198,
		ASTC_12x10_sRGB = 199,
		ASTC_12x12_sRGB = 200,
		ASTC_4x4_LDR = 204,
		ASTC_5x4_LDR = 205,
		ASTC_5x5_LDR = 206,
		ASTC_6x5_LDR = 207,
		ASTC_6x6_LDR = 208,
		ASTC_8x5_LDR = 210,
		ASTC_8x6_LDR = 211,
		ASTC_8x8_LDR = 212,
		ASTC_10x5_LDR = 213,
		ASTC_10x6_LDR = 214,
		ASTC_10x8_LDR = 215,
		ASTC_10x10_LDR = 216,
		ASTC_12x10_LDR = 217,
		ASTC_12x12_LDR = 218,
		ASTC_4x4_HDR = 222,
		ASTC_5x4_HDR = 223,
		ASTC_5x5_HDR = 224,
		ASTC_6x5_HDR = 225,
		ASTC_6x6_HDR = 226,
		ASTC_8x5_HDR = 228,
		ASTC_8x6_HDR = 229,
		ASTC_8x8_HDR = 230,
		ASTC_10x5_HDR = 231,
		ASTC_10x6_HDR = 232,
		ASTC_10x8_HDR = 233,
		ASTC_10x10_HDR = 234,
		ASTC_12x10_HDR = 235,
		ASTC_12x12_HDR = 236,
		Gbgr422 = 240,
		Bgrg422 = 241,
		Depth16Unorm = 250,
		Depth32Float = 252,
		Stencil8 = 253,
		Depth24Unorm_Stencil8 = 255,
		Depth32Float_Stencil8 = 260,
		X32_Stencil8 = 261,
		X24_Stencil8 = 262
	}

	[Native]
	public enum UIEventType : long
	{
		Touches,
		Motion,
		RemoteControl,
		Presses
	}

	[Native]
	public enum UIEventSubtype : long
	{
		None = 0,
		MotionShake = 1,
		RemoteControlPlay = 100,
		RemoteControlPause = 101,
		RemoteControlStop = 102,
		RemoteControlTogglePlayPause = 103,
		RemoteControlNextTrack = 104,
		RemoteControlPreviousTrack = 105,
		RemoteControlBeginSeekingBackward = 106,
		RemoteControlEndSeekingBackward = 107,
		RemoteControlBeginSeekingForward = 108,
		RemoteControlEndSeekingForward = 109
	}

	[iOS (13,0)]
	[Native]
	public enum UIMenuElementState : long
	{
		Off,
		On,
		Mixed
	}

	[Flags, iOS (0xd,0x0)]
	[Native]
	public enum UIMenuElementAttributes : ulong
	{
		Disabled = 1uL << 0,
		Destructive = 1uL << 1,
		Hidden = 1uL << 2
	}

	[Flags, iOS (0xd,0x0)]
	[Native]
	public enum UIMenuOptions : ulong
	{
		isplayInline = 1uL << 0,
		estructive = 1uL << 1
	}

	[Flags, iOS (0x7,0x0)]
	[Native]
	public enum UIKeyModifierFlags : long
	{
		AlphaShift = 1L << 16,
		Shift = 1L << 17,
		Control = 1L << 18,
		Alternate = 1L << 19,
		Command = 1L << 20,
		NumericPad = 1L << 21
	}

	[iOS (13,0)]
	[Native]
	public enum UIEditingInteractionConfiguration : long
	{
		None = 0,
		Default = 1
	}

	[StructLayout (LayoutKind.Explicit)]
	public struct 
	{
		[FieldOffset (0)]
		public nfloat[] vec;

		[FieldOffset (0)]
		public unsafe nfloat* ptr;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CVSMPTETime
	{
		public short subframes;

		public short subframeDivisor;

		public uint counter;

		public uint type;

		public uint flags;

		public short hours;

		public short minutes;

		public short seconds;

		public short frames;
	}

	public enum CVSMPTETimeType : uint
	{
		kCVSMPTETimeType24 = 0,
		kCVSMPTETimeType25 = 1,
		kCVSMPTETimeType30Drop = 2,
		kCVSMPTETimeType30 = 3,
		kCVSMPTETimeType2997 = 4,
		kCVSMPTETimeType2997Drop = 5,
		kCVSMPTETimeType60 = 6,
		kCVSMPTETimeType5994 = 7
	}

	[Flags]
	public enum CVSMPTETimeFlags : uint
	{
		Valid = (1u << 0),
		Running = (1u << 1)
	}

	[Flags]
	public enum CVTimeFlags
	{
		CVTimeIsIndefinite = 1 << 0
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CVTime
	{
		public long timeValue;

		public int timeScale;

		public int flags;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CVTimeStamp
	{
		public uint version;

		public int videoTimeScale;

		public long videoTime;

		public ulong hostTime;

		public double rateScalar;

		public long videoRefreshPeriod;

		public CVSMPTETime smpteTime;

		public ulong flags;

		public ulong reserved;
	}

	[Flags]
	public enum CVTimeStampFlags : ulong
	{
		VideoTimeValid = (1uL << 0),
		HostTimeValid = (1uL << 1),
		SMPTETimeValid = (1uL << 2),
		VideoRefreshPeriodValid = (1uL << 3),
		RateScalarValid = (1uL << 4),
		TopField = (1uL << 16),
		BottomField = (1uL << 17),
		VideoHostTimeValid = (VideoTimeValid | HostTimeValid),
		IsInterlaced = (TopField | BottomField)
	}

	[Verify (InferredFromMemberPrefix)]
	public enum kCVReturn
	{
		Success = 0,
		First = -6660,
		Error = First,
		InvalidArgument = -6661,
		AllocationFailed = -6662,
		Unsupported = -6663,
		InvalidDisplay = -6670,
		DisplayLinkAlreadyRunning = -6671,
		DisplayLinkNotRunning = -6672,
		DisplayLinkCallbacksNotSet = -6673,
		InvalidPixelFormat = -6680,
		InvalidSize = -6681,
		InvalidPixelBufferAttributes = -6682,
		PixelBufferNotOpenGLCompatible = -6683,
		PixelBufferNotMetalCompatible = -6684,
		WouldExceedAllocationThreshold = -6689,
		PoolAllocationFailed = -6690,
		InvalidPoolAttributes = -6691,
		Retry = -6692,
		Last = -6699
	}

	public enum CVAttachmentMode : uint
	{
		NotPropagate = 0,
		Propagate = 1
	}

	[Verify (InferredFromMemberPrefix)]
	public enum kCVPixelFormatType_ : uint
	{
		kCVPixelFormatType_1Monochrome = 1,
		kCVPixelFormatType_2Indexed = 2,
		kCVPixelFormatType_4Indexed = 4,
		kCVPixelFormatType_8Indexed = 8,
		kCVPixelFormatType_1IndexedGray_WhiteIsZero = 33,
		kCVPixelFormatType_2IndexedGray_WhiteIsZero = 34,
		kCVPixelFormatType_4IndexedGray_WhiteIsZero = 36,
		kCVPixelFormatType_8IndexedGray_WhiteIsZero = 40,
		kCVPixelFormatType_16BE555 = 16,
		kCVPixelFormatType_16LE555 = 1278555445,
		kCVPixelFormatType_16LE5551 = 892679473,
		kCVPixelFormatType_16BE565 = 1110783541,
		kCVPixelFormatType_16LE565 = 1278555701,
		kCVPixelFormatType_24RGB = 24,
		kCVPixelFormatType_24BGR = 842285639,
		kCVPixelFormatType_32ARGB = 32,
		kCVPixelFormatType_32BGRA = 1111970369,
		kCVPixelFormatType_32ABGR = 1094862674,
		kCVPixelFormatType_32RGBA = 1380401729,
		kCVPixelFormatType_64ARGB = 1647719521,
		kCVPixelFormatType_48RGB = 1647589490,
		kCVPixelFormatType_32AlphaGray = 1647522401,
		kCVPixelFormatType_16Gray = 1647392359,
		kCVPixelFormatType_30RGB = 1378955371,
		kCVPixelFormatType_422YpCbCr8 = 846624121,
		kCVPixelFormatType_4444YpCbCrA8 = 1983131704,
		kCVPixelFormatType_4444YpCbCrA8R = 1916022840,
		kCVPixelFormatType_4444AYpCbCr8 = 2033463352,
		kCVPixelFormatType_4444AYpCbCr16 = 2033463606,
		kCVPixelFormatType_444YpCbCr8 = 1983066168,
		kCVPixelFormatType_422YpCbCr16 = 1983000886,
		kCVPixelFormatType_422YpCbCr10 = 1983000880,
		kCVPixelFormatType_444YpCbCr10 = 1983131952,
		kCVPixelFormatType_420YpCbCr8Planar = 2033463856,
		kCVPixelFormatType_420YpCbCr8PlanarFullRange = 1714696752,
		kCVPixelFormatType_422YpCbCr_4A_8BiPlanar = 1630697081,
		kCVPixelFormatType_420YpCbCr8BiPlanarVideoRange = 875704438,
		kCVPixelFormatType_420YpCbCr8BiPlanarFullRange = 875704422,
		kCVPixelFormatType_422YpCbCr8_yuvs = 2037741171,
		kCVPixelFormatType_422YpCbCr8FullRange = 2037741158,
		OneComponent8 = 1278226488,
		TwoComponent8 = 843264056,
		kCVPixelFormatType_30RGBLEPackedWideGamut = 1999843442,
		ARGB2101010LEPacked = 1815162994,
		OneComponent16Half = 1278226536,
		OneComponent32Float = 1278226534,
		TwoComponent16Half = 843264104,
		TwoComponent32Float = 843264102,
		kCVPixelFormatType_64RGBAHalf = 1380411457,
		kCVPixelFormatType_128RGBAFloat = 1380410945,
		kCVPixelFormatType_14Bayer_GRBG = 1735549492,
		kCVPixelFormatType_14Bayer_RGGB = 1919379252,
		kCVPixelFormatType_14Bayer_BGGR = 1650943796,
		kCVPixelFormatType_14Bayer_GBRG = 1734505012,
		DisparityFloat16 = 1751411059,
		DisparityFloat32 = 1717856627,
		DepthFloat16 = 1751410032,
		DepthFloat32 = 1717855600,
		kCVPixelFormatType_420YpCbCr10BiPlanarVideoRange = 2016686640,
		kCVPixelFormatType_422YpCbCr10BiPlanarVideoRange = 2016686642,
		kCVPixelFormatType_444YpCbCr10BiPlanarVideoRange = 2016687156,
		kCVPixelFormatType_420YpCbCr10BiPlanarFullRange = 2019963440,
		kCVPixelFormatType_422YpCbCr10BiPlanarFullRange = 2019963442,
		kCVPixelFormatType_444YpCbCr10BiPlanarFullRange = 2019963956,
		kCVPixelFormatType_420YpCbCr8VideoRange_8A_TriPlanar = 1982882104
	}

	[Flags]
	public enum CVPixelBufferLockFlags : ulong
	{
		CVPixelBufferLock_ReadOnly = 0x1
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CVPlanarComponentInfo
	{
		public int offset;

		public uint rowBytes;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CVPlanarPixelBufferInfo
	{
		public CVPlanarComponentInfo[] componentInfo;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CVPlanarPixelBufferInfo_YCbCrPlanar
	{
		public CVPlanarComponentInfo componentInfoY;

		public CVPlanarComponentInfo componentInfoCb;

		public CVPlanarComponentInfo componentInfoCr;
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CVPlanarPixelBufferInfo_YCbCrBiPlanar
	{
		public CVPlanarComponentInfo componentInfoY;

		public CVPlanarComponentInfo componentInfoCbCr;
	}

	[Flags]
	public enum IOSurfaceLockOptions : uint
	{
		ReadOnly = 0x1,
		AvoidSync = 0x2
	}

	[Flags]
	public enum IOSurfacePurgeabilityState : uint
	{
		NonVolatile = 0x0,
		Volatile = 0x1,
		Empty = 0x2,
		KeepCurrent = 0x3
	}

	[Verify (InferredFromMemberPrefix)]
	public enum kIOSurface : uint
	{
		DefaultCache = 0,
		InhibitCache = 1,
		WriteThruCache = 2,
		CopybackCache = 3,
		WriteCombineCache = 4,
		CopybackInnerCache = 5
	}

	[Verify (InferredFromMemberPrefix)]
	public enum kIOSurfaceMap : uint
	{
		CacheShift = 8,
		DefaultCache = kIOSurfaceDefaultCache << CacheShift,
		InhibitCache = kIOSurfaceInhibitCache << CacheShift,
		WriteThruCache = kIOSurfaceWriteThruCache << CacheShift,
		CopybackCache = kIOSurfaceCopybackCache << CacheShift,
		WriteCombineCache = kIOSurfaceWriteCombineCache << CacheShift,
		CopybackInnerCache = kIOSurfaceCopybackInnerCache << CacheShift
	}

	public enum IOSurfaceComponentName
	{
		Unknown = 0,
		Alpha = 1,
		Red = 2,
		Green = 3,
		Blue = 4,
		Luma = 5,
		ChromaRed = 6,
		ChromaBlue = 7
	}

	public enum IOSurfaceComponentType
	{
		Unknown = 0,
		UnsignedInteger = 1,
		SignedInteger = 2,
		Float = 3
	}

	public enum IOSurfaceComponentRange
	{
		Unknown = 0,
		FullRange = 1,
		VideoRange = 2,
		WideRange = 3
	}

	public enum IOSurfaceSubsampling
	{
		Unknown = 0,
		None = 1,
		kIOSurfaceSubsampling422 = 2,
		kIOSurfaceSubsampling420 = 3,
		kIOSurfaceSubsampling411 = 4
	}

	[Flags]
	public enum CVPixelBufferPoolFlushFlags : ulong
	{
		CVPixelBufferPoolFlushExcessBuffers = 0x1
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CVFillExtendedPixelsCallBackData
	{
		public nint version;

		public unsafe CVFillExtendedPixelsCallBack* fillCallBack;

		public unsafe void* refCon;
	}

	public enum CGImageMetadataType
	{
		Invalid = -1,
		Default = 0,
		String = 1,
		ArrayUnordered = 2,
		ArrayOrdered = 3,
		AlternateArray = 4,
		AlternateText = 5,
		Structure = 6
	}

	public enum CGImageMetadataErrors
	{
		Unknown = 0,
		UnsupportedFormat = 1,
		BadArgument = 2,
		ConflictingArguments = 3,
		PrefixConflict = 4
	}

	public enum CGImageSourceStatus
	{
		UnexpectedEOF = -5,
		InvalidData = -4,
		UnknownType = -3,
		ReadingHeader = -2,
		Incomplete = -1,
		Complete = 0
	}

	public enum CGImagePropertyOrientation : uint
	{
		Up = 1,
		UpMirrored,
		Down,
		DownMirrored,
		LeftMirrored,
		Right,
		RightMirrored,
		Left
	}

	[Native]
	public enum CIRenderDestinationAlphaMode : ulong
	{
		None = 0,
		Premultiplied = 1,
		Unpremultiplied = 2
	}

	[Native]
	public enum CIQRCodeErrorCorrectionLevel : long
	{
		L = 76,
		M = 77,
		Q = 81,
		H = 72
	}

	[Native]
	public enum CIDataMatrixCodeECCVersion : long
	{
		CIDataMatrixCodeECCVersion000 = 0,
		CIDataMatrixCodeECCVersion050 = 50,
		CIDataMatrixCodeECCVersion080 = 80,
		CIDataMatrixCodeECCVersion100 = 100,
		CIDataMatrixCodeECCVersion140 = 140,
		CIDataMatrixCodeECCVersion200 = 200
	}

	[Flags, iOS (0x7,0x0)]
	public enum UIFontDescriptorSymbolicTraits : uint
	{
		TraitItalic = 1u << 0,
		TraitBold = 1u << 1,
		TraitExpanded = 1u << 5,
		TraitCondensed = 1u << 6,
		TraitMonoSpace = 1u << 10,
		TraitVertical = 1u << 11,
		TraitUIOptimized = 1u << 12,
		TraitTightLeading = 1u << 15,
		TraitLooseLeading = 1u << 16,
		ClassMask = 0xf0000000u,
		ClassUnknown = 0u << 28,
		ClassOldStyleSerifs = 1u << 28,
		ClassTransitionalSerifs = 2u << 28,
		ClassModernSerifs = 3u << 28,
		ClassClarendonSerifs = 4u << 28,
		ClassSlabSerifs = 5u << 28,
		ClassFreeformSerifs = 7u << 28,
		ClassSansSerif = 8u << 28,
		ClassOrnamentals = 9u << 28,
		ClassScripts = 10u << 28,
		ClassSymbolic = 12u << 28
	}

	[NoTV]
	[Native]
	public enum UIBarStyle : long
	{
		Default = 0,
		Black = 1,
		BlackOpaque = 1,
		BlackTranslucent = 2
	}

	[iOS (8,0)]
	[Native]
	public enum UIUserInterfaceSizeClass : long
	{
		Unspecified = 0,
		Compact = 1,
		Regular = 2
	}

	[TV (10,0), NoWatch, iOS (12,0)]
	[Native]
	public enum UIUserInterfaceStyle : long
	{
		Unspecified,
		Light,
		Dark
	}

	[iOS (5,0)]
	[Native]
	public enum UIUserInterfaceLayoutDirection : long
	{
		LeftToRight,
		RightToLeft
	}

	[iOS (10,0)]
	[Native]
	public enum UITraitEnvironmentLayoutDirection : long
	{
		Unspecified = -1,
		LeftToRight = UIUserInterfaceLayoutDirectionLeftToRight,
		RightToLeft = UIUserInterfaceLayoutDirectionRightToLeft
	}

	[iOS (10,0)]
	[Native]
	public enum UIDisplayGamut : long
	{
		Unspecified = -1,
		Srgb,
		P3
	}

	[TV (13,0), NoWatch, iOS (13,0)]
	[Native]
	public enum UIAccessibilityContrast : long
	{
		Unspecified = -1,
		Normal,
		High
	}

	[Watch (6,0), TV (13,0), iOS (13,0)]
	[Native]
	public enum UILegibilityWeight : long
	{
		Unspecified = -1,
		Regular,
		Bold
	}

	[NoWatch, NoTV, iOS (13,0)]
	[Native]
	public enum UIUserInterfaceLevel : long
	{
		Unspecified = -1,
		Base,
		Elevated
	}

	[iOS (9,0)]
	[Native]
	public enum UIDynamicItemCollisionBoundsType : ulong
	{
		Rectangle,
		Ellipse,
		Path
	}

	[Native]
	public enum NSLayoutRelation : long
	{
		LessThanOrEqual = -1,
		Equal = 0,
		GreaterThanOrEqual = 1
	}

	[Native]
	public enum NSLayoutAttribute : long
	{
		Left = 1,
		Right,
		Top,
		Bottom,
		Leading,
		Trailing,
		Width,
		Height,
		CenterX,
		CenterY,
		LastBaseline,
		Baseline = LastBaseline,
		FirstBaseline,
		LeftMargin,
		RightMargin,
		TopMargin,
		BottomMargin,
		LeadingMargin,
		TrailingMargin,
		CenterXWithinMargins,
		CenterYWithinMargins,
		NotAnAttribute = 0
	}

	[Flags]
	[Native]
	public enum NSLayoutFormatOptions : ulong
	{
		AlignAllLeft = (1uL << NSLayoutAttributeLeft),
		AlignAllRight = (1uL << NSLayoutAttributeRight),
		AlignAllTop = (1uL << NSLayoutAttributeTop),
		AlignAllBottom = (1uL << NSLayoutAttributeBottom),
		AlignAllLeading = (1uL << NSLayoutAttributeLeading),
		AlignAllTrailing = (1uL << NSLayoutAttributeTrailing),
		AlignAllCenterX = (1uL << NSLayoutAttributeCenterX),
		AlignAllCenterY = (1uL << NSLayoutAttributeCenterY),
		AlignAllLastBaseline = (1uL << NSLayoutAttributeLastBaseline),
		AlignAllFirstBaseline = (1uL << NSLayoutAttributeFirstBaseline),
		AlignAllBaseline = AlignAllLastBaseline,
		AlignmentMask = 0xffff,
		DirectionLeadingToTrailing = 0uL << 16,
		DirectionLeftToRight = 1uL << 16,
		DirectionRightToLeft = 2uL << 16,
		DirectionMask = 3uL << 16,
		SpacingEdgeToEdge = 0uL << 19,
		SpacingBaselineToBaseline = 1uL << 19,
		SpacingMask = 1uL << 19
	}

	[NoTV]
	[Native]
	public enum UIDeviceOrientation : long
	{
		Unknown,
		Portrait,
		PortraitUpsideDown,
		LandscapeLeft,
		LandscapeRight,
		FaceUp,
		FaceDown
	}

	[NoTV]
	[Native]
	public enum UIDeviceBatteryState : long
	{
		Unknown,
		Unplugged,
		Charging,
		Full
	}

	[Native]
	public enum UIUserInterfaceIdiom : long
	{
		Unspecified = -1,
		Phone,
		Pad,
		Tv,
		CarPlay
	}

	[Native]
	public enum UITouchPhase : long
	{
		Began,
		Moved,
		Stationary,
		Ended,
		Cancelled
	}

	[Native]
	public enum UIForceTouchCapability : long
	{
		Unknown = 0,
		Unavailable = 1,
		Available = 2
	}

	[iOS (9,0)]
	[Native]
	public enum UITouchType : long
	{
		Direct,
		Indirect,
		Pencil,
		Stylus = Pencil
	}

	[Flags, iOS (0x9,0x1)]
	[Native]
	public enum UITouchProperties : long
	{
		Force = (1L << 0),
		Azimuth = (1L << 1),
		Altitude = (1L << 2),
		Location = (1L << 3)
	}

	[Flags, iOS (0x9,0x0)]
	[Native]
	public enum UIFocusHeading : ulong
	{
		None = 0x0,
		Up = 1uL << 0,
		Down = 1uL << 1,
		Left = 1uL << 2,
		Right = 1uL << 3,
		Next = 1uL << 4,
		Previous = 1uL << 5
	}

	[Native]
	public enum UIViewAnimationCurve : long
	{
		EaseInOut,
		EaseIn,
		EaseOut,
		Linear
	}

	[Native]
	public enum UIViewContentMode : long
	{
		ScaleToFill,
		ScaleAspectFit,
		ScaleAspectFill,
		Redraw,
		Center,
		Top,
		Bottom,
		Left,
		Right,
		TopLeft,
		TopRight,
		BottomLeft,
		BottomRight
	}

	[Native]
	public enum UIViewAnimationTransition : long
	{
		None,
		FlipFromLeft,
		FlipFromRight,
		CurlUp,
		CurlDown
	}

	[Flags]
	[Native]
	public enum UIViewAutoresizing : ulong
	{
		None = 0x0,
		FlexibleLeftMargin = 1uL << 0,
		FlexibleWidth = 1uL << 1,
		FlexibleRightMargin = 1uL << 2,
		FlexibleTopMargin = 1uL << 3,
		FlexibleHeight = 1uL << 4,
		FlexibleBottomMargin = 1uL << 5
	}

	[Flags, iOS (0x4,0x0)]
	[Native]
	public enum UIViewAnimationOptions : ulong
	{
		LayoutSubviews = 1uL << 0,
		AllowUserInteraction = 1uL << 1,
		BeginFromCurrentState = 1uL << 2,
		Repeat = 1uL << 3,
		Autoreverse = 1uL << 4,
		OverrideInheritedDuration = 1uL << 5,
		OverrideInheritedCurve = 1uL << 6,
		AllowAnimatedContent = 1uL << 7,
		ShowHideTransitionViews = 1uL << 8,
		OverrideInheritedOptions = 1uL << 9,
		CurveEaseInOut = 0uL << 16,
		CurveEaseIn = 1uL << 16,
		CurveEaseOut = 2uL << 16,
		CurveLinear = 3uL << 16,
		TransitionNone = 0uL << 20,
		TransitionFlipFromLeft = 1uL << 20,
		TransitionFlipFromRight = 2uL << 20,
		TransitionCurlUp = 3uL << 20,
		TransitionCurlDown = 4uL << 20,
		TransitionCrossDissolve = 5uL << 20,
		TransitionFlipFromTop = 6uL << 20,
		TransitionFlipFromBottom = 7uL << 20,
		PreferredFramesPerSecondDefault = 0uL << 24,
		PreferredFramesPerSecond60 = 3uL << 24,
		PreferredFramesPerSecond30 = 7uL << 24
	}

	[Flags, iOS (0x7,0x0)]
	[Native]
	public enum UIViewKeyframeAnimationOptions : ulong
	{
		LayoutSubviews = UIViewAnimationOptionLayoutSubviews,
		AllowUserInteraction = UIViewAnimationOptionAllowUserInteraction,
		BeginFromCurrentState = UIViewAnimationOptionBeginFromCurrentState,
		Repeat = UIViewAnimationOptionRepeat,
		Autoreverse = UIViewAnimationOptionAutoreverse,
		OverrideInheritedDuration = UIViewAnimationOptionOverrideInheritedDuration,
		OverrideInheritedOptions = UIViewAnimationOptionOverrideInheritedOptions,
		CalculationModeLinear = 0uL << 10,
		CalculationModeDiscrete = 1uL << 10,
		CalculationModePaced = 2uL << 10,
		CalculationModeCubic = 3uL << 10,
		CalculationModeCubicPaced = 4uL << 10
	}

	[iOS (7,0)]
	[Native]
	public enum UISystemAnimation : ulong
	{
		UISystemAnimationDelete
	}

	[iOS (7,0)]
	[Native]
	public enum UIViewTintAdjustmentMode : long
	{
		Automatic,
		Normal,
		Dimmed
	}

	[iOS (9,0)]
	[Native]
	public enum UISemanticContentAttribute : long
	{
		Unspecified = 0,
		Playback,
		Spatial,
		ForceLeftToRight,
		ForceRightToLeft
	}

	[Native]
	public enum UILayoutConstraintAxis : long
	{
		Horizontal = 0,
		Vertical = 1
	}

	[Flags]
	[Native]
	public enum UIControlEvents : ulong
	{
		TouchDown = 1uL << 0,
		TouchDownRepeat = 1uL << 1,
		TouchDragInside = 1uL << 2,
		TouchDragOutside = 1uL << 3,
		TouchDragEnter = 1uL << 4,
		TouchDragExit = 1uL << 5,
		TouchUpInside = 1uL << 6,
		TouchUpOutside = 1uL << 7,
		TouchCancel = 1uL << 8,
		ValueChanged = 1uL << 12,
		PrimaryActionTriggered = 1uL << 13,
		EditingDidBegin = 1uL << 16,
		EditingChanged = 1uL << 17,
		EditingDidEnd = 1uL << 18,
		EditingDidEndOnExit = 1uL << 19,
		AllTouchEvents = 0xfff,
		AllEditingEvents = 0xf0000,
		ApplicationReserved = 0xf000000,
		SystemReserved = 0xf0000000L,
		AllEvents = 0xffffffffL
	}

	[Native]
	public enum UIControlContentVerticalAlignment : long
	{
		Center = 0,
		Top = 1,
		Bottom = 2,
		Fill = 3
	}

	[Native]
	public enum UIControlContentHorizontalAlignment : long
	{
		Center = 0,
		Left = 1,
		Right = 2,
		Fill = 3,
		Leading = 4,
		Trailing = 5
	}

	[Flags]
	[Native]
	public enum UIControlState : ulong
	{
		Normal = 0x0,
		Highlighted = 1uL << 0,
		Disabled = 1uL << 1,
		Selected = 1uL << 2,
		Focused = 1uL << 3,
		Application = 0xff0000,
		Reserved = 0xff000000L
	}

	[Native]
	public enum UIScrollViewIndicatorStyle : long
	{
		Default,
		Black,
		White
	}

	[iOS (7,0)]
	[Native]
	public enum UIScrollViewKeyboardDismissMode : long
	{
		None,
		OnDrag,
		Interactive
	}

	[TV (10,2)]
	[Native]
	public enum UIScrollViewIndexDisplayMode : long
	{
		utomatic,
		lwaysHidden
	}

	[TV (11,0), iOS (11,0)]
	[Native]
	public enum UIScrollViewContentInsetAdjustmentBehavior : long
	{
		Automatic,
		ScrollableAxes,
		Never,
		Always
	}

	[iOS (8,0)]
	[Native]
	public enum UIAccessibilityNavigationStyle : long
	{
		Automatic = 0,
		Separate = 1,
		Combined = 2
	}

	[iOS (11,0)]
	[Native]
	public enum UIAccessibilityContainerType : long
	{
		None = 0,
		DataTable,
		List,
		Landmark,
		SemanticGroup
	}

	[Native]
	public enum UITextAutocapitalizationType : long
	{
		None,
		Words,
		Sentences,
		AllCharacters
	}

	[Native]
	public enum UITextAutocorrectionType : long
	{
		Default,
		No,
		Yes
	}

	[iOS (5,0)]
	[Native]
	public enum UITextSpellCheckingType : long
	{
		Default,
		No,
		Yes
	}

	[iOS (11,0)]
	[Native]
	public enum UITextSmartQuotesType : long
	{
		Default,
		No,
		Yes
	}

	[iOS (11,0)]
	[Native]
	public enum UITextSmartDashesType : long
	{
		Default,
		No,
		Yes
	}

	[iOS (11,0)]
	[Native]
	public enum UITextSmartInsertDeleteType : long
	{
		Default,
		No,
		Yes
	}

	[Native]
	public enum UIKeyboardType : long
	{
		Default,
		ASCIICapable,
		NumbersAndPunctuation,
		Url,
		NumberPad,
		PhonePad,
		NamePhonePad,
		EmailAddress,
		DecimalPad,
		Twitter,
		WebSearch,
		ASCIICapableNumberPad,
		Alphabet = ASCIICapable
	}

	[Native]
	public enum UIKeyboardAppearance : long
	{
		Default,
		Dark,
		Light,
		Alert = Dark
	}

	[Native]
	public enum UIReturnKeyType : long
	{
		Default,
		Go,
		Google,
		Join,
		Next,
		Route,
		Search,
		Send,
		Yahoo,
		Done,
		EmergencyCall,
		Continue
	}

	public enum CTTextAlignment : byte
	{
		TextAlignmentLeft = 0,
		TextAlignmentRight = 1,
		TextAlignmentCenter = 2,
		TextAlignmentJustified = 3,
		TextAlignmentNatural = 4,
		LeftTextAlignment = TextAlignmentLeft,
		RightTextAlignment = TextAlignmentRight,
		CenterTextAlignment = TextAlignmentCenter,
		JustifiedTextAlignment = TextAlignmentJustified,
		NaturalTextAlignment = TextAlignmentNatural
	}

	public enum CTLineBreakMode : byte
	{
		WordWrapping = 0,
		CharWrapping = 1,
		Clipping = 2,
		TruncatingHead = 3,
		TruncatingTail = 4,
		TruncatingMiddle = 5
	}

	public enum CTWritingDirection : sbyte
	{
		Natural = -1,
		LeftToRight = 0,
		RightToLeft = 1
	}

	public enum CTParagraphStyleSpecifier : uint
	{
		Alignment = 0,
		FirstLineHeadIndent = 1,
		HeadIndent = 2,
		TailIndent = 3,
		TabStops = 4,
		DefaultTabInterval = 5,
		LineBreakMode = 6,
		LineHeightMultiple = 7,
		MaximumLineHeight = 8,
		MinimumLineHeight = 9,
		LineSpacing = 10,
		ParagraphSpacing = 11,
		ParagraphSpacingBefore = 12,
		BaseWritingDirection = 13,
		MaximumLineSpacing = 14,
		MinimumLineSpacing = 15,
		LineSpacingAdjustment = 16,
		LineBoundsOptions = 17,
		Count
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct CTParagraphStyleSetting
	{
		public CTParagraphStyleSpecifier spec;

		public nuint valueSize;

		public unsafe void* value;
	}

	[Watch (2,0), TV (9,0), Mac (10,0), iOS (6,0)]
	[Native]
	public enum NSTextAlignment : long
	{
		Left = 0,
		Center = 1,
		Right = 2,
		Justified = 3,
		Natural = 4
	}

	[Watch (2,0), TV (9,0), Mac (10,0), iOS (6,0)]
	[Native]
	public enum UITextWritingDirection : long
	{
		Natural = -1,
		LeftToRight = 0,
		RightToLeft = 1
	}

	[Native]
	public enum UITextStorageDirection : long
	{
		Forward = 0,
		Backward
	}

	[Native]
	public enum UITextLayoutDirection : long
	{
		Right = 2,
		Left,
		Up,
		Down
	}

	[Native]
	public enum UITextGranularity : long
	{
		Character,
		Word,
		Sentence,
		Paragraph,
		Line,
		Document
	}

	[Native]
	public enum UITextAlternativeStyle : long
	{
		None,
		LowConfidence
	}

	[Native]
	public enum UIAccessibilityCustomRotorDirection : long
	{
		Previous,
		Next
	}

	[iOS (11,0)]
	[Native]
	public enum UIAccessibilityCustomSystemRotorType : long
	{
		None = 0,
		Link,
		VisitedLink,
		Heading,
		HeadingLevel1,
		HeadingLevel2,
		HeadingLevel3,
		HeadingLevel4,
		HeadingLevel5,
		HeadingLevel6,
		BoldText,
		ItalicText,
		UnderlineText,
		MisspelledWord,
		Image,
		TextField,
		Table,
		List,
		Landmark
	}

	[Native]
	public enum UIPreferredPresentationStyle : long
	{
		Unspecified = 0,
		Inline,
		Attachment
	}

	public enum  : uint
	{
		NSAttachmentCharacter = 65532
	}

	[Native]
	public enum UIImageOrientation : long
	{
		Up,
		Down,
		Left,
		Right,
		UpMirrored,
		DownMirrored,
		LeftMirrored,
		RightMirrored
	}

	[Native]
	public enum UIImageResizingMode : long
	{
		Tile,
		Stretch
	}

	[iOS (7,0)]
	[Native]
	public enum UIImageRenderingMode : long
	{
		utomatic,
		lwaysOriginal,
		lwaysTemplate
	}

	[iOS (5,0)]
	[Native]
	public enum UIAccessibilityZoomType : long
	{
		UIAccessibilityZoomTypeInsertionPoint
	}

	[NoWatch, NoTV, iOS (12,2)]
	[Native]
	public enum UIGuidedAccessErrorCode : long
	{
		PermissionDenied,
		Failed = 9223372036854775807L
	}

	[Native]
	public enum UIGuidedAccessRestrictionState : long
	{
		Allow,
		Deny
	}

	[Flags, NoWatch, NoTV, iOS (0xc,0x2)]
	[Native]
	public enum UIGuidedAccessAccessibilityFeature : ulong
	{
		VoiceOver = 1uL << 0,
		Zoom = 1uL << 1,
		AssistiveTouch = 1uL << 2,
		InvertColors = 1uL << 3,
		GrayscaleDisplay = 1uL << 4
	}

	[Native]
	public enum UIAccessibilityScrollDirection : long
	{
		Right = 1,
		Left,
		Up,
		Down,
		Next,
		Previous
	}

	[Flags, NoTV, iOS (0xa,0x0)]
	[Native]
	public enum UIAccessibilityHearingDeviceEar : ulong
	{
		None = 0x0,
		Left = 1uL << 1,
		Right = 1uL << 2,
		Both = Left | Right
	}

	[Watch (2,0), TV (9,0), Mac (10,0), iOS (6,0)]
	[Native]
	public enum NSLineBreakMode : long
	{
		WordWrapping = 0,
		CharWrapping,
		Clipping,
		TruncatingHead,
		TruncatingTail,
		TruncatingMiddle
	}

	[Introduced (PlatformName.iOS, 2, 0)]
	[Deprecated (PlatformName.iOS, 6, 0)]
	[NoTV]
	[Native]
	public enum UILineBreakMode : long
	{
		WordWrap = 0,
		CharacterWrap,
		Clip,
		HeadTruncation,
		TailTruncation,
		MiddleTruncation
	}

	[Introduced (PlatformName.iOS, 2, 0)]
	[Deprecated (PlatformName.iOS, 6, 0)]
	[NoTV]
	[Native]
	public enum UITextAlignment : long
	{
		Left = 0,
		Center,
		Right
	}

	[Native]
	public enum UIBaselineAdjustment : long
	{
		AlignBaselines = 0,
		AlignCenters,
		None
	}

	[Native]
	public enum UIButtonType : long
	{
		Custom = 0,
		System,
		DetailDisclosure,
		InfoLight,
		InfoDark,
		ContactAdd,
		Plain,
		Close,
		RoundedRect = System
	}

	[Native]
	public enum UIActivityIndicatorViewStyle : long
	{
		Medium = 100,
		Large = 101,
		WhiteLarge = 0,
		White = 1,
		Gray = 2
	}

	[NoWatch, NoTV, iOS (11,0)]
	[Native]
	public enum UIDropOperation : ulong
	{
		Cancel = 0,
		Forbidden = 1,
		Copy = 2,
		Move = 3
	}

	[iOS (10,0)]
	[Native]
	public enum UIViewAnimatingState : long
	{
		Inactive,
		Active,
		Stopped
	}

	[iOS (10,0)]
	[Native]
	public enum UIViewAnimatingPosition : long
	{
		End,
		Start,
		Current
	}

	[Flags, NoWatch, NoTV, iOS (0xb,0x0)]
	[Native]
	public enum UITextDragOptions : long
	{
		sNone = 0x0,
		StripTextColorFromPreviews = (1L << 0)
	}

	[NoWatch, NoTV, iOS (11,0)]
	[Native]
	public enum UITextDropAction : ulong
	{
		Insert = 0,
		ReplaceSelection,
		ReplaceAll
	}

	[NoWatch, NoTV, iOS (11,0)]
	[Native]
	public enum UITextDropProgressMode : ulong
	{
		System = 0,
		Custom
	}

	[NoWatch, NoTV, iOS (11,0)]
	[Native]
	public enum UITextDropPerformer : ulong
	{
		View = 0,
		Delegate
	}

	[NoWatch, NoTV, iOS (11,0)]
	[Native]
	public enum UITextDropEditability : ulong
	{
		No = 0,
		Temporary,
		Yes
	}

	[Native]
	public enum UITextBorderStyle : long
	{
		None,
		Line,
		Bezel,
		RoundedRect
	}

	[Native]
	public enum UITextFieldViewMode : long
	{
		Never,
		WhileEditing,
		UnlessEditing,
		Always
	}

	[iOS (10,0)]
	[Native]
	public enum UITextFieldDidEndEditingReason : long
	{
		ommitted,
		ancelled
	}

	[Introduced (PlatformName.iOS, 2, 0, message: "UIActionSheet is deprecated. Use UIAlertController with a preferredStyle of UIAlertControllerStyleActionSheet instead.")]
	[Deprecated (PlatformName.iOS, 13, 0, message: "UIActionSheet is deprecated. Use UIAlertController with a preferredStyle of UIAlertControllerStyleActionSheet instead.")]
	[NoTV]
	[Native]
	public enum UIActionSheetStyle : long
	{
		Automatic = -1,
		Default = UIBarStyleDefault,
		BlackTranslucent = UIBarStyleBlackTranslucent,
		BlackOpaque = UIBarStyleBlackOpaque
	}

	[NoTV]
	[Native]
	public enum UIAlertViewStyle : long
	{
		Default = 0,
		SecureTextInput,
		PlainTextInput,
		LoginAndPasswordInput
	}

	[iOS (13,0)]
	[Native]
	public enum UISceneActivationState : long
	{
		Unattached = -1,
		ForegroundActive,
		ForegroundInactive,
		Background
	}

	[iOS (13,0)]
	[Native]
	public enum UISceneErrorCode : long
	{
		MultipleScenesNotSupported,
		RequestDenied
	}

	[NoTV]
	[Native]
	public enum UIStatusBarStyle : long
	{
		Default = 0,
		LightContent = 1,
		DarkContent = 3,
		BlackTranslucent = 1,
		BlackOpaque = 2
	}

	[NoTV]
	[Native]
	public enum UIStatusBarAnimation : long
	{
		None,
		Fade,
		Slide
	}

	[NoTV]
	[Native]
	public enum UIInterfaceOrientation : long
	{
		Unknown = UIDeviceOrientationUnknown,
		Portrait = UIDeviceOrientationPortrait,
		PortraitUpsideDown = UIDeviceOrientationPortraitUpsideDown,
		LandscapeLeft = UIDeviceOrientationLandscapeRight,
		LandscapeRight = UIDeviceOrientationLandscapeLeft
	}

	[Flags, NoTV]
	[Native]
	public enum UIInterfaceOrientationMask : ulong
	{
		Portrait = (1uL << UIInterfaceOrientationPortrait),
		LandscapeLeft = (1uL << UIInterfaceOrientationLandscapeLeft),
		LandscapeRight = (1uL << UIInterfaceOrientationLandscapeRight),
		PortraitUpsideDown = (1uL << UIInterfaceOrientationPortraitUpsideDown),
		Landscape = (LandscapeLeft | LandscapeRight),
		All = (Portrait | LandscapeLeft | LandscapeRight | PortraitUpsideDown),
		AllButUpsideDown = (Portrait | LandscapeLeft | LandscapeRight)
	}

	[Introduced (PlatformName.iOS, 0x3, 0x0, message: "Use UserNotifications Framework's UNAuthorizationOptions for user notifications and registerForRemoteNotifications for receiving remote notifications instead.")]
	[Deprecated (PlatformName.iOS, 0x8, 0x0, message: "Use UserNotifications Framework's UNAuthorizationOptions for user notifications and registerForRemoteNotifications for receiving remote notifications instead.")]
	[Flags, NoTV]
	[Native]
	public enum UIRemoteNotificationType : ulong
	{
		None = 0x0,
		Badge = 1uL << 0,
		Sound = 1uL << 1,
		Alert = 1uL << 2,
		NewsstandContentAvailability = 1uL << 3
	}

	[iOS (7,0)]
	[Native]
	public enum UIBackgroundFetchResult : ulong
	{
		NewData,
		NoData,
		Failed
	}

	[TV (11,0), iOS (7,0)]
	[Native]
	public enum UIBackgroundRefreshStatus : long
	{
		Restricted,
		Denied,
		Available
	}

	[iOS (4,0)]
	[Native]
	public enum UIApplicationState : long
	{
		Active,
		Inactive,
		Background
	}

	[Native]
	public enum UIModalTransitionStyle : long
	{
		CoverVertical = 0,
		FlipHorizontal,
		CrossDissolve,
		PartialCurl
	}

	[Native]
	public enum UIModalPresentationStyle : long
	{
		FullScreen = 0,
		PageSheet,
		FormSheet,
		CurrentContext,
		Custom,
		OverFullScreen,
		OverCurrentContext,
		Popover,
		BlurOverFullScreen,
		None = -1,
		Automatic = -2
	}

	[iOS (9,0)]
	[Native]
	public enum UIPreviewActionStyle : long
	{
		Default = 0,
		Selected,
		Destructive
	}

	[iOS (8,0)]
	[Native]
	public enum UIAlertActionStyle : long
	{
		Default = 0,
		Cancel,
		Destructive
	}

	[iOS (8,0)]
	[Native]
	public enum UIAlertControllerStyle : long
	{
		ctionSheet = 0,
		lert
	}

	[Native]
	public enum UIBarMetrics : long
	{
		Default,
		Compact,
		DefaultPrompt = 101,
		CompactPrompt,
		LandscapePhone = Compact,
		LandscapePhonePrompt = CompactPrompt
	}

	[iOS (7,0)]
	[Native]
	public enum UIBarPosition : long
	{
		Any = 0,
		Bottom = 1,
		Top = 2,
		TopAttached = 3
	}

	[Native]
	public enum UIBarButtonItemStyle : long
	{
		Plain,
		Bordered,
		Done
	}

	[Native]
	public enum UIBarButtonSystemItem : long
	{
		Done,
		Cancel,
		Edit,
		Save,
		Add,
		FlexibleSpace,
		FixedSpace,
		Compose,
		Reply,
		Action,
		Organize,
		Bookmarks,
		Search,
		Refresh,
		Stop,
		Camera,
		Trash,
		Play,
		Pause,
		Rewind,
		FastForward,
		Undo,
		Redo,
		PageCurl,
		Close
	}

	[Flags]
	[Native]
	public enum UICollectionViewScrollPosition : ulong
	{
		None = 0x0,
		Top = 1uL << 0,
		CenteredVertically = 1uL << 1,
		Bottom = 1uL << 2,
		Left = 1uL << 3,
		CenteredHorizontally = 1uL << 4,
		Right = 1uL << 5
	}

	[NoWatch, NoTV, iOS (11,0)]
	[Native]
	public enum UICollectionViewReorderingCadence : long
	{
		Immediate,
		Fast,
		Slow
	}

	[NoWatch, NoTV, iOS (11,0)]
	[Native]
	public enum UICollectionViewDropIntent : long
	{
		Unspecified,
		InsertAtDestinationIndexPath,
		InsertIntoDestinationIndexPath
	}

	[NoWatch, NoTV, iOS (11,0)]
	[Native]
	public enum UICollectionViewCellDragState : long
	{
		None,
		Lifting,
		Dragging
	}

	[Native]
	public enum UICollectionViewScrollDirection : long
	{
		Vertical,
		Horizontal
	}

	[Native]
	public enum UICollectionElementCategory : ulong
	{
		Cell,
		SupplementaryView,
		DecorationView
	}

	[Native]
	public enum UICollectionUpdateAction : long
	{
		Insert,
		Delete,
		Reload,
		Move,
		None
	}

	[TV (11,0), NoWatch, iOS (11,0)]
	[Native]
	public enum UICollectionViewFlowLayoutSectionInsetReference : long
	{
		ContentInset,
		SafeArea,
		LayoutMargins
	}

	[Watch (6,0), TV (13,0), iOS (13,0)]
	[Native]
	public enum UICollectionLayoutSectionOrthogonalScrollingBehavior : long
	{
		None,
		Continuous,
		ContinuousGroupLeadingBoundary,
		Paging,
		GroupPaging,
		GroupPagingCentered
	}

	[Native]
	public enum UIGestureRecognizerState : long
	{
		Possible,
		Began,
		Changed,
		Ended,
		Cancelled,
		Failed,
		Recognized = Ended
	}

	[Flags]
	[Native]
	public enum UISwipeGestureRecognizerDirection : ulong
	{
		Right = 1uL << 0,
		Left = 1uL << 1,
		Up = 1uL << 2,
		Down = 1uL << 3
	}

	[NoTV, iOS (11,0)]
	[Native]
	public enum UIContextualActionStyle : long
	{
		Normal,
		Destructive
	}

	[Native]
	public enum UITableViewCellStyle : long
	{
		Default,
		Value1,
		Value2,
		Subtitle
	}

	[NoTV]
	[Native]
	public enum UITableViewCellSeparatorStyle : long
	{
		None,
		SingleLine,
		SingleLineEtched
	}

	[Native]
	public enum UITableViewCellSelectionStyle : long
	{
		None,
		Blue,
		Gray,
		Default
	}

	[iOS (9,0)]
	[Native]
	public enum UITableViewCellFocusStyle : long
	{
		Default,
		Custom
	}

	[Native]
	public enum UITableViewCellEditingStyle : long
	{
		None,
		Delete,
		Insert
	}

	[Native]
	public enum UITableViewCellAccessoryType : long
	{
		None,
		DisclosureIndicator,
		DetailDisclosureButton,
		Checkmark,
		DetailButton
	}

	[Flags]
	[Native]
	public enum UITableViewCellStateMask : ulong
	{
		DefaultMask = 0x0,
		ShowingEditControlMask = 1uL << 0,
		ShowingDeleteConfirmationMask = 1uL << 1
	}

	[NoWatch, NoTV, iOS (11,0)]
	[Native]
	public enum UITableViewCellDragState : long
	{
		None,
		Lifting,
		Dragging
	}

	[Native]
	public enum UITableViewStyle : long
	{
		Plain,
		Grouped,
		InsetGrouped
	}

	[Native]
	public enum UITableViewScrollPosition : long
	{
		None,
		Top,
		Middle,
		Bottom
	}

	[Native]
	public enum UITableViewRowAnimation : long
	{
		Fade,
		Right,
		Left,
		Top,
		Bottom,
		None,
		Middle,
		Automatic = 100
	}

	[Introduced (PlatformName.iOS, 8, 0, message: "Use UIContextualAction and related APIs instead.")]
	[Deprecated (PlatformName.iOS, 13, 0, message: "Use UIContextualAction and related APIs instead.")]
	[NoTV]
	[Native]
	public enum UITableViewRowActionStyle : long
	{
		Default = 0,
		Destructive = Default,
		Normal
	}

	[TV (11,0), iOS (11,0)]
	[Native]
	public enum UITableViewSeparatorInsetReference : long
	{
		CellEdges,
		AutomaticInsets
	}

	[NoWatch, NoTV, iOS (11,0)]
	[Native]
	public enum UITableViewDropIntent : long
	{
		Unspecified,
		InsertAtDestinationIndexPath,
		InsertIntoDestinationIndexPath,
		Automatic
	}

	[Flags, NoTV]
	[Native]
	public enum UIDataDetectorTypes : ulong
	{
		PhoneNumber = 1uL << 0,
		Link = 1uL << 1,
		Address = 1uL << 2,
		CalendarEvent = 1uL << 3,
		ShipmentTrackingNumber = 1uL << 4,
		FlightNumber = 1uL << 5,
		LookupSuggestion = 1uL << 6,
		None = 0x0,
		All = (0x7fffffffffffffffL * 0x2 + 0x1)
	}

	[NoTV]
	[Native]
	public enum UIDatePickerMode : long
	{
		Time,
		Date,
		DateAndTime,
		CountDownTimer
	}

	[NoTV]
	[Native]
	public enum UIDocumentChangeKind : long
	{
		Done,
		Undone,
		Redone,
		Cleared
	}

	[NoTV]
	[Native]
	public enum UIDocumentSaveOperation : long
	{
		Creating,
		Overwriting
	}

	[Flags, NoTV]
	[Native]
	public enum UIDocumentState : ulong
	{
		Normal = 0x0,
		Closed = 1uL << 0,
		InConflict = 1uL << 1,
		SavingError = 1uL << 2,
		EditingDisabled = 1uL << 3,
		ProgressAvailable = 1uL << 4
	}

	[NoTV, iOS (8,0)]
	[Native]
	public enum UIDocumentPickerMode : ulong
	{
		Import,
		Open,
		ExportToService,
		MoveToService
	}

	[Introduced (PlatformName.iOS, 8, 0)]
	[Deprecated (PlatformName.iOS, 11, 0)]
	[NoTV]
	[Native]
	public enum UIDocumentMenuOrder : ulong
	{
		First,
		Last
	}

	[Flags, NoWatch, NoTV, iOS (0xa,0x0)]
	[Native]
	public enum UICloudSharingPermissionOptions : ulong
	{
		Standard = 0x0,
		AllowPublic = 1uL << 0,
		AllowPrivate = 1uL << 1,
		AllowReadOnly = 1uL << 2,
		AllowReadWrite = 1uL << 3
	}

	[Flags]
	[Native]
	public enum NSFileProviderItemCapabilities : ulong
	{
		Reading = 1uL << 0,
		Writing = 1uL << 1,
		Reparenting = 1uL << 2,
		Renaming = 1uL << 3,
		Trashing = 1uL << 4,
		Deleting = 1uL << 5,
		AddingSubItems = Writing,
		ContentEnumerating = Reading,
		All = Reading | Writing | Reparenting | Renaming | Trashing | Deleting
	}

	[Flags, NoWatch, NoTV, NoiOS, Mac (0xa,0xf)]
	[Native]
	public enum NSFileProviderItemField : ulong
	{
		Contents = 1uL << 0,
		Filename = 1uL << 1,
		ParentItemIdentifier = 1uL << 2,
		LastUsedDate = 1uL << 3,
		TagData = 1uL << 4,
		FavoriteRank = 1uL << 5,
		CreationDate = 1uL << 6,
		ContentModificationDate = 1uL << 7,
		Flags = 1uL << 8,
		Trashed = 1uL << 9,
		ExtendedAttributes = 1uL << 10
	}

	[Flags, NoWatch, NoTV, NoiOS, Mac (0xa,0xf)]
	[Native]
	public enum NSFileProviderCreateItemOptions : ulong
	{
		NSFileProviderCreateItemOptionsItemMayAlreadyExist = 1uL << 0
	}

	[Flags, NoWatch, NoTV, NoiOS, Mac (0xa,0xf)]
	[Native]
	public enum NSFileProviderDeleteItemOptions : ulong
	{
		NSFileProviderDeleteItemOptionsRecursive = 1uL << 0
	}

	[iOS (8,0)]
	[Native]
	public enum UIBlurEffectStyle : long
	{
		ExtraLight,
		Light,
		Dark,
		ExtraDark,
		Regular,
		Prominent,
		SystemUltraThinMaterial,
		SystemThinMaterial,
		SystemMaterial,
		SystemThickMaterial,
		SystemChromeMaterial,
		SystemUltraThinMaterialLight,
		SystemThinMaterialLight,
		SystemMaterialLight,
		SystemThickMaterialLight,
		SystemChromeMaterialLight,
		SystemUltraThinMaterialDark,
		SystemThinMaterialDark,
		SystemMaterialDark,
		SystemThickMaterialDark,
		SystemChromeMaterialDark
	}

	[NoWatch, NoTV, iOS (13,0)]
	[Native]
	public enum UIVibrancyEffectStyle : long
	{
		Label,
		SecondaryLabel,
		TertiaryLabel,
		QuaternaryLabel,
		Fill,
		SecondaryFill,
		TertiaryFill,
		Separator
	}

	[Watch (6,0), TV (13,0), iOS (13,0)]
	[Native]
	public enum UIImageSymbolScale : long
	{
		Default = -1,
		Unspecified = 0,
		Small = 1,
		Medium,
		Large
	}

	[Watch (6,0), TV (13,0), iOS (13,0)]
	[Native]
	public enum UIImageSymbolWeight : long
	{
		Unspecified = 0,
		UltraLight = 1,
		Thin,
		Light,
		Regular,
		Medium,
		Semibold,
		Bold,
		Heavy,
		Black
	}

	[iOS (12,0)]
	[Native]
	public enum UIGraphicsImageRendererFormatRange : long
	{
		Unspecified = -1,
		Automatic = 0,
		Extended,
		Standard
	}

	[Native]
	public enum UINavigationControllerOperation : long
	{
		None,
		Push,
		Pop
	}

	[NoTV]
	[Native]
	public enum UIImagePickerControllerSourceType : long
	{
		PhotoLibrary,
		Camera,
		SavedPhotosAlbum
	}

	[NoTV]
	[Native]
	public enum UIImagePickerControllerQualityType : long
	{
		High = 0,
		Medium = 1,
		Low = 2,
		UIImagePickerControllerQualityType640x480 = 3,
		IFrame1280x720 = 4,
		IFrame960x540 = 5
	}

	[NoTV]
	[Native]
	public enum UIImagePickerControllerCameraCaptureMode : long
	{
		Photo,
		Video
	}

	[NoTV]
	[Native]
	public enum UIImagePickerControllerCameraDevice : long
	{
		Rear,
		Front
	}

	[NoTV]
	[Native]
	public enum UIImagePickerControllerCameraFlashMode : long
	{
		Off = -1,
		Auto = 0,
		On = 1
	}

	[NoTV, iOS (11,0)]
	[Native]
	public enum UIImagePickerControllerImageURLExportPreset : long
	{
		ompatible = 0,
		urrent
	}

	[iOS (7,0)]
	[Native]
	public enum UIInputViewStyle : long
	{
		Default,
		Keyboard
	}

	[NoTV, iOS (9,0)]
	[Native]
	public enum UIApplicationShortcutIconType : long
	{
		Compose,
		Play,
		Pause,
		Add,
		Location,
		Search,
		Share,
		Prohibit,
		Contact,
		Home,
		MarkLocation,
		Favorite,
		Love,
		Cloud,
		Invitation,
		Confirmation,
		Mail,
		Message,
		Date,
		Time,
		CapturePhoto,
		CaptureVideo,
		Task,
		TaskCompleted,
		Alarm,
		Bookmark,
		Shuffle,
		Audio,
		Update
	}

	[Introduced (PlatformName.iOS, 0x8, 0x0, message: "Use UserNotifications Framework's UNAuthorizationOptions")]
	[Deprecated (PlatformName.iOS, 0xa, 0x0, message: "Use UserNotifications Framework's UNAuthorizationOptions")]
	[Flags, NoTV]
	[Native]
	public enum UIUserNotificationType : ulong
	{
		None = 0x0,
		Badge = 1uL << 0,
		Sound = 1uL << 1,
		Alert = 1uL << 2
	}

	[Introduced (PlatformName.iOS, 9, 0, message: "Use UserNotifications Framework's UNNotificationAction or UNTextInputNotificationAction")]
	[Deprecated (PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's UNNotificationAction or UNTextInputNotificationAction")]
	[NoTV]
	[Native]
	public enum UIUserNotificationActionBehavior : ulong
	{
		Default,
		TextInput
	}

	[Introduced (PlatformName.iOS, 8, 0, message: "Use UserNotifications Framework's UNNotificationActionOptions")]
	[Deprecated (PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's UNNotificationActionOptions")]
	[NoTV]
	[Native]
	public enum UIUserNotificationActivationMode : ulong
	{
		Foreground,
		Background
	}

	[Introduced (PlatformName.iOS, 8, 0, message: "Use UserNotifications Framework's -[UNNotificationCategory actions] or -[UNNotificationCategory minimalActions]")]
	[Deprecated (PlatformName.iOS, 10, 0, message: "Use UserNotifications Framework's -[UNNotificationCategory actions] or -[UNNotificationCategory minimalActions]")]
	[NoTV]
	[Native]
	public enum UIUserNotificationActionContext : ulong
	{
		Default,
		Minimal
	}

	[NoTV]
	[Native]
	public enum UIMenuControllerArrowDirection : long
	{
		Default,
		Up,
		Down,
		Left,
		Right
	}

	[Native]
	public enum UIInterpolatingMotionEffectType : long
	{
		HorizontalAxis,
		VerticalAxis
	}

	[Native]
	public enum UINavigationItemLargeTitleDisplayMode : long
	{
		Automatic,
		Always,
		Never
	}

	[Native]
	public enum UIPageViewControllerNavigationOrientation : long
	{
		Horizontal = 0,
		Vertical = 1
	}

	[Native]
	public enum UIPageViewControllerSpineLocation : long
	{
		None = 0,
		Min = 1,
		Mid = 2,
		Max = 3
	}

	[Native]
	public enum UIPageViewControllerNavigationDirection : long
	{
		Forward,
		Reverse
	}

	[Native]
	public enum UIPageViewControllerTransitionStyle : long
	{
		PageCurl = 0,
		Scroll = 1
	}

	[Flags]
	[Native]
	public enum UIPopoverArrowDirection : ulong
	{
		Up = 1uL << 0,
		Down = 1uL << 1,
		Left = 1uL << 2,
		Right = 1uL << 3,
		Any = Up | Down | Left | Right,
		Unknown = (0x7fffffffffffffffL * 0x2 + 0x1)
	}

	[Native]
	public enum UIPressPhase : long
	{
		Began,
		Changed,
		Stationary,
		Ended,
		Cancelled
	}

	[Native]
	public enum UIPressType : long
	{
		UpArrow,
		DownArrow,
		LeftArrow,
		RightArrow,
		Select,
		Menu,
		PlayPause
	}

	[Flags, NoTV, iOS (0x8,0x0)]
	[Native]
	public enum UIPrinterJobTypes : long
	{
		Unknown = 0x0,
		Document = 1L << 0,
		Envelope = 1L << 1,
		Label = 1L << 2,
		Photo = 1L << 3,
		Receipt = 1L << 4,
		Roll = 1L << 5,
		LargeFormat = 1L << 6,
		Postcard = 1L << 7
	}

	[NoTV]
	[Native]
	public enum UIPrintErrorCode : long
	{
		ingNotAvailableError = 1,
		NoContentError,
		UnknownImageFormatError,
		JobFailedError
	}

	[NoTV]
	[Native]
	public enum UIPrintInfoOutputType : long
	{
		General,
		Photo,
		Grayscale,
		PhotoGrayscale
	}

	[NoTV]
	[Native]
	public enum UIPrintInfoOrientation : long
	{
		Portrait,
		Landscape
	}

	[NoTV]
	[Native]
	public enum UIPrintInfoDuplex : long
	{
		None,
		LongEdge,
		ShortEdge
	}

	[NoTV]
	[Native]
	public enum UIPrinterCutterBehavior : long
	{
		NoCut,
		PrinterDefault,
		CutAfterEachPage,
		CutAfterEachCopy,
		CutAfterEachJob
	}

	[Native]
	public enum UIProgressViewStyle : long
	{
		Default,
		Bar
	}

	[Native]
	public enum UIScreenOverscanCompensation : long
	{
		Scale,
		InsetBounds,
		None,
		InsetApplicationFrame = 2
	}

	[Native]
	public enum UISearchBarIcon : long
	{
		Search,
		Clear,
		Bookmark,
		ResultsList
	}

	[iOS (7,0)]
	[Native]
	public enum UISearchBarStyle : ulong
	{
		Default,
		Prominent,
		Minimal
	}

	[iOS (10,0)]
	[Native]
	public enum UITimingCurveType : long
	{
		Builtin,
		Cubic,
		Spring,
		Composed
	}

	[Introduced (PlatformName.iOS, 2, 0, message: "The segmentedControlStyle property no longer has any effect")]
	[Deprecated (PlatformName.iOS, 7, 0, message: "The segmentedControlStyle property no longer has any effect")]
	[NoTV]
	[Native]
	public enum UISegmentedControlStyle : long
	{
		Plain,
		Bordered,
		Bar,
		Bezeled
	}

	public enum 
	{
		UISegmentedControlNoSegment = -1
	}

	[Native]
	public enum UISegmentedControlSegment : long
	{
		Any = 0,
		Left = 1,
		Center = 2,
		Right = 3,
		Alone = 4
	}

	[iOS (8,0)]
	[Native]
	public enum UISplitViewControllerDisplayMode : long
	{
		Automatic,
		PrimaryHidden,
		AllVisible,
		PrimaryOverlay
	}

	[TV (11,0), iOS (11,0)]
	[Native]
	public enum UISplitViewControllerPrimaryEdge : long
	{
		Leading,
		Trailing
	}

	[NoTV, iOS (13,0)]
	[Native]
	public enum UISplitViewControllerBackgroundStyle : long
	{
		None,
		Sidebar
	}

	[iOS (7,0)]
	[Native]
	public enum UITabBarItemPositioning : long
	{
		Automatic,
		Fill,
		Centered
	}

	[Native]
	public enum UITabBarSystemItem : long
	{
		More,
		Favorites,
		Featured,
		TopRated,
		Recents,
		Contacts,
		History,
		Bookmarks,
		Search,
		Downloads,
		MostRecent,
		MostViewed
	}

	[iOS (10,0)]
	[Native]
	public enum UITextItemInteraction : long
	{
		InvokeDefaultAction,
		PresentActions,
		Preview
	}

	[NoTV]
	[Native]
	public enum UIWebViewNavigationType : long
	{
		LinkClicked,
		FormSubmitted,
		BackForward,
		Reload,
		FormResubmitted,
		Other
	}

	[NoTV]
	[Native]
	public enum UIWebPaginationMode : long
	{
		Unpaginated,
		LeftToRight,
		TopToBottom,
		BottomToTop,
		RightToLeft
	}

	[NoTV]
	[Native]
	public enum UIWebPaginationBreakingMode : long
	{
		Page,
		Column
	}

	[NoWatch, NoTV, iOS (11,0)]
	[Native]
	public enum UIDropSessionProgressIndicatorStyle : ulong
	{
		None,
		Default
	}

	[NoWatch, NoTV, iOS (11,0)]
	[Native]
	public enum UISpringLoadedInteractionEffectState : long
	{
		Inactive,
		Possible,
		Activating,
		Activated
	}

	[Native]
	public enum UITabBarItemAppearanceStyle : long
	{
		Stacked,
		Inline,
		CompactInline
	}

	[Flags, Mac (0xa,0x0), iOS (0x6,0x0)]
	[Native]
	public enum NSUnderlineStyle : long
	{
		None = 0x0,
		Single = 0x1,
		Thick = 0x2,
		Double = 0x9,
		PatternSolid = 0x0,
		PatternDot = 0x100,
		PatternDash = 0x200,
		PatternDashDot = 0x300,
		PatternDashDotDot = 0x400,
		ByWord = 0x8000
	}

	[Mac (10,11), iOS (9,0)]
	[Native]
	public enum NSWritingDirectionFormatType : long
	{
		Embedding = (0L << 1),
		Override = (1L << 1)
	}

	[Mac (10,15), iOS (13,0)]
	[Native]
	public enum NSTextScalingType : long
	{
		Standard = 0,
		iOS
	}

	[Introduced (PlatformName.iOS, 7, 0)]
	[Deprecated (PlatformName.iOS, 9, 0)]
	[NoTV]
	[Native]
	public enum NSTextWritingDirection : long
	{
		Embedding = (0L << 1),
		Override = (1L << 1)
	}

	[iOS (9,0)]
	[Native]
	public enum UIStackViewDistribution : long
	{
		Fill = 0,
		FillEqually,
		FillProportionally,
		EqualSpacing,
		EqualCentering
	}

	[iOS (9,0)]
	[Native]
	public enum UIStackViewAlignment : long
	{
		Fill,
		Leading,
		Top = Leading,
		FirstBaseline,
		Center,
		Trailing,
		Bottom = Trailing,
		LastBaseline
	}

	[Flags, Mac (0xa,0xb), iOS (0x7,0x0)]
	[Native]
	public enum NSTextStorageEditActions : ulong
	{
		Attributes = (1uL << 0),
		Characters = (1uL << 1)
	}

	[Watch (2,0), TV (9,0), Mac (10,0), iOS (7,0)]
	[Native]
	public enum NSTextLayoutOrientation : long
	{
		Horizontal = 0,
		Vertical = 1
	}

	[Flags, Mac (0xa,0xb), iOS (0x7,0x0)]
	[Native]
	public enum NSGlyphProperty : long
	{
		Null = (1L << 0),
		ControlCharacter = (1L << 1),
		Elastic = (1L << 2),
		NonBaseCharacter = (1L << 3)
	}

	[Flags, Mac (0xa,0xb), iOS (0x7,0x0)]
	[Native]
	public enum NSControlCharacterAction : long
	{
		ZeroAdvancement = (1L << 0),
		Whitespace = (1L << 1),
		HorizontalTab = (1L << 2),
		LineBreak = (1L << 3),
		ParagraphBreak = (1L << 4),
		ContainerBreak = (1L << 5)
	}

	[Verify (InferredFromMemberPrefix)]
	public enum NSControlCharacter : uint
	{
		ZeroAdvancementAction = NSControlCharacterActionZeroAdvancement,
		WhitespaceAction = NSControlCharacterActionWhitespace,
		HorizontalTabAction = NSControlCharacterActionHorizontalTab,
		LineBreakAction = NSControlCharacterActionLineBreak,
		ParagraphBreakAction = NSControlCharacterActionParagraphBreak,
		ContainerBreakAction = NSControlCharacterActionContainerBreak
	}

	[Flags, Mac (0xa,0x0), iOS (0x6,0x0)]
	[Native]
	public enum NSStringDrawingOptions : long
	{
		UsesLineFragmentOrigin = 1L << 0,
		UsesFontLeading = 1L << 1,
		UsesDeviceMetrics = 1L << 3,
		TruncatesLastVisibleLine = 1L << 5
	}

	[iOS (7,0)]
	[Native]
	public enum UIPushBehaviorMode : long
	{
		Continuous,
		Instantaneous
	}

	[iOS (7,0)]
	[Native]
	public enum UIAttachmentBehaviorType : long
	{
		Items,
		Anchor
	}

	[StructLayout (LayoutKind.Sequential)]
	public struct UIFloatRange
	{
		public nfloat minimum;

		public nfloat maximum;
	}

	[Flags, iOS (0x7,0x0)]
	[Native]
	public enum UICollisionBehaviorMode : ulong
	{
		Items = 1uL << 0,
		Boundaries = 1uL << 1,
		Everything = (0x7fffffffffffffffL * 0x2 + 0x1)
	}

	[Native]
	public enum UIImpactFeedbackStyle : long
	{
		Light,
		Medium,
		Heavy,
		Soft,
		Rigid
	}

	[Native]
	public enum UINotificationFeedbackType : long
	{
		Success,
		Warning,
		Error
	}

	[Native]
	public enum UITextInteractionMode : long
	{
		Editable,
		NonEditable
	}

	[NoWatch, NoTV, iOS (12,1)]
	[Native]
	public enum UIPencilPreferredAction : long
	{
		Ignore = 0,
		SwitchEraser,
		SwitchPrevious,
		ShowColorPalette
	}

	[iOS (13,0)]
	[Native]
	public enum UIWindowSceneDismissalAnimation : long
	{
		Standard = 1,
		Commit = 2,
		Decline = 3
	}

	[NoWatch, NoTV, iOS (13,0)]
	[Native]
	public enum UIContextMenuInteractionCommitStyle : long
	{
		Dismiss = 0,
		Pop
	}

	[NoWatch, NoTV, iOS (11,0)]
	[Native]
	public enum UIDocumentBrowserErrorCode : long
	{
		Generic = 1,
		NoLocationAvailable = 2
	}

	[NoWatch, NoTV, iOS (11,0)]
	[Native]
	public enum UIDocumentBrowserImportMode : ulong
	{
		None,
		Copy,
		Move
	}

	[NoWatch, NoTV, iOS (11,0)]
	[Native]
	public enum UIDocumentBrowserUserInterfaceStyle : ulong
	{
		White = 0,
		Light,
		Dark
	}

	[Flags, NoWatch, NoTV, iOS (0xb,0x0)]
	[Native]
	public enum UIDocumentBrowserActionAvailability : long
	{
		Menu = 0x1,
		NavigationBar = 1L << 1
	}

	[NoTV, iOS (7,0)]
	[Native]
	public enum UIActivityCategory : long
	{
		Action,
		Share
	}
}
